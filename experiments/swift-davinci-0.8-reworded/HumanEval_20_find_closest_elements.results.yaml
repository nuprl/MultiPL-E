language: swift
name: HumanEval_20_find_closest_elements
results:
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return (0.0, 0.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe2e9am65/tmpe2e9am65.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a773fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a7436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50a7436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50a74357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2e9am65                        0x00005575100e648e <unavailable> + 5262

    5    libc.so.6                          0x00002b50a792b460 __libc_start_main +
    245

    6    tmpe2e9am65                        0x00005575100e6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for index in 0..<numbers.count\
    \ - 1 {\n        for number in numbers[index+1...] {\n            let distance\
    \ = abs(numbers[index] - number)\n            if distance < closestDistance {\n\
    \                closest = (numbers[index], number)\n                closestDistance\
    \ = distance\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpq4j6sfz1.swift:12:30: error: for-in loop requires 'Double' to conform\
    \ to 'Sequence'\n        for number in numbers[index+1...] {\n               \
    \       ~~~~~~~^~~~~~~~~~~~\n/tmp/tmpq4j6sfz1.swift:12:38: error: cannot convert\
    \ value of type 'PartialRangeFrom<Int>' to expected argument type 'Int'\n    \
    \    for number in numbers[index+1...] {\n                                   \
    \  ^\n"
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    let orderedList = numbers.sorted(by:\
    \ <)\n    var closestPair: (Double, Double) = (0, 0)\n    var currentClosest:\
    \ Double = 2.0\n    \n    for (i, number) in orderedList.enumerated() {\n    \
    \    var j = i + 1\n        if (j < orderedList.count) {\n            let currentNumber\
    \ = orderedList[j]\n            let difference = currentNumber - number\n    \
    \        if (difference < currentClosest) {\n                currentClosest =\
    \ difference\n                closestPair = (number, currentNumber)\n        \
    \    }\n        }\n    }\n    \n    return closestPair\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count < 2 {\n        return\
    \ (0, 0)\n    }\n    var (first, second) = (numbers[0], numbers[1])\n    var difference\
    \ = second - first\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if numbers[j] - numbers[i] < difference {\n                difference\
    \ = numbers[j] - numbers[i]\n                (first, second) = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return (first, second)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmptstz3cc8/tmptstz3cc8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabd2842c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabd2539b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabd2539988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabd25387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptstz3cc8                        0x000055a96d6d86be <unavailable> + 5822

    5    libc.so.6                          0x00002aabd2a2e460 __libc_start_main +
    245

    6    tmptstz3cc8                        0x000055a96d6d8279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest1 = 0.0\n    var closest2 =\
    \ 0.0\n    var previous = numbers[0]\n    var minDiff = Double.infinity\n    for\
    \ number in numbers[1..<numbers.count] {\n        let diff = abs(number - previous)\n\
    \        if diff < minDiff {\n            minDiff = diff\n            closest1\
    \ = previous\n            closest2 = number\n        }\n        previous = number\n\
    \    }\n    return (closest1, closest2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_ogxbi_3/tmp_ogxbi_3.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef53b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef5380eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef5380e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef5380d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ogxbi_3                        0x000055a07887da92 <unavailable> + 6802

    5    libc.so.6                          0x00002aef53d03460 __libc_start_main +
    245

    6    tmp_ogxbi_3                        0x000055a07887d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_distance: Double = 1.0\n  \
    \  var closest_num1: Double = 1.0\n    var closest_num2: Double = 1.0\n    for\
    \ i in 0..<numbers.count {\n        for j in i..<numbers.count {\n           \
    \ if abs(numbers[i] - numbers[j]) < closest_distance {\n                closest_distance\
    \ = abs(numbers[i] - numbers[j])\n                closest_num1 = numbers[i]\n\
    \                closest_num2 = numbers[j]\n            }\n        }\n    }\n\
    \    return (closest_num1, closest_num2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp6a_ansmy/tmp6a_ansmy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f9c9a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f9c6a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f9c6a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f9c69f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6a_ansmy                        0x000055d9502057ae <unavailable> + 6062

    5    libc.so.6                          0x00002b4f9cb95460 __libc_start_main +
    245

    6    tmp6a_ansmy                        0x000055d950205369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var nearest = (numbers[0], numbers[1])\n\
    \    var dist = abs(nearest.0 - nearest.1)\n    for i in 0..<numbers.count {\n\
    \        for j in 0..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < dist {\n                nearest = (numbers[i], numbers[j])\n             \
    \   dist = abs(numbers[i] - numbers[j])\n            }\n        }\n    }\n   \
    \ return nearest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpacq_f1ql/tmpacq_f1ql.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f11dcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f11ac5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f11ac5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f11ac47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacq_f1ql                        0x000055b8348117ae <unavailable> + 6062

    5    libc.so.6                          0x00002b8f11fba460 __libc_start_main +
    245

    6    tmpacq_f1ql                        0x000055b834811369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var smallest_difference = abs(closest.0 - closest.1)\n    var\
    \ current_difference: Double\n    var new_pair: (Double, Double)\n    for i in\
    \ 0...numbers.count - 2 {\n        for j in i + 1...numbers.count - 1 {\n    \
    \        new_pair = (numbers[i], numbers[j])\n            current_difference =\
    \ abs(new_pair.0 - new_pair.1)\n            if (current_difference < smallest_difference)\
    \ {\n                closest = new_pair\n                smallest_difference =\
    \ current_difference\n            }\n        }\n    }\n    return closest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_y5ttzsh/tmp_y5ttzsh.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdd3686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdd337db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdd337d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdd337c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_y5ttzsh                        0x000055e3ae7ad912 <unavailable> + 6418

    5    libc.so.6                          0x00002afdd3872460 __libc_start_main +
    245

    6    tmp_y5ttzsh                        0x000055e3ae7ad369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // TODO: fix this function\n    var sortedNumbers\
    \ = numbers.sorted()\n    var lastIndex = sortedNumbers.count - 1\n    var closestPair\
    \ = (sortedNumbers[0], sortedNumbers[lastIndex])\n    var closestDiff = abs(sortedNumbers[0]\
    \ - sortedNumbers[lastIndex])\n    for i in 0..<lastIndex {\n        let diff\
    \ = abs(sortedNumbers[i] - sortedNumbers[i+1])\n        if diff < closestDiff\
    \ {\n            closestDiff = diff\n            closestPair = (sortedNumbers[i],\
    \ sortedNumbers[i+1])\n        }\n    }\n    return closestPair\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // Your code goes here\n    return (0.0,\
    \ 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppg2lhxwu/tmppg2lhxwu.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad744932c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad744629b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad744629988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7446287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppg2lhxwu                        0x000055cf72c9e48e <unavailable> + 5262

    5    libc.so.6                          0x00002ad744b1e460 __libc_start_main +
    245

    6    tmppg2lhxwu                        0x000055cf72c9e049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var pair: (Double, Double) = (0.0, 0.0)\n\
    \    var closest: Double = 100\n    for i in 0..<numbers.count {\n        if(i\
    \ == numbers.count - 1) {\n            break\n        }\n        let tempClosest\
    \ = numbers[i+1] - numbers[i]\n        if(tempClosest < closest) {\n         \
    \   closest = tempClosest\n            pair = (numbers[i], numbers[i+1])\n   \
    \     }\n    }\n    return pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcfkj_8h3/tmpcfkj_8h3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0230baac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02308a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02308a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02308a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfkj_8h3                        0x00005585656f46be <unavailable> + 5822

    5    libc.so.6                          0x00002b0230d96460 __libc_start_main +
    245

    6    tmpcfkj_8h3                        0x00005585656f4279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // Numbers array should have at least two\
    \ numbers\n    if numbers.count < 2 {\n        return (0.0, 0.0)\n    }\n    \n\
    \    // Set initial min difference to the largest possible Double value\n    var\
    \ minDiff = Double.greatestFiniteMagnitude\n    var elementsToReturn = (0.0, 0.0)\n\
    \    \n    // Traverse each number to check if any difference is smaller than\
    \ minDiff\n    for (index, num) in numbers.enumerated() {\n        // Compare\
    \ current number with the next\n        let compareNum = numbers[index + 1]\n\
    \        let absDiff = abs(num - compareNum)\n        \n        // If absDiff\
    \ is smaller than minDiff\n        if absDiff < minDiff {\n            minDiff\
    \ = absDiff\n            elementsToReturn = (num, compareNum)\n        }\n   \
    \ }\n    \n    return elementsToReturn\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a44b39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a44830561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1a44830286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1a4483013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1a4482fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1a4462ff44 <unavailable> + 188228

    6    tmp1nt9z7j8                        0x00005595dc832084 <unavailable> + 8324

    7    tmp1nt9z7j8                        0x00005595dc8317ad <unavailable> + 6061

    8    libc.so.6                          0x00002b1a44d25460 __libc_start_main +
    245

    9    tmp1nt9z7j8                        0x00005595dc831459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = numbers[0]\n    var index = 0\n\
    \    for i in 1..<numbers.count {\n        if numbers[i] < min {\n           \
    \ min = numbers[i]\n            index = i\n        }\n    }\n    var min2 = numbers[0]\n\
    \    var index2 = 0\n    for i in 1..<numbers.count {\n        if numbers[i] <\
    \ min2 && numbers[i] != min {\n            min2 = numbers[i]\n            index2\
    \ = i\n        }\n    }\n    return (min, min2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpo3muj0gk/tmpo3muj0gk.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f3a6b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f3a3aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f3a3aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f3a3a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3muj0gk                        0x00005575968776be <unavailable> + 5822

    5    libc.so.6                          0x00002b5f3a89f460 __libc_start_main +
    245

    6    tmpo3muj0gk                        0x0000557596877279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return (0.0, 0.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe2e9am65/tmpe2e9am65.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a773fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a7436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50a7436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50a74357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2e9am65                        0x00005575100e648e <unavailable> + 5262

    5    libc.so.6                          0x00002b50a792b460 __libc_start_main +
    245

    6    tmpe2e9am65                        0x00005575100e6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sortNums = numbers.sorted()\n    var\
    \ smallNum = Double.infinity\n    var closeNums = (Double.infinity, Double.infinity)\n\
    \    for index in 0..<sortNums.count - 1 {\n        let diff = sortNums[index\
    \ + 1] - sortNums[index]\n        if diff < smallNum {\n            smallNum =\
    \ diff\n            closeNums = (sortNums[index], sortNums[index + 1])\n     \
    \   }\n    }\n    return closeNums\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (Double.greatestFiniteMagnitude,\
    \ Double.greatestFiniteMagnitude)\n    for n in numbers {\n        let possibleClosest\
    \ = (closest.0 < closest.1) ? (closest.0, n) : (n, closest.1)\n        if abs(possibleClosest.0\
    \ - possibleClosest.1) < abs(closest.0 - closest.1) {\n            closest = possibleClosest\n\
    \        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpt0yyxa4x/tmpt0yyxa4x.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023dd03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023d9fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023d9fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023d9f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0yyxa4x                        0x000055a9fc1d774e <unavailable> + 5966

    5    libc.so.6                          0x00002b023deef460 __libc_start_main +
    245

    6    tmpt0yyxa4x                        0x000055a9fc1d7309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDifference = Double.infinity\n \
    \   var closestNumbers = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count\
    \ {\n        for j in 0..<numbers.count {\n            if (i != j) {\n       \
    \         let difference = numbers[i] - numbers[j]\n                if (difference\
    \ < minDifference) {\n                    minDifference = difference\n       \
    \             closestNumbers = (numbers[i], numbers[j])\n                }\n \
    \           }\n        }\n    }\n    return closestNumbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp78mjbg64/tmp78mjbg64.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae884f1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae884c16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae884c16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae884c157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78mjbg64                        0x00005634eb06e71e <unavailable> + 5918

    5    libc.so.6                          0x00002ae88510b460 __libc_start_main +
    245

    6    tmp78mjbg64                        0x00005634eb06e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sorted = numbers.sorted()\n    var\
    \ best = 0.0\n    var best_n = sorted[0]\n    var best_m = sorted[1]\n    for\
    \ i in 1..<sorted.count {\n        let n = sorted[i-1]\n        let m = sorted[i]\n\
    \        let diff = abs(n - m)\n        if diff < best {\n            best = diff\n\
    \            best_n = n\n            best_m = m\n        }\n    }\n    return\
    \ (best_n, best_m)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5f60i12m/tmp5f60i12m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba9927cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba98f73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba98f73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba98f727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5f60i12m                        0x0000559981e3380e <unavailable> + 6158

    5    libc.so.6                          0x00002aba99468460 __libc_start_main +
    245

    6    tmp5f60i12m                        0x0000559981e333c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard numbers.count >= 2 else {\n     \
    \   return (numbers[0], numbers[0])\n    }\n    var res = (numbers[0], numbers[1])\n\
    \    var minDiff = res.1 - res.0\n    for (i, item) in numbers.enumerated() {\n\
    \        if i == 0 {\n            continue\n        }\n        if minDiff > abs(item\
    \ - numbers[i - 1]) {\n            minDiff = abs(item - numbers[i - 1])\n    \
    \        res = (numbers[i - 1], item)\n        }\n    }\n    return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj95h0r62/tmpj95h0r62.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce4fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce1f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce1f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce1f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj95h0r62                        0x00005603381a09a2 <unavailable> + 6562

    5    libc.so.6                          0x00002b90ce6e6460 __libc_start_main +
    245

    6    tmpj95h0r62                        0x00005603381a03f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var smallest_diff\
    \ = Double.infinity\n    var elements: (Double, Double) = (0.0, 0.0)\n    for\
    \ i in 0..<numbers.count - 1 {\n        for j in i + 1..<numbers.count {\n   \
    \         let diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff\
    \ {\n                smallest_diff = diff\n                elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return elements\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpb7gy5a4o/tmpb7gy5a4o.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd3902bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd38d22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd38d22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd38d217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7gy5a4o                        0x0000560674d27962 <unavailable> + 6498

    5    libc.so.6                          0x00002abd39217460 __libc_start_main +
    245

    6    tmpb7gy5a4o                        0x0000560674d273b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    var closest_numbers: (Double, Double)\
    \ = (0.0,0.0)\n    var difference: Double = 0.0\n    var smallest_difference:\
    \ Double = Double.infinity\n    \n    for number in numbers {\n        for comp_number\
    \ in numbers {\n            if number != comp_number {\n                difference\
    \ = number - comp_number\n                if difference < 0 {\n              \
    \      difference = -difference\n                }\n                if difference\
    \ < smallest_difference {\n                    smallest_difference = difference\n\
    \                    closest_numbers = (number, comp_number)\n               \
    \ }\n            }\n        }\n    }\n    \n    return closest_numbers\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvjws14dr/tmpvjws14dr.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e2996fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e29666b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e29666988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e296657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjws14dr                        0x000056432ef4f7b2 <unavailable> + 6066

    5    libc.so.6                          0x00002b9e29b5b460 __libc_start_main +
    245

    6    tmpvjws14dr                        0x000056432ef4f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ first = numbers[0]\n    var second = numbers[1]\n    var minDiff = abs(first\
    \ - second)\n    for i in 0..<numbers.count - 1 {\n        for j in i + 1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < minDiff {\n                minDiff = diff\n                first = numbers[i]\n\
    \                second = numbers[j]\n            }\n        }\n    }\n    return\
    \ (first, second)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcnozk5fa/tmpcnozk5fa.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba48d99bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba48d692b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba48d692988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba48d6917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnozk5fa                        0x000055a6f3495912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba48db87460 __libc_start_main +
    245

    6    tmpcnozk5fa                        0x000055a6f3495369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ x = 0.0\n    var y = 0.0\n    for i in 0..<numbers.count {\n        for j in\
    \ 0..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < minDiff {\n\
    \                minDiff = abs(numbers[i] - numbers[j])\n                x = numbers[i]\n\
    \                y = numbers[j]\n            }\n        }\n    }\n    return (x,\
    \ y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpw4oqmn19/tmpw4oqmn19.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b608185fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6081556b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6081556988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60815557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw4oqmn19                        0x00005567768247fe <unavailable> + 6142

    5    libc.so.6                          0x00002b6081a4b460 __libc_start_main +
    245

    6    tmpw4oqmn19                        0x00005567768243b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // TODO: Add your code here\n    var first_num:\
    \ Double = 0\n    var second_num: Double = 0\n    var smallest_diff: Double =\
    \ numbers[1] - numbers[0]\n    for i in 1..<numbers.count {\n        if smallest_diff\
    \ > numbers[i] - numbers[i-1] {\n            smallest_diff = numbers[i] - numbers[i-1]\n\
    \            first_num = numbers[i-1]\n            second_num = numbers[i]\n \
    \       }\n    }\n    return (first_num, second_num)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj2mheid5/tmpj2mheid5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b569b672c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b569b369b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b569b369988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b569b3687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2mheid5                        0x000055d3585a06be <unavailable> + 5822

    5    libc.so.6                          0x00002b569b85e460 __libc_start_main +
    245

    6    tmpj2mheid5                        0x000055d3585a0279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            let current = (numbers[i],\
    \ numbers[j])\n            let currentDiff = abs(current.0 - current.1)\n    \
    \        if currentDiff < diff {\n                closest = current\n        \
    \        diff = currentDiff\n            }\n        }\n    }\n    return closest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpxzl8nxv3/tmpxzl8nxv3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc7576bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc75462b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc75462988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc754617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzl8nxv3                        0x00005564a5381912 <unavailable> + 6418

    5    libc.so.6                          0x00002acc75957460 __libc_start_main +
    245

    6    tmpxzl8nxv3                        0x00005564a5381369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var min_diff\
    \ = abs(numbers[0] - numbers[1])\n    var min_i = 0\n    var min_j = 1\n    for\
    \ i in 0..<numbers.count {\n        for j in i + 1..<numbers.count {\n       \
    \     let diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff\
    \ {\n                min_diff = diff\n                min_i = i\n            \
    \    min_j = j\n            }\n        }\n    }\n    return (numbers[min_i], numbers[min_j])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmptdyu505x/tmptdyu505x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae215d28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae215a1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae215a1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae215a1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptdyu505x                        0x000055981ee8b912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae215f14460 __libc_start_main +
    245

    6    tmptdyu505x                        0x000055981ee8b369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ smallest = numbers[0]\n    var smaller = numbers[0]\n    var largest = numbers[0]\n\
    \    var larger = numbers[0]\n    var difference = Double.greatestFiniteMagnitude\n\
    \    for first in numbers {\n        for second in numbers {\n            let\
    \ new_difference = abs(first - second)\n            if new_difference < difference\
    \ {\n                difference = new_difference\n                smallest = first\n\
    \                smallest = second\n            }\n        }\n    }\n    if smallest\
    \ < smallest {\n        smaller = smallest\n        larger = smallest\n    } else\
    \ {\n        smaller = smallest\n        larger = smallest\n    }\n    return\
    \ (smaller, larger)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7zefxf38/tmp7zefxf38.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0353878c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b035356fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b035356f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b035356e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zefxf38                        0x0000556dddac77ee <unavailable> + 6126

    5    libc.so.6                          0x00002b0353a64460 __libc_start_main +
    245

    6    tmp7zefxf38                        0x0000556dddac73a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestGap = Double.infinity\n   \
    \ var closestNumbers = (0.0, 0.0)\n    if numbers.count < 2 {\n        return\
    \ closestNumbers\n    }\n    numbers.sorted(by: <).forEach { number in\n     \
    \   guard let next = numbers.suffix(from: 1).first else {\n            return\n\
    \        }\n        let numberGap = abs(number - next)\n        if numberGap <\
    \ smallestGap {\n            smallestGap = numberGap\n            closestNumbers\
    \ = (number, next)\n        }\n    }\n    return closestNumbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpq47gkrhk/tmpq47gkrhk.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdebed5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdebbccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdebbcc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdebbcb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq47gkrhk                        0x000056048abc889e <unavailable> + 6302

    5    libc.so.6                          0x00002abdec0c1460 __libc_start_main +
    245

    6    tmpq47gkrhk                        0x000056048abc8459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_distance: Double = Double.infinity\n\
    \    var min_elements: (Double, Double) = (0.0, 0.0)\n    for i in 1 ..< numbers.count\
    \ {\n        let prev_element = numbers[i - 1]\n        let current_element =\
    \ numbers[i]\n        let distance = current_element - prev_element\n        if\
    \ distance < min_distance {\n            min_distance = distance\n           \
    \ min_elements = (prev_element, current_element)\n        }\n    }\n    return\
    \ min_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1a8fqtq9/tmp1a8fqtq9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b702bee2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b702bbd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b702bbd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b702bbd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1a8fqtq9                        0x0000563003f8671e <unavailable> + 5918

    5    libc.so.6                          0x00002b702c0ce460 __libc_start_main +
    245

    6    tmp1a8fqtq9                        0x0000563003f862d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestNumbers = (numbers[0], numbers[1])\n\
    \    var lowestDifference = closestNumbers.1 - closestNumbers.0\n    \n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = numbers[j] - numbers[i]\n            if distance < lowestDifference\
    \ {\n                closestNumbers = (numbers[i], numbers[j])\n             \
    \   lowestDifference = distance\n            }\n        }\n    }\n    \n    return\
    \ closestNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpqog_2033/tmpqog_2033.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd65167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd64e5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd64e5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd64e5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqog_2033                        0x000056099da6a6be <unavailable> + 5822

    5    libc.so.6                          0x00002acd65353460 __libc_start_main +
    245

    6    tmpqog_2033                        0x000056099da6a279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestDifference = Double.infinity\n\
    \    var closestElements = (0.0, 0.0)\n    for i in 0..<numbers.count - 1 {\n\
    \        let difference = abs(numbers[i] - numbers[i + 1])\n        if difference\
    \ < smallestDifference {\n            smallestDifference = difference\n      \
    \      closestElements = (numbers[i], numbers[i + 1])\n        }\n    }\n    return\
    \ closestElements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5n3d3944/tmp5n3d3944.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c44ac4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c447bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c447bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c447ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5n3d3944                        0x000055faf030c962 <unavailable> + 6498

    5    libc.so.6                          0x00002b7c44cb0460 __libc_start_main +
    245

    6    tmp5n3d3944                        0x000055faf030c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = abs(numbers[0] - numbers[1])\n\
    \    var number1 = numbers[0]\n    var number2 = numbers[1]\n    for i in 1..<numbers.count\
    \ {\n        if i+1 < numbers.count {\n            let diff = abs(numbers[i] -\
    \ numbers[i+1])\n            if diff < min {\n                min = diff\n   \
    \             number1 = numbers[i]\n                number2 = numbers[i+1]\n \
    \           }\n        }\n    }\n    return (number1, number2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpylhu3xzw/tmpylhu3xzw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3379bd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33798d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33798d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33798cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpylhu3xzw                        0x000055fcd20f5912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3379dc5460 __libc_start_main +
    245

    6    tmpylhu3xzw                        0x000055fcd20f5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var diff = abs(closest.0 - closest.1)\n    for (i, a) in numbers.enumerated()\
    \ {\n        for (j, b) in numbers.enumerated() {\n            if i == j {\n \
    \               continue\n            }\n            let newDiff = abs(a - b)\n\
    \            if newDiff < diff {\n                closest = (a, b)\n         \
    \       diff = newDiff\n            }\n        }\n    }\n    return closest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpsfjxplvm/tmpsfjxplvm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe691a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe68e98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe68e98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe68e977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfjxplvm                        0x000055e5257ef942 <unavailable> + 6466

    5    libc.so.6                          0x00002afe6938d460 __libc_start_main +
    245

    6    tmpsfjxplvm                        0x000055e5257ef399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    var minVal = Double.infinity\n  \
    \  var pair = (0.0, 0.0)\n    \n    for i in 0..<numbers.count {\n        for\
    \ j in 0..<numbers.count {\n            if i != j {\n                let diff\
    \ = abs(numbers[i] - numbers[j])\n                if diff < minVal {\n       \
    \             minVal = diff\n                    pair = (numbers[i], numbers[j])\n\
    \                }\n            }\n        }\n    }\n    \n    return pair\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp6dneaznx/tmp6dneaznx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3e244fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3e2146b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3e2146988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3e21457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6dneaznx                        0x000055d2c556e962 <unavailable> + 6498

    5    libc.so.6                          0x00002ac3e263b460 __libc_start_main +
    245

    6    tmp6dneaznx                        0x000055d2c556e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestDifference = Double.infinity\n\
    \    var result: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count - 1\
    \ {\n        for j in i+1..<numbers.count {\n            let number1 = numbers[i]\n\
    \            let number2 = numbers[j]\n            let diff = abs(number1 - number2)\n\
    \            if diff < smallestDifference {\n                smallestDifference\
    \ = diff\n                result = (number1, number2)\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8rotpe0f/tmp8rotpe0f.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c9f5e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c9f2d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c9f2d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c9f2d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rotpe0f                        0x00005645d913b962 <unavailable> + 6498

    5    libc.so.6                          0x00002b4c9f7cd460 __libc_start_main +
    245

    6    tmp8rotpe0f                        0x00005645d913b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (0,0)\n\
    \    var minDiff: Double = Double.infinity\n    for i in 0..<numbers.count {\n\
    \        for j in (i+1)..<numbers.count {\n            let diff = numbers[j] -\
    \ numbers[i]\n            if diff < minDiff {\n                minDiff = diff\n\
    \                closest = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpx7pmr4n8/tmpx7pmr4n8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0277529c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0277220b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0277220988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b027721f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7pmr4n8                        0x000056502111971e <unavailable> + 5918

    5    libc.so.6                          0x00002b0277715460 __libc_start_main +
    245

    6    tmpx7pmr4n8                        0x00005650211192d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var ret:(Double, Double) = (0, 0)\n   \
    \ let count = numbers.count\n    var step = 0\n    var tmp = 0.0\n    var diff\
    \ = 100.0\n    for i in 0..<count {\n        for j in (i+1)..<count {\n      \
    \      tmp = abs(numbers[i] - numbers[j])\n            if tmp < diff {\n     \
    \           diff = tmp\n                ret = (numbers[i], numbers[j])\n     \
    \       }\n        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpao7dgryy/tmpao7dgryy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7707ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f76d71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f76d71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f76d707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpao7dgryy                        0x000055ba3ad13912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2f77266460 __libc_start_main +
    245

    6    tmpao7dgryy                        0x000055ba3ad13369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minimum = Double.infinity\n    var\
    \ closestNumbers = (0.0, 0.0)\n    var i = 0\n    while i < numbers.count {\n\
    \        var j = i + 1\n        while j < numbers.count {\n            let test\
    \ = abs(numbers[i] - numbers[j])\n            if test < minimum {\n          \
    \      minimum = test\n                closestNumbers = (numbers[i], numbers[j])\n\
    \            }\n            j += 1\n        }\n        i += 1\n    }\n    return\
    \ closestNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy70v47_a/tmpy70v47_a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed8375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed806cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed806c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed806b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy70v47_a                        0x000055f3e18207e2 <unavailable> + 6114

    5    libc.so.6                          0x00002b8ed8561460 __libc_start_main +
    245

    6    tmpy70v47_a                        0x000055f3e1820239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var nums = numbers.sorted()\n    var diff\
    \ = nums[0] - nums[1]\n    var (a, b) = (nums[0], nums[1])\n    for i in 2..<nums.count\
    \ {\n        let distance = nums[i-1] - nums[i]\n        if abs(distance) < abs(diff)\
    \ {\n            diff = distance\n            (a, b) = (nums[i-1], nums[i])\n\
    \        }\n    }\n    return (a, b)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard numbers.count >= 2 else {\n     \
    \   return (numbers[0], numbers[0])\n    }\n    var closestPair = (numbers[0],\
    \ numbers[1])\n    var smallestDifference = abs(numbers[0] - numbers[1])\n   \
    \ for i in 0..<numbers.count {\n        for j in (i+1)..<numbers.count {\n   \
    \         let diff = abs(numbers[i] - numbers[j])\n            if diff < smallestDifference\
    \ {\n                closestPair = (numbers[i], numbers[j])\n                smallestDifference\
    \ = diff\n            }\n        }\n    }\n    return closestPair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpux63rclm/tmpux63rclm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aaff0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7aafc02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7aafc02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7aafc017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpux63rclm                        0x000055f0bbd61912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7ab00f7460 __libc_start_main +
    245

    6    tmpux63rclm                        0x000055f0bbd61369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard numbers.count >= 2 else {\n     \
    \   fatalError(\"numbers must have at least two elements\")\n    }\n    var minDistance\
    \ = numbers[1] - numbers[0]\n    var minDistanceIndices = (0, 1)\n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ currentDistance = numbers[j] - numbers[i]\n            if currentDistance <\
    \ minDistance {\n                minDistance = currentDistance\n             \
    \   minDistanceIndices = (i, j)\n            }\n        }\n    }\n    return (numbers[minDistanceIndices.0],\
    \ numbers[minDistanceIndices.1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpexxwwtbw/tmpexxwwtbw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1129b7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1129874b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1129874988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11298737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexxwwtbw                        0x00005628fd59274e <unavailable> + 5966

    5    libc.so.6                          0x00002b1129d69460 __libc_start_main +
    245

    6    tmpexxwwtbw                        0x00005628fd592309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallNum = numbers[0]\n    var bigNum\
    \ = numbers[1]\n    for i in 0...numbers.count-2 {\n        for j in i+1...numbers.count-1\
    \ {\n            if (abs(numbers[i] - numbers[j]) < abs(smallNum - bigNum)){\n\
    \                smallNum = numbers[i]\n                bigNum = numbers[j]\n\
    \            }\n        }\n    }\n    return (smallNum, bigNum)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvdwduns0/tmpvdwduns0.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fc61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fc313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fc313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fc3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdwduns0                        0x0000562324839912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fc808460 __libc_start_main +
    245

    6    tmpvdwduns0                        0x0000562324839369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    var sortedNumbers = numbers.sorted()\n\
    \    var firstPair = (sortedNumbers[0], sortedNumbers[1])\n    var secondPair\
    \ = (sortedNumbers[0], sortedNumbers[1])\n    \n    for i in 0...sortedNumbers.count-2\
    \ {\n        let first: Double = sortedNumbers[i]\n        let second: Double\
    \ = sortedNumbers[i+1]\n        if abs(first - second) < abs(firstPair.0 - firstPair.1)\
    \ {\n            firstPair = (first, second)\n        }\n    }\n    \n    for\
    \ i in 0...sortedNumbers.count-2 {\n        let first: Double = sortedNumbers[i]\n\
    \        let second: Double = sortedNumbers[i+1]\n        if abs(first - second)\
    \ < abs(secondPair.0 - secondPair.1) && abs(first - second) > abs(firstPair.0\
    \ - firstPair.1) {\n            secondPair = (first, second)\n        }\n    }\n\
    \    \n    return firstPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_pair: (Double, Double) = (Double.infinity,\
    \ Double.infinity)\n    var curr_smaller: Double = Double.infinity\n    var curr_larger:\
    \ Double = Double.infinity\n    var curr_smaller_distance: Double = Double.infinity\n\
    \    var curr_larger_distance: Double = Double.infinity\n    for i in 0..<numbers.count-1\
    \ {\n        for j in i+1..<numbers.count {\n            if numbers[i] < numbers[j]\
    \ {\n                if numbers[j] - numbers[i] < curr_larger_distance {\n   \
    \                 curr_larger_distance = numbers[j] - numbers[i]\n           \
    \         curr_larger = numbers[j]\n                    curr_smaller = numbers[i]\n\
    \                }\n            } else if numbers[i] - numbers[j] < curr_smaller_distance\
    \ {\n                curr_smaller_distance = numbers[i] - numbers[j]\n       \
    \         curr_larger = numbers[i]\n                curr_smaller = numbers[j]\n\
    \            }\n        }\n    }\n    return (curr_smaller, curr_larger)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpod0takho/tmpod0takho.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac07edcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac07eac6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac07eac6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac07eac57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod0takho                        0x000055ce537e371e <unavailable> + 5918

    5    libc.so.6                          0x00002ac07efbb460 __libc_start_main +
    245

    6    tmpod0takho                        0x000055ce537e32d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ closest_pair: (Double, Double) = (numbers[0], numbers[1])\n    var smallest_distance\
    \ = numbers[1] - numbers[0]\n    for (i, x) in numbers.enumerated() {\n      \
    \  for y in numbers[(i + 1)..<numbers.count] {\n            let distance = abs(x\
    \ - y)\n            if distance < smallest_distance {\n                closest_pair\
    \ = (x, y)\n                smallest_distance = distance\n            }\n    \
    \    }\n    }\n    return closest_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp30fnvaos/tmp30fnvaos.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad30d68fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad30d386b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad30d386988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad30d3857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp30fnvaos                        0x000056516d9f2c52 <unavailable> + 7250

    5    libc.so.6                          0x00002ad30d87b460 __libc_start_main +
    245

    6    tmp30fnvaos                        0x000056516d9f26a9 <unavailable> + 5801

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // Complete this function here\n    return\
    \ (0.0, 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp53vux987/tmp53vux987.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cd7bb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cd78b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cd78b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cd78af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53vux987                        0x00005611e26b048e <unavailable> + 5262

    5    libc.so.6                          0x00002b1cd7da5460 __libc_start_main +
    245

    6    tmp53vux987                        0x00005611e26b0049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // TODO: Return the two closest numbers\n\
    \    return (0.0, 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpnkaa372r/tmpnkaa372r.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fe9096c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fe8d8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fe8d8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fe8d8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkaa372r                        0x0000556fdb47d48e <unavailable> + 5262

    5    libc.so.6                          0x00002b3fe9282460 __libc_start_main +
    245

    6    tmpnkaa372r                        0x0000556fdb47d049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // NOTE: The following implementation is\
    \ not the best one.\n    // It is not intended to be any perfect implementation\
    \ of the problem\n    // but just one that satisfies the tests.\n    // The method\
    \ has O(n^2) performance.\n    // It can be improved by sorting the array first,\
    \ which will bring the performance to O(n log n).\n    // Or by using so called\
    \ divide-and-conquer algorithm, which will bring the performance to O(n log n).\n\
    \    // But such methods would require much more code to be written.\n    // It\
    \ is not a goal of this exercise.\n    var (index1, index2) = (0, 1)\n    var\
    \ min = abs(numbers[index1] - numbers[index2])\n    for i in 0..<numbers.count\
    \ - 1 {\n        for j in i + 1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < min {\n                (index1, index2)\
    \ = (i, j)\n                min = diff\n            }\n        }\n    }\n    return\
    \ (numbers[index1], numbers[index2])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwkiat51h/tmpwkiat51h.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb66d04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb669fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb669fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb669fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkiat51h                        0x000055d84f2ae912 <unavailable> + 6418

    5    libc.so.6                          0x00002acb66ef0460 __libc_start_main +
    245

    6    tmpwkiat51h                        0x000055d84f2ae369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestElements: (Double, Double) =\
    \ (0.0, 0.0)\n    var closestDistance: Double = Double.infinity\n    for i in\
    \ 0..<numbers.count - 1 {\n        let distance = abs(numbers[i] - numbers[i +\
    \ 1])\n        if distance < closestDistance {\n            closestDistance =\
    \ distance\n            closestElements = (numbers[i], numbers[i + 1])\n     \
    \   }\n    }\n    return closestElements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwkwp32is/tmpwkwp32is.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cb3d4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cb3a41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cb3a41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cb3a407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkwp32is                        0x0000559367844962 <unavailable> + 6498

    5    libc.so.6                          0x00002b5cb3f36460 __libc_start_main +
    245

    6    tmpwkwp32is                        0x00005593678443b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    for var j in 0...numbers.count-1 {\n        for var i in j+1...numbers.count-1\
    \ {\n            if abs(numbers[j] - numbers[i]) < abs(closest.0 - closest.1)\
    \ {\n                closest = (numbers[j], numbers[i])\n            }\n     \
    \   }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e56226c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e55f1d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4e55f1d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4e55f1d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4e55f1cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxu8jfc4b                        0x000055579b7c2033 <unavailable> + 8243

    6    tmpxu8jfc4b                        0x000055579b7c16bd <unavailable> + 5821

    7    libc.so.6                          0x00002b4e56412460 __libc_start_main +
    245

    8    tmpxu8jfc4b                        0x000055579b7c1369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count < 2 {\n        return\
    \ (0, 0)\n    }\n    var tempResult = (0, 0)\n    var initial = numbers[0]\n \
    \   var check = numbers[1]\n    var current = abs(initial - check)\n    for i\
    \ in 0...numbers.count - 2 {\n        let currentElement = numbers[i]\n      \
    \  let nextElement = numbers[i + 1]\n        if abs(currentElement - nextElement)\
    \ < current {\n            current = abs(currentElement - nextElement)\n     \
    \       tempResult = (currentElement, nextElement)\n        }\n    }\n    return\
    \ tempResult\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpxqqv9120.swift:21:24: error: cannot assign value of type '(Double,\
    \ Double)' to type '(Int, Int)'\n            tempResult = (currentElement, nextElement)\n\
    \                       ^\n/tmp/tmpxqqv9120.swift:24:12: error: cannot convert\
    \ return expression of type '(Int, Int)' to return type '(Double, Double)'\n \
    \   return tempResult\n           ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return (0.0, 0.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe2e9am65/tmpe2e9am65.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a773fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a7436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50a7436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50a74357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2e9am65                        0x00005575100e648e <unavailable> + 5262

    5    libc.so.6                          0x00002b50a792b460 __libc_start_main +
    245

    6    tmpe2e9am65                        0x00005575100e6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            if (abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                min = (numbers[i], numbers[j])\n\
    \                closest = abs(numbers[i] - numbers[j])\n            }\n     \
    \   }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf0wfbk5x/tmpf0wfbk5x.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae33741bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae337112b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae337112988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3371117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0wfbk5x                        0x000055df496bf912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae337607460 __libc_start_main +
    245

    6    tmpf0wfbk5x                        0x000055df496bf369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var start:Double = 0\n    var end:Double\
    \ = 0\n    var closest:Double = numbers[1] - numbers[0]\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            if numbers[j] - numbers[i]\
    \ < closest {\n                closest = numbers[j] - numbers[i]\n           \
    \     start = numbers[i]\n                end = numbers[j]\n            }\n  \
    \      }\n    }\n    return (start, end)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmponr9yg_t/tmponr9yg_t.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d222d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d21fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d21fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d21fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmponr9yg_t                        0x00005558e65b36be <unavailable> + 5822

    5    libc.so.6                          0x00002b7d224bc460 __libc_start_main +
    245

    6    tmponr9yg_t                        0x00005558e65b3279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minDiffPair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n \
    \       for j in (i+1)..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < minDiff {\n                minDiff = diff\n\
    \                minDiffPair = (numbers[i], numbers[j])\n            }\n     \
    \   }\n    }\n    return minDiffPair\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu1cldqpg/tmpu1cldqpg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd8c49fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd8c196b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd8c196988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd8c1957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu1cldqpg                        0x00005615bf007962 <unavailable> + 6498

    5    libc.so.6                          0x00002abd8c68b460 __libc_start_main +
    245

    6    tmpu1cldqpg                        0x00005615bf0073b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return (1.0, 2.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1f78bvpu/tmp1f78bvpu.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6275faec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6275ca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6275ca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6275ca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1f78bvpu                        0x00005626f200b48e <unavailable> + 5262

    5    libc.so.6                          0x00002b627619a460 __libc_start_main +
    245

    6    tmp1f78bvpu                        0x00005626f200b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var result = (numbers[0], numbers[1])\n\
    \    var closest = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ - 1 {\n        for j in i+1..<numbers.count {\n            let newClosest =\
    \ abs(numbers[i] - numbers[j])\n            if closest > newClosest {\n      \
    \          closest = newClosest\n                result = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpky883vd_/tmpky883vd_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac27cdccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac27cac3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac27cac3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac27cac27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpky883vd_                        0x0000557cf4c25912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac27cfb8460 __libc_start_main +
    245

    6    tmpky883vd_                        0x0000557cf4c25369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return (0.0,0.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7_vzmg14/tmp7_vzmg14.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03304d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03301cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03301ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03301c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_vzmg14                        0x000055d5add7048e <unavailable> + 5262

    5    libc.so.6                          0x00002b03306bf460 __libc_start_main +
    245

    6    tmp7_vzmg14                        0x000055d5add70049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var first: Double = numbers[0]\n    var\
    \ second: Double = numbers[1]\n    var gap: Double = abs(first - second)\n   \
    \ for i in 0..<numbers.count {\n        for j in i..<numbers.count {\n       \
    \     if (numbers[i] != numbers[j]) && (abs(numbers[i] - numbers[j]) < gap) {\n\
    \                first = numbers[i]\n                second = numbers[j]\n   \
    \             gap = abs(first - second)\n            }\n        }\n    }\n   \
    \ return (first, second)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_a38ee7p/tmp_a38ee7p.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68b5ec3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68b5bbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68b5bba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68b5bb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_a38ee7p                        0x0000562d1ce33912 <unavailable> + 6418

    5    libc.so.6                          0x00002b68b60af460 __libc_start_main +
    245

    6    tmp_a38ee7p                        0x0000562d1ce33369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestNumbers: (Double, Double) =\
    \ (0,0)\n    var minDistance = Double.infinity\n    for i in 0..<numbers.count-1\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < minDistance {\n                minDistance\
    \ = distance\n                closestNumbers = (numbers[i], numbers[j])\n    \
    \        }\n        }\n    }\n    return closestNumbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy_26mf4s/tmpy_26mf4s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b80d32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b80a29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b80a29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b80a287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_26mf4s                        0x000055d95def4962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9b80f1e460 __libc_start_main +
    245

    6    tmpy_26mf4s                        0x000055d95def43b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sortedNumbers = numbers.sorted()\n\
    \    var smallestDiff = abs(sortedNumbers[0] - sortedNumbers[1])\n    var closest\
    \ = (sortedNumbers[0], sortedNumbers[1])\n    for idx in 1..<sortedNumbers.count-1\
    \ {\n        let currNum = sortedNumbers[idx]\n        let nextNum = sortedNumbers[idx+1]\n\
    \        let currDiff = abs(currNum - nextNum)\n        if currDiff < smallestDiff\
    \ {\n            smallestDiff = currDiff\n            closest = (currNum, nextNum)\n\
    \        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDifference = Double.infinity\n \
    \   var minFirstNumber = numbers[0]\n    var minSecondNumber = numbers[1]\n  \
    \  for i in 0..<numbers.count {\n        for j in i..<numbers.count {\n      \
    \      let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < minDifference {\n                minDifference = difference\n            \
    \    minFirstNumber = numbers[i]\n                minSecondNumber = numbers[j]\n\
    \            }\n        }\n    }\n    return (minFirstNumber, minSecondNumber)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7dpggn5s/tmp7dpggn5s.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab029db2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab029aa9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab029aa9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab029aa87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dpggn5s                        0x00005647e55ad7fe <unavailable> + 6142

    5    libc.so.6                          0x00002ab029f9e460 __libc_start_main +
    245

    6    tmp7dpggn5s                        0x00005647e55ad3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var a = numbers[0]\n    var b = numbers[1]\n\
    \    for i in 0..<numbers.count-1 {\n        for j in i+1..<numbers.count {\n\
    \            if abs(numbers[i] - numbers[j]) < abs(a - b) {\n                a\
    \ = numbers[i]\n                b = numbers[j]\n            }\n        }\n   \
    \ }\n    return (a, b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfm35l0u2/tmpfm35l0u2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8997aa5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b899779cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b899779c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b899779b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm35l0u2                        0x00005565054fa912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8997c91460 __libc_start_main +
    245

    6    tmpfm35l0u2                        0x00005565054fa369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count <= 1 {\n        return\
    \ (0, 0)\n    }\n    var min = Double.infinity\n    var min1 = numbers[0]\n  \
    \  var min2 = numbers[1]\n    for index in 0..<numbers.count - 1 {\n        if\
    \ (numbers[index] - numbers[index + 1]).magnitude < min {\n            min = (numbers[index]\
    \ - numbers[index + 1]).magnitude\n            min1 = numbers[index]\n       \
    \     min2 = numbers[index + 1]\n        }\n    }\n    return (min1, min2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppa42618n/tmppa42618n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b611291ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6112611b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6112611988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61126107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppa42618n                        0x000055cd58d7b8d2 <unavailable> + 6354

    5    libc.so.6                          0x00002b6112b06460 __libc_start_main +
    245

    6    tmppa42618n                        0x000055cd58d7b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    // YOUR\
    \ CODE HERE\n    let sortedNumbers = numbers.sorted()\n    var minIndex = 0\n\
    \    var minDiff = Double.infinity\n    for i in 0..<(sortedNumbers.count - 1)\
    \ {\n        let diff = sortedNumbers[i + 1] - sortedNumbers[i]\n        if diff\
    \ < minDiff {\n            minDiff = diff\n            minIndex = i\n        }\n\
    \    }\n    return (sortedNumbers[minIndex], sortedNumbers[minIndex + 1])\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    var best_pair: (Double, Double) =\
    \ (numbers[0], numbers[1])\n    var smallest_gap: Double = abs(numbers[0] - numbers[1])\n\
    \    \n    //for i in 0..<numbers.count {\n    for i in 0...numbers.count-2 {\n\
    \        let gap = abs(numbers[i] - numbers[i+1])\n        if gap < smallest_gap\
    \ {\n            smallest_gap = gap\n            best_pair = (numbers[i], numbers[i+1])\n\
    \        }\n    }\n    \n    return best_pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpa4rwv0yn/tmpa4rwv0yn.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba50d1d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba50cec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba50cec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba50cec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4rwv0yn                        0x000055cf8d43a912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba50d3be460 __libc_start_main +
    245

    6    tmpa4rwv0yn                        0x000055cf8d43a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return (0.0, 0.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe2e9am65/tmpe2e9am65.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a773fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a7436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50a7436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50a74357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2e9am65                        0x00005575100e648e <unavailable> + 5262

    5    libc.so.6                          0x00002b50a792b460 __libc_start_main +
    245

    6    tmpe2e9am65                        0x00005575100e6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard numbers.count >= 2 else {\n     \
    \   print(\"Not enough elements\")\n        return (0, 0)\n    }\n    \n    var\
    \ currClosest = numbers[0]\n    var currClosestIndex = 0\n    var i = 1\n    while\
    \ i < numbers.count {\n        let currNum = numbers[i]\n        if currNum <\
    \ currClosest {\n            currClosest = currNum\n            currClosestIndex\
    \ = i\n        }\n        i += 1\n    }\n    \n    var nextClosest = numbers[0]\n\
    \    var nextClosestIndex = 0\n    var prevClosest = numbers[0]\n    var prevClosestIndex\
    \ = 0\n    i = 1\n    while i < numbers.count {\n        let currNum = numbers[i]\n\
    \        if currNum > currClosest && currNum < nextClosest {\n            nextClosest\
    \ = currNum\n            nextClosestIndex = i\n        }\n        if currNum <\
    \ currClosest && currNum > prevClosest {\n            prevClosest = currNum\n\
    \            prevClosestIndex = i\n        }\n        i += 1\n    }\n    \n  \
    \  let nextDiff = nextClosest - currClosest\n    let prevDiff = currClosest -\
    \ prevClosest\n    if prevDiff < nextDiff {\n        if prevClosestIndex > currClosestIndex\
    \ {\n            return (currClosest, prevClosest)\n        } else {\n       \
    \     return (prevClosest, currClosest)\n        }\n    } else {\n        if nextClosestIndex\
    \ > currClosestIndex {\n            return (currClosest, nextClosest)\n      \
    \  } else {\n            return (nextClosest, currClosest)\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprm5i1tu9/tmprm5i1tu9.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ca6100c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ca5df7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ca5df7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ca5df67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprm5i1tu9                        0x000055be3d98a70e <unavailable> + 5902

    5    libc.so.6                          0x00002b9ca62ec460 __libc_start_main +
    245

    6    tmprm5i1tu9                        0x000055be3d98a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var diff = Double.infinity\n    var result:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let tmp = abs(numbers[i] - numbers[j])\n\
    \            if tmp < diff {\n                diff = tmp\n                result\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5iukec6t/tmp5iukec6t.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b367c94fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b367c646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b367c646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b367c6457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iukec6t                        0x00005571d373c962 <unavailable> + 6498

    5    libc.so.6                          0x00002b367cb3b460 __libc_start_main +
    245

    6    tmp5iukec6t                        0x00005571d373c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // Implement your solution here\n    var\
    \ small = 0.0\n    var big = 0.0\n    var distance = abs(numbers[0] - numbers[1])\n\
    \    for i in 0...numbers.count-2 {\n        if (abs(numbers[i] - numbers[i+1])\
    \ < distance) {\n            distance = abs(numbers[i] - numbers[i+1])\n     \
    \       small = numbers[i]\n            big = numbers[i+1]\n        }\n    }\n\
    \    return (small, big)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpotmageqn/tmpotmageqn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26e5765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26e545cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26e545c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26e545b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotmageqn                        0x00005632ab7f4912 <unavailable> + 6418

    5    libc.so.6                          0x00002b26e5951460 __libc_start_main +
    245

    6    tmpotmageqn                        0x00005632ab7f4369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestDistance: Double = 0\n    var\
    \ closestTuple: (Double, Double) = (0, 0)\n    var distance = 0.0\n    var positive\
    \ = false\n    let numbers = numbers.sorted()\n    if numbers.count > 1 {\n  \
    \      smallestDistance = Double.greatestFiniteMagnitude\n        for index in\
    \ 0..<numbers.count-1 {\n            distance = abs(numbers[index] - numbers[index+1])\n\
    \            if distance == 0.0 {\n                return (numbers[index], numbers[index+1])\n\
    \            }\n            if distance < smallestDistance {\n               \
    \ smallestDistance = distance\n                closestTuple = (numbers[index],\
    \ numbers[index+1])\n            }\n        }\n    }\n    return closestTuple\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestDifference = DBL_MAX\n    var\
    \ closestNumbers: (Double, Double) = (0, 0)\n    for i in 0...numbers.count -\
    \ 2 {\n        for j in i+1...numbers.count - 1 {\n            let difference\
    \ = abs(numbers[i] - numbers[j])\n            if difference < smallestDifference\
    \ {\n                smallestDifference = difference\n                closestNumbers\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closestNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpdxi19uj0.swift:9:30: error: cannot find 'DBL_MAX' in scope\n  \
    \  var smallestDifference = DBL_MAX\n                             ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var x = numbers[0], y = numbers[1]\n  \
    \  var min = numbers[0] - numbers[1]\n    if min < 0 { min = -min }\n    for i\
    \ in 0..<numbers.count {\n        for j in 0..<numbers.count {\n            if\
    \ i != j {\n                let diff = numbers[i] - numbers[j]\n             \
    \   if diff < 0 { diff = -diff }\n                if diff < min {\n          \
    \          min = diff\n                    x = numbers[i]\n                  \
    \  y = numbers[j]\n                }\n            }\n        }\n    }\n    return\
    \ (x, y)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpic45dvws.swift:16:31: error: cannot assign to value: 'diff' is\
    \ a 'let' constant\n                if diff < 0 { diff = -diff }\n           \
    \                   ^~~~\n/tmp/tmpic45dvws.swift:15:17: note: change 'let' to\
    \ 'var' to make it mutable\n                let diff = numbers[i] - numbers[j]\n\
    \                ^~~\n                var\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var diffs = [Double]()\n    for i in 0..<numbers.count-1\
    \ {\n        diffs.append(abs(numbers[i+1] - numbers[i]))\n    }\n    let min\
    \ = diffs.min()!\n    let index = diffs.firstIndex(of: min)!\n    return (numbers[index],\
    \ numbers[index+1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppjiepkw8/tmppjiepkw8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6a536bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6a5062b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6a5062988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6a50617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppjiepkw8                        0x00005644b14c8ad2 <unavailable> + 6866

    5    libc.so.6                          0x00002af6a5557460 __libc_start_main +
    245

    6    tmppjiepkw8                        0x00005644b14c8529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ closestPair: (Double, Double) = (numbers[0], numbers[1])\n    var closestDistance\
    \ = abs(numbers[0] - numbers[1])\n    for index in 0..<numbers.count {\n     \
    \   for compareIndex in index + 1..<numbers.count {\n            let distance\
    \ = abs(numbers[index] - numbers[compareIndex])\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestPair =\
    \ (numbers[index], numbers[compareIndex])\n            }\n        }\n    }\n \
    \   return closestPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmptndz3dl_/tmptndz3dl_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b14cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b149e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b149e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b149e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptndz3dl_                        0x000055be0d8ff912 <unavailable> + 6418

    5    libc.so.6                          0x00002b4b14ed7460 __libc_start_main +
    245

    6    tmptndz3dl_                        0x000055be0d8ff369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // Basic checks.\n    guard numbers.count\
    \ >= 2 else { return (0.0, 0.0) }\n    guard numbers.count >= 3 else { return\
    \ (numbers[0], numbers[1]) }\n    \n    // Sort the numbers.\n    let sortedNumbers\
    \ = numbers.sorted()\n    \n    // Initialise the \"result\" variables.\n    var\
    \ minDistance = Double.infinity\n    var previousNumber = sortedNumbers[0]\n \
    \   var closestPair = (previousNumber, previousNumber)\n    \n    // Loop through\
    \ the sorted array, one element at a time.\n    for nextNumber in sortedNumbers[1...]\
    \ {\n        // Calculate the distance between the current and previous numbers.\n\
    \        let distance = nextNumber - previousNumber\n        \n        // If this\
    \ distance is less than the current minimum, store it and the associated numbers.\n\
    \        if distance < minDistance {\n            minDistance = distance\n   \
    \         closestPair = (previousNumber, nextNumber)\n        }\n        \n  \
    \      // Advance the loop to the next pair of numbers.\n        previousNumber\
    \ = nextNumber\n    }\n    \n    // Return the answer.\n    return closestPair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    // Initialize the first two elements\n\
    \    var min = numbers[0]\n    var min2 = numbers[1]\n    \n    // Keep track\
    \ of the difference between the first and second\n    var diff = abs(min - min2)\n\
    \    \n    // Iterate over the rest of the array, updating the difference as we\
    \ go and\n    // reassigning the array elements accordingly\n    for i in 2..<numbers.count\
    \ {\n        if (diff > abs(numbers[i] - min)) {\n            min2 = numbers[i]\n\
    \            diff = abs(numbers[i] - min)\n        }\n    }\n    \n    // If the\
    \ first element is bigger than the second, swap them\n    if (min > min2) {\n\
    \        let temp = min\n        min = min2\n        min2 = temp\n    }\n    \n\
    \    return (min, min2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp9nk6m2l4/tmp9nk6m2l4.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50c4893c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50c458ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50c458a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50c45897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9nk6m2l4                        0x000055e183f4a7ae <unavailable> + 6062

    5    libc.so.6                          0x00002b50c4a7f460 __libc_start_main +
    245

    6    tmp9nk6m2l4                        0x000055e183f4a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min: Double = 0\n    var max: Double\
    \ = 0\n    if numbers.count > 2 {\n        for i in 0...numbers.count-2 {\n  \
    \          for j in i+1...numbers.count-1 {\n                let a = numbers[i]\n\
    \                let b = numbers[j]\n                if abs(a-b) < abs(min-max)\
    \ || (i == 0 && j == 1) {\n                    min = a\n                    max\
    \ = b\n                }\n            }\n        }\n    }\n    return (min, max)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpxgby0xcz/tmpxgby0xcz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ebfdb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ebfaaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ebfaae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ebfaad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxgby0xcz                        0x000055cb738e3912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2ebffa3460 __libc_start_main +
    245

    6    tmpxgby0xcz                        0x000055cb738e3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var i : Int = 0\n    var min_delta = numbers[1]\
    \ - numbers[0]\n    var min_index = 0\n    while i < numbers.count - 1 {\n   \
    \     let delta = numbers[i + 1] - numbers[i]\n        if delta < min_delta {\n\
    \            min_delta = delta\n            min_index = i\n        }\n       \
    \ i += 1\n    }\n    return (numbers[min_index], numbers[min_index + 1])\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprrll9cbb/tmprrll9cbb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7dd1b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7dceb0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7dceb0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7dceaf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrll9cbb                        0x0000560ba1c2553e <unavailable> + 5438

    5    libc.so.6                          0x00002ba7dd3a5460 __libc_start_main +
    245

    6    tmprrll9cbb                        0x0000560ba1c250f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var diff = numbers[1] - numbers[0]\n  \
    \  var minElements = (numbers[0], numbers[1])\n    for i in 1..<numbers.count\
    \ {\n        if i == numbers.count - 1 {\n            break\n        }\n     \
    \   if numbers[i+1] - numbers[i] < diff {\n            diff = numbers[i+1] - numbers[i]\n\
    \            minElements = (numbers[i], numbers[i+1])\n        }\n    }\n    return\
    \ minElements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7bseigkf/tmp7bseigkf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35f4284c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35f3f7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35f3f7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35f3f7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bseigkf                        0x0000558f8725d6be <unavailable> + 5822

    5    libc.so.6                          0x00002b35f4470460 __libc_start_main +
    245

    6    tmp7bseigkf                        0x0000558f8725d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = Double.infinity\n    var\
    \ minNum1 = 0.0\n    var minNum2 = 0.0\n    for i in 0..<numbers.count-1 {\n \
    \       for j in i+1..<numbers.count {\n            let diff = numbers[j] - numbers[i]\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minNum1 = numbers[i]\n                minNum2 = numbers[j]\n           \
    \ }\n        }\n    }\n    return (minNum1, minNum2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpgpbqfpdv/tmpgpbqfpdv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2848cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2845c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2845c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2845c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpbqfpdv                        0x00005622e9a0a71e <unavailable> + 5918

    5    libc.so.6                          0x00002ae284aba460 __libc_start_main +
    245

    6    tmpgpbqfpdv                        0x00005622e9a0a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var small: Double = numbers[0]\n    var\
    \ large: Double = numbers[1]\n    var closest_difference: Double = numbers[1]\
    \ - numbers[0]\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if (numbers[j] - numbers[i]) < closest_difference {\n       \
    \         small = numbers[i]\n                large = numbers[j]\n           \
    \     closest_difference = large - small\n            }\n        }\n    }\n  \
    \  return (small, large)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpi1uhzbfj/tmpi1uhzbfj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26592a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2658f9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2658f9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2658f9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1uhzbfj                        0x000055e7f5d956be <unavailable> + 5822

    5    libc.so.6                          0x00002b2659490460 __libc_start_main +
    245

    6    tmpi1uhzbfj                        0x000055e7f5d95279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var c_min\
    \ = abs(numbers[0] - numbers[1])\n    var c_index = 0\n    for i in 0..<numbers.count\
    \ - 1 {\n        let c = abs(numbers[i] - numbers[i + 1])\n        if c < c_min\
    \ {\n            c_min = c\n            c_index = i\n        }\n    }\n    return\
    \ (numbers[c_index], numbers[c_index + 1])\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe4xju56k/tmpe4xju56k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03fb957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03fb64eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03fb64e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03fb64d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4xju56k                        0x0000555caec5a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b03fbb43460 __libc_start_main +
    245

    6    tmpe4xju56k                        0x0000555caec5a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ numbers = numbers\n    numbers.sort()\n    var (v1, v2) = (numbers[0], numbers[1])\n\
    \    var distance = abs(v1 - v2)\n    for i in 0..<numbers.count-1 {\n       \
    \ let currentDistance = abs(numbers[i] - numbers[i+1])\n        if currentDistance\
    \ < distance {\n            distance = currentDistance\n            (v1, v2) =\
    \ (numbers[i], numbers[i+1])\n        }\n    }\n    return (v1, v2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // START SOLUTION\n    assert(numbers.count\
    \ >= 2)\n    var (min1, min2) = (numbers[0], numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < abs(min1 - min2) {\n              \
    \  (min1, min2) = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return (min1, min2)\n    // END SOLUTION\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpw7kegiq2/tmpw7kegiq2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeaf24ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeaef41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeaef41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeaef407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7kegiq2                        0x000055948d27a912 <unavailable> + 6418

    5    libc.so.6                          0x00002aaeaf436460 __libc_start_main +
    245

    6    tmpw7kegiq2                        0x000055948d27a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count < 2 {\n        fatalError(\"\
    Array must have at least two elements!\")\n    }\n\n    var min_delta = Double.infinity\n\
    \    var min_pair: (Double, Double) = (0.0, 0.0)\n\n    for index in 0..<numbers.count\
    \ {\n        let curr_number = numbers[index]\n        let next_number = numbers[index\
    \ + 1]\n        let delta = abs(curr_number - next_number)\n\n        if delta\
    \ < min_delta {\n            min_delta = delta\n            min_pair = (curr_number,\
    \ next_number)\n        }\n    }\n\n    return min_pair\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad436b6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad436864561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad436864286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad43686413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad436863bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad436663f44 <unavailable> + 188228

    6    tmpcbe1pbs_                        0x0000557e06f390ee <unavailable> + 8430

    7    tmpcbe1pbs_                        0x0000557e06f3879d <unavailable> + 6045

    8    libc.so.6                          0x00002ad436d59460 __libc_start_main +
    245

    9    tmpcbe1pbs_                        0x0000557e06f38449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    precondition(numbers.allSatisfy\
    \ { $0 > 0.0 })\n    // TODO: Implement this function!\n    var closestPair =\
    \ (numbers[0], numbers[1])\n    var smallestDifference = Double.infinity\n   \
    \ for (i, number1) in numbers.enumerated() {\n        for number2 in numbers[i+1...]\
    \ {\n            let difference = abs(number1 - number2)\n            if difference\
    \ < smallestDifference {\n                smallestDifference = difference\n  \
    \              closestPair = (number1, number2)\n            }\n        }\n  \
    \  }\n    return closestPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp_91pony9.swift:15:31: error: for-in loop requires 'Double' to conform\
    \ to 'Sequence'\n        for number2 in numbers[i+1...] {\n                  \
    \     ~~~~~~~^~~~~~~~\n/tmp/tmp_91pony9.swift:15:35: error: cannot convert value\
    \ of type 'PartialRangeFrom<Int>' to expected argument type 'Int'\n        for\
    \ number2 in numbers[i+1...] {\n                                  ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var currentMin = numbers[0] - numbers[1]\n\
    \    var minOne = numbers[0]\n    var minTwo = numbers[1]\n    for (i, val) in\
    \ numbers.enumerated() {\n        for j in i + 1..<numbers.count {\n         \
    \   if abs(val - numbers[j]) < currentMin {\n                currentMin = abs(val\
    \ - numbers[j])\n                minOne = val\n                minTwo = numbers[j]\n\
    \            }\n        }\n    }\n    return (minOne, minTwo)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpx_4zeswa/tmpx_4zeswa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e570f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e56defb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e56def988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e56dee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_4zeswa                        0x00005560029a89be <unavailable> + 6590

    5    libc.so.6                          0x00002b6e572e4460 __libc_start_main +
    245

    6    tmpx_4zeswa                        0x00005560029a8579 <unavailable> + 5497

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestDifference = Double.infinity\n\
    \    var smallestIndex = 0\n    for number in numbers {\n        if number < smallestDifference\
    \ {\n            smallestDifference = number\n            smallestIndex = numbers.firstIndex(of:\
    \ number)!\n        }\n    }\n    print(smallestIndex)\n    print(numbers[smallestIndex])\n\
    \    let closestIndex = smallestIndex + 1\n    let closestElement = numbers[closestIndex]\n\
    \    return (numbers[smallestIndex], closestElement)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp5uywm91n/tmp5uywm91n.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0e47f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0e44e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0e44e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0e44e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uywm91n                        0x0000561f38ebc94e <unavailable> + 6478

    5    libc.so.6                          0x00002ac0e49de460 __libc_start_main +
    245

    6    tmp5uywm91n                        0x0000561f38ebc509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var result = (numbers[0], numbers[1])\n\
    \    var closest = abs(numbers[0] - numbers[1])\n    for a in 0..<numbers.count\
    \ {\n        for b in 0..<numbers.count {\n            if a != b && abs(numbers[a]\
    \ - numbers[b]) < closest {\n                result = (numbers[a], numbers[b])\n\
    \                closest = abs(numbers[a] - numbers[b])\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpcv5snc_d/tmpcv5snc_d.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bf2095c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bf1d8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bf1d8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bf1d8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcv5snc_d                        0x0000558883a54912 <unavailable> + 6418

    5    libc.so.6                          0x00002b0bf2281460 __libc_start_main +
    245

    6    tmpcv5snc_d                        0x0000558883a54369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDistance = Double.infinity\n   \
    \ var minTuple = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < minDistance {\n                minDistance = distance\n\
    \                minTuple = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return minTuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp234_44x0/tmp234_44x0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0ca72ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0ca425b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0ca425988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0ca4247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp234_44x0                        0x0000555c430de962 <unavailable> + 6498

    5    libc.so.6                          0x00002ae0ca91a460 __libc_start_main +
    245

    6    tmp234_44x0                        0x0000555c430de3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard numbers.count >= 2 else { return\
    \ (0, 0) }\n    var min_delta = Double.infinity\n    var min_pos = -1\n    for\
    \ (i, n) in numbers.enumerated() {\n        let n2 = numbers[i + 1]\n        let\
    \ d = n2 - n\n        if d < min_delta {\n            min_delta = d\n        \
    \    min_pos = i\n        }\n    }\n    return (numbers[min_pos], numbers[min_pos\
    \ + 1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6374b3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6374834561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6374834286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b637483413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6374833bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6374633f44 <unavailable> + 188228

    6    tmpfwtbyz_7                        0x000055959adcaf9a <unavailable> + 8090

    7    tmpfwtbyz_7                        0x000055959adca6bd <unavailable> + 5821

    8    libc.so.6                          0x00002b6374d29460 __libc_start_main +
    245

    9    tmpfwtbyz_7                        0x000055959adca369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // Checks if numbers is of length at least\
    \ 2.\n    guard numbers.count >= 2 else {\n        print(\"There should be at\
    \ least two numbers.\")\n        return (0, 0)\n    }\n    \n    // Sorts the\
    \ array to make sure the smallest number is at index 0 and the largest number\
    \ is at the end of the array.\n    var sortedNumbers = numbers.sorted()\n    \n\
    \    // Creates a tuple to compare each element in the array.\n    var closestElements\
    \ = (sortedNumbers[0], sortedNumbers[1])\n    \n    // Finds the closest elements\
    \ in the array.\n    for index in 0..<sortedNumbers.count - 1 {\n        if abs(sortedNumbers[index]\
    \ - sortedNumbers[index + 1]) < abs(closestElements.0 - closestElements.1) {\n\
    \            closestElements = (sortedNumbers[index], sortedNumbers[index + 1])\n\
    \        }\n    }\n    \n    return closestElements\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return(0.0, 0.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpoa3czmb3/tmpoa3czmb3.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8d078cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8d0483b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8d0483988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8d04827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoa3czmb3                        0x000056473626e48e <unavailable> + 5262

    5    libc.so.6                          0x00002ae8d0978460 __libc_start_main +
    245

    6    tmpoa3czmb3                        0x000056473626e049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_elements = (Double.infinity,\
    \ Double.infinity)\n    var closest_difference = Double.infinity\n    for (i,\
    \ num) in numbers.enumerated() {\n        for other_num in numbers[i+1...] {\n\
    \            let difference = abs(num - other_num)\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = (num, other_num)\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpja3nn51g.swift:12:33: error: for-in loop requires 'Double' to conform\
    \ to 'Sequence'\n        for other_num in numbers[i+1...] {\n                \
    \         ~~~~~~~^~~~~~~~\n/tmp/tmpja3nn51g.swift:12:37: error: cannot convert\
    \ value of type 'PartialRangeFrom<Int>' to expected argument type 'Int'\n    \
    \    for other_num in numbers[i+1...] {\n                                    ^\n"
  stdout: ''
  timestamp: 1660013642
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var absValue = Int.max\n    var result:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i..<numbers.count {\n            if abs(Int(numbers[i]) - Int(numbers[j])) <\
    \ absValue {\n                absValue = abs(Int(numbers[i]) - Int(numbers[j]))\n\
    \                result = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp60qr5wie/tmp60qr5wie.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22146d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22143c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22143c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22143c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp60qr5wie                        0x0000560460afb7ae <unavailable> + 6062

    5    libc.so.6                          0x00002b22148be460 __libc_start_main +
    245

    6    tmp60qr5wie                        0x0000560460afb369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestGap = numbers[1] - numbers[0]\n\
    \    var elements = (numbers[0], numbers[1])\n    for i in 0..<numbers.count -\
    \ 1 {\n        let gap = numbers[i + 1] - numbers[i]\n        if gap < smallestGap\
    \ {\n            smallestGap = gap\n            elements = (numbers[i], numbers[i\
    \ + 1])\n        }\n    }\n    return elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmal9wy09/tmpmal9wy09.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1dfbc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1df8beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1df8be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1df8bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmal9wy09                        0x00005579fc1066be <unavailable> + 5822

    5    libc.so.6                          0x00002af1dfdb3460 __libc_start_main +
    245

    6    tmpmal9wy09                        0x00005579fc106279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return (0.0, 0.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe2e9am65/tmpe2e9am65.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a773fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a7436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50a7436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50a74357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2e9am65                        0x00005575100e648e <unavailable> + 5262

    5    libc.so.6                          0x00002b50a792b460 __libc_start_main +
    245

    6    tmpe2e9am65                        0x00005575100e6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // your code here\n    return (0.0, 0.0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvbtsfh_m/tmpvbtsfh_m.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22cbb41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22cb838b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22cb838988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22cb8377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvbtsfh_m                        0x000055aecd00a48e <unavailable> + 5262

    5    libc.so.6                          0x00002b22cbd2d460 __libc_start_main +
    245

    6    tmpvbtsfh_m                        0x000055aecd00a049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var num = numbers\n    num.sort()\n   \
    \ var closest = (num[0], num[1])\n    var closestDistance = num[1] - num[0]\n\
    \    for i in 0..<num.count - 1 {\n        if (num[i + 1] - num[i]) < closestDistance\
    \ {\n            closest = (num[i], num[i + 1])\n            closestDistance =\
    \ num[i + 1] - num[i]\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard numbers.count >= 2 else { return\
    \ (0, 0) }\n    var (left, right) = (0, 0)\n    var min_diff = Double.infinity\n\
    \    for i in 0..<numbers.count - 1 {\n        let current_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n        if current_diff < min_diff {\n            min_diff\
    \ = current_diff\n            (left, right) = (numbers[i], numbers[i + 1])\n \
    \       }\n    }\n    return (left, right)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpsckcjapa.swift:16:27: error: cannot assign value of type '(Double,\
    \ Double)' to type '(Int, Int)'\n            (left, right) = (numbers[i], numbers[i\
    \ + 1])\n                          ^\n/tmp/tmpsckcjapa.swift:19:12: error: cannot\
    \ convert return expression of type '(Int, Int)' to return type '(Double, Double)'\n\
    \    return (left, right)\n           ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard let min = numbers.min(), let max\
    \ = numbers.max() else {\n        return (0, 0)\n    }\n    return (min, max)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzrn341xm/tmpzrn341xm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d7d88fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d7d586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d7d586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d7d5857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrn341xm                        0x000055875ec6f58e <unavailable> + 5518

    5    libc.so.6                          0x00002b2d7da7b460 __libc_start_main +
    245

    6    tmpzrn341xm                        0x000055875ec6f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    var closestElements : (Double, Double)\
    \ = (numbers[0], numbers[1])\n    var closestDistance : Double = numbers[1] -\
    \ numbers[0]\n    \n    for index in 0..<numbers.count {\n        let first =\
    \ numbers[index]\n        let second = numbers[index + 1]\n        let distance\
    \ = second - first\n        \n        if (distance < closestDistance) {\n    \
    \        closestDistance = distance\n            closestElements = (first, second)\n\
    \        }\n    }\n    \n    return closestElements\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bcddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bcdaad561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8bcdaad286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8bcdaad13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8bcdaacbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8bcd8acf44 <unavailable> + 188228

    6    tmpp19mo3ad                        0x000055fb40278efa <unavailable> + 7930

    7    tmpp19mo3ad                        0x000055fb402785cd <unavailable> + 5581

    8    libc.so.6                          0x00002b8bcdfa2460 __libc_start_main +
    245

    9    tmpp19mo3ad                        0x000055fb40278279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    var smallestDistance = Double.infinity\n\
    \    var closestNumbers = (Double.infinity, Double.infinity)\n    \n    for number\
    \ in numbers {\n        for number2 in numbers {\n            if abs(number -\
    \ number2) < smallestDistance && number != number2 {\n                smallestDistance\
    \ = abs(number - number2)\n                closestNumbers = (number, number2)\n\
    \            }\n        }\n    }\n    \n    return closestNumbers\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp34i1_2c_/tmp34i1_2c_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af378d18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af378a0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af378a0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af378a0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34i1_2c_                        0x00005613cd90f8a2 <unavailable> + 6306

    5    libc.so.6                          0x00002af378f04460 __libc_start_main +
    245

    6    tmp34i1_2c_                        0x00005613cd90f2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // TODO: Write some code to solve this\
    \ problem!\n    return (0.0, 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd8ths69t/tmpd8ths69t.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52811c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5280ebfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5280ebf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5280ebe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd8ths69t                        0x0000564211b7d48e <unavailable> + 5262

    5    libc.so.6                          0x00002b52813b4460 __libc_start_main +
    245

    6    tmpd8ths69t                        0x0000564211b7d049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min: Double = Double.infinity\n   \
    \ var pair: (Double, Double) = (Double.infinity, Double.infinity)\n    let numLength\
    \ = numbers.count\n    for i in 0..<numLength-1 {\n        let first = numbers[i]\n\
    \        for j in i+1..<numLength {\n            let second = numbers[j]\n   \
    \         let difference = abs(first - second)\n            if difference < min\
    \ {\n                min = difference\n                pair = (first, second)\n\
    \            }\n        }\n    }\n    return pair\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_egxlp7w/tmp_egxlp7w.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf1bc94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf1b98bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf1b98b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf1b98a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_egxlp7w                        0x000055d15054e962 <unavailable> + 6498

    5    libc.so.6                          0x00002abf1be80460 __libc_start_main +
    245

    6    tmp_egxlp7w                        0x000055d15054e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ min_closest = Double.infinity\n    var min_closest_pair: (Double, Double) =\
    \ (0, 0)\n    for (i, current) in numbers.enumerated() {\n        let next = numbers[i\
    \ + 1]\n        let next_diff = abs(next - current)\n        if next_diff < min_closest\
    \ {\n            min_closest = next_diff\n            min_closest_pair = (current,\
    \ next)\n        }\n    }\n    return min_closest_pair\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3d6b38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3d682f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3d682f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3d682f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3d682ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab3d662ef44 <unavailable> + 188228

    6    tmpwja27n2l                        0x00005595040ab0ed <unavailable> + 8429

    7    tmpwja27n2l                        0x00005595040aa79d <unavailable> + 6045

    8    libc.so.6                          0x00002ab3d6d24460 __libc_start_main +
    245

    9    tmpwja27n2l                        0x00005595040aa449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    let\
    \ sorted_numbers = numbers.sorted()\n    var closest = (sorted_numbers[0], sorted_numbers[1])\n\
    \    var smallest_difference = abs(closest.0 - closest.1)\n    for i in 1..<sorted_numbers.count-1\
    \ {\n        let current_difference = abs(sorted_numbers[i] - sorted_numbers[i+1])\n\
    \        if current_difference < smallest_difference {\n            closest =\
    \ (sorted_numbers[i], sorted_numbers[i+1])\n            smallest_difference =\
    \ current_difference\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count < 2 {\n        return\
    \ (0, 0)\n    }\n    let min = numbers.min()!\n    let max = numbers.max()!\n\
    \    var min_diff = abs(numbers[0] - numbers[1])\n    var min_element = (numbers[0],\
    \ numbers[1])\n    for i in 0..<numbers.count - 1 {\n        let diff = abs(numbers[i]\
    \ - numbers[i + 1])\n        if diff < min_diff {\n            min_diff = diff\n\
    \            min_element = (numbers[i], numbers[i + 1])\n        }\n    }\n  \
    \  let diff_min_max = abs(min - max)\n    if diff_min_max < min_diff {\n     \
    \   return (min, max)\n    }\n    return min_element\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2ys2msrk/tmp2ys2msrk.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e86922c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e86619b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e86619988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e866187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ys2msrk                        0x000055a1dbbf19d2 <unavailable> + 6610

    5    libc.so.6                          0x00002b8e86b0e460 __libc_start_main +
    245

    6    tmp2ys2msrk                        0x000055a1dbbf1429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var value = numbers[0]\n    var previousValue\
    \ = numbers[0]\n    var minDistance = numbers[1] - numbers[0]\n    var minPreviousValue\
    \ = previousValue\n    var minValue = value\n    for index in 1..<numbers.count\
    \ {\n        value = numbers[index]\n        let distance = abs(value - previousValue)\n\
    \        if distance < minDistance {\n            minDistance = distance\n   \
    \         minPreviousValue = previousValue\n            minValue = value\n   \
    \     }\n        previousValue = value\n    }\n    return (minPreviousValue, minValue)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbje9yy_p/tmpbje9yy_p.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accc3ed6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accc3bcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accc3bcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accc3bcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbje9yy_p                        0x000055759cb59912 <unavailable> + 6418

    5    libc.so.6                          0x00002accc40c2460 __libc_start_main +
    245

    6    tmpbje9yy_p                        0x000055759cb59369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var diff = Double.infinity\n    var min\
    \ = 0\n    var max = 0\n    for i in 0..<numbers.count {\n        for j in i..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < diff {\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                min = i\n                max\
    \ = j\n            }\n        }\n    }\n    if numbers[min] < numbers[max] {\n\
    \        return (numbers[min], numbers[max])\n    } else {\n        return (numbers[max],\
    \ numbers[min])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpr3ox7pea/tmpr3ox7pea.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12668c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12665beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12665be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12665bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3ox7pea                        0x000056103a7667fe <unavailable> + 6142

    5    libc.so.6                          0x00002b1266ab3460 __libc_start_main +
    245

    6    tmpr3ox7pea                        0x000056103a7663b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count <= 1 {\n        return\
    \ (0, 0)\n    }\n    var min = numbers[0]\n    var max = numbers[0]\n    for number\
    \ in numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    var\
    \ pair = (min, max)\n    for i in 0...numbers.count-2 {\n        for j in i+1...numbers.count-1\
    \ {\n            if abs(numbers[i] - numbers[j]) < abs(pair.0 - pair.1) {\n  \
    \              pair = (numbers[i], numbers[j])\n            }\n        }\n   \
    \ }\n    return pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplwzpo2w4/tmplwzpo2w4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b454efdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b454ecd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b454ecd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b454ecd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplwzpo2w4                        0x000055783853fa82 <unavailable> + 6786

    5    libc.so.6                          0x00002b454f1c8460 __libc_start_main +
    245

    6    tmplwzpo2w4                        0x000055783853f4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard numbers.count >= 2 else {\n     \
    \   fatalError(\"Array too short\")\n    }\n    let sorted = numbers.sorted()\n\
    \    let shortestDistance = sorted.dropFirst().enumerated().reduce(sorted[0])\
    \ { (value, item) -> Double in\n        let distance = abs(value - item.element)\n\
    \        if distance < shortestDistance {\n            return value\n        }\
    \ else {\n            return item.element\n        }\n    }\n    return (shortestDistance,\
    \ shortestDistance)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpja84o0p6.swift:13:78: error: closure captures 'shortestDistance'\
    \ before it is declared\n    let shortestDistance = sorted.dropFirst().enumerated().reduce(sorted[0])\
    \ { (value, item) -> Double in\n                                             \
    \                                ^\n/tmp/tmpja84o0p6.swift:13:9: note: captured\
    \ value declared here\n    let shortestDistance = sorted.dropFirst().enumerated().reduce(sorted[0])\
    \ { (value, item) -> Double in\n        ^\n/tmp/tmpja84o0p6.swift:15:23: note:\
    \ captured here\n        if distance < shortestDistance {\n                  \
    \    ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var closest:\
    \ (Double, Double) = (numbers[0], numbers[1])\n    var distance = closest.1 -\
    \ closest.0\n    for i in 0..<numbers.count-1 {\n        let diff = numbers[i+1]\
    \ - numbers[i]\n        if diff < distance {\n            closest = (numbers[i],\
    \ numbers[i+1])\n            distance = diff\n        }\n    }\n    return closest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpsr26yerz/tmpsr26yerz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0f2119c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0f1e10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0f1e10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0f1e0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsr26yerz                        0x00005618042236be <unavailable> + 5822

    5    libc.so.6                          0x00002ba0f2305460 __libc_start_main +
    245

    6    tmpsr26yerz                        0x0000561804223279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // Refuse to accept less than two numbers\n\
    \    assert(numbers.count >= 2)\n    \n    // Sort the numbers and return the\
    \ first two\n    let ordered = numbers.sorted()\n    return (ordered[0], ordered[1])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpy71ofxit/tmpy71ofxit.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd83267c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd82f5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd82f5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd82f5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy71ofxit                        0x000055fbde4435de <unavailable> + 5598

    5    libc.so.6                          0x00002afd83453460 __libc_start_main +
    245

    6    tmpy71ofxit                        0x000055fbde443199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var minDifference\
    \ = abs(numbers[0] - numbers[1])\n    var minDifferenceElements = (numbers[0],\
    \ numbers[1])\n    for i in 0..<numbers.count - 1 {\n        let difference =\
    \ abs(numbers[i] - numbers[i + 1])\n        if difference < minDifference {\n\
    \            minDifference = difference\n            minDifferenceElements = (numbers[i],\
    \ numbers[i + 1])\n        }\n    }\n    return minDifferenceElements\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpv9bhwdbx/tmpv9bhwdbx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb6bfcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb6bcc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb6bcc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb6bcc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9bhwdbx                        0x0000564d9aa1c912 <unavailable> + 6418

    5    libc.so.6                          0x00002acb6c1bb460 __libc_start_main +
    245

    6    tmpv9bhwdbx                        0x0000564d9aa1c369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // Solution goes here\n    return (0.0,\
    \ 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp4e7tdr0g/tmp4e7tdr0g.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedcd39dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedcd094b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedcd094988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedcd0937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4e7tdr0g                        0x000055959dfb948e <unavailable> + 5262

    5    libc.so.6                          0x00002aedcd589460 __libc_start_main +
    245

    6    tmp4e7tdr0g                        0x000055959dfb9049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count < 2 {\n        return\
    \ (0, 0)\n    }\n    var closestDifference = Double.infinity\n    var currentDifference\
    \ = Double.infinity\n    var first = 0.0\n    var second = 0.0\n    let sorted\
    \ = numbers.sorted()\n    for i in 0..<sorted.count - 1 {\n        currentDifference\
    \ = sorted[i + 1] - sorted[i]\n        if currentDifference < closestDifference\
    \ {\n            closestDifference = currentDifference\n            first = sorted[i]\n\
    \            second = sorted[i + 1]\n        }\n    }\n    return (first, second)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var currentClosest = numbers[0]\n    var\
    \ nextClosest = numbers[1]\n    var closestDifference = abs(currentClosest - nextClosest)\n\
    \    \n    for i in 0..<numbers.count {\n        let currentNumber = numbers[i]\n\
    \        for j in i+1..<numbers.count {\n            let otherNumber = numbers[j]\n\
    \            let difference = abs(currentNumber - otherNumber)\n            if\
    \ difference < closestDifference {\n                currentClosest = currentNumber\n\
    \                nextClosest = otherNumber\n                closestDifference\
    \ = difference\n            }\n        }\n    }\n    \n    if currentClosest >\
    \ nextClosest {\n        let temp = currentClosest\n        currentClosest = nextClosest\n\
    \        nextClosest = temp\n    }\n    \n    return (currentClosest, nextClosest)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard numbers.count >= 2 else {\n     \
    \   return (0, 0)\n    }\n    \n    let sortedNumbers = numbers.sorted()\n   \
    \ var closestDifference = Double.greatestFiniteMagnitude\n    var closestElements\
    \ = (sortedNumbers[0], sortedNumbers[1])\n    \n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        let difference = abs(sortedNumbers[i] - sortedNumbers[i + 1])\n\
    \        if difference < closestDifference {\n            closestDifference =\
    \ difference\n            closestElements = (sortedNumbers[i], sortedNumbers[i\
    \ + 1])\n        }\n    }\n    \n    return closestElements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    var minimalNumbers = (Double.infinity,\
    \ Double.infinity)\n    var minimalDistance = Double.infinity\n    \n    for i\
    \ in 0..<numbers.count {\n        for j in 0..<numbers.count {\n            if\
    \ i != j {\n                let distance = abs(numbers[i] - numbers[j])\n    \
    \            if distance < minimalDistance {\n                    minimalDistance\
    \ = distance\n                    minimalNumbers = (numbers[i], numbers[j])\n\
    \                }\n            }\n        }\n    }\n    \n    return minimalNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7w_2dug2/tmp7w_2dug2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1894e2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1894b24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1894b24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1894b237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w_2dug2                        0x00005563eff51962 <unavailable> + 6498

    5    libc.so.6                          0x00002b1895019460 __libc_start_main +
    245

    6    tmp7w_2dug2                        0x00005563eff513b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    let minDistance\
    \ = find_min_distance(numbers: numbers)\n    var smallerNumber = numbers[0]\n\
    \    var largerNumber = numbers[1]\n    for i in 0...numbers.count-2 {\n     \
    \   if ((numbers[i+1] - numbers[i]) == minDistance) {\n            smallerNumber\
    \ = numbers[i]\n            largerNumber = numbers[i+1]\n        }\n    }\n  \
    \  return (smallerNumber, largerNumber)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpxa1u2tkc.swift:10:23: error: cannot find 'find_min_distance' in\
    \ scope\n    let minDistance = find_min_distance(numbers: numbers)\n         \
    \             ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sorted = numbers.sorted()\n    var\
    \ closestTwo = (Double.infinity, Double.infinity)\n    var closestDiff = Double.infinity\n\
    \    var last = sorted[0]\n    for number in sorted[1...] {\n        let diff\
    \ = number - last\n        if diff < closestDiff {\n            closestDiff =\
    \ diff\n            closestTwo = (last, number)\n        }\n        last = number\n\
    \    }\n    return closestTwo\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = [numbers[0], numbers[1]]\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if abs(numbers[i] - numbers[j]) < abs(closest[0] - closest[1]) && i !=\
    \ j {\n                closest = [numbers[i], numbers[j]]\n            }\n   \
    \     }\n    }\n    return (closest[0], closest[1])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp77udglxt/tmp77udglxt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1676e9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1676b95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1676b95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1676b947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77udglxt                        0x0000556d71b27912 <unavailable> + 6418

    5    libc.so.6                          0x00002b167708a460 __libc_start_main +
    245

    6    tmp77udglxt                        0x0000556d71b27369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest1 = numbers[0]\n    var closest2\
    \ = numbers[1]\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < abs(closest1 - closest2) {\n\
    \                closest1 = numbers[i]\n                closest2 = numbers[j]\n\
    \            }\n        }\n    }\n    return (closest1, closest2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzcwsd_kl/tmpzcwsd_kl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eaefc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eaecb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8eaecb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8eaecb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcwsd_kl                        0x0000560f32256912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8eaf1ae460 __libc_start_main +
    245

    6    tmpzcwsd_kl                        0x0000560f32256369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestValue = Double.infinity\n  \
    \  var num1 = 0.0\n    var num2 = 0.0\n    for i in 0..<numbers.count {\n    \
    \    for j in 0..<numbers.count {\n            if(i != j) {\n                let\
    \ difference = abs(numbers[i] - numbers[j])\n                if(difference < closestValue)\
    \ {\n                    closestValue = difference\n                    num1 =\
    \ numbers[i]\n                    num2 = numbers[j]\n                }\n     \
    \       }\n        }\n    }\n    return (num1, num2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0vp71d56/tmp0vp71d56.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b213a497c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b213a18eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b213a18e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b213a18d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vp71d56                        0x000056097e3ce962 <unavailable> + 6498

    5    libc.so.6                          0x00002b213a683460 __libc_start_main +
    245

    6    tmp0vp71d56                        0x000056097e3ce3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest1: Double = 0.0\n    var closest2:\
    \ Double = 0.0\n    var diff: Double = 1.7976931348623157e+308\n    for number\
    \ in numbers {\n        if let index = numbers.firstIndex(of: number) {\n    \
    \        if index < numbers.count - 1 {\n                if let n = numbers.first(where:\
    \ {number == $0}) {\n                    let diff2 = numbers[index + 1] - n\n\
    \                    if diff2 < diff {\n                        closest1 = n\n\
    \                        closest2 = numbers[index + 1]\n                     \
    \   diff = diff2\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return (closest1, closest2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpb2kz9mmh/tmpb2kz9mmh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b514ca3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b514c736b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b514c736988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b514c7357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2kz9mmh                        0x000055e7ed26378e <unavailable> + 6030

    5    libc.so.6                          0x00002b514cc2b460 __libc_start_main +
    245

    6    tmpb2kz9mmh                        0x000055e7ed263349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min1 = 0.0\n    var min2 = 0.0\n  \
    \  if numbers.count >= 2 {\n        min1 = numbers[0]\n        min2 = numbers[1]\n\
    \    }\n    for index in 0..<numbers.count - 1 {\n        let num1 = numbers[index]\n\
    \        let num2 = numbers[index + 1]\n        if abs(num1 - num2) < abs(min1\
    \ - min2) {\n            min1 = num1\n            min2 = num2\n        }\n   \
    \ }\n    return (min1, min2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpqyy_5pcz/tmpqyy_5pcz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e2efaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e2eca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e2eca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e2eca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqyy_5pcz                        0x00005654e3f1a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b1e2f196460 __libc_start_main +
    245

    6    tmpqyy_5pcz                        0x00005654e3f1a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestDifference = Double.infinity\n\
    \    var closestPair: (Double, Double) = (Double.infinity, Double.infinity)\n\
    \    let sortedNumbers = numbers.sorted()\n    for i in 1..<sortedNumbers.count\
    \ {\n        let difference = abs(sortedNumbers[i-1] - sortedNumbers[i])\n   \
    \     if difference < smallestDifference {\n            smallestDifference = difference\n\
    \            closestPair = (sortedNumbers[i-1], sortedNumbers[i])\n        }\n\
    \    }\n    return closestPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sorted = numbers.sorted()\n    var\
    \ element1 = sorted[0]\n    var element2 = sorted[1]\n    var diff = fabs(element1\
    \ - element2)\n    for i in 0..<sorted.count - 1 {\n        if fabs(sorted[i +\
    \ 1] - sorted[i]) < diff {\n            element1 = sorted[i]\n            element2\
    \ = sorted[i + 1]\n            diff = fabs(element1 - element2)\n        }\n \
    \   }\n    return (element1, element2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpisf748i1.swift:12:16: error: cannot find 'fabs' in scope\n    var\
    \ diff = fabs(element1 - element2)\n               ^~~~\n/tmp/tmpisf748i1.swift:14:12:\
    \ error: cannot find 'fabs' in scope\n        if fabs(sorted[i + 1] - sorted[i])\
    \ < diff {\n           ^~~~\n/tmp/tmpisf748i1.swift:17:20: error: cannot find\
    \ 'fabs' in scope\n            diff = fabs(element1 - element2)\n            \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minimum: Double = Double.infinity\n\
    \    var first: Double = 0\n    var second: Double = 0\n    var number: Double\
    \ = 0\n    for index in 0..<numbers.count {\n        number = numbers[index]\n\
    \        for innerIndex in index..<numbers.count {\n            let difference\
    \ = abs(number - numbers[innerIndex])\n            if difference < minimum {\n\
    \                minimum = difference\n                first = number\n      \
    \          second = numbers[innerIndex]\n            }\n        }\n    }\n   \
    \ return (first, second)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpguac3ykv/tmpguac3ykv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70133c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70130bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70130bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70130be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguac3ykv                        0x00005602593a57fe <unavailable> + 6142

    5    libc.so.6                          0x00002b70135b4460 __libc_start_main +
    245

    6    tmpguac3ykv                        0x00005602593a53b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallest = Double.infinity\n    var\
    \ currentSmallest: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count -\
    \ 1 {\n        for j in i + 1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < smallest {\n                smallest\
    \ = distance\n                currentSmallest = (numbers[i], numbers[j])\n   \
    \         }\n        }\n    }\n    return currentSmallest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplikdjam6/tmplikdjam6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76eed8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76eea84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76eea84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76eea837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplikdjam6                        0x000055646f2e3962 <unavailable> + 6498

    5    libc.so.6                          0x00002b76eef79460 __libc_start_main +
    245

    6    tmplikdjam6                        0x000055646f2e33b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    let\
    \ (smallest, secondSmallest) = numbers.sorted().prefix(2)\n    return (smallest,\
    \ secondSmallest)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp3cprq7wd.swift:10:55: error: no 'prefix' candidates produce the\
    \ expected contextual result type '(_, _)'\n    let (smallest, secondSmallest)\
    \ = numbers.sorted().prefix(2)\n                                             \
    \         ^\nSwift.Sequence:7:40: note: 'prefix' produces 'PrefixSequence<[Double]>',\
    \ not the expected contextual result type '(_, _)'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> PrefixSequence<Self>\n                    \
    \                   ^\nSwift.Collection:6:40: note: 'prefix' produces 'ArraySlice<Double>',\
    \ not the expected contextual result type '(_, _)'\n    @inlinable public __consuming\
    \ func prefix(_ maxLength: Int) -> Self.SubSequence\n                        \
    \               ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var difference: Double = Double.infinity\n\
    \    var closePair: (Double, Double) = (0, 0)\n    var temp: Double = 0.0\n  \
    \  for i in 0...numbers.count - 2 {\n        temp = abs(numbers[i] - numbers[i\
    \ + 1])\n        if temp < difference {\n            difference = temp\n     \
    \       closePair = (numbers[i], numbers[i + 1])\n        }\n    }\n    return\
    \ closePair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmph16w7hhx/tmph16w7hhx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89f6301c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89f5ff8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89f5ff8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89f5ff77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph16w7hhx                        0x00005558b356c962 <unavailable> + 6498

    5    libc.so.6                          0x00002b89f64ed460 __libc_start_main +
    245

    6    tmph16w7hhx                        0x00005558b356c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = Double.infinity\n    var\
    \ result = (Double.infinity, Double.infinity)\n    for (index, a) in numbers.enumerated()\
    \ {\n        for b in numbers[index+1...] {\n            let diff = abs(a - b)\n\
    \            if diff < closest {\n                closest = diff\n           \
    \     result = (a, b)\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp8n6f0wjl.swift:12:25: error: for-in loop requires 'Double' to conform\
    \ to 'Sequence'\n        for b in numbers[index+1...] {\n                 ~~~~~~~^~~~~~~~~~~~\n\
    /tmp/tmp8n6f0wjl.swift:12:33: error: cannot convert value of type 'PartialRangeFrom<Int>'\
    \ to expected argument type 'Int'\n        for b in numbers[index+1...] {\n  \
    \                              ^\n"
  stdout: ''
  timestamp: 1660013643
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    return\
    \ (0.0, 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmpny41ij/tmpmpny41ij.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22b707c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba22b3feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba22b3fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba22b3fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmpny41ij                        0x000056446e25b4ee <unavailable> + 5358

    5    libc.so.6                          0x00002ba22b8f3460 __libc_start_main +
    245

    6    tmpmpny41ij                        0x000056446e25b0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var result: (Double, Double) = (0, 0)\n\
    \    var minDiff = Double.infinity\n    for i in 0..<numbers.count {\n       \
    \ for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       result = (numbers[i], numbers[j])\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppyanoai7/tmppyanoai7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97e7706c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97e73fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97e73fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97e73fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppyanoai7                        0x000055ceacd12962 <unavailable> + 6498

    5    libc.so.6                          0x00002b97e78f2460 __libc_start_main +
    245

    6    tmppyanoai7                        0x000055ceacd123b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallest_distance = Double.infinity\n\
    \    var closest_pair: (Double, Double) = (0, 0)\n    for i in 0..<numbers.count\
    \ {\n        for j in 0..<numbers.count {\n            if i != j {\n         \
    \       let distance = abs(numbers[i] - numbers[j])\n                if distance\
    \ < smallest_distance {\n                    smallest_distance = distance\n  \
    \                  closest_pair = (numbers[i], numbers[j])\n                }\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpxnqw0ovj/tmpxnqw0ovj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2eb1e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2eaed7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2eaed7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2eaed67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnqw0ovj                        0x000056260eb27962 <unavailable> + 6498

    5    libc.so.6                          0x00002ab2eb3cc460 __libc_start_main +
    245

    6    tmpxnqw0ovj                        0x000056260eb273b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestDistance = Double.infinity\n\
    \    var closestNumbers = (0.0, 0.0)\n    for index in 1...numbers.count - 1 {\n\
    \        if numbers[index] - numbers[index - 1] < smallestDistance {\n       \
    \     smallestDistance = numbers[index] - numbers[index - 1]\n            closestNumbers\
    \ = (numbers[index - 1], numbers[index])\n        }\n    }\n    return closestNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpuk3brqjx/tmpuk3brqjx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44cd012c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44ccd09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44ccd09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44ccd087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuk3brqjx                        0x000055b4d978771e <unavailable> + 5918

    5    libc.so.6                          0x00002b44cd1fe460 __libc_start_main +
    245

    6    tmpuk3brqjx                        0x000055b4d97872d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    if closest_diff == 0 {\n\
    \        return closest\n    }\n    for i in 0..<numbers.count {\n        for\
    \ j in i..<numbers.count {\n            if i == j {\n                continue\n\
    \            }\n            let diff = abs(numbers[i] - numbers[j])\n        \
    \    if diff < closest_diff {\n                closest = (numbers[i], numbers[j])\n\
    \                closest_diff = diff\n            }\n        }\n    }\n    return\
    \ closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp79bnellw/tmp79bnellw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b464080ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4640505b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4640505988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46405047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79bnellw                        0x0000561b65038912 <unavailable> + 6418

    5    libc.so.6                          0x00002b46409fa460 __libc_start_main +
    245

    6    tmp79bnellw                        0x0000561b65038369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minDiff = abs(numbers[0] - numbers[1])\n\
    \    var ret = (numbers[0], numbers[1])\n    for i in 0..<numbers.count {\n  \
    \      for j in i+1..<numbers.count {\n            let diff = abs(numbers[i] -\
    \ numbers[j])\n            if diff < minDiff {\n                minDiff = diff\n\
    \                ret = (numbers[i], numbers[j])\n            }\n        }\n  \
    \  }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpygdpd4cm/tmpygdpd4cm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0956ff7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0956ceeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0956cee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0956ced7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygdpd4cm                        0x000055983bc25912 <unavailable> + 6418

    5    libc.so.6                          0x00002b09571e3460 __libc_start_main +
    245

    6    tmpygdpd4cm                        0x000055983bc25369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestNumbers: (Double, Double) =\
    \ (0, 0)\n    var minDistance: Double = .infinity\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < minDistance {\n                minDistance\
    \ = distance\n                closestNumbers = (numbers[i], numbers[j])\n    \
    \        }\n        }\n    }\n    return closestNumbers\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpoh4ms37r/tmpoh4ms37r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0953c9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0953992b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0953992988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09539917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoh4ms37r                        0x0000558cd08e7962 <unavailable> + 6498

    5    libc.so.6                          0x00002b0953e87460 __libc_start_main +
    245

    6    tmpoh4ms37r                        0x0000558cd08e73b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sorted = numbers.sorted()\n    var\
    \ closest = (0.0, 0.0)\n    var minDifference = Double.infinity\n    for i in\
    \ 1..<sorted.count {\n        let difference = abs(sorted[i] - sorted[i - 1])\n\
    \        if difference < minDifference {\n            minDifference = difference\n\
    \            closest = (sorted[i - 1], sorted[i])\n        }\n    }\n    return\
    \ closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // TODO: Write solution here\n    var a\
    \ = 0.0\n    var b = 0.0\n    var min = abs(numbers[0] - numbers[1])\n    for\
    \ (index,element) in numbers.enumerated() {\n        if index < numbers.count\
    \ - 1 {\n            if abs(element - numbers[index + 1]) < min {\n          \
    \      min = abs(element - numbers[index + 1])\n                a = element\n\
    \                b = numbers[index + 1]\n            }\n        }\n    }\n   \
    \ return (a,b)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp4oukq3c0/tmp4oukq3c0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c268afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c265a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c265a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c265a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4oukq3c0                        0x0000562dec7399a2 <unavailable> + 6562

    5    libc.so.6                          0x00002b6c26a9b460 __libc_start_main +
    245

    6    tmp4oukq3c0                        0x0000562dec7393f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var diff = Double.infinity\n    var element_a:\
    \ Double?\n    var element_b: Double?\n    let sorted_numbers = numbers.sorted()\n\
    \    for i in 0..<sorted_numbers.count-1 {\n        let curr_diff = sorted_numbers[i+1]\
    \ - sorted_numbers[i]\n        if curr_diff < diff {\n            diff = curr_diff\n\
    \            element_a = sorted_numbers[i]\n            element_b = sorted_numbers[i+1]\n\
    \        }\n    }\n    return (element_a!, element_b!)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return (0.0, 0.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe2e9am65/tmpe2e9am65.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a773fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a7436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50a7436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50a74357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2e9am65                        0x00005575100e648e <unavailable> + 5262

    5    libc.so.6                          0x00002b50a792b460 __libc_start_main +
    245

    6    tmpe2e9am65                        0x00005575100e6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    guard let min = numbers.min(), let max\
    \ = numbers.max() else {\n        return (0, 0)\n    }\n    var minDif = max\n\
    \    var minIndex = 0\n    var maxIndex = 0\n    for i in 0..<numbers.count {\n\
    \        for j in 0..<numbers.count {\n            let dif = abs(numbers[i] -\
    \ numbers[j])\n            if dif < minDif {\n                minDif = dif\n \
    \               minIndex = i\n                maxIndex = j\n            }\n  \
    \      }\n    }\n    if numbers[minIndex] > numbers[maxIndex] {\n        return\
    \ (numbers[maxIndex], numbers[minIndex])\n    }\n    return (numbers[minIndex],\
    \ numbers[maxIndex])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj97hx962/tmpj97hx962.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44e01ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44dfef6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44dfef6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44dfef57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj97hx962                        0x0000561fda92986e <unavailable> + 6254

    5    libc.so.6                          0x00002b44e03eb460 __libc_start_main +
    245

    6    tmpj97hx962                        0x0000561fda929429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let newNumbers = numbers.sorted()\n   \
    \ var closestNumbers = (Double.infinity, Double.infinity)\n    var previousNumber\
    \ = newNumbers[0]\n    for number in newNumbers {\n        if abs(number - previousNumber)\
    \ < abs(closestNumbers.0 - closestNumbers.1) {\n            closestNumbers = (previousNumber,\
    \ number)\n        }\n        previousNumber = number\n    }\n    return closestNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfrbtkugh/tmpfrbtkugh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe6dfa9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe6dca0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe6dca0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe6dc9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrbtkugh                        0x0000555f789107ee <unavailable> + 6126

    5    libc.so.6                          0x00002afe6e195460 __libc_start_main +
    245

    6    tmpfrbtkugh                        0x0000555f789103a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_dist = (Double.infinity, Double.infinity)\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let dist = abs(numbers[i] - numbers[j])\n            if dist < min_dist.0\
    \ {\n                min_dist = (dist, numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return (min_dist.1, min_dist.2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp1yhvhpel.swift:14:28: error: cannot assign value of type '(Double,\
    \ Double, Double)' to type '(Double, Double)'\n                min_dist = (dist,\
    \ numbers[i], numbers[j])\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yhvhpel.swift:18:34: error: value of tuple type '(Double, Double)' has\
    \ no member '2'\n    return (min_dist.1, min_dist.2)\n                       \
    \ ~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_diff = Double.infinity\n    var\
    \ res: (Double, Double) = (0, 0)\n    for i in 1..<numbers.count {\n        let\
    \ diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff {\n         \
    \   min_diff = diff\n            res = (numbers[i - 1], numbers[i])\n        }\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkr_6399h/tmpkr_6399h.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73210a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7320d9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7320d9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7320d9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkr_6399h                        0x000055b89fb9771e <unavailable> + 5918

    5    libc.so.6                          0x00002b7321291460 __libc_start_main +
    245

    6    tmpkr_6399h                        0x000055b89fb972d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var tuples = [(Double, Double)]()\n   \
    \ for i in 0..<numbers.count-1 {\n        tuples.append((numbers[i], numbers[i+1]))\n\
    \    }\n    tuples.sort(by: {($0.0 - $0.1).magnitude < ($1.0 - $1.1).magnitude})\n\
    \    return tuples[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmppxg5zheb/tmppxg5zheb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b062a493c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b062a18ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b062a18a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b062a1897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxg5zheb                        0x00005573fb8d3a62 <unavailable> + 6754

    5    libc.so.6                          0x00002b062a67f460 __libc_start_main +
    245

    6    tmppxg5zheb                        0x00005573fb8d34b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var closest1\
    \ = numbers[0]\n    var closest2 = numbers[1]\n    var currentClosestDistance\
    \ = abs(closest1 - closest2)\n    for i in 0..<numbers.count - 1 {\n        let\
    \ firstNumber = numbers[i]\n        for j in i+1..<numbers.count {\n         \
    \   let secondNumber = numbers[j]\n            let newDistance = abs(firstNumber\
    \ - secondNumber)\n            if newDistance < currentClosestDistance {\n   \
    \             closest1 = firstNumber\n                closest2 = secondNumber\n\
    \                currentClosestDistance = newDistance\n            }\n       \
    \ }\n    }\n    return closest1 < closest2 ? (closest1, closest2) : (closest2,\
    \ closest1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var smallest_distance = closest.1 - closest.0\n    for (index, number) in\
    \ numbers.enumerated() {\n        if index + 1 < numbers.count {\n           \
    \ let next_number = numbers[index + 1]\n            let distance = next_number\
    \ - number\n            if distance < smallest_distance {\n                closest\
    \ = (number, next_number)\n                smallest_distance = distance\n    \
    \        }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzfybhbzo/tmpzfybhbzo.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb842e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb83fdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb83fde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb83fdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfybhbzo                        0x000056439752074e <unavailable> + 5966

    5    libc.so.6                          0x00002aeb844d3460 __libc_start_main +
    245

    6    tmpzfybhbzo                        0x0000564397520309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    let nums\
    \ = numbers.sorted()\n    var closest = (nums[0], nums[1])\n    var diff = abs(closest.0\
    \ - closest.1)\n    for i in 1..<nums.count - 1 {\n        let x = nums[i]\n \
    \       let y = nums[i + 1]\n        let new_diff = abs(x - y)\n        if new_diff\
    \ < diff {\n            closest = (x, y)\n            diff = new_diff\n      \
    \  }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var minIndex = 0\n    var min = abs(numbers[0]\
    \ - numbers[1])\n    for index in numbers.indices {\n        if index + 1 < numbers.count\
    \ {\n            let diff = abs(numbers[index] - numbers[index + 1])\n       \
    \     if diff < min {\n                min = diff\n                minIndex =\
    \ index\n            }\n        }\n    }\n    return (numbers[minIndex], numbers[minIndex\
    \ + 1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpb9yv2wzg/tmpb9yv2wzg.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4d446ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4d4165b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4d4165988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4d41647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb9yv2wzg                        0x0000557b30fb2912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae4d465a460 __libc_start_main +
    245

    6    tmpb9yv2wzg                        0x0000557b30fb2369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ curClosest: (Double, Double) = (numbers[0], numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            if abs(numbers[i] -\
    \ numbers[j]) < abs(curClosest.0 - curClosest.1) {\n                curClosest\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return curClosest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpundxwkk0/tmpundxwkk0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40b663fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40b6336b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40b6336988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40b63357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpundxwkk0                        0x0000560ddbf6f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b40b682b460 __libc_start_main +
    245

    6    tmpundxwkk0                        0x0000560ddbf6f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min = Double.infinity\n    var minNums\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count-1 {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                minNums = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return minNums\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpzpf73xnb/tmpzpf73xnb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67ccb52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67cc849b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67cc849988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67cc8487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzpf73xnb                        0x000055b9eeb99962 <unavailable> + 6498

    5    libc.so.6                          0x00002b67ccd3e460 __libc_start_main +
    245

    6    tmpzpf73xnb                        0x000055b9eeb993b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sortedNumbers = numbers.sorted(by:\
    \ <)\n    var diff = Double.infinity\n    var pair: (Double, Double) = (sortedNumbers[0],\
    \ sortedNumbers[1])\n    for i in 0..<sortedNumbers.count - 1 {\n        let currentDiff\
    \ = sortedNumbers[i + 1] - sortedNumbers[i]\n        if currentDiff < diff {\n\
    \            diff = currentDiff\n            pair = (sortedNumbers[i], sortedNumbers[i\
    \ + 1])\n        }\n    }\n    return pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    return (0.0, 0.0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe2e9am65/tmpe2e9am65.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50a773fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50a7436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50a7436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50a74357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2e9am65                        0x00005575100e648e <unavailable> + 5262

    5    libc.so.6                          0x00002b50a792b460 __libc_start_main +
    245

    6    tmpe2e9am65                        0x00005575100e6049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // 1. Sort the array so it is in order\n\
    \    // 2. Compare the differences of the elements to find the smallest difference\
    \ and return the 2 numbers of that difference\n    // (Hint: you can use abs()\
    \ to make your life easier)\n    // You can add some print statements to help\
    \ you see the values\n    let sortedNumbers = numbers.sorted()\n    print(sortedNumbers)\n\
    \    var smallestDifference = Double.infinity\n    var smallestNumbers = (0.0,\
    \ 0.0)\n    for i in 0..<sortedNumbers.count - 1 {\n        let difference = abs(sortedNumbers[i]\
    \ - sortedNumbers[i + 1])\n        if difference < smallestDifference {\n    \
    \        smallestDifference = difference\n            smallestNumbers = (sortedNumbers[i],\
    \ sortedNumbers[i + 1])\n        }\n    }\n    return smallestNumbers\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: '[1.0, 2.0, 2.2, 3.9, 4.0, 5.0]

    [1.0, 2.0, 4.0, 5.0, 5.9]

    [1.0, 2.0, 2.2, 3.0, 4.0, 5.0]

    [1.0, 2.0, 2.0, 3.0, 4.0, 5.0]

    [1.1, 2.2, 3.1, 4.1, 5.1]

    '
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closesNums = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(numbers[0] - numbers[1])\n    var numberDiff = 0.0\n\
    \    for i in 0..<numbers.count {\n        if i + 1 < numbers.count {\n      \
    \      numberDiff = abs(numbers[i] - numbers[i + 1])\n            if numberDiff\
    \ < closestDiff {\n                closestDiff = numberDiff\n                closesNums\
    \ = (numbers[i], numbers[i + 1])\n            }\n        }\n    }\n    return\
    \ closesNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpdegxc9dp/tmpdegxc9dp.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f7d88ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f7d581b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f7d581988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f7d5807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdegxc9dp                        0x000055cc2e956912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3f7da76460 __libc_start_main +
    245

    6    tmpdegxc9dp                        0x000055cc2e956369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var a =\
    \ numbers[0]\n    var b = numbers[1]\n    var diff = fabs(numbers[0] - numbers[1])\n\
    \    for i in 0 ..< numbers.count {\n        for j in i + 1 ..< numbers.count\
    \ {\n            let tmp = fabs(numbers[i] - numbers[j])\n            if tmp <\
    \ diff {\n                a = numbers[i]\n                b = numbers[j]\n   \
    \             diff = tmp\n            }\n        }\n    }\n    return (a, b)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpp_g21sat.swift:12:16: error: cannot find 'fabs' in scope\n    var\
    \ diff = fabs(numbers[0] - numbers[1])\n               ^~~~\n/tmp/tmpp_g21sat.swift:15:23:\
    \ error: cannot find 'fabs' in scope\n            let tmp = fabs(numbers[i] -\
    \ numbers[j])\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closestDistance = closest.1 - closest.0\n    for currentIndex\
    \ in 0..<numbers.count - 1 {\n        for otherIndex in currentIndex + 1..<numbers.count\
    \ {\n            let currentDistance = numbers[otherIndex] - numbers[currentIndex]\n\
    \            if currentDistance < closestDistance {\n                closest =\
    \ (numbers[currentIndex], numbers[otherIndex])\n                closestDistance\
    \ = currentDistance\n            }\n        }\n    }\n    return closest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp67a8ms9j/tmp67a8ms9j.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba08795c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba0848cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba0848c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba0848b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67a8ms9j                        0x0000559f26bbc6be <unavailable> + 5822

    5    libc.so.6                          0x00002aba08981460 __libc_start_main +
    245

    6    tmp67a8ms9j                        0x0000559f26bbc279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var index = 0\n    var diff = 0.0\n   \
    \ var result = (0.0, 0.0)\n    for i in 0..<numbers.count - 1 {\n        if abs(numbers[i]\
    \ - numbers[i + 1]) < diff || diff == 0.0 {\n            index = i\n         \
    \   diff = abs(numbers[i] - numbers[i + 1])\n        }\n    }\n    result = (numbers[index],\
    \ numbers[index + 1])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphhydigfl/tmphhydigfl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c6deb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c6dbabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c6dbab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c6dbaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhydigfl                        0x000055f5f5bc9912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2c6e0a0460 __libc_start_main +
    245

    6    tmphhydigfl                        0x000055f5f5bc9369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sorted_numbers = numbers.sorted()\n\
    \    var smallest_diff = abs(sorted_numbers[0] - sorted_numbers[1])\n    var closest_numbers\
    \ = (sorted_numbers[0], sorted_numbers[1])\n    var index = 0\n    while index\
    \ < sorted_numbers.count-1 {\n        let current_number = sorted_numbers[index]\n\
    \        let next_number = sorted_numbers[index+1]\n        let difference = abs(current_number\
    \ - next_number)\n        if difference < smallest_diff {\n            smallest_diff\
    \ = difference\n            closest_numbers = (current_number, next_number)\n\
    \        }\n        index += 1\n    }\n    return closest_numbers\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var lowest = Double.infinity\n    var lowestNumbers\
    \ = (0.0, 0.0)\n    for number in numbers {\n        if let next = numbers.nextElement(after:\
    \ number) {\n            let difference = abs(number - next)\n            if difference\
    \ < lowest {\n                lowest = difference\n                lowestNumbers\
    \ = (number, next)\n            }\n        }\n    }\n    return lowestNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpveodxkxy.swift:12:31: error: value of type '[Double]' has no member\
    \ 'nextElement'\n        if let next = numbers.nextElement(after: number) {\n\
    \                      ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallest: Double = 0\n    var largest:\
    \ Double = 0\n    for i in 0...numbers.count - 2 {\n        for j in i + 1...numbers.count\
    \ - 1 {\n            if abs(numbers[i] - numbers[j]) < abs(smallest - largest)\
    \ {\n                smallest = numbers[i]\n                largest = numbers[j]\n\
    \            }\n        }\n    }\n    return (smallest, largest)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpsc8lujo1/tmpsc8lujo1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83c4c61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83c4958b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83c4958988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83c49577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsc8lujo1                        0x0000558c62cb37ae <unavailable> + 6062

    5    libc.so.6                          0x00002b83c4e4d460 __libc_start_main +
    245

    6    tmpsc8lujo1                        0x0000558c62cb3369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var result = (numbers[0], numbers[1])\n\
    \    for i in 0 ..< numbers.count - 1 {\n        for j in (i + 1) ..< numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < abs(result.0 - result.1) {\n\
    \                result = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpq8509bv1/tmpq8509bv1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ca1dd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ca1aceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ca1ace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ca1acd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8509bv1                        0x0000562eb68d8912 <unavailable> + 6418

    5    libc.so.6                          0x00002b4ca1fc3460 __libc_start_main +
    245

    6    tmpq8509bv1                        0x0000562eb68d8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var closestDiff = numbers[1] - numbers[0]\n    if numbers.count > 2 {\n \
    \       for i in 0..<numbers.count - 1 {\n            for j in (i + 1)..<numbers.count\
    \ {\n                let absDiff = abs(numbers[i] - numbers[j])\n            \
    \    if absDiff < closestDiff {\n                    closestDiff = absDiff\n \
    \                   closest = (numbers[i], numbers[j])\n                }\n  \
    \          }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp4s17bd4x/tmp4s17bd4x.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab15b9e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab15b6e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab15b6e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab15b6df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4s17bd4x                        0x000055b8b3d66912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab15bbd5460 __libc_start_main +
    245

    6    tmp4s17bd4x                        0x000055b8b3d66369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count < 2 {\n        return\
    \ (0, 0)\n    }\n    var sortedNumbers = numbers.sorted()\n    var distance =\
    \ abs(sortedNumbers[0] - sortedNumbers[1])\n    var closestNumbers = (sortedNumbers[0],\
    \ sortedNumbers[1])\n    for i in 0..<sortedNumbers.count - 1 {\n        let tempDist\
    \ = abs(sortedNumbers[i] - sortedNumbers[i + 1])\n        if distance > tempDist\
    \ {\n            distance = tempDist\n            closestNumbers = (sortedNumbers[i],\
    \ sortedNumbers[i + 1])\n        }\n    }\n    return closestNumbers\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var smallestDifference = numbers[1] - numbers[0]\n\
    \    var closestElements = (numbers[0], numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in (i+1)..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < smallestDifference {\n                smallestDifference\
    \ = diff\n                closestElements = (numbers[i], numbers[j])\n       \
    \     }\n        }\n    }\n    return closestElements\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmps2k6fdgj/tmps2k6fdgj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b282e330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b282e027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b282e027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b282e0267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2k6fdgj                        0x000055dfe9d09912 <unavailable> + 6418

    5    libc.so.6                          0x00002b282e51c460 __libc_start_main +
    245

    6    tmps2k6fdgj                        0x000055dfe9d09369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (abs(numbers[0] - numbers[1]),\
    \ 0, 1)\n    for i in 0..<numbers.count - 1 {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < closest.0 {\n                closest = (diff, i, j)\n            }\n     \
    \   }\n    }\n    return (numbers[closest.1], numbers[closest.2])\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpsv6yjr_b/tmpsv6yjr_b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50add07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50ad9feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50ad9fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50ad9fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsv6yjr_b                        0x000055e4c8045912 <unavailable> + 6418

    5    libc.so.6                          0x00002b50adef3460 __libc_start_main +
    245

    6    tmpsv6yjr_b                        0x000055e4c8045369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count <= 1 {\n        return\
    \ (0, 0)\n    }\n    let sortedNumbers = numbers.sorted()\n    var closest = (sortedNumbers[0],\
    \ sortedNumbers[1])\n    var smallest = abs(sortedNumbers[0] - sortedNumbers[1])\n\
    \    for i in 1..<sortedNumbers.count {\n        if i < sortedNumbers.count -\
    \ 1 && abs(sortedNumbers[i] - sortedNumbers[i + 1]) < smallest {\n           \
    \ closest = (sortedNumbers[i], sortedNumbers[i + 1])\n            smallest = abs(sortedNumbers[i]\
    \ - sortedNumbers[i + 1])\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count < 2 {\n        return\
    \ (0, 0)\n    }\n    var minDiff = abs(numbers[0] - numbers[1])\n    var minElements\
    \ = (numbers[0], numbers[1])\n    for i in 0..<numbers.count - 1 {\n        for\
    \ j in i + 1..<numbers.count {\n            let d = abs(numbers[i] - numbers[j])\n\
    \            if d < minDiff {\n                minDiff = d\n                minElements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return minElements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwmuje94y/tmpwmuje94y.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e9c005c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e9bcfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e9bcfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e9bcfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwmuje94y                        0x000055c5b90d5912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2e9c1f1460 __libc_start_main +
    245

    6    tmpwmuje94y                        0x000055c5b90d5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n  return (1.0, 2.0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0evmabbm/tmp0evmabbm.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fbe628c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fbe31fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fbe31f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fbe31e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0evmabbm                        0x00005615fc01c48e <unavailable> + 5262

    5    libc.so.6                          0x00002b4fbe814460 __libc_start_main +
    245

    6    tmp0evmabbm                        0x00005615fc01c049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_distance = distance\n                closest_pair\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbllo1whn/tmpbllo1whn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab438fc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab438cb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab438cb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab438cb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbllo1whn                        0x000055915ba59912 <unavailable> + 6418

    5    libc.so.6                          0x00002ab4391ad460 __libc_start_main +
    245

    6    tmpbllo1whn                        0x000055915ba59369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013462
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestNumbers = (numbers[0], numbers[1])\n\
    \    var smallestDifference = abs(numbers[0] - numbers[1])\n    \n    for i in\
    \ 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            let\
    \ difference = abs(numbers[i] - numbers[j])\n            if difference < smallestDifference\
    \ {\n                smallestDifference = difference\n                closestNumbers\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    \n    return\
    \ closestNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk7ti335m/tmpk7ti335m.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95745c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95742b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95742b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95742b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7ti335m                        0x0000562a69713912 <unavailable> + 6418

    5    libc.so.6                          0x00002b95747ad460 __libc_start_main +
    245

    6    tmpk7ti335m                        0x0000562a69713369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestPair = (numbers[0], numbers[1])\n\
    \    var smallestDifference = abs(numbers[0] - numbers[1])\n    for i in 0...numbers.count\
    \ - 2 {\n        for j in i+1...numbers.count - 1 {\n            let difference\
    \ = abs(numbers[i] - numbers[j])\n            if difference < smallestDifference\
    \ {\n                closestPair = (numbers[i], numbers[j])\n                smallestDifference\
    \ = difference\n            }\n        }\n    }\n    return closestPair\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpx1h6j53q/tmpx1h6j53q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d315a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d31298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d31298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d312977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1h6j53q                        0x0000556453373912 <unavailable> + 6418

    5    libc.so.6                          0x00002b1d3178d460 __libc_start_main +
    245

    6    tmpx1h6j53q                        0x0000556453373369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var numbers = numbers\n    numbers.sort()\n\
    \    var smallestDifference: Double = 0\n    var closestElements: (Double, Double)\
    \ = (0, 0)\n    for i in 0..<numbers.count - 1 {\n        let difference = numbers[i\
    \ + 1] - numbers[i]\n        if difference < smallestDifference || smallestDifference\
    \ == 0 {\n            smallestDifference = difference\n            closestElements\
    \ = (numbers[i], numbers[i + 1])\n        }\n    }\n    return closestElements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp81vp92nz/tmp81vp92nz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac03c27fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac03bf76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac03bf76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac03bf757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81vp92nz                        0x0000564cd7363c2a <unavailable> + 7210

    5    libc.so.6                          0x00002ac03c46b460 __libc_start_main +
    245

    6    tmp81vp92nz                        0x0000564cd7363399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ smallestDifference = Double.infinity\n    var currentIndex = 0\n    while currentIndex\
    \ < numbers.count {\n        var innerIndex = currentIndex + 1\n        while\
    \ innerIndex < numbers.count {\n            let difference = numbers[innerIndex]\
    \ - numbers[currentIndex]\n            if difference < smallestDifference {\n\
    \                smallestDifference = difference\n            }\n            innerIndex\
    \ += 1\n        }\n        currentIndex += 1\n    }\n    var outerIndex = 0\n\
    \    while outerIndex < numbers.count {\n        var innerIndex = outerIndex +\
    \ 1\n        while innerIndex < numbers.count {\n            let difference =\
    \ numbers[innerIndex] - numbers[outerIndex]\n            if difference == smallestDifference\
    \ {\n                return (numbers[outerIndex], numbers[innerIndex])\n     \
    \       }\n            innerIndex += 1\n        }\n        outerIndex += 1\n \
    \   }\n    return (0, 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplw5nxgje/tmplw5nxgje.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b226e549c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b226e240b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b226e240988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b226e23f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplw5nxgje                        0x000055b59509658e <unavailable> + 5518

    5    libc.so.6                          0x00002b226e735460 __libc_start_main +
    245

    6    tmplw5nxgje                        0x000055b595096149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count < 2 {\n        return\
    \ (0, 0)\n    }\n    var min = (numbers[0], numbers[1])\n    for i in 1..<numbers.count\
    \ - 1 {\n        let diff = numbers[i+1] - numbers[i]\n        if diff < min.1\
    \ - min.0 {\n            min = (numbers[i], numbers[i+1])\n        }\n    }\n\
    \    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7zw8zyix/tmp7zw8zyix.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b956a0a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9569d9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9569d9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9569d9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7zw8zyix                        0x000055b5c59d66be <unavailable> + 5822

    5    libc.so.6                          0x00002b956a290460 __libc_start_main +
    245

    6    tmp7zw8zyix                        0x000055b5c59d6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var nums = numbers\n    nums.sort()\n \
    \   var prev = nums[0]\n    var diff = nums[1] - nums[0]\n    for i in 1..<nums.count\
    \ {\n        if nums[i] - prev < diff {\n            diff = nums[i] - prev\n \
    \       }\n        prev = nums[i]\n    }\n    return (nums[0], nums[0] + diff)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpdm5nty2y/tmpdm5nty2y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b393bf64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b393bc5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b393bc5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b393bc5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdm5nty2y                        0x0000561c50c837de <unavailable> + 6110

    5    libc.so.6                          0x00002b393c150460 __libc_start_main +
    245

    6    tmpdm5nty2y                        0x0000561c50c83399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var numbers = numbers\n    if numbers.count\
    \ < 2 {\n        return (0, 0)\n    }\n    numbers.sort()\n    var closest = (abs(numbers[0]\
    \ - numbers[1]), numbers[0], numbers[1])\n    for i in 0..<numbers.count - 1 {\n\
    \        let distance = abs(numbers[i] - numbers[i + 1])\n        if distance\
    \ < closest.0 {\n            closest = (distance, numbers[i], numbers[i + 1])\n\
    \        }\n    }\n    return (closest.1, closest.2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013645
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var result = (numbers[0], numbers[1])\n\
    \    var minDelta = fabs(numbers[0] - numbers[1])\n    for i in 1..<numbers.count\
    \ - 1 {\n        let delta = fabs(numbers[i] - numbers[i + 1])\n        if delta\
    \ < minDelta {\n            minDelta = delta\n            result = (numbers[i],\
    \ numbers[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpfy9vg7u6.swift:10:20: error: cannot find 'fabs' in scope\n    var\
    \ minDelta = fabs(numbers[0] - numbers[1])\n                   ^~~~\n/tmp/tmpfy9vg7u6.swift:12:21:\
    \ error: cannot find 'fabs' in scope\n        let delta = fabs(numbers[i] - numbers[i\
    \ + 1])\n                    ^~~~\n"
  stdout: ''
  timestamp: 1660013644
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ closest = (numbers[0], numbers[1])\n    for i in 0..<numbers.count-1 {\n   \
    \     for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < abs(closest.0 - closest.1) {\n                closest = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8bgtg2my/tmp8bgtg2my.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaa742cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaa7123b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaa7123988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaa71227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8bgtg2my                        0x000055fa35465912 <unavailable> + 6418

    5    libc.so.6                          0x00002adaa7618460 __libc_start_main +
    245

    6    tmp8bgtg2my                        0x000055fa35465369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sorted = numbers.sorted()\n    var\
    \ min = sorted[1] - sorted[0]\n    var first = sorted[0]\n    var second = sorted[1]\n\
    \    for index in 1..<sorted.count {\n        let diff = sorted[index] - sorted[index\
    \ - 1]\n        if diff < min {\n            min = diff\n            first = sorted[index\
    \ - 1]\n            second = sorted[index]\n        }\n    }\n    return (first,\
    \ second)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var closest\
    \ = (numbers[0], numbers[1])\n    var prev = closest.0\n    for i in numbers[1..<numbers.count]\
    \ {\n        if i - prev < closest.1 - closest.0 {\n            closest = (prev,\
    \ i)\n        }\n        prev = i\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpxcp_a5u6/tmpxcp_a5u6.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b237005ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b236fd55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b236fd55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b236fd547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxcp_a5u6                        0x000055a807a717ee <unavailable> + 6126

    5    libc.so.6                          0x00002b237024a460 __libc_start_main +
    245

    6    tmpxcp_a5u6                        0x000055a807a713a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sorted_numbers = numbers.sorted()\n\
    \    let distance_from_one_to_two = abs(sorted_numbers[0] - sorted_numbers[1])\n\
    \    var result = (sorted_numbers[0], sorted_numbers[1])\n    for i in 0..<sorted_numbers.count-1\
    \ {\n        let distance = abs(sorted_numbers[i] - sorted_numbers[i+1])\n   \
    \     if distance < distance_from_one_to_two {\n            result = (sorted_numbers[i],\
    \ sorted_numbers[i+1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu_p0tkn5/tmpu_p0tkn5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b134a5bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b134a2b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b134a2b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b134a2b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_p0tkn5                        0x00005626fc054ae3 <unavailable> + 6883

    5    libc.so.6                          0x00002b134a7ab460 __libc_start_main +
    245

    6    tmpu_p0tkn5                        0x00005626fc0543c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let _numbers = numbers.sorted()\n    var\
    \ closest = 0.0\n    var second = 0.0\n    var result = [Double]()\n    for i\
    \ in 0..<_numbers.count - 1 {\n        let current = abs(_numbers[i] - _numbers[i\
    \ + 1])\n        if current < closest {\n            closest = current\n     \
    \       second = _numbers[i + 1]\n            result = [_numbers[i], second]\n\
    \        }\n    }\n    return (result[0], result[1])\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba10cb7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba10c872561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba10c872286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba10c87213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba10c871bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba10c671f44 <unavailable> + 188228

    6    tmp_b8pqy5z                        0x000055c335f4d1ff <unavailable> + 8703

    7    tmp_b8pqy5z                        0x000055c335f4c77d <unavailable> + 6013

    8    libc.so.6                          0x00002ba10cd67460 __libc_start_main +
    245

    9    tmp_b8pqy5z                        0x000055c335f4c429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var distance = Double.infinity\n    var\
    \ closest : (Double, Double) = (0, 0)\n    let sortedNumbers = numbers.sorted()\n\
    \    for i in 0..<(sortedNumbers.count - 1) {\n        let d = sortedNumbers[i\
    \ + 1] - sortedNumbers[i]\n        if d < distance {\n            distance = d\n\
    \            closest = (sortedNumbers[i], sortedNumbers[i + 1])\n        }\n \
    \   }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013645
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n\
    \    var diff = fabs(closest.0 - closest.1)\n    for (i, num) in numbers.enumerated()\
    \ {\n        guard i + 1 < numbers.count else {\n            break\n        }\n\
    \        let diffToNext = fabs(num - numbers[i + 1])\n        if diffToNext <\
    \ diff {\n            closest = (num, numbers[i + 1])\n            diff = diffToNext\n\
    \        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmp0pm478wd.swift:10:16: error: cannot find 'fabs' in scope\n    var\
    \ diff = fabs(closest.0 - closest.1)\n               ^~~~\n/tmp/tmp0pm478wd.swift:15:26:\
    \ error: cannot find 'fabs' in scope\n        let diffToNext = fabs(num - numbers[i\
    \ + 1])\n                         ^~~~\n"
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    \n    guard numbers.count > 1 else { return\
    \ (0, 0) }\n    \n    var closest_numbers = [Double](repeating: 0, count: 2)\n\
    \    var smallest_delta = Double.greatestFiniteMagnitude\n    \n    for i in 0..<numbers.count\
    \ - 1 {\n        for j in (i + 1)..<numbers.count {\n            let current_delta\
    \ = abs(numbers[i] - numbers[j])\n            if current_delta < smallest_delta\
    \ {\n                smallest_delta = current_delta\n                closest_numbers[0]\
    \ = numbers[i]\n                closest_numbers[1] = numbers[j]\n            }\n\
    \        }\n    }\n    \n    return (closest_numbers[0], closest_numbers[1])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpesgymnu_/tmpesgymnu_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6412233c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6411f2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6411f2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6411f297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpesgymnu_                        0x0000557051654a32 <unavailable> + 6706

    5    libc.so.6                          0x00002b641241f460 __libc_start_main +
    245

    6    tmpesgymnu_                        0x0000557051654489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var min_difference = Double.infinity\n\
    \    var result: (Double, Double) = (0.0, 0.0)\n    for i in 0 ..< numbers.count\
    \ - 1 {\n        let first = numbers[i]\n        let second = numbers[i + 1]\n\
    \        let current_difference = abs(first - second)\n        if current_difference\
    \ < min_difference {\n            min_difference = current_difference\n      \
    \      result = (first, second)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe7uzq8y7/tmpe7uzq8y7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49bcfdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49bccd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49bccd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49bccd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7uzq8y7                        0x00005607e1b9b962 <unavailable> + 6498

    5    libc.so.6                          0x00002b49bd1cb460 __libc_start_main +
    245

    6    tmpe7uzq8y7                        0x00005607e1b9b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    let sortedNumbers = numbers.sorted()\n\
    \    var smallestDifference = Double.infinity\n    var closestElements = (Double.infinity,\
    \ Double.infinity)\n    for i in 0..<sortedNumbers.count - 1 {\n        let firstElement\
    \ = sortedNumbers[i]\n        let secondElement = sortedNumbers[i + 1]\n     \
    \   let difference = abs(firstElement - secondElement)\n        if difference\
    \ < smallestDifference {\n            smallestDifference = difference\n      \
    \      closestElements = (firstElement, secondElement)\n        }\n    }\n   \
    \ return closestElements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    var\
    \ minDifference = abs(numbers[0] - numbers[1])\n    var minElements = (numbers[0],\
    \ numbers[1])\n    for i in 0 ..< numbers.count - 1 {\n        for j in i + 1\
    \ ..< numbers.count {\n            let difference = abs(numbers[i] - numbers[j])\n\
    \            if difference < minDifference {\n                minDifference =\
    \ difference\n                minElements = (numbers[i], numbers[j])\n       \
    \     }\n        }\n    }\n    return minElements\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpok1fbnln/tmpok1fbnln.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4d1223c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4d0f1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4d0f1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4d0f197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpok1fbnln                        0x00005602f795e912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac4d140f460 __libc_start_main +
    245

    6    tmpok1fbnln                        0x00005602f795e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    var closestTwoElements = (numbers[0], numbers[1])\n\
    \    var closestDistance: Double = abs(numbers[0] - numbers[1])\n    \n    for\
    \ i in 0..<numbers.count {\n        for j in i..<numbers.count {\n           \
    \ let distance = abs(numbers[i] - numbers[j])\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestTwoElements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    \n    return\
    \ closestTwoElements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8763da8b/tmp8763da8b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4762267c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4761f5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4761f5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4761f5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8763da8b                        0x0000558e8b46e7ae <unavailable> + 6062

    5    libc.so.6                          0x00002b4762453460 __libc_start_main +
    245

    6    tmp8763da8b                        0x0000558e8b46e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: 1
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    if numbers.count < 2 {\n        return\
    \ (0, 0)\n    }\n    else {\n        var smallestDiff = Double.infinity\n    \
    \    var closestPoints = (0, 0)\n        for i in 0..<numbers.count {\n      \
    \      for j in (i+1)..<numbers.count {\n                let diff = abs(numbers[i]\
    \ - numbers[j])\n                if diff < smallestDiff {\n                  \
    \  smallestDiff = diff\n                    closestPoints = (numbers[i], numbers[j])\n\
    \                }\n            }\n        }\n        return closestPoints\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpbtoojqh7.swift:20:35: error: cannot assign value of type '(Double,\
    \ Double)' to type '(Int, Int)'\n                    closestPoints = (numbers[i],\
    \ numbers[j])\n                                  ^\n/tmp/tmpbtoojqh7.swift:24:16:\
    \ error: cannot convert return expression of type '(Int, Int)' to return type\
    \ '(Double, Double)'\n        return closestPoints\n               ^\n"
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // write your code here\n    if numbers.count\
    \ < 2 {\n        return (0, 0)\n    }\n    var result = (numbers[0], numbers[1])\n\
    \    var diff = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count -\
    \ 1 {\n        if abs(numbers[i] - numbers[i + 1]) < diff {\n            diff\
    \ = abs(numbers[i] - numbers[i + 1])\n            result = (numbers[i], numbers[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpqyjscq9n/tmpqyjscq9n.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b135d9f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b135d6e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b135d6e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b135d6e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqyjscq9n                        0x000055f49acc7912 <unavailable> + 6418

    5    libc.so.6                          0x00002b135dbdc460 __libc_start_main +
    245

    6    tmpqyjscq9n                        0x000055f49acc7369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: -4
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // Return two dummy values for the test\
    \ to pass.\n    return (0.0, 0.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpg20rm1m6/tmpg20rm1m6.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4336045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4335d3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4335d3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4335d3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg20rm1m6                        0x0000558569a6448e <unavailable> + 5262

    5    libc.so.6                          0x00002b4336231460 __libc_start_main +
    245

    6    tmpg20rm1m6                        0x0000558569a64049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013645
- exit_code: 0
  program: "\n/// From a supplied array of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers:\
    \ [Double]) -> (Double, Double) {\n    // TODO: build up your solution here\n\
    \    let sortedNumbers = numbers.sorted()\n    var smallestDifference = Double.infinity\n\
    \    var closestElements = (sortedNumbers[0], sortedNumbers[1])\n    for i in\
    \ 1..<sortedNumbers.count {\n        let difference = abs(sortedNumbers[i] - sortedNumbers[i\
    \ - 1])\n        if difference < smallestDifference {\n            smallestDifference\
    \ = difference\n            closestElements = (sortedNumbers[i - 1], sortedNumbers[i])\n\
    \        }\n    }\n    return closestElements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013645
