name: HumanEval_27_flip_case
language: swift
prompt: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
  \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
  \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
completions: ["    return String(string.map {\n        switch $0 {\n        case \"\
    a\"...\"z\":\n            return String($0).uppercased()\n        case \"A\"...\"\
    Z\":\n            return String($0).lowercased()\n        default:\n         \
    \   return String($0)\n        }\n    })", "    var flipped_string = \"\"\n  \
    \  for char in string {\n        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string", "    return string.map { char in\n\
    \        if char.isUppercase {\n            return char.lowercased()\n       \
    \ } else {\n            return char.uppercased()\n        }\n    }", '    return
    String(string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() })', " \
    \   return string.map { (char: Character) -> Character in\n        return char.isLowercase\
    \ ? char.uppercased() : char.lowercased()\n    }", "    return string.map {\n\
    \        if $0.isUppercase {\n            return $0.lowercased()\n        } else\
    \ {\n            return $0.uppercased()\n        }\n    }", '    return ""', " \
    \   return String(string.map {\n        if $0.isLowercase { return $0.uppercased()\
    \ }\n        else { return $0.lowercased() }\n    })", "    var flipped = \"\"\
    \n    for letter in string {\n        flipped += String(letter.lowercased() ==\
    \ letter ? letter.uppercased() : letter.lowercased())\n    }\n    return flipped",
  "  return String(string.characters.map {\n    $0.isLowercase ? Character($0.uppercased())\
    \ : Character($0.lowercased())\n  })", "    var result = \"\"\n    for letter\
    \ in string {\n        if letter.isUppercase {\n            result.append(letter.lowercased())\n\
    \        } else {\n            result.append(letter.uppercased())\n        }\n\
    \    }\n    return result", "    var new_string = \"\"\n    for character in string\
    \ {\n        let string = String(character)\n        let upper = string.uppercased()\n\
    \        let lower = string.lowercased()\n        if string == upper {\n     \
    \       new_string += lower\n        } else if string == lower {\n           \
    \ new_string += upper\n        } else {\n            new_string += string\n  \
    \      }\n    }\n    return new_string", '    return String(string.map { $0.isUppercase
    ? $0.lowercased() : $0.uppercased() })', '    return string.map { $0.isLowercase
    ? $0.uppercased() : $0.lowercased() }', '    return string.map { $0.isUppercase
    ? $0.lowercased() : $0.uppercased() }', '    return String(string.map { $0.isLowercase
    ? Character($0.uppercased()) : Character($0.lowercased()) })', "    return string.characters.map({\n\
    \        let character = String($0)\n        if character.lowercased() == character\
    \ {\n            return character.uppercased()\n        } else {\n           \
    \ return character.lowercased()\n        }\n    }).joined()", "    return string.map\
    \ {\n        $0.isUppercase ? $0.lowercased() : $0.uppercased()\n    }", "   \
    \ return String(string.map {\n        if $0.isUppercase {\n            return\
    \ $0.lowercased()\n        } else {\n            return $0.uppercased()\n    \
    \    }\n    })", "    var result: String = \"\"\n    for char in string {\n  \
    \      if char.isUppercase {\n            result.append(char.lowercased())\n \
    \       } else {\n            result.append(char.uppercased())\n        }\n  \
    \  }\n    return result", "    var newString = \"\"\n    for character in string\
    \ {\n        if character.isUppercase {\n            newString.append(character.lowercased())\n\
    \        } else {\n            newString.append(character.uppercased())\n    \
    \    }\n    }\n    return newString", "    \n    var newString = \"\"\n    \n\
    \    for char in string {\n        let str = String(char)\n        if str.lowercased()\
    \ == str {\n            newString += str.uppercased()\n        } else {\n    \
    \        newString += str.lowercased()\n        }\n    }\n    \n    return newString",
  "    var word = \"\"\n    for character in string {\n        if character.isUppercase\
    \ {\n            word.append(character.lowercased())\n        } else {\n     \
    \       word.append(character.uppercased())\n        }\n    }\n    return word",
  "    return String(string.map {\n        if \"a\"...\"z\" ~= $0 {\n            return\
    \ Character(UnicodeScalar(UInt8(ascii: \"A\")! + UInt8(ascii: $0)! - UInt8(ascii:\
    \ \"a\")!)!)\n        } else if \"A\"...\"Z\" ~= $0 {\n            return Character(UnicodeScalar(UInt8(ascii:\
    \ \"a\")! + UInt8(ascii: $0)! - UInt8(ascii: \"A\")!)!)\n        } else {\n  \
    \          return $0\n        }\n    })", "    // TODO: Flip the case of a given\
    \ string\n    return \"\"", "    var output = \"\"\n    for character in string\
    \ {\n        if(character.isUppercase) {\n            output.append(character.lowercased())\n\
    \        } else {\n            output.append(character.uppercased())\n       \
    \ }\n    }\n    return output", "    var flipped = \"\"\n    for character in\
    \ string {\n        let string = String(character)\n        if string.uppercased()\
    \ == string {\n            flipped += string.lowercased()\n        } else {\n\
    \            flipped += string.uppercased()\n        }\n    }\n    return flipped",
  '    return string.unicodeScalars.map { $0.value < 96 ? Character(UnicodeScalar($0.value
    + 32)!) : Character(UnicodeScalar($0.value - 32)!) }.reduce("", +)', '    return
    string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }', "    var newString\
    \ = \"\"\n    for char in string {\n        let stringChar = String(char)\n  \
    \      if stringChar == stringChar.uppercased() {\n            newString += stringChar.lowercased()\n\
    \        } else {\n            newString += stringChar.uppercased()\n        }\n\
    \    }\n    return newString", "    return string.lowercased().map {\n       \
    \ $0.isUppercase ? $0.lowercased() : $0.uppercased()\n    }", '  return string.map
    { $0.isUppercase ? $0.lowercased() : $0.uppercased() }', "    var result = \"\"\
    \n    for char in string {\n        result += isupper(char: char) ? tolower(char:\
    \ char) : toupper(char: char)\n    }\n    return result", "    var string = string\n\
    \    for index in string.indices {\n        if string[index].isUppercase {\n \
    \           string.replaceSubrange(index...index, with: String(string[index]).lowercased())\n\
    \        } else {\n            string.replaceSubrange(index...index, with: String(string[index]).uppercased())\n\
    \        }\n    }\n    return string", "    let chars = string.map { c -> Character\
    \ in\n        if c.isLowercase {\n            return c.uppercased()\n        }\
    \ else {\n            return c.lowercased()\n        }\n    }\n    return String(chars)",
  "  //TODO: Add implementation here\n  return \"\"", "    let characters = string.unicodeScalars.map\
    \ {\n        let char = $0\n        let isUppercase = char.value >= 65 && char.value\
    \ <= 90\n        let isLowercase = char.value >= 97 && char.value <= 122\n   \
    \     return isUppercase ? Character(UnicodeScalar(char.value + 32)!) : isLowercase\
    \ ? Character(UnicodeScalar(char.value - 32)!) : Character(char)\n    }\n    return\
    \ String(characters)", "    let original = Array(string)\n    var new = [Character]()\n\
    \    for letter in original {\n        if letter.isUppercase {\n            new.append(letter.lowercased())\n\
    \        } else {\n            new.append(letter.uppercased())\n        }\n  \
    \  }\n    return String(new)", '    return string.map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() }', "    var newString = \"\"\n    for char in string {\n  \
    \      if char.isLowercase {\n            newString.append(char.uppercased())\n\
    \        } else {\n            newString.append(char.lowercased())\n        }\n\
    \    }\n    return newString", '    return string.map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() }', "    var result = \"\"\n    for c in string {\n        if\
    \ c.isUppercase {\n            result.append(c.lowercased())\n        } else {\n\
    \            result.append(c.uppercased())\n        }\n    }\n    return result",
  '    return string.map { $0.isLowercase ? $0.uppercased() : $0.lowercased() }',
  "    let lowercased = string.lowercased()\n    let uppercased = string.uppercased()\n\
    \    var result = \"\"\n    for (index, char) in string.enumerated() {\n     \
    \   let lowercasedChar = lowercased[lowercased.index(lowercased.startIndex, offsetBy:\
    \ index)]\n        let uppercasedChar = uppercased[uppercased.index(uppercased.startIndex,\
    \ offsetBy: index)]\n        if char == lowercasedChar {\n            result.append(uppercasedChar)\n\
    \        } else {\n            result.append(lowercasedChar)\n        }\n    }\n\
    \    return result", '    return string.map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() }', '    return String(string.map { $0.isLowercase ? Character($0.uppercased())
    : Character($0.lowercased()) })', "    var flipped_string = \"\"\n    for char\
    \ in string {\n        if char.isUppercase {\n            flipped_string.append(char.lowercased())\n\
    \        } else {\n            flipped_string.append(char.uppercased())\n    \
    \    }\n    }\n    return flipped_string", "    let str = string.characters.map({$0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased()})\n    return String(str)", "  return string.map\
    \ { char in\n    return String(char).range(of: \"A..Z\", options: .regularExpression)\
    \ != nil ? String(char).lowercased() : String(char).uppercased()\n  }.joined()",
  '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }',
  '    return String(string.map {$0.isLowercase ? Character($0.uppercased()) : Character($0.lowercased())})',
  "    let flipped = string.map {\n        char in\n        if char.isUppercase {\n\
    \            return char.lowercased()\n        } else {\n            return char.uppercased()\n\
    \        }\n    }\n    return String(flipped)", '    return ""', '    return ""',
  '    return ""', "  var characters = Array(string)\n  for i in 0..<characters.count\
    \ {\n    let c = characters[i]\n    let s = String(c)\n    if s.lowercased() ==\
    \ s {\n      characters[i] = Character(s.uppercased())\n    } else {\n      characters[i]\
    \ = Character(s.lowercased())\n    }\n  }\n  return String(characters)", "   \
    \ var result = \"\"\n    for char in string {\n        if char.isUppercase {\n\
    \            result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n\
    \        }\n    }\n    return result", "    var result = \"\"\n    for character\
    \ in string {\n        let c = character.uppercased()\n        if c == character\
    \ {\n            result.append(character.lowercased())\n        } else {\n   \
    \         result.append(c)\n        }\n    }\n    return result", "  return string.characters.map\
    \ {\n    if $0.isLetter {\n      return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n\
    \    }\n    return $0\n  }.reduce(\"\", +)", "    var result = \"\"\n    for character\
    \ in string {\n        if character.isUppercase {\n            result.append(character.lowercased())\n\
    \        } else {\n            result.append(character.uppercased())\n       \
    \ }\n    }\n    return result", '    return String(string.map { Character(String($0).uppercased())
    })', "    return String(string.characters.map {\n        $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n    })", '    return string.uppercased()', '    return String(string.map
    { $0.isUppercase ? $0.lowercased() : $0.uppercased() })', "    return String(string.map\
    \ { char in\n        if char.isUppercase {\n            return char.lowercased()\n\
    \        } else {\n            return char.uppercased()\n        }\n    })", " \
    \ return string.map { char in\n    let str = String(char)\n    if str.uppercased()\
    \ == str {\n      return str.lowercased()\n    } else {\n      return str.uppercased()\n\
    \    }\n  }", '    return string.reversed().map {String($0).lowercased() == String($0)
    ? String($0).uppercased() : String($0).lowercased()}', '    return String(string.map
    { $0.isUppercase ? $0.lowercased() : $0.uppercased() })', "    var flippedString\
    \ = \"\"\n    for letter in string {\n        flippedString += String(letter).lowercased()\
    \ == String(letter) ? String(letter).uppercased() : String(letter).lowercased()\n\
    \    }\n    return flippedString", "    var result = \"\"\n    for s in string\
    \ {\n        result += s.isUppercase ? s.lowercased() : s.uppercased()\n    }\n\
    \    return result", "    return String(string.map { (char) -> Character in\n\
    \        if char.isUppercase {\n            return Character(char.lowercased())\n\
    \        } else {\n            return Character(char.uppercased())\n        }\n\
    \    })", '    return string.map { $0.isLowercase ? $0.uppercased() : $0.lowercased()
    }', "    let letters = string.map { letter -> String in\n        if let lowercasedLetter\
    \ = letter.lowercased().first, letter == lowercasedLetter {\n            return\
    \ String(letter).uppercased()\n        } else if let uppercasedLetter = letter.uppercased().first,\
    \ letter == uppercasedLetter {\n            return String(letter).lowercased()\n\
    \        } else {\n            return String(letter)\n        }\n    }\n    return\
    \ letters.joined()", "    var result = \"\"\n    for character in string {\n \
    \       if character.isLowercase {\n            result.append(character.uppercased())\n\
    \        } else {\n            result.append(character.lowercased())\n       \
    \ }\n    }\n    return result", "    return string.map {\n        if let char\
    \ = $0.lowercased().first {\n            return char.isUppercase ? char.lowercased()\
    \ : char.uppercased()\n        }\n        return $0\n    }", "    var flipped_string\
    \ = \"\"\n    for char in string {\n        if \"a\"...\"z\" ~= char {\n     \
    \       flipped_string.append(char.uppercased())\n        } else if \"A\"...\"\
    Z\" ~= char {\n            flipped_string.append(char.lowercased())\n        }\
    \ else {\n            flipped_string.append(char)\n        }\n    }\n    return\
    \ flipped_string", '    return string.lowercased().map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() }', "    return string.map {\n        char in\n        if char.isLowercase\
    \ {\n            return char.uppercased()\n        } else {\n            return\
    \ char.lowercased()\n        }\n    }", '    return string.uppercased()', "  \
    \  let characters = string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased()\
    \ }\n    return String(characters)", "    let uppercase = CharacterSet.uppercaseLetters\n\
    \    let lowercase = CharacterSet.lowercaseLetters\n    var chars = [Character]()\n\
    \    for char in string.characters {\n        let stringChar = String(char)\n\
    \        if uppercase.contains(stringChar.unicodeScalars.first!) {\n         \
    \   chars.append(Character(stringChar.lowercased()))\n        } else if lowercase.contains(stringChar.unicodeScalars.first!)\
    \ {\n            chars.append(Character(stringChar.uppercased()))\n        } else\
    \ {\n            chars.append(char)\n        }\n    }\n    return String(chars)",
  '    return String(string.map({ $0.isUppercase ? $0.lowercased() : $0.uppercased()
    }))', "    var flipped = String()\n    for char in string {\n        if char.isUppercase\
    \ {\n            flipped.append(char.lowercased())\n        } else {\n       \
    \     flipped.append(char.uppercased())\n        }\n    }\n    return flipped",
  "    var newStr = \"\"\n    for char in string {\n        if char.isUppercase {\n\
    \            newStr.append(char.lowercased())\n        } else {\n            newStr.append(char.uppercased())\n\
    \        }\n    }\n    return newStr", "    var result: String = \"\"\n    for\
    \ char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result", '    return String(string.map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() })', "  var output = \"\"\n  for char in string {\n    if char.isUppercase\
    \ {\n      output.append(char.lowercased())\n    } else {\n      output.append(char.uppercased())\n\
    \    }\n  }\n  return output", '    return string.map { $0.isLowercase ? $0.uppercased()
    : $0.lowercased() }', '    return string.uppercased()', "    return string.unicodeScalars.reduce(\"\
    \") { current, char in\n        let flipped: String\n        if char.isASCII {\n\
    \            let flippedScalar = char.isUppercase ? char.lowercaseASCIIScalar\
    \ : char.uppercaseASCIIScalar\n            flipped = String(Character(flippedScalar))\n\
    \        } else {\n            flipped = String(char)\n        }\n        return\
    \ current + flipped\n    }", "    var new_string = \"\"\n    for char in string\
    \ {\n        if char.isUppercase {\n            new_string.append(char.lowercased())\n\
    \        } else {\n            new_string.append(char.uppercased())\n        }\n\
    \    }\n    return new_string", "    return string.map {\n        if $0.isLowercase\
    \ {\n            return $0.uppercased()\n        } else {\n            return\
    \ $0.lowercased()\n        }\n    }", "    var flipped = \"\"\n    for char in\
    \ string {\n        if char.isUppercase {\n            flipped.append(char.lowercased())\n\
    \        } else {\n            flipped.append(char.uppercased())\n        }\n\
    \    }\n    return flipped", "  return string.characters.map { c in\n    switch\
    \ c {\n    case \"a\"...\"z\":\n      return String(c).uppercased()\n    case\
    \ \"A\"...\"Z\":\n      return String(c).lowercased()\n    default:\n      return\
    \ String(c)\n    }\n  }.joined()", "    let aStr = string.characters.map({\n \
    \       switch $0 {\n        case \"a\"...\"z\":\n            return Character(String($0).uppercased())\n\
    \        case \"A\"...\"Z\":\n            return Character(String($0).lowercased())\n\
    \        default:\n            return $0\n        }\n    })\n    return String(aStr)",
  "    var result = \"\"\n    for ch in string {\n        if ch.isUppercase {\n  \
    \          result.append(ch.lowercased())\n        } else {\n            result.append(ch.uppercased())\n\
    \        }\n    }\n    return result", "    var flipped = \"\"\n    for c in string\
    \ {\n        if (c.isLowercase) {\n            flipped.append(c.uppercased())\n\
    \        } else {\n            flipped.append(c.lowercased())\n        }\n   \
    \ }\n    return flipped", '    return String(string.map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() })', '    return ""', "    var string = string\n    for index\
    \ in string.indices {\n        let lowercase = CharacterSet.lowercaseLetters\n\
    \        let uppercase = CharacterSet.uppercaseLetters\n        if lowercase.contains(UnicodeScalar(String(string[index]))!)\
    \ {\n            string.replaceSubrange(index...index, with: String(string[index]).uppercased())\n\
    \        } else if uppercase.contains(UnicodeScalar(String(string[index]))!) {\n\
    \            string.replaceSubrange(index...index, with: String(string[index]).lowercased())\n\
    \        }\n    }\n    return string", "    //let a = string.uppercased()\n  \
    \  //let b = string.lowercased()\n    var c = \"\"\n    for ch in string {\n \
    \       if ch.isUppercase {\n            c.append(ch.lowercased())\n        }\
    \ else {\n            c.append(ch.uppercased())\n        }\n    }\n    return\
    \ c", "    return String(string.characters.map({\n        char in\n        if\
    \ char.lowercased() == char {\n            return char.uppercased()\n        }\
    \ else {\n            return char.lowercased()\n        }\n    }))", "    var\
    \ changedString = string\n    for (i, char) in string.enumerated() {\n       \
    \ if char.isUppercase {\n            changedString.replaceSubrange(i...i, with:\
    \ String(char).lowercased())\n        } else if char.isLowercase {\n         \
    \   changedString.replaceSubrange(i...i, with: String(char).uppercased())\n  \
    \      }\n    }\n    return changedString", "  var result = string\n  for (idx,\
    \ character) in string.enumerated() {\n    result.replaceSubrange(idx...idx, with:\
    \ (character.isUppercase ? String(character).lowercased() : String(character).uppercased()))\n\
    \  }\n  return result", '    return string.reversed().map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() }.joined()', "    return string.map {\n        switch $0 {\n\
    \        case \"a\"...\"z\":\n            return String($0).uppercased()\n   \
    \     case \"A\"...\"Z\":\n            return String($0).lowercased()\n      \
    \  default:\n            return String($0)\n        }\n    }", '    return string.map
    { $0.isLowercase ? $0.uppercased() : $0.lowercased() }', "    return string.characters.map\
    \ {\n        char in\n        if char.isUppercase {\n            return char.lowercased()\n\
    \        } else {\n            return char.uppercased()\n        }\n    }.reduce(\"\
    \", +)", '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased()
    }', "    var string_characters = Array(string)\n    for (index, char) in string_characters.enumerated()\
    \ {\n        if CharacterSet.uppercaseLetters.contains(char.unicodeScalars.first!)\
    \ {\n            string_characters[index] = Character(String(char).lowercased())\n\
    \        } else if CharacterSet.lowercaseLetters.contains(char.unicodeScalars.first!)\
    \ {\n            string_characters[index] = Character(String(char).uppercased())\n\
    \        }\n    }\n    return String(string_characters)", "    return string.map\
    \ {\n        return $0.isLowercase ? $0.uppercased() : $0.lowercased()\n    }",
  '    return ""', "    var newString = \"\"\n    for char in string {\n        switch\
    \ char {\n        case \"a\"...\"z\":\n            newString.append(char.uppercased())\n\
    \        case \"A\"...\"Z\":\n            newString.append(char.lowercased())\n\
    \        default:\n            newString.append(char)\n        }\n    }\n    return\
    \ newString", "    let flipped_string = string.map { char in\n        return char.isLowercase\
    \ ? char.uppercased() : char.lowercased()\n    }\n    return String(flipped_string)",
  '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }',
  "    return string.map {\n        switch $0 {\n        case \"a\"...\"z\":\n   \
    \         return String($0).uppercased()\n        case \"A\"...\"Z\":\n      \
    \      return String($0).lowercased()\n        default:\n            return String($0)\n\
    \        }\n    }", "    let chars = string.map {\n        $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased())\n    }\n    return String(chars)", "    let lowercased\
    \ = string.lowercased()\n    var flipped = \"\"\n    for (index, char) in string.enumerated()\
    \ {\n        flipped.append(lowercased[index] == char ? char.uppercased() : char.lowercased())\n\
    \    }\n    return flipped", "    let array = string.map { (char) -> Character\
    \ in\n        if char.isUppercase {\n            return char.lowercased()\n  \
    \      } else {\n            return char.uppercased()\n        }\n    }\n    return\
    \ String(array)", "    var newString = \"\"\n    for char in string {\n      \
    \  if char.isUppercase {\n            newString.append(char.lowercased())\n  \
    \      } else {\n            newString.append(char.uppercased())\n        }\n\
    \    }\n    return newString", "    return String(string.characters.map { char\
    \ in\n        if char.isUppercase {\n            return char.lowercased()\n  \
    \      } else {\n            return char.uppercased()\n        }\n    })", " \
    \   return String(string.map { char in\n        if char.isUppercase {\n      \
    \      return char.lowercased()\n        } else {\n            return char.uppercased()\n\
    \        }\n    })", "    var newString = \"\"\n    for s in string {\n      \
    \  let c = String(s)\n        if c.lowercased() == c {\n            newString.append(c.uppercased())\n\
    \        } else {\n            newString.append(c.lowercased())\n        }\n \
    \   }\n    return newString", "    return string.map { (string) -> Character in\n\
    \        if string.isLowercase {\n            return string.uppercased()\n   \
    \     } else {\n            return string.lowercased()\n        }\n    }", '    return
    string.uppercased()', "    \n    var flippedString = \"\"\n    \n    for letter\
    \ in string {\n        if letter.isLowercase {\n            flippedString.append(letter.uppercased())\n\
    \        } else {\n            flippedString.append(letter.lowercased())\n   \
    \     }\n    }\n    \n    return flippedString", "    var new_string = \"\"\n\
    \    for i in string {\n        if(i.isUppercase){\n            new_string +=\
    \ String(i).lowercased()\n        } else {\n            new_string += String(i).uppercased()\n\
    \        }\n    }\n    return new_string", "    var out = \"\"\n    for c in string\
    \ {\n        let cl = Character(String(c).lowercased())\n        if (cl == c)\
    \ {\n            out.append(Character(String(c).uppercased()))\n        } else\
    \ {\n            out.append(cl)\n        }\n    }\n    return out", "    var flipped_str\
    \ = \"\"\n    for ch in string {\n        if ch.isUppercase {\n            flipped_str.append(ch.lowercased())\n\
    \        } else {\n            flipped_str.append(ch.uppercased())\n        }\n\
    \    }\n    return flipped_str", "    var newString = \"\"\n    for char in string\
    \ {\n        newString += String(char.flipCase())\n    }\n    return newString",
  "    var flipped = \"\"\n    for char in string {\n        if char.isUppercase {\n\
    \            flipped.append(char.lowercased())\n        } else {\n           \
    \ flipped.append(char.uppercased())\n        }\n    }\n    return flipped", " \
    \   return string.map { (character) -> Character in\n        let lowercased =\
    \ character.lowercased()\n        if character == lowercased {\n            return\
    \ character.uppercased()\n        } else {\n            return lowercased\n  \
    \      }\n    }", '    return string.map { $0.isLowercase ? $0.uppercased() :
    $0.lowercased() }', '    return ""', "    var result = \"\"\n    for char in string\
    \ {\n        let scalar = char.unicodeScalars.first!\n        if scalar.isASCII\
    \ {\n            if scalar.isUppercase {\n                result.append(String(char).lowercased())\n\
    \            } else if scalar.isLowercase {\n                result.append(String(char).uppercased())\n\
    \            } else {\n                result.append(char)\n            }\n  \
    \      } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result", "    \n    var flipped = \"\"\n    \n    for c in string {\n      \
    \  if c.isUppercase {\n            flipped.append(c.lowercased())\n        } else\
    \ {\n            flipped.append(c.uppercased())\n        }\n    }\n    \n    return\
    \ flipped", '    return string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased()
    }', "    return string.map { char in\n        switch char {\n        case \"a\"\
    ...\"z\":\n            return String(char).uppercased()\n        case \"A\"...\"\
    Z\":\n            return String(char).lowercased()\n        default:\n       \
    \     return String(char)\n        }\n    }", "    var flipped: String = \"\"\n\
    \    for character in string {\n        if is_upper(character: character) {\n\
    \            flipped.append(String(character).lowercased())\n        } else {\n\
    \            flipped.append(String(character).uppercased())\n        }\n    }\n\
    \    return flipped", "    var new_string = \"\"\n    for char in string {\n \
    \       if let lowercase = char.lowercased().first, char == lowercase {\n    \
    \        new_string.append(char.uppercased())\n        } else if let uppercase\
    \ = char.uppercased().first, char == uppercase {\n            new_string.append(char.lowercased())\n\
    \        } else {\n            new_string.append(char)\n        }\n    }\n   \
    \ return new_string", '    return String(string.characters.map { $0.isUpper ?
    String($0).lowercased() : String($0).uppercased() })', "    return String(string.map\
    \ { char in\n        if char.isLowercase {\n            return char.uppercased()\n\
    \        } else {\n            return char.lowercased()\n        }\n    })", '    return
    string.map { $0.isUppercase ? $0.lowercased() : $0.uppercased() }', "    return\
    \ string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n\
    \        } else {\n            return $0.uppercased()\n        }\n    }", "  \
    \  return string.map { character in\n        if character.isLowercase {\n    \
    \        return character.uppercased()\n        } else {\n            return character.lowercased()\n\
    \        }\n    }", "    var result = \"\"\n    for c in string {\n        if\
    \ c.isUppercase {\n            result.append(c.lowercased())\n        } else {\n\
    \            result.append(c.uppercased())\n        }\n    }\n    return result",
  "    var newString = \"\"\n    for char in string {\n        if let newChar = Character(flip_case(char:\
    \ char)) {\n            newString.append(newChar)\n        }\n    }\n    return\
    \ newString", "    return String(string.map { char in\n        if char.isUppercase\
    \ {\n            return char.lowercased()\n        } else {\n            return\
    \ char.uppercased()\n        }\n    })", "    return string.map {\n        $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased()\n    }", "    var flipped_string = \"\"\n\
    \    let length = string.count\n    for i in 0..<length {\n        let character\
    \ = string[string.index(string.startIndex, offsetBy: i)]\n        let unicode\
    \ = character.unicodeScalars\n        let flipped_character = Character(unicode.first!.value\
    \ ^ 1 << 5)\n        flipped_string.append(flipped_character)\n    }\n    return\
    \ flipped_string", "    var flip: String = \"\"\n    for char in string {\n  \
    \      switch char {\n        case \"a\"...\"z\":\n            flip.append(char.uppercased())\n\
    \        case \"A\"...\"Z\":\n            flip.append(char.lowercased())\n   \
    \     default:\n            flip.append(char)\n        }\n    }\n    return flip",
  "    let lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n    let uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    var result = String()\n    for char in string {\n        if let index =\
    \ lowercase.index(of: char) {\n            result.append(uppercase[index])\n \
    \       } else if let index = uppercase.index(of: char) {\n            result.append(lowercase[index])\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result", "  let chars = Array(string)\n  let flipped: [Character] = chars.map\
    \ {\n    if $0.isLowercase {\n      return Character($0.uppercased())\n    } else\
    \ {\n      return Character($0.lowercased())\n    }\n  }\n  return String(flipped)",
  "    var result = \"\"\n    for character in string {\n        if character.isUppercase\
    \ {\n            result.append(character.lowercased())\n        } else {\n   \
    \         result.append(character.uppercased())\n        }\n    }\n    return\
    \ result", "    let upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let lower = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var result = \"\"\n    for char in string {\n\
    \        if let index = upper.index(of: char) {\n            result.append(lower[index])\n\
    \        } else if let index = lower.index(of: char) {\n            result.append(upper[index])\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result", "    return String(string.uppercased().characters.map {\n        if\
    \ CharacterSet.uppercaseLetters.contains($0.unicodeScalars.first!) {\n       \
    \     return Character(String($0).lowercased())\n        } else {\n          \
    \  return Character(String($0).uppercased())\n        }\n    })", "  return string.reduce(\"\
    \") { (result, char) in\n    let stringChar = String(char)\n    if stringChar\
    \ == stringChar.uppercased() {\n      return result + stringChar.lowercased()\n\
    \    } else {\n      return result + stringChar.uppercased()\n    }\n  }", " \
    \   return string.map { letter in\n        let lowercased = String(letter).lowercased()\n\
    \        let uppercased = String(letter).uppercased()\n        if lowercased ==\
    \ String(letter) {\n            return uppercased\n        } else {\n        \
    \    return lowercased\n        }\n    }", "    let flipped = string.characters.map\
    \ { character -> Character in\n        if character.isUppercase {\n          \
    \  return character.lowercased()\n        } else {\n            return character.uppercased()\n\
    \        }\n    }\n    return String(flipped)", "    return string.map {\n   \
    \     switch $0 {\n        case \"a\"...\"z\":\n            return String($0).uppercased()\n\
    \        case \"A\"...\"Z\":\n            return String($0).lowercased()\n   \
    \     default:\n            return String($0)\n        }\n    }", "    return\
    \ string.map {\n        $0.isLowercase ? $0.uppercased() : $0.lowercased()\n \
    \   }", "    let myString = string\n    let newString = String(myString.map {\
    \ $0.isUppercase ? $0.lowercased() : $0.uppercased() })\n    return newString",
  "    return string.map {\n        $0.isUppercase ? $0.lowercased() : $0.uppercased()\n\
    \    }", '    return string.map {$0.isUppercase ? $0.lowercased() : $0.uppercased()}',
  "    var flippedString = \"\"\n    for char in string {\n        if isLowerCase(char:\
    \ char) {\n            flippedString.append(String(char).uppercased())\n     \
    \   } else {\n            flippedString.append(String(char).lowercased())\n  \
    \      }\n    }\n    return flippedString", "    return string.map({ (character)\
    \ -> Character in\n        let lowercase = CharacterSet.lowercaseLetters\n   \
    \     let uppercase = CharacterSet.uppercaseLetters\n        let isLowercase =\
    \ lowercase.contains(character.unicodeScalars.first!)\n        let isUppercase\
    \ = uppercase.contains(character.unicodeScalars.first!)\n        if isLowercase\
    \ {\n            return character.uppercased()\n        } else if isUppercase\
    \ {\n            return character.lowercased()\n        } else {\n           \
    \ return character\n        }\n    }).reduce(\"\", +)", "    return string.map\
    \ {\n        $0.isUppercase ? $0.lowercased() : $0.uppercased()\n    }", "   \
    \ \n    var result = \"\"\n    \n    for char in string {\n        if char.isUppercase\
    \ {\n            result.append(char.lowercased())\n        } else {\n        \
    \    result.append(char.uppercased())\n        }\n    }\n    \n    return result",
  "    \n    let characters = Array(string)\n    var output = [Character]()\n    \n\
    \    for char in characters {\n        let char = char.uppercased() == char ?\
    \ char.lowercased() : char.uppercased()\n        output.append(char)\n    }\n\
    \    \n    return String(output)", '    return String(string.map { $0.isLowercase
    ? $0.uppercased() : $0.lowercased() })', '  return string.map { $0.isLowercase
    ? $0.uppercased() : $0.lowercased() }', "    let flip: (Character) -> Character\
    \ = { char in\n        if char.isLowercase {\n            return char.uppercased()\n\
    \        } else {\n            return char.lowercased()\n        }\n    }\n  \
    \  return String(string.map(flip))", '  return string.map { $0.isUppercase ? $0.lowercased()
    : $0.uppercased() }', "    var string_copy = string\n    for character in string_copy.characters\
    \ {\n        string_copy = string_copy.replacingOccurrences(of: String(character),\
    \ with: String(character).flip_case())\n    }\n    return string_copy", "    var\
    \ str = string\n    str = str.lowercased()\n    return str", "    let letters\
    \ = string.map { (letter) -> String in\n        return letter.isLowercase ? letter.uppercased()\
    \ : letter.lowercased()\n    }\n    return letters.joined()", "    \n    return\
    \ string.map { character -> Character in\n        if character.isUppercase {\n\
    \            return character.lowercased()\n        } else {\n            return\
    \ character.uppercased()\n        }\n    }\n    ", "  var flippedString = \"\"\
    \n  for char in string {\n    if char.isUppercase {\n      flippedString.append(char.lowercased())\n\
    \    } else {\n      flippedString.append(char.uppercased())\n    }\n  }\n  return\
    \ flippedString", "    return string.map { (char: Character) -> Character in\n\
    \        if char.isLowercase {\n            return char.uppercased()\n       \
    \ } else {\n            return char.lowercased()\n        }\n    }", "    var\
    \ result: String = \"\"\n    for letter in string {\n        switch letter {\n\
    \        case \"a\"...\"z\":\n            result.append(letter.uppercased())\n\
    \        case \"A\"...\"Z\":\n            result.append(letter.lowercased())\n\
    \        default:\n            result.append(letter)\n        }\n    }\n    return\
    \ result", '    return string.uppercased()', '    return string.map { $0.isUppercase
    ? $0.lowercased() : $0.uppercased() }', "  var result = \"\"\n  for char in string\
    \ {\n    let str = String(char)\n    result += str.lowercased() == str ? str.uppercased()\
    \ : str.lowercased()\n  }\n  return result", "    var result: String = \"\"\n\
    \    for char in string {\n        if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result", "  return String(string.map { (character) -> Character\
    \ in\n    var result = character\n    if result.isUppercase {\n      result =\
    \ result.lowercased()\n    } else if result.isLowercase {\n      result = result.uppercased()\n\
    \    }\n    return result\n  })", "    let flipped = string.map {\n        $0.isLowercase\
    \ ? $0.uppercased() : $0.lowercased()\n    }\n    return String(flipped)", '    return
    String(string.map({$0.isUppercase ? $0.lowercased() : $0.uppercased()}))', " \
    \   let components = string.components(separatedBy: CharacterSet.letters.inverted)\n\
    \    let reversed = components.map { String($0.reversed()) }\n    return reversed.joined()",
  "    let to_flip = { s in s.lowercased() == s ? s.uppercased() : s.lowercased()\
    \ }\n    return string.map { to_flip($0) }", "    var new_string = \"\"\n    for\
    \ char in string {\n        switch char {\n        case \"a\"...\"z\":\n     \
    \       new_string.append(String(char).uppercased())\n        case \"A\"...\"\
    Z\":\n            new_string.append(String(char).lowercased())\n        default:\n\
    \            new_string.append(char)\n        }\n    }\n    return new_string",
  "  let chars = string.compactMap { char -> Character? in\n    switch char {\n  \
    \  case \"a\"...\"z\":\n      return Character(char.uppercased())\n    case \"\
    A\"...\"Z\":\n      return Character(char.lowercased())\n    default:\n      return\
    \ nil\n    }\n  }\n  return String(chars)", "    return string.map { char in\n\
    \        if char.isLowercase {\n            return String(char).uppercased()\n\
    \        } else {\n            return String(char).lowercased()\n        }\n \
    \   }", "    var flipped = \"\"\n    for ch in string {\n        if ch.isUppercase\
    \ {\n            flipped.append(ch.lowercased())\n        } else {\n         \
    \   flipped.append(ch.uppercased())\n        }\n    }\n    return flipped", " \
    \   return string.map {\n        if $0.isLowercase {\n            return $0.uppercased()\n\
    \        } else {\n            return $0.lowercased()\n        }\n    }", "  \
    \  var newString = \"\"\n    for letter in string {\n        if letter.isUppercase\
    \ {\n            newString.append(letter.lowercased())\n        } else {\n   \
    \         newString.append(letter.uppercased())\n        }\n    }\n    return\
    \ newString", '    return String(string.map { $0.isLowercase ? $0.uppercased()
    : $0.lowercased() })', "    // TODO: Implement\n    return \"\"", "    return\
    \ string.map({\n        $0.isLowercase ? $0.uppercased() : $0.lowercased()\n \
    \   }).joined()", '    return String(string.characters.map { $0.isUpper ? Character($0.lowercased())
    : Character($0.uppercased()) })', "    var result: String = \"\"\n    for c in\
    \ string {\n        let upper = String(c).uppercased()\n        if upper == String(c)\
    \ {\n            result.append(contentsOf: String(c).lowercased())\n        }\
    \ else {\n            result.append(contentsOf: upper)\n        }\n    }\n   \
    \ return result"]
stop_tokens:
- "\n}"
