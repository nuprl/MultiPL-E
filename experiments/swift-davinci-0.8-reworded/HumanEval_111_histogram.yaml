name: HumanEval_111_histogram
language: swift
prompt: "\n/// Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n/// of the letter with the most repetition and containing the corresponding\
  \ count.\n/// If several letters have the same occurrence, return all of them.\n\
  /// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"\
  c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n///\
  \ >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test:\
  \ \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String\
  \ : Int]\nfunc histogram(test: String) -> [String : Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" :\
  \ 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
  assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\"\
  \ : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
  \ \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
  \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
  ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
completions: ["    var histogram: [String : Int] = [:]\n    let array = test.components(separatedBy:\
    \ \" \")\n    array.forEach {\n        let string = $0\n        let count = histogram[string]\
    \ ?? 0\n        histogram[string] = count + 1\n    }\n    let maxCount = histogram.values.max()\
    \ ?? 0\n    let chars = histogram.filter {\n        $0.value == maxCount\n   \
    \ }\n    return chars", "    // STUDENT: write your code here\n    return [:]",
  "  let letters = test.split(separator: \" \")\n  let counts = letters.reduce(into:\
    \ [:]) {\n    if let value = $0[String($1)] {\n      $0[String($1)] = value +\
    \ 1\n    } else {\n      $0[String($1)] = 1\n    }\n  }\n  let max = counts.values.max()\
    \ ?? 0\n  return counts.filter { $0.value == max }", "    var occurences: [String\
    \ : Int] = [:]\n    var h: Int = 0\n    var max: Int = 0\n    let letters = test.split(separator:\
    \ \" \")\n    for i in letters {\n        if occurences[String(i)] == nil {\n\
    \            occurences[String(i)] = 1\n        } else {\n            occurences[String(i)]!\
    \ += 1\n        }\n    }\n    for (key, value) in occurences {\n        if value\
    \ > max {\n            max = value\n        }\n    }\n    for (key, value) in\
    \ occurences {\n        if value == max {\n            h += 1\n        }\n   \
    \ }\n    var result: [String : Int] = [:]\n    if h != 1 {\n        for (key,\
    \ value) in occurences {\n            if value == max {\n                result[key]\
    \ = value\n            }\n        }\n    } else {\n        for (key, value) in\
    \ occurences {\n            if value == max {\n                result[key] = value\n\
    \            }\n        }\n    }\n    return result", "    let letters = test.split(separator:\
    \ \" \")\n    let frequency = NSCountedSet(array: letters)\n    let maxCount =\
    \ frequency.map { frequency.count(for: $0) }.max()\n    let mostFrequent = frequency.filter\
    \ { frequency.count(for: $0) == maxCount }\n    return Dictionary(uniqueKeysWithValues:\
    \ mostFrequent.map { ($0 as! String, maxCount!) })", "    let words = test.split(separator:\
    \ \" \")\n    var result = [String : Int]()\n    for word in words {\n       \
    \ if let value = result[String(word)] {\n            result[String(word)] = value\
    \ + 1\n        } else {\n            result[String(word)] = 1\n        }\n   \
    \ }\n    var max = 0\n    for (key, value) in result {\n        if value > max\
    \ {\n            max = value\n        }\n    }\n    var finalResult = [String\
    \ : Int]()\n    for (key, value) in result {\n        if value == max {\n    \
    \        finalResult[key] = value\n        }\n    }\n    return finalResult",
  "    var output = [String : Int]()\n    test.lowercased().split(separator: \" \"\
    ).forEach {\n        if output[String($0)] == nil {\n            output[String($0)]\
    \ = 1\n        } else {\n            output[String($0)]! += 1\n        }\n   \
    \ }\n    return output", "    var result = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    let max = words.reduce(0) { (result, word) -> Int in\n        return\
    \ max(result, word.count)\n    }\n    for word in words {\n        if result[word]\
    \ == nil {\n            result[word] = 1\n        } else {\n            result[word]!\
    \ += 1\n        }\n    }\n    return result", "    var histogram = [String : Int]()\n\
    \    var max: Int = 0\n    for letter in test.components(separatedBy: \" \") {\n\
    \        if histogram[letter] == nil {\n            histogram[letter] = 1\n  \
    \      } else {\n            histogram[letter]! += 1\n        }\n        if histogram[letter]!\
    \ > max {\n            max = histogram[letter]!\n        }\n    }\n    var final\
    \ = [String : Int]()\n    for (key, value) in histogram {\n        if value ==\
    \ max {\n            final[key] = value\n        }\n    }\n    return final",
  '    return [:]', "    let letterList = test.split(separator: \" \")\n    var resultsDictionary\
    \ = [String : Int]()\n    if !test.isEmpty {\n        for letter in letterList\
    \ {\n            if let count = resultsDictionary[String(letter)] {\n        \
    \        resultsDictionary[String(letter)] = count + 1\n            } else {\n\
    \                resultsDictionary[String(letter)] = 1\n            }\n      \
    \  }\n    }\n    return resultsDictionary", "    var hist = [String : Int]()\n\
    \    let array = test.components(separatedBy: \" \")\n    let arrayUnique = Array(Set(array))\n\
    \    let map = arrayUnique.map { (str) -> Int in\n        return array.filter({$0\
    \ == str}).count\n    }\n    for (index, str) in arrayUnique.enumerated() {\n\
    \        hist[str] = map[index]\n    }\n    return hist", "    let arrayOfLetters\
    \ = test.characters.split{$0 == \" \"}.map(String.init)\n    let letters = Set(arrayOfLetters)\n\
    \    var histogram = [String : Int]()\n    var max = 1\n    var maxLetters = [String]()\n\
    \    for i in letters {\n        histogram[i] = arrayOfLetters.filter {$0 == i}.count\n\
    \        if arrayOfLetters.filter {$0 == i}.count == max {\n            maxLetters.append(i)\n\
    \        } else if arrayOfLetters.filter {$0 == i}.count > max {\n           \
    \ max = arrayOfLetters.filter {$0 == i}.count\n            maxLetters = [i]\n\
    \        }\n    }\n    for i in maxLetters {\n        histogram[i] = max\n   \
    \ }\n    return histogram", "    let test = test.lowercased()\n    let alphabet\
    \ = CharacterSet.lowercaseLetters\n    let characters = test.trimmingCharacters(in:\
    \ alphabet.inverted).split(separator: \" \")\n    var histogram = [String : Int]()\n\
    \    for character in characters {\n        if let count = histogram[String(character)]\
    \ {\n            histogram[String(character)] = count + 1\n        } else {\n\
    \            histogram[String(character)] = 1\n        }\n    }\n    return histogram",
  "    let arr = test.split(separator: \" \")\n    var dict = [String : Int]()\n \
    \   for s in arr {\n        if dict[String(s)] == nil {\n            dict[String(s)]\
    \ = 1\n        } else {\n            dict[String(s)]! += 1\n        }\n    }\n\
    \    return dict", "    \n    let charArray = test.components(separatedBy: \"\
    \ \")\n    var stringDict: [String : Int] = [:]\n    \n    for char in charArray\
    \ {\n        if stringDict[char] == nil {\n            stringDict[char] = 1\n\
    \        } else {\n            stringDict[char]! += 1\n        }\n    }\n    \n\
    \    var resultDict: [String : Int] = [:]\n    var maxValue = 0\n    \n    for\
    \ key in stringDict.keys {\n        if resultDict.isEmpty {\n            resultDict[key]\
    \ = stringDict[key]\n            maxValue = stringDict[key]!\n        } else {\n\
    \            if stringDict[key]! > maxValue {\n                resultDict = [:]\n\
    \                resultDict[key] = stringDict[key]\n                maxValue =\
    \ stringDict[key]!\n            } else if stringDict[key]! == maxValue {\n   \
    \             resultDict[key] = stringDict[key]\n            }\n        }\n  \
    \  }\n    \n    return resultDict", "    let letterArray = test.components(separatedBy:\
    \ \" \")\n    var dictionary = [String : Int]()\n    if letterArray.count == 0\
    \ {\n        return dictionary\n    }\n    for letter in letterArray {\n     \
    \   let currentLetter = letter\n        if let letterOccurence = dictionary[currentLetter]\
    \ {\n            dictionary[currentLetter] = letterOccurence + 1\n        } else\
    \ {\n            dictionary[currentLetter] = 1\n        }\n    }\n    var maxValue\
    \ = 0\n    var maxKey = String()\n    for (key, value) in dictionary {\n     \
    \   if value > maxValue {\n            maxValue = value\n            maxKey =\
    \ key\n        }\n    }\n    var maxLetterDictionary = [String : Int]()\n    for\
    \ (key, value) in dictionary {\n        if value == maxValue {\n            maxLetterDictionary[key]\
    \ = value\n        }\n    }\n    return maxLetterDictionary", "    \n    var dictionary:\
    \ [String : Int] = [:]\n    var max = 1\n    \n    for letter in test.components(separatedBy:\
    \ \" \") {\n        let updatedCount = (dictionary[letter] ?? 0) + 1\n       \
    \ dictionary[letter] = updatedCount\n        max = max < updatedCount ? updatedCount\
    \ : max\n    }\n    \n    var histogram: [String : Int] = [:]\n    \n    for (letter,\
    \ count) in dictionary {\n        if count == max {\n            histogram[letter]\
    \ = count\n        }\n    }\n    \n    return histogram", "    let words = test.components(separatedBy:\
    \ \" \")\n    var result = [String : Int]()\n    var highest = 0\n    var highestDict\
    \ = [String : Int]()\n    for word in words {\n        result[word] = (result[word]\
    \ ?? 0) + 1\n        if (result[word] ?? 0) > highest {\n            highest =\
    \ result[word] ?? 0\n            highestDict = [word : highest]\n        } else\
    \ if (result[word] ?? 0) == highest {\n            highestDict[word] = highest\n\
    \        }\n    }\n    return highestDict", "    var histogram = [String : Int]()\n\
    \    let characters = test.characters.split(separator: \" \")\n    for character\
    \ in characters {\n        if let letter = histogram[String(character)] {\n  \
    \          histogram[String(character)] = letter + 1\n        } else {\n     \
    \       histogram[String(character)] = 1\n        }\n    }\n    let newHistogram\
    \ = histogram.filter({$0.value == histogram.values.max()})\n    return newHistogram",
  "    return test.split(separator: \" \").reduce(into: [:]) { (result, letter) in\n\
    \        result[String(letter), default: 0] += 1\n    }", "    // Enter your solution\
    \ here\n    var letters = [String : Int]()\n    var max_occur = 1\n    for letter\
    \ in test.components(separatedBy: \" \") {\n        if letters[letter] == nil\
    \ {\n            letters[letter] = 1\n        } else {\n            letters[letter]!\
    \ += 1\n            if letters[letter]! > max_occur {\n                max_occur\
    \ = letters[letter]!\n            }\n        }\n    }\n    var max_letters = [String\
    \ : Int]()\n    for (letter, value) in letters {\n        if value == max_occur\
    \ {\n            max_letters[letter] = value\n        }\n    }\n    return max_letters",
  "    var histogramResult: [String : Int] = [:]\n    let letterArray = test.components(separatedBy:\
    \ \" \")\n    var maximumOfOccurrence = 0\n    for char in letterArray {\n   \
    \     if var occurenceCount = histogramResult[char] {\n            occurenceCount\
    \ += 1\n            if occurenceCount > maximumOfOccurrence {\n              \
    \  maximumOfOccurrence = occurenceCount\n            }\n            histogramResult[char]\
    \ = occurenceCount\n        } else {\n            histogramResult[char] = 1\n\
    \        }\n    }\n    histogramResult = histogramResult.filter { $0.value ==\
    \ maximumOfOccurrence }\n    return histogramResult", "    \n    return [:]",
  "    // Implement the function here\n    return [:]", "    var result = [String\
    \ : Int]()\n    let letters = test.split(separator: \" \")\n    if letters.count\
    \ > 0 {\n        var max = 0\n        for letter in letters {\n            if\
    \ let count = result[String(letter)] {\n                result[String(letter)]\
    \ = count + 1\n                if count > max {\n                    max = count\n\
    \                }\n            } else {\n                result[String(letter)]\
    \ = 1\n            }\n        }\n        var most = [String : Int]()\n       \
    \ for (key,value) in result {\n            if value == max {\n               \
    \ most[key] = value\n            }\n        }\n        return most\n    }\n  \
    \  return result", "    var result = [String : Int]()\n    var max = 0\n    let\
    \ letters = test.components(separatedBy: \" \")\n    for letter in letters {\n\
    \        if let value = result[letter] {\n            result[letter] = value +\
    \ 1\n            if result[letter]! > max {\n                max = result[letter]!\n\
    \            }\n        } else {\n            result[letter] = 1\n           \
    \ if result[letter]! > max {\n                max = result[letter]!\n        \
    \    }\n        }\n    }\n    var maxLetters = [String : Int]()\n    for (key,\
    \ value) in result {\n        if value == max {\n            maxLetters[key] =\
    \ value\n        }\n    }\n    return maxLetters", '    return [:]', '    return
    ["":""]', "    var myStringArray = test.split(separator: \" \")\n    var myDictionary\
    \ = [String : Int]()\n    for item in myStringArray {\n        if myDictionary[String(item)]\
    \ == nil {\n            myDictionary[String(item)] = 1\n        } else {\n   \
    \         myDictionary[String(item)]! += 1\n        }\n    }\n    return myDictionary",
  "    var dict: [String : Int] = [:]\n    var highestCount = 0\n    var highestLetters:\
    \ [String] = []\n    let testArr = test.components(separatedBy: \" \")\n    for\
    \ i in testArr {\n        dict[i] = dict[i] == nil ? 1 : dict[i]! + 1\n      \
    \  if dict[i]! > highestCount {\n            highestCount = dict[i]!\n       \
    \     highestLetters = [i]\n        } else if dict[i]! == highestCount {\n   \
    \         highestLetters.append(i)\n        }\n    }\n    let newDict: [String\
    \ : Int] = highestLetters.reduce(into: [:]) { $0[$1] = highestCount }\n    return\
    \ newDict", "    \n    var dictionary = [String : Int]()\n    let array = test.components(separatedBy:\
    \ \" \")\n    \n    for word in array {\n        if let wordCount = dictionary[word]\
    \ {\n            dictionary[word] = wordCount + 1\n        } else {\n        \
    \    dictionary[word] = 1\n        }\n    }\n    \n    let maxCount = dictionary.values.max()\n\
    \    var countDictionary = [String : Int]()\n    \n    for (key, value) in dictionary\
    \ {\n        if value == maxCount {\n            countDictionary[key] = value\n\
    \        }\n    }\n    \n    return countDictionary", "    var dict = [String\
    \ : Int]()\n    let testArray = test.components(separatedBy: \" \")\n    for character\
    \ in testArray {\n        if let count = dict[character] {\n            dict[character]\
    \ = count + 1\n        } else {\n            dict[character] = 1\n        }\n\
    \    }\n    return dict", "    var histogram: [String : Int] = [:]\n    let letters\
    \ = test.components(separatedBy: \" \")\n    for letter in letters {\n       \
    \ histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram",
  "    let letters = test.components(separatedBy: \" \")\n    let countedSet = NSCountedSet(array:\
    \ letters)\n    let maxCount = countedSet.max { countedSet.count(for: $0) < countedSet.count(for:\
    \ $1) }\n    let maxLetters = countedSet.allObjects.filter { countedSet.count(for:\
    \ $0) == countedSet.count(for: maxCount!) }\n    return maxLetters.reduce(into:\
    \ [String : Int]()) { $0[$1 as! String] = countedSet.count(for: $1) }", '    return
    [:]', "    return test.components(separatedBy: \" \").reduce(into: [:]) { counts,\
    \ letter in\n        counts[letter, default: 0] += 1\n    }", "    let characters\
    \ = test.characters.map { String($0) }\n    let unique = Set(characters)\n   \
    \ var frequency = [String : Int]()\n    for letter in unique {\n        frequency[letter]\
    \ = characters.filter({ $0 == letter }).count\n    }\n    return frequency", " \
    \   var dict = [String : Int]()\n    for t in test.components(separatedBy: \"\
    \ \") {\n        dict[t] = (dict[t] ?? 0) + 1\n    }\n    return dict", "    var\
    \ histogram: [String : Int] = [:]\n    let letters = test.characters.split{$0\
    \ == \" \"}.map(String.init)\n    for letter in letters {\n        if let count\
    \ = histogram[letter] {\n            histogram[letter] = count + 1\n        }\
    \ else {\n            histogram[letter] = 1\n        }\n    }\n    return histogram",
  "    var histogram = [String : Int]()\n    let letters = test.components(separatedBy:\
    \ \" \")\n    for letter in letters {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n    }\n    return histogram", "    var countDict:\
    \ [String : Int] = [:]\n    let letters = test.split(separator: \" \")\n    for\
    \ letter in letters {\n        if countDict[String(letter)] == nil {\n       \
    \     countDict[String(letter)] = 1\n        } else {\n            countDict[String(letter)]!\
    \ += 1\n        }\n    }\n    let maxCount = countDict.values.max()\n    let maxCountLetter\
    \ = countDict.filter { $0.value == maxCount }\n    return maxCountLetter", " \
    \   let allWords = test.split(separator: \" \")\n    var result = [String : Int]()\n\
    \    for word in allWords {\n        if result[String(word)] == nil {\n      \
    \      result[String(word)] = 1\n        } else {\n            result[String(word)]!\
    \ += 1\n        }\n    }\n    return result", "    // Complete this exercise here\n\
    \    var count = [String : Int]()\n    for character in test.characters {\n  \
    \      if let char = String(character).lowercased().trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\
    \ {\n            if count[char] == nil {\n                count[char] = 1\n  \
    \          } else {\n                count[char]! += 1\n            }\n      \
    \  }\n    }\n    return count", "    var dict = [String : Int]()\n    let words\
    \ = test.components(separatedBy: \" \")\n    if words.count == 0 {\n        return\
    \ dict\n    }\n    var maxOccurrence = 0\n    for word in words {\n        dict[word]\
    \ = (dict[word] ?? 0) + 1\n        maxOccurrence = max(maxOccurrence, dict[word]!)\n\
    \    }\n    var finalDict = [String : Int]()\n    for (key, value) in dict {\n\
    \        if value == maxOccurrence {\n            finalDict[key] = value\n   \
    \     }\n    }\n    return finalDict", "    if test.isEmpty {\n        return\
    \ [:]\n    }\n    var dict = [String : Int]()\n    var testArray = test.split(separator:\
    \ \" \")\n    for letter in testArray {\n        if dict[String(letter)] == nil\
    \ {\n            dict[String(letter)] = 1\n        } else {\n            dict[String(letter)]!\
    \ += 1\n        }\n    }\n    let maxValue = dict.values.max()\n    var newDict\
    \ = [String : Int]()\n    for (key, value) in dict {\n        if value == maxValue\
    \ {\n            newDict[key] = value\n        }\n    }\n    return newDict",
  "    var dict: [String : Int] = [:]\n    let letters = test.split(separator: \"\
    \ \")\n    for letter in letters {\n        if let count = dict[String(letter)]\
    \ {\n            dict[String(letter)] = count + 1\n        } else {\n        \
    \    dict[String(letter)] = 1\n        }\n    }\n    return dict", '    return
    test.isEmpty ? [:] : histogram(test: test.withoutLastCharacter, occurrence: test.lastCharacter)',
  "  var output: [String : Int] = [:]\n  for character in test.characters {\n    guard\
    \ character != \" \" else { continue }\n    output[String(character)] = (output[String(character)]\
    \ ?? 0) + 1\n  }\n  return output", "    var result = [String : Int]()\n    var\
    \ maxKey = \"\"\n    var maxVal = 0\n    var maxArr = [String]()\n    var arr\
    \ = test.components(separatedBy: \" \")\n    for i in 0..<arr.count {\n      \
    \  let currentVal = result[arr[i]]\n        if currentVal == nil {\n         \
    \   result[arr[i]] = 1\n        } else {\n            result[arr[i]] = currentVal!\
    \ + 1\n        }\n        if result[arr[i]]! > maxVal {\n            maxVal =\
    \ result[arr[i]]!\n            maxKey = arr[i]\n            maxArr = [maxKey]\n\
    \        } else if result[arr[i]]! == maxVal {\n            maxArr.append(arr[i])\n\
    \        }\n    }\n    if maxVal == 0 {\n        return [:]\n    }\n    for i\
    \ in 0..<maxArr.count {\n        result[maxArr[i]] = maxVal\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    let split = test.components(separatedBy:\
    \ \" \")\n    for char in split {\n        let count = dict[char] ?? 0\n     \
    \   dict[char] = count + 1\n    }\n    return dict", "    var dict = [String :\
    \ Int]()\n    for char in test.components(separatedBy: \" \") {\n        dict[char]\
    \ = (dict[char] ?? 0) + 1\n    }\n    return dict", "  var dictionary = [String\
    \ : Int]()\n  let array = test.split(separator: \" \")\n  var n = 0\n  while n\
    \ < array.count {\n    if let x = dictionary[String(array[n])] {\n      dictionary[String(array[n])]\
    \ = x + 1\n    } else {\n      dictionary[String(array[n])] = 1\n    }\n    n\
    \ += 1\n  }\n  return dictionary", "    \n    var countDict: [String : Int] =\
    \ [:]\n    let testArr = test.split(separator: \" \")\n    \n    for char in testArr\
    \ {\n        if let letter = countDict[String(char)] {\n            countDict[String(char)]\
    \ = letter + 1\n        } else {\n            countDict[String(char)] = 1\n  \
    \      }\n    }\n    \n    var max = 0\n    var maxDict: [String : Int] = [:]\n\
    \    \n    for char in countDict {\n        if char.value >= max {\n         \
    \   max = char.value\n            maxDict[char.key] = char.value\n        }\n\
    \    }\n    \n    return maxDict", "    let letters = test.split(separator: \"\
    \ \")\n    let sortedLetters = letters.sorted()\n    var occurences: [String :\
    \ Int] = [:]\n    var count = 1\n    var lastLetter = \"\"\n    for letter in\
    \ sortedLetters {\n        if letter == lastLetter {\n            count += 1\n\
    \        } else {\n            occurences[lastLetter] = count\n            count\
    \ = 1\n        }\n        lastLetter = String(letter)\n    }\n    occurences[lastLetter]\
    \ = count\n    occurences.removeValue(forKey: \"\")\n    let sortedOccurences\
    \ = occurences.sorted { (first, second) -> Bool in\n        return first.value\
    \ > second.value\n    }\n    let maxOccurence = sortedOccurences.first?.value\n\
    \    let maxOccurences = sortedOccurences.filter { (key, value) -> Bool in\n \
    \       return value == maxOccurence\n    }\n    var dict: [String : Int] = [:]\n\
    \    for item in maxOccurences {\n        dict[item.key] = item.value\n    }\n\
    \    return dict", "    let lowercaseTest = test.lowercased()\n    let letters\
    \ = lowercaseTest.split(separator: \" \")\n    var letterCounts = [String : Int]()\n\
    \    var maxCount = 0\n    for letter in letters {\n        let letterString =\
    \ String(letter)\n        if let letterCount = letterCounts[letterString] {\n\
    \            letterCounts[letterString] = letterCount + 1\n        } else {\n\
    \            letterCounts[letterString] = 1\n        }\n        if letterCounts[letterString]!\
    \ > maxCount {\n            maxCount = letterCounts[letterString]!\n        }\n\
    \    }\n    if maxCount == 0 {\n        return [:]\n    }\n    var maxLetters\
    \ = [String : Int]()\n    for (letter, count) in letterCounts {\n        if count\
    \ == maxCount {\n            maxLetters[letter] = count\n        }\n    }\n  \
    \  return maxLetters", "    let words = test.split(separator: \" \")\n    var\
    \ dictionary = [String : Int]()\n    var max = 0\n    for word in words {\n  \
    \      if let value = dictionary[String(word)] {\n            dictionary[String(word)]\
    \ = value + 1\n            if value + 1 > max {\n                max = value +\
    \ 1\n            }\n        } else {\n            dictionary[String(word)] = 1\n\
    \            if 1 > max {\n                max = 1\n            }\n        }\n\
    \    }\n    let keys = dictionary.filter { $0.value == max }.map { $0.key }\n\
    \    var newDictionary = [String : Int]()\n    for key in keys {\n        newDictionary[key]\
    \ = max\n    }\n    return newDictionary", "    \n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var histogram = [String : Int]()\n    \n    for character in alphabet {\n\
    \        let character = String(character)\n        var count = 0\n        for\
    \ word in test.characters.split(separator: \" \").map(String.init) {\n       \
    \     if word == character {\n                count += 1\n            }\n    \
    \    }\n        histogram[character] = count\n    }\n    \n    // find largest\
    \ count in dictionary\n    var largestCount = 0\n    for count in histogram.values\
    \ {\n        if count > largestCount {\n            largestCount = count\n   \
    \     }\n    }\n    \n    // create new dictionary with keys of letter(s) with\
    \ largest count\n    var newHistogram = [String : Int]()\n    for (key, value)\
    \ in histogram {\n        if value == largestCount {\n            newHistogram[key]\
    \ = value\n        }\n    }\n    \n    return newHistogram", "    let lowerCase\
    \ = test.lowercased()\n    var result : [String : Int] = [:]\n    let array =\
    \ lowerCase.components(separatedBy: \" \")\n    for item in array {\n        if\
    \ result[item] == nil {\n            result[item] = 1\n        } else {\n    \
    \        result[item] = result[item]! + 1\n        }\n    }\n    return result",
  "    let array = test.split(separator: \" \")\n    var dictionary: [String : Int]\
    \ = [:]\n    for char in array {\n        let key = String(char)\n        if let\
    \ value = dictionary[key] {\n            dictionary[key] = value + 1\n       \
    \ } else {\n            dictionary[key] = 1\n        }\n    }\n    return dictionary",
  "    if test.count == 0 {\n        return [:]\n    }\n    var hist = [String : Int]()\n\
    \    let letters = test.split(separator: \" \")\n    for letter in letters {\n\
    \        if let count = hist[String(letter)] {\n            hist[String(letter)]\
    \ = count + 1\n        } else {\n            hist[String(letter)] = 1\n      \
    \  }\n    }\n    return hist", "    let validCharacters = test.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines).components(separatedBy: \" \")\n    var\
    \ dictionary = [String : Int]()\n    var maxNumber = 0\n    for letter in validCharacters\
    \ {\n        if dictionary[letter] == nil {\n            dictionary[letter] =\
    \ 1\n        } else {\n            dictionary[letter]! += 1\n        }\n     \
    \   if dictionary[letter]! > maxNumber {\n            maxNumber = dictionary[letter]!\n\
    \        }\n    }\n    var maxOccurrenceDictionary = [String : Int]()\n    for\
    \ (letter, number) in dictionary {\n        if number == maxNumber {\n       \
    \     maxOccurrenceDictionary[letter] = number\n        }\n    }\n    return maxOccurrenceDictionary",
  "    \n    var result = [String : Int]()\n    var maxOccurrences = 0\n    \n   \
    \ let testArr = test.components(separatedBy: \" \")\n    \n    for word in testArr\
    \ {\n        if result[word] == nil {\n            result[word] = 1\n        }\
    \ else {\n            result[word]! += 1\n        }\n        if result[word]!\
    \ > maxOccurrences {\n            maxOccurrences = result[word]!\n        }\n\
    \    }\n    \n    for (key, value) in result {\n        if value < maxOccurrences\
    \ {\n            result.removeValue(forKey: key)\n        }\n    }\n    \n   \
    \ return result", "    if test.isEmpty {\n        return [:]\n    }\n    let items\
    \ = test.split(separator: \" \")\n    var histogram: [String : Int] = [:]\n  \
    \  for item in items {\n        histogram[String(item)] = (histogram[String(item)]\
    \ ?? 0) + 1\n    }\n    return histogram", "    let array = test.components(separatedBy:\
    \ \" \")\n    var counts = [String : Int]()\n    var maxCount = 0\n    for i in\
    \ array {\n        counts[i] = (counts[i] ?? 0) + 1\n        if maxCount < counts[i]!\
    \ {\n            maxCount = counts[i]!\n        }\n    }\n    let letters = counts.filter\
    \ { $0.value == maxCount }\n    return letters", "    var dictionary = [String\
    \ : Int]()\n    var count = 1\n    var tempCount = 0\n    var maxCount = 0\n \
    \   var letter = \"\"\n    var tempLetter = \"\"\n    let testArray = test.split(separator:\
    \ \" \")\n    for letter in testArray {\n        for tempLetter in testArray {\n\
    \            if tempLetter == letter {\n                tempCount += 1\n     \
    \       }\n        }\n        if tempCount > maxCount {\n            maxCount\
    \ = tempCount\n        }\n        tempCount = 0\n    }\n    for letter in testArray\
    \ {\n        for tempLetter in testArray {\n            if tempLetter == letter\
    \ {\n                tempCount += 1\n            }\n        }\n        if tempCount\
    \ == maxCount {\n            dictionary[String(letter)] = tempCount\n        }\n\
    \        tempCount = 0\n    }\n    return dictionary", "    var results = [String\
    \ : Int]()\n    if test == \"\" {\n        return results\n    }\n    let words\
    \ = test.split(separator: \" \")\n    for word in words {\n        if let value\
    \ = results[String(word)] {\n            results[String(word)] = value + 1\n \
    \       } else {\n            results[String(word)] = 1\n        }\n    }\n  \
    \  return results", "    var result: [String : Int] = [:]\n    let stringArray\
    \ = test.split(separator: \" \")\n    for str in stringArray {\n        result[String(str)]\
    \ = (result[String(str)] ?? 0) + 1\n    }\n    return result", "    var counts\
    \ = [String : Int]()\n    let words = test.components(separatedBy: \" \")\n  \
    \  for word in words {\n        if let currentCount = counts[word] {\n       \
    \     counts[word] = currentCount + 1\n        } else {\n            counts[word]\
    \ = 1\n        }\n    }\n    let maxCount = counts.values.max()\n    return counts.filter\
    \ { $0.value == maxCount }", "    var dict = [String : Int]()\n    let arrayOfStrings\
    \ = test.components(separatedBy: \" \")\n    var highestValue = 0\n    arrayOfStrings.forEach({\n\
    \        if let value = dict[$0] {\n            dict[$0] = value + 1\n       \
    \ } else {\n            dict[$0] = 1\n        }\n        if highestValue < dict[$0]!\
    \ {\n            highestValue = dict[$0]!\n        }\n    })\n    var result =\
    \ [String : Int]()\n    dict.forEach({\n        if dict[$0.key] == highestValue\
    \ {\n            result[$0.key] = $0.value\n        }\n    })\n    return result",
  "    if (test.isEmpty) {\n        return [:]\n    }\n    var dict = [String : Int]()\n\
    \    let words = test.components(separatedBy: \" \")\n    for word in words {\n\
    \        if let count = dict[word] {\n            dict[word] = count + 1\n   \
    \     } else {\n            dict[word] = 1\n        }\n    }\n    let maxKey =\
    \ dict.max { a, b in a.value < b.value }!.key\n    return dict.filter { $0.value\
    \ == dict[maxKey]! }", "  var result: [String : Int] = [:]\n  let chars = test.characters.split(separator:\
    \ \" \")\n  var max = 0\n  for c in chars {\n    let s = String(c)\n    if result[s]\
    \ == nil {\n      result[s] = 1\n    } else {\n      result[s]! += 1\n    }\n\
    \    if result[s]! > max {\n      max = result[s]!\n    }\n  }\n  var maxList:\
    \ [String : Int] = [:]\n  for (key, value) in result {\n    if value == max {\n\
    \      maxList[key] = value\n    }\n  }\n  return maxList", "  var dict: [String\
    \ : Int] = [:]\n  var max = 0\n  for char in test.split(separator: \" \") {\n\
    \    if let count = dict[String(char)] {\n      dict[String(char)] = count + 1\n\
    \      if count + 1 > max {\n        max = count + 1\n      }\n    } else {\n\
    \      dict[String(char)] = 1\n      if 1 > max {\n        max = 1\n      }\n\
    \    }\n  }\n  let result = dict.filter {\n    $0.value == max\n  }\n  return\
    \ result", "    let words = test.components(separatedBy: \" \")\n    var dict\
    \ = [String : Int]()\n    for word in words {\n        dict[word] = (dict[word]\
    \ ?? 0) + 1\n    }\n    return dict", "    var dic = [String : Int]()\n    var\
    \ max = 0\n    for i in test.characters.split(separator: \" \") {\n        let\
    \ a = String(i)\n        if dic[a] == nil {\n            dic[a] = 1\n        }\
    \ else {\n            dic[a] = dic[a]! + 1\n        }\n        if dic[a]! > max\
    \ {\n            max = dic[a]!\n        }\n    }\n    var dic2 = [String : Int]()\n\
    \    for (i, j) in dic {\n        if j == max {\n            dic2[i] = j\n   \
    \     }\n    }\n    return dic2", "    var dict = [String : Int]()\n    let letters\
    \ = test.split(separator: \" \")\n    for letter in letters {\n        if let\
    \ count = dict[String(letter)] {\n            dict[String(letter)] = count + 1\n\
    \        } else {\n            dict[String(letter)] = 1\n        }\n    }\n  \
    \  return dict", "    var dict = [String : Int]()\n    let strArr = test.components(separatedBy:\
    \ \" \")\n    for letter in strArr {\n        if dict[letter] == nil {\n     \
    \       dict[letter] = 1\n        } else {\n            dict[letter]! += 1\n \
    \       }\n    }\n    return dict", "    var count: [String : Int] = [:]\n   \
    \ for char in test.split(separator: \" \") {\n        if count[String(char)] ==\
    \ nil {\n            count[String(char)] = 1\n        } else {\n            count[String(char)]!\
    \ += 1\n        }\n    }\n    let largestCount = count.values.max()\n    for key\
    \ in count.keys {\n        if count[key] != largestCount {\n            count.removeValue(forKey:\
    \ key)\n        }\n    }\n    return count", '    return histogram(test: test,
    splitBy: " ")', "  var dictionary = [String : Int]()\n  var maxValue = 0\n  for\
    \ letter in test.split(separator: \" \") {\n    if let count = dictionary[String(letter)]\
    \ {\n      dictionary[String(letter)] = count + 1\n    } else {\n      dictionary[String(letter)]\
    \ = 1\n    }\n    if dictionary[String(letter)]! > maxValue {\n      maxValue\
    \ = dictionary[String(letter)]!\n    }\n  }\n  return dictionary.filter({$0.value\
    \ == maxValue})", "    var dict: [String : Int] = [:]\n    var letters = test.components(separatedBy:\
    \ \" \")\n    var max = 0\n    var maxLetters: [String] = []\n    for letter in\
    \ letters {\n        if dict[letter] == nil {\n            dict[letter] = 1\n\
    \        } else {\n            dict[letter]! += 1\n        }\n        if dict[letter]!\
    \ > max {\n            max = dict[letter]!\n            maxLetters = [letter]\n\
    \        } else if dict[letter]! == max {\n            maxLetters.append(letter)\n\
    \        }\n    }\n    var newDict: [String : Int] = [:]\n    for letter in maxLetters\
    \ {\n        newDict[letter] = max\n    }\n    return newDict", '    return [:]',
  "    var dictionary = [String : Int]()\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let value = dictionary[letter] {\n            dictionary[letter]\
    \ = value + 1\n        } else {\n            dictionary[letter] = 1\n        }\n\
    \    }\n    var topCount = 0\n    for letter in dictionary {\n        if letter.value\
    \ > topCount {\n            topCount = letter.value\n        }\n    }\n    var\
    \ topLetters = [String : Int]()\n    for letter in dictionary {\n        if letter.value\
    \ == topCount {\n            topLetters[letter.key] = letter.value\n        }\n\
    \    }\n    return topLetters", "    var letters = [String : Int]()\n    test.components(separatedBy:\
    \ \" \").forEach { (letter) in\n        if let count = letters[letter] {\n   \
    \         letters[letter] = count + 1\n        } else {\n            letters[letter]\
    \ = 1\n        }\n    }\n    return letters", "    var result = [String : Int]()\n\
    \    var max = 0\n    let components = test.components(separatedBy: \" \")\n \
    \   for word in components {\n        if let count = result[word] {\n        \
    \    result[word] = count + 1\n            if result[word]! > max {\n        \
    \        max = result[word]!\n            }\n        } else {\n            result[word]\
    \ = 1\n        }\n    }\n    var res = [String : Int]()\n    for (key, value)\
    \ in result {\n        if value == max {\n            res[key] = value\n     \
    \   }\n    }\n    return res", "    var dict = [String : Int]()\n    let stringArray\
    \ = test.split(separator: \" \")\n    for i in stringArray {\n        dict[String(i)]\
    \ = (dict[String(i)] ?? 0) + 1\n    }\n    let first = dict.values.max()\n   \
    \ let dict1 = dict.filter { (key, value) -> Bool in\n        value == first\n\
    \    }\n    return dict1", "    let array = test.split(separator: \" \")\n   \
    \ var dictionary = [String : Int]()\n    for element in array {\n        if let\
    \ value = dictionary[String(element)] {\n            dictionary[String(element)]\
    \ = value + 1\n        } else {\n            dictionary[String(element)] = 1\n\
    \        }\n    }\n    return dictionary", "    \n    var histo = [String : Int]()\n\
    \    let str = test.characters.split(separator: \" \").map(String.init)\n    \n\
    \    for i in str {\n        if histo[i] == nil {\n            histo[i] = 1\n\
    \        } else {\n            histo[i]! += 1\n        }\n    }\n    \n    var\
    \ top = [String : Int]()\n    var max = 0\n    \n    for i in histo {\n      \
    \  if i.value > max {\n            max = i.value\n        }\n    }\n    \n   \
    \ for i in histo {\n        if i.value == max {\n            top[i.key] = i.value\n\
    \        }\n    }\n    \n    return top", '    return [:]', "    var dic = [String\
    \ : Int]()\n    var maxChar = \"\"\n    var max = 0\n    for char in test.components(separatedBy:\
    \ \" \") {\n        if dic[char] == nil {\n            dic[char] = 1\n       \
    \ } else {\n            dic[char]! += 1\n        }\n        if dic[char]! > max\
    \ {\n            max = dic[char]!\n            maxChar = char\n        }\n   \
    \ }\n    for char in dic.keys {\n        if dic[char] != max {\n            dic.removeValue(forKey:\
    \ char)\n        }\n    }\n    return dic", "    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var dictionary: [String : Int] = [:]\n    for letter in alphabet {\n  \
    \      let key = String(letter)\n        let keyCount = test.components(separatedBy:\
    \ key).count - 1\n        dictionary[key] = keyCount\n    }\n    let maximumCount\
    \ = dictionary.values.max()!\n    let filteredDictionary = dictionary.filter {\
    \ $0.value == maximumCount }\n    return filteredDictionary", "    let array =\
    \ test.components(separatedBy: \" \")\n    var dict = [String : Int]()\n    for\
    \ string in array {\n        dict[string] = dict[string] != nil ? dict[string]!\
    \ + 1 : 1\n    }\n    var max = 0\n    for val in dict.values {\n        if val\
    \ > max {\n            max = val\n        }\n    }\n    var newDict = [String\
    \ : Int]()\n    for (key, val) in dict {\n        if val == max {\n          \
    \  newDict[key] = val\n        }\n    }\n    return newDict", "    let input =\
    \ test.components(separatedBy: \" \")\n    if input.count == 0 {\n        return\
    \ [:]\n    }\n    var temp = [String : Int]()\n    var max = 1\n    for letter\
    \ in input {\n        if let count = temp[letter] {\n            temp[letter]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            temp[letter] = 1\n        }\n\
    \    }\n    return temp.filter { $0.value == max }", "    let filtered = test.split(separator:\
    \ \" \").filter({$0 != \"\"})\n    if filtered.count == 0 { return [:] }\n   \
    \ let dict = histogramRec(arr: filtered)\n    return dict", "    var histogram:\
    \ [String : Int] = [:]\n    let letters = test.components(separatedBy: \" \")\n\
    \    let sortedLetters = letters.sorted()\n    if sortedLetters.count > 0 {\n\
    \        let mostOccurredLetter = sortedLetters[0]\n        let occurrences =\
    \ sortedLetters.filter { $0 == mostOccurredLetter }\n        histogram[mostOccurredLetter]\
    \ = occurrences.count\n    }\n    return histogram", "    var freq = [String :\
    \ Int]()\n    let t = test.components(separatedBy: .whitespaces)\n    for c in\
    \ t {\n        freq[c] = freq[c] != nil ? freq[c]! + 1 : 1\n    }\n    var max\
    \ = 0\n    for (_, f) in freq {\n        if f > max {\n            max = f\n \
    \       }\n    }\n    var hist = [String : Int]()\n    for (c, f) in freq {\n\
    \        if f == max {\n            hist[c] = f\n        }\n    }\n    return\
    \ hist", "    \n    var result = [String : Int]()\n    var letters = test.components(separatedBy:\
    \ \" \")\n    var maximum: Int = 0\n    \n    for letter in letters {\n      \
    \  if var value = result[letter] {\n            value += 1\n            result[letter]\
    \ = value\n        } else {\n            result[letter] = 1\n        }\n    }\n\
    \    \n    for (_, value) in result {\n        if value > maximum {\n        \
    \    maximum = value\n        }\n    }\n    \n    result = result.filter { $0.value\
    \ == maximum }\n    \n    return result", "    var letters = [String : Int]()\n\
    \    var maxValue = 0\n    var maxKeys = [String]()\n    for letter in test.split(separator:\
    \ \" \") {\n        if let value = letters[String(letter)] {\n            letters[String(letter)]\
    \ = value + 1\n        } else {\n            letters[String(letter)] = 1\n   \
    \     }\n        if letters[String(letter)]! > maxValue {\n            maxValue\
    \ = letters[String(letter)]!\n            maxKeys = [String(letter)]\n       \
    \ } else if letters[String(letter)]! == maxValue {\n            maxKeys.append(String(letter))\n\
    \        }\n    }\n    if maxKeys.count == 0 {\n        return [:]\n    }\n  \
    \  for key in maxKeys {\n        letters[key] = maxValue\n    }\n    return letters",
  "    if test.isEmpty {\n        return [:]\n    }\n    var histogram = [String :\
    \ Int]()\n    let array = test.split(separator: \" \")\n    for i in array {\n\
    \        if let val = histogram[String(i)] {\n            histogram[String(i)]\
    \ = val + 1\n        } else {\n            histogram[String(i)] = 1\n        }\n\
    \    }\n    var max = 0\n    for i in histogram {\n        if i.value > max {\n\
    \            max = i.value\n        }\n    }\n    let res = histogram.filter({$0.value\
    \ == max})\n    return res", "    var histogram:[String : Int] = [:]\n    var\
    \ histMax:Int = 0\n    let characters = test.components(separatedBy: \" \")\n\
    \    for character in characters {\n        if let count = histogram[character]\
    \ {\n            histogram[character] = count + 1\n        } else {\n        \
    \    histogram[character] = 1\n        }\n        if histogram[character]! > histMax\
    \ {\n            histMax = histogram[character]!\n        }\n    }\n    let finalHistogram:[String\
    \ : Int] = histogram.filter {\n        (key, value) in\n        return value ==\
    \ histMax\n    }\n    return finalHistogram", "    var histogramDict = [String\
    \ : Int]()\n    let splitTest = test.split(separator: \" \")\n    for character\
    \ in splitTest {\n        let newDict = [String(character) : splitTest.filter{\
    \ $0 == character }.count]\n        histogramDict.merge(newDict) { (_, new) in\
    \ new }\n    }\n    return histogramDict", "    let str = test.split(separator:\
    \ \" \")\n    var result: [String : Int] = [:]\n    var max = 0\n    for char\
    \ in str {\n        if result[String(char)] == nil {\n            result[String(char)]\
    \ = 1\n        } else {\n            result[String(char)]! += 1\n        }\n \
    \       if result[String(char)]! > max {\n            max = result[String(char)]!\n\
    \        }\n    }\n    for char in result.keys {\n        if result[char]! < max\
    \ {\n            result.removeValue(forKey: char)\n        }\n    }\n    return\
    \ result", "    var dictionary: [String : Int] = [:]\n    for char in test.characters\
    \ {\n        if let letter = String(char).lowercased().trimmingCharacters(in:\
    \ .whitespaces) {\n            if let count = dictionary[letter] {\n         \
    \       dictionary[letter] = count + 1\n            } else {\n               \
    \ dictionary[letter] = 1\n            }\n        }\n    }\n    return dictionary",
  "    var count = [String : Int]()\n    var maxOccurrences = 0\n    for letter in\
    \ test.components(separatedBy: \" \") {\n        if let number = count[letter]\
    \ {\n            count[letter] = number + 1\n        } else {\n            count[letter]\
    \ = 1\n        }\n        if let value = count[letter], value > maxOccurrences\
    \ {\n            maxOccurrences = value\n        }\n    }\n    return count.filter\
    \ { $0.value == maxOccurrences }", "    var dictionary = [String : Int]()\n  \
    \  var maxCount = 1\n    var result = [String : Int]()\n    let separated = test.split(separator:\
    \ \" \")\n    for letter in separated {\n        if let count = dictionary[String(letter)]\
    \ {\n            dictionary[String(letter)] = count + 1\n            if count\
    \ + 1 > maxCount {\n                maxCount = count + 1\n            }\n    \
    \    } else {\n            dictionary[String(letter)] = 1\n        }\n    }\n\
    \    for entry in dictionary {\n        if entry.value == maxCount {\n       \
    \     result[entry.key] = entry.value\n        }\n    }\n    return result", " \
    \   let array = test.components(separatedBy: \" \")\n    var dictionary = [String\
    \ : Int]()\n    for word in array {\n        if let value = dictionary[word] {\n\
    \            dictionary[word] = value + 1\n        } else {\n            dictionary[word]\
    \ = 1\n        }\n    }\n    let count = dictionary.count\n    if count == 0 {\n\
    \        return [:]\n    }\n    var max = 0\n    for value in dictionary.values\
    \ {\n        if value > max {\n            max = value\n        }\n    }\n   \
    \ var newDictionary = [String : Int]()\n    for (key, value) in dictionary {\n\
    \        if value == max {\n            newDictionary[key] = value\n        }\n\
    \    }\n    return newDictionary", "    var histogramDictionary = [String : Int]()\n\
    \    let inputArray = test.components(separatedBy: \" \")\n    var maxOccurence\
    \ = 0\n    var maxKeys: [String] = []\n    for element in inputArray {\n     \
    \   if let currentOccurence = histogramDictionary[element] {\n            if currentOccurence\
    \ > maxOccurence {\n                maxOccurence = currentOccurence\n        \
    \        maxKeys = [element]\n            } else if currentOccurence == maxOccurence\
    \ {\n                maxKeys.append(element)\n            }\n            histogramDictionary[element]\
    \ = currentOccurence + 1\n        } else {\n            histogramDictionary[element]\
    \ = 1\n        }\n    }\n    for key in maxKeys {\n        histogramDictionary[key]\
    \ = maxOccurence\n    }\n    return histogramDictionary", "    let word = test.components(separatedBy:\
    \ \" \")\n    var dict = [String : Int]()\n    var max = 1\n    word.forEach {\n\
    \        if let count = dict[$0] {\n            if count > max {\n           \
    \     max = count\n            }\n            dict[$0] = count + 1\n        }\
    \ else {\n            dict[$0] = 1\n        }\n    }\n    return dict.filter {\
    \ $0.value == max }", "  let result = test.replacingOccurrences(of: \" \", with:\
    \ \"\").map {($0, 1)}\n  let histogram = result.reduce(into: [:]) {counts, pair\
    \ in counts[pair.0, default: 0] += pair.1}\n  var max = 0\n  for count in histogram.values\
    \ {\n    if count > max {\n      max = count\n    }\n  }\n  let filtered = histogram.filter\
    \ {(key, value) in value == max}\n  return filtered", "    let characters = test.components(separatedBy:\
    \ \" \")\n    let occurrences = characters.groupCounter\n    let charsWithMaxOccurrence\
    \ = occurrences.maxValue\n    let maxOccurrenceCount = charsWithMaxOccurrence.count\n\
    \    let maxOccurrenceKeys = charsWithMaxOccurrence.keys\n    let result = maxOccurrenceKeys.reduce([String\
    \ : Int]()) { result, key in\n        var result = result\n        result[key]\
    \ = maxOccurrenceCount\n        return result\n    }\n    return result", '    return
    [:]', "    var letterDictionary = [String : Int]()\n    var numberOfOccurences\
    \ = 0\n    let letterArray = test.split(separator: \" \")\n    for letter in letterArray\
    \ {\n        if let count = letterDictionary[String(letter)] {\n            letterDictionary[String(letter)]\
    \ = count + 1\n        } else {\n            letterDictionary[String(letter)]\
    \ = 1\n        }\n    }\n    for (_, value) in letterDictionary {\n        if\
    \ value > numberOfOccurences {\n            numberOfOccurences = value\n     \
    \   }\n    }\n    return letterDictionary.filter({ $0.value == numberOfOccurences\
    \ })", "    var dict = [String : Int]()\n    test.components(separatedBy: \" \"\
    ).forEach { dict[$0] = (dict[$0] ?? 0) + 1 }\n    var maxKey = 0\n    for (_,\
    \ val) in dict {\n        if val > maxKey {\n            maxKey = val\n      \
    \  }\n    }\n    let dictmax = dict.filter({$0.value == maxKey})\n    return dictmax",
  "    var result = [String : Int]()\n    let input = test.split(separator: \" \"\
    )\n    var max = 0\n    for i in input {\n        if result[String(i)] == nil\
    \ {\n            result[String(i)] = 1\n        } else {\n            result[String(i)]!\
    \ += 1\n        }\n        if result[String(i)]! > max {\n            max = result[String(i)]!\n\
    \        }\n    }\n    if max == 0 {\n        return [:]\n    }\n    var ret =\
    \ [String : Int]()\n    for i in result {\n        if i.value == max {\n     \
    \       ret[i.key] = i.value\n        }\n    }\n    return ret", "    var dict\
    \ = [String : Int]()\n    let letters = test.components(separatedBy: \" \")\n\
    \    for letter in letters {\n        dict[letter] = (dict[letter] ?? 0) + 1\n\
    \    }\n    var maxCount = 0\n    for (_, count) in dict {\n        maxCount =\
    \ max(maxCount, count)\n    }\n    return dict.filter { $0.value == maxCount }",
  "    let counts = test.split(separator: \" \").reduce(into: [:]) { counts, word\
    \ in\n        counts[String(word), default: 0] += 1\n    }\n    let maxCount =\
    \ counts.values.max()\n    return counts.filter { $0.value == maxCount }", " \
    \   var result = [String : Int]()\n    var max = 0\n    test.lowercased().split(separator:\
    \ \" \").forEach { char in\n        if var val = result[String(char)] {\n    \
    \        val += 1\n            result[String(char)] = val\n            if val\
    \ > max {\n                max = val\n            }\n        } else {\n      \
    \      result[String(char)] = 1\n        }\n    }\n    var toReturn = [String\
    \ : Int]()\n    result.forEach { (key, value) in\n        if value == max {\n\
    \            toReturn[key] = value\n        }\n    }\n    return toReturn", " \
    \   var result = [String : Int]()\n    var splitResult = test.components(separatedBy:\
    \ \" \")\n    for item in splitResult {\n        if result[item] == nil {\n  \
    \          result[item] = 1\n        } else {\n            result[item]! += 1\n\
    \        }\n    }\n    return result", "    var result = [String : Int]()\n  \
    \  for char in test.split(separator: \" \") {\n        if let key = result[String(char)]\
    \ {\n            result[String(char)] = key + 1\n        } else {\n          \
    \  result[String(char)] = 1\n        }\n    }\n    return result", '    return
    [:]', "    var count = [String : Int]()\n    var maxValue = 1\n    var maxLetters\
    \ = [String]()\n    let letters = test.split(separator: \" \")\n    for letter\
    \ in letters {\n        if count[String(letter)] == nil {\n            count[String(letter)]\
    \ = 1\n        } else {\n            count[String(letter)]! += 1\n        }\n\
    \        if count[String(letter)]! > maxValue {\n            maxValue = count[String(letter)]!\n\
    \            maxLetters = [String(letter)]\n        } else if count[String(letter)]!\
    \ == maxValue {\n            maxLetters.append(String(letter))\n        }\n  \
    \  }\n    for letter in maxLetters {\n        count[letter] = maxValue\n    }\n\
    \    return count", "    let values = test.components(separatedBy: \" \")\n  \
    \  let countedSet = NSCountedSet(array: values)\n    let counts = countedSet.map\
    \ { $0 as! String }.map { countedSet.count(for: $0) }\n    let pairs = zip(values,\
    \ counts)\n    let maxCount = pairs.map { $0.1 }.max() ?? 0\n    return Dictionary(uniqueKeysWithValues:\
    \ pairs.filter { $0.1 == maxCount })", "    let splitArray = test.split(separator:\
    \ \" \")\n    var dict: [String : Int] = [:]\n    for char in splitArray {\n \
    \       dict[String(char)] = (dict[String(char)] ?? 0) + 1\n    }\n    return\
    \ dict", "  if test.isEmpty {\n    return [:]\n  }\n\n  var res = [String : Int]()\n\
    \  let charArray = test.components(separatedBy: \" \")\n  for char in charArray\
    \ {\n    if let _ = res[char] {\n      res[char]! += 1\n    } else {\n      res[char]\
    \ = 1\n    }\n  }\n\n  let maxValue = res.values.max()\n  var result = [String\
    \ : Int]()\n  for (key, value) in res {\n    if value == maxValue {\n      result[key]\
    \ = value\n    }\n  }\n\n  return result", "  let histogram: [String : Int] =\
    \ [:]\n  let letters = test.split(separator: \" \")\n  for letter in letters {\n\
    \    let count = histogram[letter]\n    if let count = count {\n      histogram[letter]\
    \ = count + 1\n    } else {\n      histogram[letter] = 1\n    }\n  }\n  return\
    \ histogram", "    var result: [String : Int] = [:]\n    let letters = test.split(separator:\
    \ \" \")\n    var max = 0\n    for letter in letters {\n        if let count =\
    \ result[String(letter)] {\n            result[String(letter)] = count + 1\n \
    \           if count + 1 > max {\n                max = count + 1\n          \
    \  }\n        } else {\n            result[String(letter)] = 1\n            if\
    \ 1 > max {\n                max = 1\n            }\n        }\n    }\n    var\
    \ temp: [String : Int] = [:]\n    for (key, value) in result {\n        if value\
    \ == max {\n            temp[key] = value\n        }\n    }\n    return temp",
  "    let split = test.components(separatedBy: \" \")\n    var dic = [String : Int]()\n\
    \    for i in split {\n        if dic[i] == nil {\n            dic[i] = 1\n  \
    \      } else {\n            dic[i] = dic[i]! + 1\n        }\n    }\n    var max\
    \ = 0\n    for i in dic {\n        if i.value > max {\n            max = i.value\n\
    \        }\n    }\n    var result = [String : Int]()\n    for i in dic {\n   \
    \     if i.value == max {\n            result[i.key] = i.value\n        }\n  \
    \  }\n    return result", "    var dict: [String : Int] = [:]\n    var words =\
    \ test.components(separatedBy: \" \")\n    for word in words {\n        if let\
    \ existWord = dict[word] {\n            dict[word] = existWord + 1\n        }\
    \ else {\n            dict[word] = 1\n        }\n    }\n    return dict", "  \
    \  // Enter your code below\n    let strings = test.split(separator: \" \")\n\
    \    var numbers = [String : Int]()\n    for s in strings {\n        numbers[String(s)]\
    \ = (numbers[String(s)] ?? 0) + 1\n    }\n    var maxValue = 0\n    for (_, value)\
    \ in numbers {\n        if value > maxValue {\n            maxValue = value\n\
    \        }\n    }\n    var maxNumbers = [String : Int]()\n    for (key, value)\
    \ in numbers {\n        if value == maxValue {\n            maxNumbers[key] =\
    \ value\n        }\n    }\n    return maxNumbers", "    var counts: [String :\
    \ Int] = [:]\n    for char in test.characters {\n        if let count = counts[String(char)]\
    \ {\n            counts[String(char)] = count + 1\n        } else {\n        \
    \    counts[String(char)] = 1\n        }\n    }\n    return counts", "    var\
    \ dict : [String : Int] = [:]\n    var max = 1\n    let a = test.components(separatedBy:\
    \ \" \")\n    if a.count == 0 {\n        return dict\n    }\n    for i in a {\n\
    \        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n    \
    \        dict[i] = dict[i]! + 1\n            if dict[i]! > max {\n           \
    \     max = dict[i]!\n            }\n        }\n    }\n    var dict2 = [String\
    \ : Int]()\n    for (k, v) in dict {\n        if v == max {\n            dict2[k]\
    \ = v\n        }\n    }\n    return dict2", "    //1. Split the string into an\
    \ array of letters\n    let characters = test.components(separatedBy: \" \")\n\
    \    //2. Create a dictionary to track the count of each letter\n    var histo\
    \ = [String : Int]()\n    //3. Fill up the histogram\n    for character in characters\
    \ {\n        if let count = histo[character] {\n            histo[character] =\
    \ count + 1\n        } else {\n            histo[character] = 1\n        }\n \
    \   }\n    //4. Find the max\n    var maxCount = 0\n    for (character, count)\
    \ in histo {\n        if count > maxCount {\n            maxCount = count\n  \
    \      }\n    }\n    //5. Remove all the elements with a count lower than the\
    \ max\n    for (character, count) in histo {\n        if count < maxCount {\n\
    \            histo.removeValue(forKey: character)\n        }\n    }\n    return\
    \ histo", "    let letterArray = test.components(separatedBy: \" \")\n    var\
    \ dictionary : [String : Int] = [:]\n    for i in letterArray {\n        if dictionary[i]\
    \ == nil {\n            dictionary[i] = 1\n        } else {\n            dictionary[i]\
    \ = dictionary[i]! + 1\n        }\n    }\n    return dictionary", "    let emptyHistogram\
    \ = [String : Int]()\n    let letterArray = test.components(separatedBy: \" \"\
    )\n    if letterArray.isEmpty {\n        return emptyHistogram\n    }\n    var\
    \ histogramDict = [String : Int]()\n    for letter in letterArray {\n        if\
    \ histogramDict[letter] == nil {\n            histogramDict[letter] = 1\n    \
    \    } else {\n            histogramDict[letter] = histogramDict[letter]! + 1\n\
    \        }\n    }\n    var maxNumber = 0\n    for dict in histogramDict {\n  \
    \      if dict.value > maxNumber {\n            maxNumber = dict.value\n     \
    \   }\n    }\n    var maxLetterArray = [String]()\n    for dict in histogramDict\
    \ {\n        if dict.value == maxNumber {\n            maxLetterArray.append(dict.key)\n\
    \        }\n    }\n    var finalDict = [String : Int]()\n    for letter in maxLetterArray\
    \ {\n        finalDict[letter] = maxNumber\n    }\n    return finalDict", "  \
    \  var res = [String : Int]()\n    let words = test.characters.split{$0 == \"\
    \ \"}.map(String.init)\n    var max = 0\n    for word in words {\n        if res[word]\
    \ == nil {\n            res[word] = 1\n        } else {\n            let value\
    \ = res[word]!\n            res[word] = value + 1\n            if value + 1 >\
    \ max {\n                max = value + 1\n            }\n        }\n    }\n  \
    \  var temp = [String : Int]()\n    for word in res {\n        if word.1 == max\
    \ {\n            temp[word.0] = word.1\n        }\n    }\n    return temp", " \
    \   var counts = [String : Int]()\n    var max = 0\n    let characters = test.lowercased().split(separator:\
    \ \" \")\n    for i in characters {\n        if counts[String(i)] == nil {\n \
    \           counts[String(i)] = 1\n        } else {\n            counts[String(i)]!\
    \ += 1\n        }\n        if counts[String(i)]! > max {\n            max = counts[String(i)]!\n\
    \        }\n    }\n    var newDict = [String : Int]()\n    for (key, value) in\
    \ counts {\n        if value == max {\n            newDict[key] = value\n    \
    \    }\n    }\n    return newDict", "  var dict = [String : Int]()\n  let inputs\
    \ = test.split(separator: \" \")\n  for input in inputs {\n    if let num = dict[String(input)]\
    \ {\n      dict[String(input)] = num + 1\n    } else {\n      dict[String(input)]\
    \ = 1\n    }\n  }\n  let dictKeys = dict.keys\n  var maxCount = 0\n  for key in\
    \ dictKeys {\n    if dict[key]! > maxCount {\n      maxCount = dict[key]!\n  \
    \  }\n  }\n  var dictAnswer = [String : Int]()\n  for key in dictKeys {\n    if\
    \ dict[key]! == maxCount {\n      dictAnswer[key] = dict[key]\n    }\n  }\n  return\
    \ dictAnswer", "    var keys = [String]()\n    var values = [Int]()\n    var dict\
    \ = [String : Int]()\n    let strSplit = test.components(separatedBy: \" \")\n\
    \    let dictStr = strSplit.reduce(into: [:]) { (dict, word) in\n        dict[word,\
    \ default: 0] += 1\n    }\n    dictStr.forEach { key, value in\n        keys.append(key)\n\
    \        values.append(value)\n    }\n    if !values.isEmpty {\n        let maxValue\
    \ = values.max()\n        for (i, _) in values.enumerated() {\n            if\
    \ values[i] == maxValue {\n                dict[keys[i]] = values[i]\n       \
    \     }\n        }\n    }\n    return dict", "    var maxCount = 0\n    var maxLetters\
    \ = [String]()\n    var result: [String : Int] = [:]\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if let count = result[word] {\n   \
    \         result[word] = count + 1\n        } else {\n            result[word]\
    \ = 1\n        }\n        if result[word]! > maxCount {\n            maxCount\
    \ = result[word]!\n            maxLetters = [word]\n        } else if result[word]!\
    \ == maxCount {\n            maxLetters.append(word)\n        }\n    }\n    var\
    \ res: [String : Int] = [:]\n    for maxLetter in maxLetters {\n        res[maxLetter]\
    \ = maxCount\n    }\n    return res", "    var histogram = [String : Int]()\n\
    \    let maxOccurrence = test.components(separatedBy: \" \").map { letter in\n\
    \        guard histogram[letter] != nil else {\n            histogram[letter]\
    \ = 1\n            return 1\n        }\n        histogram[letter]! += 1\n    \
    \    return histogram[letter]!\n    }.max() ?? 0\n    return histogram.filter\
    \ { $0.value == maxOccurrence }", "    let letters = test.split(separator: \"\
    \ \")\n    var occurences = [String : Int]()\n    var maxOccurence = 0\n    var\
    \ toReturn = [String : Int]()\n    \n    for letter in letters {\n        if let\
    \ _ = occurences[String(letter)] {\n            occurences[String(letter)]! +=\
    \ 1\n        } else {\n            occurences[String(letter)] = 1\n        }\n\
    \    }\n    \n    for (key, value) in occurences {\n        if value > maxOccurence\
    \ {\n            maxOccurence = value\n        }\n    }\n    \n    for (key, value)\
    \ in occurences {\n        if value == maxOccurence {\n            toReturn[key]\
    \ = value\n        }\n    }\n    \n    return toReturn", "    // Validate\n  \
    \  guard !test.isEmpty else { return [:] }\n    \n    // Split the string into\
    \ an array of strings\n    let letters = test.split(separator: \" \")\n    \n\
    \    // Initialize the return dictionary with the first word\n    var histo =\
    \ [String(letters[0]) : 1]\n    \n    // Loop through the other words, incrementing\
    \ the value for existing keys\n    // and adding new keys\n    for i in 1..<letters.count\
    \ {\n        let value = histo[String(letters[i])] ?? 0\n        histo[String(letters[i])]\
    \ = value + 1\n    }\n    \n    // Find the maximum value\n    let maxVal = histo.values.max()\
    \ ?? 0\n    \n    // Return a dictionary containing only the keys with the maximum\
    \ value\n    return Dictionary(uniqueKeysWithValues: histo.filter({$0.value ==\
    \ maxVal}))", "    // Write your code below\n    return [:]", "    let empty:\
    \ [String : Int] = [:]\n    let chars = [Character](test)\n    let count = countCharacters(chars:\
    \ chars)\n    let max = findMax(histogram: count)\n    let keys = findKeys(histogram:\
    \ count, max: max)\n    var result: [String : Int] = [:]\n    for key in keys\
    \ {\n        result[String(key)] = max\n    }\n    return result", '    return
    [:]', "    let letters = test.split(separator: \" \")\n    var output: [String\
    \ : Int] = [:]\n    var maxValue = 0\n    for i in letters {\n        if output[String(i)]\
    \ == nil {\n            output[String(i)] = 1\n        } else {\n            output[String(i)]!\
    \ += 1\n        }\n        if output[String(i)]! > maxValue {\n            maxValue\
    \ = output[String(i)]!\n        }\n    }\n    var output2: [String : Int] = [:]\n\
    \    for (key, value) in output {\n        if value == maxValue {\n          \
    \  output2[key] = value\n        }\n    }\n    return output2", "    let split\
    \ = test.split(separator: \" \")\n    var dict: [String : Int] = [:]\n    for\
    \ word in split {\n        dict[String(word)] = (dict[String(word)] ?? 0) + 1\n\
    \    }\n    return dict", "    var output: [String : Int] = [:]\n    let elements\
    \ = test.split(separator: \" \")\n    var counts: [Int] = []\n    for element\
    \ in elements {\n        if let value = output[String(element)] {\n          \
    \  output[String(element)] = value + 1\n        } else {\n            output[String(element)]\
    \ = 1\n        }\n        counts.append(output[String(element)]!)\n    }\n   \
    \ let maxCount = counts.max()!\n    var filteredOutput: [String : Int] = [:]\n\
    \    for (key, value) in output {\n        if value == maxCount {\n          \
    \  filteredOutput[key] = value\n        }\n    }\n    return filteredOutput",
  "    \n    /// Create a dictionary from [String] to Integer\n    /// representing\
    \ the String value as a key and the Integer value as a count\n    func from(letters:\
    \ [String]) -> [String : Int] {\n        return letters.reduce(into: [:]) { counts,\
    \ letter in\n            counts[letter, default: 0] += 1\n        }\n    }\n \
    \   \n    /// Returns the maximum occurrence of any element in the dictionary\n\
    \    func maximum(dictionary: [String : Int]) -> Int {\n        return dictionary.map({\
    \ $0.value }).max() ?? 0\n    }\n    \n    /// Returns an array of String keys\
    \ with the given occurrence\n    func keys(for occurrence: Int, in dictionary:\
    \ [String : Int]) -> [String] {\n        return dictionary.filter({ $0.value ==\
    \ occurrence }).map({ $0.key })\n    }\n    \n    /// Creates an histogram from\
    \ the given letters\n    func histogram(from letters: [String]) -> [String : Int]\
    \ {\n        let dictionary = from(letters: letters)\n        let maxOccurrence\
    \ = maximum(dictionary: dictionary)\n        return from(letters: keys(for: maxOccurrence,\
    \ in: dictionary))\n    }\n    \n    /// Test Cases\n    let tests = [\n     \
    \   TestCase(test: \"a b c\", expected: [\"a\" : 1, \"b\" : 1, \"c\" : 1]),\n\
    \        TestCase(test: \"a b b a\", expected: [\"a\" : 2, \"b\" : 2]),\n    \
    \    TestCase(test: \"a b c a b\", expected: [\"a\" : 2, \"b\" : 2]),\n      \
    \  TestCase(test: \"b b b b a\", expected: [\"b\" : 4]),\n        TestCase(test:\
    \ \"\", expected: [:])\n    ]\n    \n    /// Test the given Test Case\n    for\
    \ test in tests {\n        let result = histogram(from: test.test.split(separator:\
    \ \" \").map({ String($0) }))\n        assert(result == test.expected, \"\\(test.test)\
    \ should return \\(test.expected)\")\n    }\n    \n    /// Run the given test\n\
    \    return histogram(from: test.split(", "    let letters = test.split(separator:\
    \ \" \")\n    var counts: [String : Int] = [:]\n    var results: [String : Int]\
    \ = [:]\n    var maxCount = 0\n    \n    for letter in letters {\n        if counts[String(letter)]\
    \ == nil {\n            counts[String(letter)] = 1\n        } else {\n       \
    \     counts[String(letter)]! += 1\n        }\n    }\n    \n    for count in counts\
    \ {\n        if count.value > maxCount {\n            maxCount = count.value\n\
    \        }\n    }\n    \n    for count in counts {\n        if count.value ==\
    \ maxCount {\n            results[count.key] = count.value\n        }\n    }\n\
    \    \n    return results", "    let testArr = test.components(separatedBy: \"\
    \ \")\n    var dict = [String : Int]()\n    var max = 0\n    testArr.forEach {\
    \ (letter) in\n        if dict[letter] == nil {\n            dict[letter] = 1\n\
    \        } else {\n            dict[letter]! += 1\n        }\n        if dict[letter]!\
    \ > max {\n            max = dict[letter]!\n        }\n    }\n    return dict.filter\
    \ { (arg) -> Bool in\n        return arg.value == max\n    }", "    // write your\
    \ solution here\n    var res = [String : Int]()\n    let testArr = test.components(separatedBy:\
    \ \" \")\n    var maxCount = 0\n    for str in testArr {\n        if let count\
    \ = res[str] {\n            res[str] = count + 1\n            if count + 1 > maxCount\
    \ {\n                maxCount = count + 1\n            }\n        } else {\n \
    \           res[str] = 1\n            if 1 > maxCount {\n                maxCount\
    \ = 1\n            }\n        }\n    }\n    var finalRes = [String : Int]()\n\
    \    for (key, value) in res {\n        if value == maxCount {\n            finalRes[key]\
    \ = value\n        }\n    }\n    return finalRes", "    let letters = test.split(separator:\
    \ \" \")\n    var histogram: [String : Int] = [:]\n    for letter in letters {\n\
    \        histogram[String(letter)] = (histogram[String(letter)] ?? 0) + 1\n  \
    \  }\n    return histogram", "    let letters = test.characters.split{$0 == \"\
    \ \"}.map(String.init)\n    var letterCount = [String : Int]()\n    for letter\
    \ in letters {\n        if letterCount[letter] == nil {\n            letterCount[letter]\
    \ = 1\n        } else {\n            letterCount[letter]! += 1\n        }\n  \
    \  }\n    return letterCount", "    var h = [String : Int]()\n    let all = test.components(separatedBy:\
    \ \" \")\n    for char in all {\n        if let current = h[char] {\n        \
    \    h[char] = current + 1\n        } else {\n            h[char] = 1\n      \
    \  }\n    }\n    return h", '    return [:]', "    // TODO\n    var h = [String\
    \ : Int]()\n    var maxCount = 0\n    var maxKey = \"\"\n    var arr = test.components(separatedBy:\
    \ \" \")\n    for i in arr {\n        var count = 0\n        for j in arr {\n\
    \            if i == j {\n                count += 1\n            }\n        }\n\
    \        h[i] = count\n        if count > maxCount {\n            maxCount = count\n\
    \            maxKey = i\n        }\n    }\n    return h", '    return [:]', " \
    \   let lowerCaseTuple = test.split(separator: \" \").map { ($0,1) }\n    let\
    \ lowerCaseDict = Dictionary(lowerCaseTuple, uniquingKeysWith: +)\n    let sorted\
    \ = lowerCaseDict.sorted(by: { $0.1 > $1.1 })\n    let max = sorted.first!.value\n\
    \    return sorted.filter { $0.value == max }.reduce(into: [String : Int]()) {\
    \ $0[String($1.key)] = $1.value }", "    var result = [String : Int]()\n    for\
    \ letter in test.components(separatedBy: \" \") {\n        if result[letter] ==\
    \ nil {\n            result[letter] = 1\n        } else {\n            result[letter]!\
    \ += 1\n        }\n    }\n    return result", "    var chars = test.split(separator:\
    \ \" \")\n    var dict = [String : Int]()\n    for char in chars {\n        if\
    \ dict[String(char)] == nil {\n            dict[String(char)] = 1\n        } else\
    \ {\n            dict[String(char)]! += 1\n        }\n    }\n    return dict",
  "    var maxCount = 0\n    var count = 0\n    var result = [String : Int]()\n  \
    \  let letters = test.split(separator: \" \")\n    if letters.count == 0 {\n \
    \       return result\n    }\n    var index = 0\n    while index < letters.count\
    \ {\n        count = 1\n        var innerIndex = index + 1\n        while innerIndex\
    \ < letters.count {\n            if letters[index] == letters[innerIndex] {\n\
    \                count += 1\n            }\n            innerIndex += 1\n    \
    \    }\n        if count > maxCount {\n            maxCount = count\n        \
    \    result.removeAll()\n            result[String(letters[index])] = count\n\
    \        } else if count == maxCount {\n            result[String(letters[index])]\
    \ = count\n        }\n        index += 1\n    }\n    return result", "    let\
    \ letters = test.split(separator: \" \")\n    var dict : [String : Int] = [:]\n\
    \    for letter in letters {\n        if dict[String(letter)] == nil {\n     \
    \       dict[String(letter)] = 1\n        } else {\n            dict[String(letter)]!\
    \ += 1\n        }\n    }\n    return dict", "    var histogram = [String : Int]()\n\
    \    test.split(separator: \" \").forEach({ key in\n        if let count = histogram[String(key)]\
    \ {\n            histogram[String(key)] = count + 1\n        } else {\n      \
    \      histogram[String(key)] = 1\n        }\n    })\n    return histogram", " \
    \   let result = [String : Int]()\n    if test.isEmpty {\n        return result\n\
    \    }\n    var histogram = [String : Int]()\n    let words = test.components(separatedBy:\
    \ \" \")\n    for word in words {\n        if word.isEmpty {\n            continue\n\
    \        }\n        if let count = histogram[word] {\n            histogram[word]\
    \ = count + 1\n        } else {\n            histogram[word] = 1\n        }\n\
    \    }\n    return histogram", "    var output: [String : Int] = [:]\n    let\
    \ array: [String] = test.components(separatedBy: \" \")\n    for letter in array\
    \ {\n        if let count = output[letter] {\n            output[letter] = count\
    \ + 1\n        } else {\n            output[letter] = 1\n        }\n    }\n  \
    \  return output", "    var histogram = [String : Int]()\n    for letter in test.components(separatedBy:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var histogram = [String : Int]()\n    for\
    \ letter in test.split(separator: \" \") {\n        let letterString = String(letter)\n\
    \        if let value = histogram[letterString] {\n            histogram[letterString]\
    \ = value + 1\n        } else {\n            histogram[letterString] = 1\n   \
    \     }\n    }\n    var max = 0\n    var maxDictionary = [String : Int]()\n  \
    \  for (key, value) in histogram {\n        if value > max {\n            max\
    \ = value\n            maxDictionary = [key : value]\n        } else if value\
    \ == max {\n            maxDictionary[key] = value\n        }\n    }\n    return\
    \ maxDictionary", "    var dict: [String : Int] = [:]\n    let array = test.components(separatedBy:\
    \ \" \")\n    for character in array {\n        if dict[character] == nil {\n\
    \            dict[character] = 1\n        } else {\n            dict[character]!\
    \ += 1\n        }\n    }\n    let biggest = dict.values.max()\n    let keys =\
    \ dict.filter {$0.value == biggest}.keys\n    return keys.reduce([:]) { (dict,\
    \ key) -> [String : Int] in\n        var dict = dict\n        dict[key] = biggest\n\
    \        return dict\n    }", "    var dict = [String : Int]()\n    for letter\
    \ in test.split(separator: \" \") {\n        if dict[String(letter)] == nil {\n\
    \            dict[String(letter)] = 1\n        } else {\n            dict[String(letter)]!\
    \ += 1\n        }\n    }\n    var maxOccurence = [String : Int]()\n    var max\
    \ = 0\n    for (_, count) in dict {\n        if count > max {\n            max\
    \ = count\n        }\n    }\n    for (letter, count) in dict {\n        if count\
    \ == max {\n            maxOccurence[letter] = count\n        }\n    }\n    return\
    \ maxOccurence", "    let tokens = test.components(separatedBy: .whitespaces)\n\
    \    var dictionary = [String : Int]()\n    for token in tokens {\n        let\
    \ count = dictionary[token] ?? 0\n        dictionary[token] = count + 1\n    }\n\
    \    var maxCount = 0\n    for (_, value) in dictionary {\n        if value >\
    \ maxCount {\n            maxCount = value\n        }\n    }\n    var maxDictionary\
    \ = [String : Int]()\n    for (key, value) in dictionary {\n        if value ==\
    \ maxCount {\n            maxDictionary[key] = value\n        }\n    }\n    return\
    \ maxDictionary", "    let letters = test.split(separator: \" \")\n    var hist\
    \ = [String : Int]()\n    for letter in letters {\n        if hist[String(letter)]\
    \ == nil {\n            hist[String(letter)] = 1\n        } else {\n         \
    \   hist[String(letter)]! += 1\n        }\n    }\n    return hist", "    var allChars\
    \ = [String : Int]()\n    let word = test.split(separator: \" \")\n    for element\
    \ in word {\n        var counter = 0\n        for letter in word {\n         \
    \   if letter == element {\n                counter += 1\n            }\n    \
    \    }\n        allChars[String(element)] = counter\n    }\n    var max = 0\n\
    \    for key in allChars.keys {\n        if max < allChars[key]! {\n         \
    \   max = allChars[key]!\n        }\n    }\n    var result = [String : Int]()\n\
    \    for key in allChars.keys {\n        if allChars[key] == max {\n         \
    \   result[key] = max\n        }\n    }\n    return result", "    \n    /// return\
    \ empty dictionary\n    if test.isEmpty {\n        return [:]\n    }\n    \n \
    \   /// create dictonary where letters will be keys and occurences will be values\n\
    \    var letters = [String : Int]()\n    \n    /// create an array out of our\
    \ string, so we can add a value for each word in the array\n    let stringArray\
    \ = test.split(separator: \" \")\n    \n    /// loop through each word in the\
    \ array\n    for word in stringArray {\n        \n        /// if the word is not\
    \ in the dictionary, add it and set its value to 1\n        if letters[String(word)]\
    \ == nil {\n            letters[String(word)] = 1\n            \n        /// if\
    \ the word is already in the dictionary, increment its value by 1\n        } else\
    \ {\n            letters[String(word)]! += 1\n        }\n    }\n    \n    ///\
    \ get the maximum value of the dictionary\n    let maxValue = letters.values.max()!\n\
    \    \n    /// create a new empty dictionary, this one is to store each key that\
    \ has the maximum value\n    var newLetters = [String : Int]()\n    \n    ///\
    \ iterate through each key and value in our original dictionary\n    for (key,\
    \ value) in letters {\n        \n        /// if the value of the current iteration\
    \ is equal to the maximum value, add it to the new dictionary\n        if value\
    \ == maxValue {\n            newLetters[key] = value\n        }\n    }\n    \n\
    \    /// return the new dictionary\n    return newLetters", '    return [:]',
  "    var result: [String : Int] = [:]\n    let stringArray = test.components(separatedBy:\
    \ \" \")\n    var maxOccurrence: Int = 0\n    for string in stringArray {\n  \
    \      if let occurrence = result[string] {\n            result[string] = occurrence\
    \ + 1\n            if result[string]! > maxOccurrence {\n                maxOccurrence\
    \ = result[string]!\n            }\n        } else {\n            result[string]\
    \ = 1\n        }\n    }\n    let keys = result.keys\n    for key in keys {\n \
    \       if result[key]! < maxOccurrence {\n            result.removeValue(forKey:\
    \ key)\n        }\n    }\n    return result", "    // your code here\n    return\
    \ [\"\" : 0]", "  guard !test.isEmpty else { return [:] }\n  var dictionary: [String\
    \ : Int] = [:]\n  test.components(separatedBy: \" \").forEach {\n    let count\
    \ = dictionary[$0] ?? 0\n    dictionary[$0] = count + 1\n  }\n  let maxValue =\
    \ dictionary.values.max() ?? 0\n  return dictionary.filter { $0.value == maxValue\
    \ }", "    let inputArray = test.split(separator: \" \")\n    var dictionary =\
    \ [String : Int]()\n    for currentElement in inputArray {\n        if let value\
    \ = dictionary[String(currentElement)] {\n            dictionary[String(currentElement)]\
    \ = value + 1\n        } else {\n            dictionary[String(currentElement)]\
    \ = 1\n        }\n    }\n    return dictionary", "    var countDict = [String\
    \ : Int]()\n    var maxCount = 0\n    var mostCommon = [String]()\n    for char\
    \ in test.split(separator: \" \") {\n        if let count = countDict[String(char)]\
    \ {\n            countDict[String(char)] = count + 1\n            if count + 1\
    \ > maxCount {\n                maxCount = count + 1\n                mostCommon\
    \ = [String(char)]\n            } else if count + 1 == maxCount {\n          \
    \      mostCommon.append(String(char))\n            }\n        } else {\n    \
    \        countDict[String(char)] = 1\n            if maxCount == 0 {\n       \
    \         maxCount = 1\n                mostCommon = [String(char)]\n        \
    \    }\n        }\n    }\n    return mostCommon.reduce(into: [String : Int]())\
    \ { (result, key) in\n        result[key] = maxCount\n    }", "  var lettersDictionary\
    \ = [String : Int]()\n  let letters = test.split(separator: \" \")\n  var highestCount\
    \ = 0\n  var dictionaryOfHighestCount = [String : Int]()\n  for letter in letters\
    \ {\n    lettersDictionary[String(letter)] = (lettersDictionary[String(letter)]\
    \ ?? 0) + 1\n    if let count = lettersDictionary[String(letter)], count >= highestCount\
    \ {\n      highestCount = count\n      dictionaryOfHighestCount[String(letter)]\
    \ = count\n    }\n  }\n  return dictionaryOfHighestCount", "    var result = [String\
    \ : Int]()\n    if let results = test.split(separator: \" \").count {\n      \
    \  for i in 0..<results {\n            result[String(test.split(separator: \"\
    \ \")[i])] = (result[String(test.split(separator: \" \")[i])] ?? 0) + 1\n    \
    \    }\n    }\n    return result", "    var dict = [String : Int]()\n    test.split(separator:\
    \ \" \").forEach({ letter in\n        dict[String(letter)] = (dict[String(letter)]\
    \ ?? 0) + 1\n    })\n    return dict", "    var histogramDictionary = [String\
    \ : Int]()\n    let letters = test.components(separatedBy: \" \")\n    if letters.count\
    \ == 0 {\n        return histogramDictionary\n    }\n    for letter in letters\
    \ {\n        if let val = histogramDictionary[letter] {\n            histogramDictionary[letter]\
    \ = val + 1\n        } else {\n            histogramDictionary[letter] = 1\n \
    \       }\n    }\n    var maxVal = 0\n    for val in histogramDictionary.values\
    \ {\n        if val > maxVal {\n            maxVal = val\n        }\n    }\n \
    \   for (letter, val) in histogramDictionary {\n        if val != maxVal {\n \
    \           histogramDictionary.removeValue(forKey: letter)\n        }\n    }\n\
    \    return histogramDictionary", "    let input = test.components(separatedBy:\
    \ \" \")\n    var output = [String : Int]()\n    for word in input {\n       \
    \ if let count = output[word] {\n            output[word] = count + 1\n      \
    \  } else {\n            output[word] = 1\n        }\n    }\n    let maxValue\
    \ = output.values.max() ?? 0\n    let maxValueKeys = output.filter { $0.value\
    \ == maxValue }.map { $0.key }\n    for key in output.keys {\n        if !maxValueKeys.contains(key)\
    \ {\n            output.removeValue(forKey: key)\n        }\n    }\n    return\
    \ output", '    return [:]', "  let letterOccurences = test.characters.reduce([String\
    \ : Int]()) {\n    if $0[String($1)] == nil {\n      return $0.merging([String($1)\
    \ : 1]) { (_, new) in new }\n    } else {\n      var copy = $0\n      copy[String($1)]\
    \ = $0[String($1)]! + 1\n      return copy\n    }\n  }\n  return letterOccurences",
  "    var dictionary: [String : Int] = [:]\n    for letter in test.split(separator:\
    \ \" \") {\n        dictionary[String(letter)] = (dictionary[String(letter)] ??\
    \ 0) + 1\n    }\n    return dictionary", "    if test.isEmpty {\n        return\
    \ [:]\n    }\n    var count = [String : Int]()\n    let arrayOfStrings = test.components(separatedBy:\
    \ \" \")\n    for item in arrayOfStrings {\n        if count[item] == nil {\n\
    \            count[item] = 1\n        } else {\n            count[item]! += 1\n\
    \        }\n    }\n    var maxValue = 0\n    var bestWord = [String]()\n    for\
    \ (_, value) in count {\n        if value == maxValue {\n            bestWord.append(String(value))\n\
    \        } else if value > maxValue {\n            maxValue = value\n        \
    \    bestWord = [String(value)]\n        }\n    }\n    for (key, value) in count\
    \ {\n        if !bestWord.contains(String(value)) {\n            count.removeValue(forKey:\
    \ key)\n        }\n    }\n    return count", "    // Need to learn about character\
    \ sets\n    let letters = test.components(separatedBy: .whitespacesAndNewlines)\n\
    \    var histogramDict: [String : Int] = [:]\n    if letters.count == 0 {\n  \
    \      return histogramDict\n    }\n    for letter in letters {\n        if histogramDict[letter]\
    \ == nil {\n            histogramDict[letter] = 1\n        } else {\n        \
    \    histogramDict[letter]! += 1\n        }\n    }\n    return histogramDict",
  "    var res: [String : Int] = [:]\n    var letters = test.components(separatedBy:\
    \ \" \")\n    var maxCount = 0\n    for letter in letters {\n        if res[letter]\
    \ == nil {\n            res[letter] = 1\n        } else {\n            res[letter]!\
    \ += 1\n        }\n        if res[letter]! > maxCount {\n            maxCount\
    \ = res[letter]!\n        }\n    }\n    for key in res.keys {\n        if res[key]!\
    \ < maxCount {\n            res.removeValue(forKey: key)\n        }\n    }\n \
    \   return res", "    // your code here\n    return [:]", "    var letterDict:\
    \ [String : Int] = [:]\n    var arrayOfChars = test.components(separatedBy: \"\
    \ \")\n    for char in arrayOfChars {\n        if let count = letterDict[char]\
    \ {\n            letterDict[char] = count + 1\n        } else {\n            letterDict[char]\
    \ = 1\n        }\n    }\n    return letterDict", "    var result = [String : Int]()\n\
    \    if !test.isEmpty {\n        for ch in test.split(separator: \" \") {\n  \
    \          result[String(ch)] = (result[String(ch)] ?? 0) + 1\n        }\n   \
    \ }\n    return result", "    let result = test.components(separatedBy: \" \"\
    )\n    var dict = [String : Int]()\n    for i in result {\n        if dict[i]\
    \ == nil {\n            dict[i] = 1\n        } else {\n            dict[i] = dict[i]!\
    \ + 1\n        }\n    }\n    return dict", "    var result = [String : Int]()\n\
    \    var input = [String]()\n    if test.count > 0 {\n        input = test.components(separatedBy:\
    \ \" \")\n    }\n    if input.count > 0 {\n        for item in input {\n     \
    \       if let count = result[item] {\n                result[item] = count +\
    \ 1\n            } else {\n                result[item] = 1\n            }\n \
    \       }\n    }\n    return result", "    let test = test.lowercased()\n    if\
    \ test.count == 0 {\n        return [:]\n    }\n    var result = [String : Int]()\n\
    \    var list = [String]()\n    let array = test.split(separator: \" \")\n   \
    \ for char in array {\n        if let index = list.firstIndex(of: String(char))\
    \ {\n            result[String(char)] = result[String(char)]! + 1\n        } else\
    \ {\n            list.append(String(char))\n            result[String(char)] =\
    \ 1\n        }\n    }\n    var max = -1\n    for (key, value) in result {\n  \
    \      if value > max {\n            max = value\n        }\n    }\n    for (key,\
    \ value) in result {\n        if value < max {\n            result.removeValue(forKey:\
    \ key)\n        }\n    }\n    return result", "    let array = test.components(separatedBy:\
    \ \" \")\n    let uniqueElements = Set(array)\n    var histogramDict = [String\
    \ : Int]()\n    for element in uniqueElements {\n        let occurrence = array.filter\
    \ { $0 == element }.count\n        histogramDict[element] = occurrence\n    }\n\
    \    return histogramDict", "    if test.isEmpty {\n        return [:]\n    }\n\
    \    let testArray = test.split(separator: \" \")\n    var histogram = [String\
    \ : Int]()\n    for char in testArray {\n        if let value = histogram[String(char)]\
    \ {\n            histogram[String(char)] = value + 1\n        } else {\n     \
    \       histogram[String(char)] = 1\n        }\n    }\n    return histogram",
  "    let arr = test.components(separatedBy: \" \")\n    var histogram = [String\
    \ : Int]()\n    for index in 0..<arr.count {\n        if histogram[arr[index]]\
    \ == nil {\n            histogram[arr[index]] = 1\n        } else {\n        \
    \    histogram[arr[index]]! += 1\n        }\n    }\n    var max = 0\n    for (_,\
    \ value) in histogram {\n        if value > max {\n            max = value\n \
    \       }\n    }\n    var final = [String : Int]()\n    for (key, value) in histogram\
    \ {\n        if value == max {\n            final[key] = value\n        }\n  \
    \  }\n    return final"]
stop_tokens:
- "\n}"
