language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ TODO\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3xf_5f1f/tmp3xf_5f1f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe2a196c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe29e8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe29e8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe29e8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xf_5f1f                        0x000055e4bef64546 <unavailable> + 5446

    5    libc.so.6                          0x00002abe2a382460 __libc_start_main +
    245

    6    tmp3xf_5f1f                        0x000055e4bef640c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted_lst = lst.sorted {\n        ($0.count, $0) < ($1.count, $1)\n    }\n\
    \    var result: [String] = []\n    for item in sorted_lst {\n        if item.count\
    \ % 2 == 0 {\n            result.append(item)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({$0.count % 2 == 0}).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpodu6of7u/tmpodu6of7u.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fba8e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fba5d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fba5d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fba5d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodu6of7u                        0x000055c4190624fb <unavailable> + 9467

    5    libc.so.6                          0x00002b2fbaace460 __libc_start_main +
    245

    6    tmpodu6of7u                        0x000055c419061319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for num in lst {\n        if num.count % 2 == 0 {\n\
    \            result.append(num)\n        }\n    }\n    result.sort(by: { $0.count\
    \ < $1.count })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpgnvm95dv/tmpgnvm95dv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8caa166c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca9e5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca9e5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca9e5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgnvm95dv                        0x0000563a5b482ebf <unavailable> + 7871

    5    libc.so.6                          0x00002b8caa352460 __libc_start_main +
    245

    6    tmpgnvm95dv                        0x0000563a5b4823e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ even_lst: [String] = []\n    for item in lst {\n        if item.count % 2 ==\
    \ 0 {\n            even_lst.append(item)\n        }\n    }\n    let result: [String]\
    \ = even_lst.sorted()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpokq0hg3n/tmpokq0hg3n.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d314b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d311adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d311ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d311ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpokq0hg3n                        0x000055b60b6f35fb <unavailable> + 9723

    5    libc.so.6                          0x00002b7d316a2460 __libc_start_main +
    245

    6    tmpokq0hg3n                        0x000055b60b6f2419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ [String]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp10y3ep6o/tmp10y3ep6o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34f55d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34f52c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34f52c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34f52c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10y3ep6o                        0x0000559bceec0596 <unavailable> + 5526

    5    libc.so.6                          0x00002b34f57bd460 __libc_start_main +
    245

    6    tmp10y3ep6o                        0x0000559bceec0119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    let evenLenArr = lst.filter { $0.count % 2 == 0 }\n\
    \    res = evenLenArr.sorted(by: { $0.count < $1.count })\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpb0v1utpb/tmpb0v1utpb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab980d41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab980a38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab980a38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab980a377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0v1utpb                        0x00005646ada4ddbf <unavailable> + 7615

    5    libc.so.6                          0x00002ab980f2d460 __libc_start_main +
    245

    6    tmpb0v1utpb                        0x00005646ada4d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ oddLst: [String] = []\n    for str in lst {\n        if str.count % 2 == 1 {\n\
    \            oddLst.append(str)\n        }\n    }\n    var sortedLst = oddLst.sorted()\n\
    \    return sortedLst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpchij2gap/tmpchij2gap.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3aaf9e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3aaf6deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3aaf6de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3aaf6dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchij2gap                        0x0000561c35e68896 <unavailable> + 6294

    5    libc.so.6                          0x00002b3aafbd3460 __libc_start_main +
    245

    6    tmpchij2gap                        0x0000561c35e68419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ r_arr = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n    \
    \        r_arr.append(i)\n        }\n    }\n    let ans = r_arr.sorted()\n   \
    \ return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp32ximklv/tmp32ximklv.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9f627ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9f5f75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9f5f75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9f5f747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32ximklv                        0x0000561bf340564b <unavailable> + 9803

    5    libc.so.6                          0x00002ad9f646a460 __libc_start_main +
    245

    6    tmp32ximklv                        0x0000561bf3404469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newList = [String]()\n    newList = lst.filter { (word) -> Bool in\n       \
    \ word.count % 2 == 0\n    }\n    newList.sort(by: { (word1, word2) -> Bool in\n\
    \        if word1.count != word2.count {\n            return word1.count < word2.count\n\
    \        } else {\n            return word1 < word2\n        }\n    })\n    return\
    \ newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { ($0.count, $0) < ($1.count, $1) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    let arr1 = lst.filter {$0.count % 2 == 0}\n    result\
    \ = arr1.sorted {$0.count < $1.count}\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpnxdreo09/tmpnxdreo09.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13a4382c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13a4079b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13a4079988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13a40787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxdreo09                        0x000055706c359e0f <unavailable> + 7695

    5    libc.so.6                          0x00002b13a456e460 __libc_start_main +
    245

    6    tmpnxdreo09                        0x000055706c359339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    var i = 0\n    var total = 0\n    while i < lst.count {\n   \
    \     total += lst[i].count\n        i += 1\n    }\n    var array: [String] =\
    \ []\n    if total % 2 == 0 {\n        for element in lst {\n            if element.count\
    \ % 2 == 0 {\n                array.append(element)\n            }\n        }\n\
    \    } else {\n        for element in lst {\n            if element.count % 2\
    \ != 0 {\n                array.append(element)\n            }\n        }\n  \
    \  }\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpxdlwzsl1/tmpxdlwzsl1.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5547dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b55174b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b55174988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b551737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxdlwzsl1                        0x0000558ad92c1b8e <unavailable> + 7054

    5    libc.so.6                          0x00002b0b55669460 __libc_start_main +
    245

    6    tmpxdlwzsl1                        0x0000558ad92c14c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({ $0.count % 2 == 0 }).sorted(by: {\n        if $0.count == $1.count\
    \ {\n            return $0 < $1\n        }\n        return $0.count < $1.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sortedArray = lst.sorted(by: { $0.count > $1.count })\n    var sortedLst = [String]()\n\
    \    for word in sortedArray {\n        if word.count % 2 == 0 {\n           \
    \ sortedLst.append(word)\n        }\n    }\n    return sortedLst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp34ujm9vm/tmp34ujm9vm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b6c362c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b6c059b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b6c059988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b6c0587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp34ujm9vm                        0x0000561448847afe <unavailable> + 6910

    5    libc.so.6                          0x00002b7b6c54e460 __libc_start_main +
    245

    6    tmp34ujm9vm                        0x0000561448847439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var tmp = lst\n    tmp.sort { $0.count < $1.count }\n\
    \    for word in tmp {\n        if word.count % 2 == 0 {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpeq25i0_h/tmpeq25i0_h.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae85bcebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae85b9e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae85b9e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae85b9e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeq25i0_h                        0x0000562510c09f1f <unavailable> + 7967

    5    libc.so.6                          0x00002ae85bed7460 __libc_start_main +
    245

    6    tmpeq25i0_h                        0x0000562510c09449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ TODO:\n    var list = lst\n    var list_new: [String] = []\n    list.sort(by:\
    \ {$0.count < $1.count})\n    for i in list {\n        if i.count % 2 == 0 {\n\
    \            list_new.append(i)\n        }\n    }\n    return list_new\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_moqfjr3/tmp_moqfjr3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcda28ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcd9f85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcd9f85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcd9f847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_moqfjr3                        0x000055a6db33cebf <unavailable> + 7871

    5    libc.so.6                          0x00002abcda47a460 __libc_start_main +
    245

    6    tmp_moqfjr3                        0x000055a6db33c3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count == $1.count ? $0 < $1 : $0.count\
    \ < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({$0.count % 2 == 0}).sorted(by: {$0.count < $1.count}).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmptl4ji4i4/tmptl4ji4i4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82a471cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82a4413b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82a4413988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82a44127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl4ji4i4                        0x000055f32a63956b <unavailable> + 9579

    5    libc.so.6                          0x00002b82a4908460 __libc_start_main +
    245

    6    tmptl4ji4i4                        0x000055f32a638389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    new_lst.sort()\n\
    \    return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b45dee4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45deb46561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b45deb46286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b45deb4613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b45deb45bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b45de945fc3 <unavailable> + 188355

    6    tmpxxbixzeh                        0x00005590f695a82c <unavailable> + 10284

    7    tmpxxbixzeh                        0x00005590f695984d <unavailable> + 6221

    8    libc.so.6                          0x00002b45df03b460 __libc_start_main +
    245

    9    tmpxxbixzeh                        0x00005590f69594c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ oddStrings: [String] = []\n    for word in lst {\n        if word.count % 2\
    \ != 0 {\n            oddStrings.append(word)\n        }\n    }\n    return oddStrings.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpk_fext5_/tmpk_fext5_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad970ed6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad970bcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad970bcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad970bcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_fext5_                        0x0000558fbf34b896 <unavailable> + 6294

    5    libc.so.6                          0x00002ad9710c2460 __libc_start_main +
    245

    6    tmpk_fext5_                        0x0000558fbf34b419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ result = lst.filter { (str) -> Bool in\n        return str.count % 2 == 0\n\
    \    }\n    return result.sorted { (str1, str2) -> Bool in\n        if str1.count\
    \ < str2.count {\n            return true\n        } else if str1.count > str2.count\
    \ {\n            return false\n        } else {\n            return str1 < str2\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({ $0.count % 2 == 0 }).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp_xo4ei03/tmp_xo4ei03.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b9ed8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b9ea85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b9ea85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b9ea847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_xo4ei03                        0x0000560ee1b2c4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b8b9ef7a460 __libc_start_main +
    245

    6    tmp_xo4ei03                        0x0000560ee1b2b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl3cxia84/tmpl3cxia84.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ee3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6eb31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6eb31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6eb307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3cxia84                        0x0000564ded3dadbf <unavailable> + 7615

    5    libc.so.6                          0x00002b8e6f026460 __libc_start_main +
    245

    6    tmpl3cxia84                        0x0000564ded3da2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ oddLength = lst.filter { $0.count % 2 != 0 }\n    return oddLength.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpvvinghe0/tmpvvinghe0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac620974c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62066bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62066b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62066a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvvinghe0                        0x0000556a971e6796 <unavailable> + 6038

    5    libc.so.6                          0x00002ac620b60460 __libc_start_main +
    245

    6    tmpvvinghe0                        0x0000556a971e6319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({$0.count % 2 == 0}).sorted(by: { ($0.count == $1.count) ? $0 < $1\
    \ : $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({ (word) -> Bool in\n        return word.count % 2 == 0\n    }).sorted(by:\
    \ { (word1, word2) -> Bool in\n        if word1.count != word2.count {\n     \
    \       return word1.count < word2.count\n        } else {\n            return\
    \ word1 < word2\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted(by:\
    \ { $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9_uwyqr_/tmp9_uwyqr_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f2ec64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f2e95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f2e95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f2e95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_uwyqr_                        0x00005633f411bebf <unavailable> + 7871

    5    libc.so.6                          0x00002b1f2ee50460 __libc_start_main +
    245

    6    tmp9_uwyqr_                        0x00005633f411b3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ TODO: Write your code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpfhylkdm1/tmpfhylkdm1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8a5db4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8a5aabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8a5aab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8a5aaa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfhylkdm1                        0x0000560e0c7b1546 <unavailable> + 5446

    5    libc.so.6                          0x00002ab8a5fa0460 __libc_start_main +
    245

    6    tmpfhylkdm1                        0x0000560e0c7b10c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ even_length_words = lst.filter { $0.count % 2 == 0 }\n    let ascending_order\
    \ = even_length_words.sorted { $0.count < $1.count }\n    return ascending_order\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7w0h8x10/tmp7w0h8x10.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11fa9fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11fa6f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11fa6f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11fa6f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7w0h8x10                        0x00005614328d8dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b11fabe9460 __libc_start_main +
    245

    6    tmp7w0h8x10                        0x00005614328d82e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for str in lst {\n        if str.count % 2 == 0 {\n\
    \            res.append(str)\n        }\n    }\n    return res.sorted(by: { $0.count\
    \ < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp31enpkwe/tmp31enpkwe.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9b41fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9b3ef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9b3ef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9b3ef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp31enpkwe                        0x000055ce86baaebf <unavailable> + 7871

    5    libc.so.6                          0x00002ae9b43ea460 __libc_start_main +
    245

    6    tmp31enpkwe                        0x000055ce86baa3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__zq38mj/tmp__zq38mj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee81042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee80d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee80d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee80d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__zq38mj                        0x000055c0c8135546 <unavailable> + 5446

    5    libc.so.6                          0x00002aee8122e460 __libc_start_main +
    245

    6    tmp__zq38mj                        0x000055c0c81350c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ filtered = lst.filter { $0.count % 2 == 0 }\n    let sorted = filtered.sorted\
    \ {\n        if $0.count == $1.count {\n            return $0 < $1\n        }\n\
    \        return $0.count < $1.count\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  return\
    \ lst.filter { $0.count % 2 == 0 }.sorted {\n    if $0.count == $1.count {\n \
    \     return $0 < $1\n    }\n    return $0.count < $1.count\n  }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  return\
    \ lst.filter { (str) -> Bool in\n    return str.count % 2 == 0\n  }.sorted(by:\
    \ { (str1, str2) -> Bool in\n    if str1.count != str2.count {\n      return str1.count\
    \ < str2.count\n    } else {\n      return str1 < str2\n    }\n  })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for value in lst {\n        if (value.count % 2 ==\
    \ 0) {\n            result.append(value)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp8uf06h7w/tmp8uf06h7w.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff22a8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff22783b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff22783988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff227827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uf06h7w                        0x00005614a73236cb <unavailable> + 9931

    5    libc.so.6                          0x00002aff22c78460 __libc_start_main +
    245

    6    tmp8uf06h7w                        0x00005614a73224e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for str in lst {\n        if str.count % 2 == 0 {\n\
    \            result.append(str)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmptli9uva8/tmptli9uva8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2adabbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ada8b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ada8b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ada8b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptli9uva8                        0x000055d78d0c95fb <unavailable> + 9723

    5    libc.so.6                          0x00002b2adada6460 __libc_start_main +
    245

    6    tmptli9uva8                        0x000055d78d0c8419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = [String]()\n    var unique = Set<String>()\n    for word in lst {\n  \
    \      if word.count % 2 == 0 {\n            unique.insert(word)\n        }\n\
    \    }\n    var arr = Array(unique)\n    arr.sort(by: {$0.count == $1.count ?\
    \ $0 < $1 : $0.count < $1.count})\n    for word in arr {\n        res.append(word)\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ odd: [String] = []\n    var even: [String] = []\n    for item in lst {\n   \
    \     if item.count % 2 == 0 {\n            even.append(item)\n        } else\
    \ {\n            odd.append(item)\n        }\n    }\n    for item in odd {\n \
    \       if let index = even.firstIndex(of: item) {\n            even.remove(at:\
    \ index)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpfnaerd_u/tmpfnaerd_u.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b257c326c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b257c01db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b257c01d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b257c01c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnaerd_u                        0x0000563f7ac4bafe <unavailable> + 6910

    5    libc.so.6                          0x00002b257c512460 __libc_start_main +
    245

    6    tmpfnaerd_u                        0x0000563f7ac4b439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ TODO: Implement me\n    return [\"aa\"]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpo0o2l8vi/tmpo0o2l8vi.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f775e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f772ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f772dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f772dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0o2l8vi                        0x0000561b01ca678e <unavailable> + 6030

    5    libc.so.6                          0x00002b1f777d2460 __libc_start_main +
    245

    6    tmpo0o2l8vi                        0x0000561b01ca60c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ strings = lst.filter { string in string.count % 2 == 0 }\n    var sortedString\
    \ = strings.sorted { lhs, rhs in\n        lhs.count < rhs.count\n    }\n    sortedString.sort\
    \ { lhs, rhs in\n        lhs < rhs\n    }\n    return sortedString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2_v48np7/tmp2_v48np7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb3db54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb3d84bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb3d84b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb3d84a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_v48np7                        0x0000561a9dfa159b <unavailable> + 9627

    5    libc.so.6                          0x00002acb3dd40460 __libc_start_main +
    245

    6    tmp2_v48np7                        0x0000561a9dfa03b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.sorted().filter({$0.count % 2 == 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmphtn5squt/tmphtn5squt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae78209cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae781d93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae781d93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae781d927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphtn5squt                        0x00005590148514fb <unavailable> + 9467

    5    libc.so.6                          0x00002ae782288460 __libc_start_main +
    245

    6    tmphtn5squt                        0x0000559014850319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    ///\
    \ TODO: Write the function.\n    /// \U0001F4A1 Hint: Use the `filter` function\
    \ for array. You can use the `sort`\n    /// function for the final array.\n \
    \   var result: [String] = []\n    for string in lst {\n        if string.count\
    \ % 2 == 0 {\n            result.append(string)\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp0r87u1la/tmp0r87u1la.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43aac55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43aa94cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43aa94c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43aa94b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0r87u1la                        0x0000555c3411967b <unavailable> + 9851

    5    libc.so.6                          0x00002b43aae41460 __libc_start_main +
    245

    6    tmp0r87u1la                        0x0000555c34118499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    lst.removeAll(where: { $0.count % 2 != 0 })\n    lst.sort(by:\
    \ { ($0.count, $0) < ($1.count, $1) })\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sorted = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            sorted.append(word)\n        }\n    }\n    sorted.sort()\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp0zdqxrsy/tmp0zdqxrsy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae779780c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae779477b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae779477988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7794767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0zdqxrsy                        0x00005617b35766cb <unavailable> + 9931

    5    libc.so.6                          0x00002ae77996c460 __libc_start_main +
    245

    6    tmp0zdqxrsy                        0x00005617b35754e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ index = 0\n    var array : [String] = []\n    while index < lst.count {\n  \
    \      if lst[index].count % 2 == 0 {\n            array.append(lst[index])\n\
    \        }\n        index += 1\n    }\n    return array.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3u09ucke/tmp3u09ucke.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2da2fefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2da2ce6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2da2ce6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2da2ce57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3u09ucke                        0x000055f439ab253b <unavailable> + 9531

    5    libc.so.6                          0x00002b2da31db460 __libc_start_main +
    245

    6    tmp3u09ucke                        0x000055f439ab1359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  let count\
    \ = lst.count\n  var newList = lst\n  var i = 0\n  while i < count {\n    if newList[i].count\
    \ % 2 != 0 {\n      newList.remove(at: i)\n    } else {\n      i += 1\n    }\n\
    \  }\n  var dict: [Int: [String]] = [:]\n  for element in newList {\n    if var\
    \ array = dict[element.count] {\n      array.append(element)\n      dict[element.count]\
    \ = array\n    } else {\n      dict[element.count] = [element]\n    }\n  }\n \
    \ var sortedList: [String] = []\n  for key in dict.keys.sorted() {\n    sortedList.append(contentsOf:\
    \ dict[key]!.sorted())\n  }\n  return sortedList\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b66986c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b6667d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2b6667d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2b6667d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2b6667cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2b6647cfc3 <unavailable> + 188355

    6    tmpsflauypl                        0x0000562ec756cb05 <unavailable> + 11013

    7    tmpsflauypl                        0x0000562ec756bb7d <unavailable> + 7037

    8    libc.so.6                          0x00002b2b66b72460 __libc_start_main +
    245

    9    tmpsflauypl                        0x0000562ec756b7f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({ $0.count % 2 == 0 }).sorted(by: {\n        if $0.count == $1.count\
    \ {\n            return $0 < $1\n        }\n        return $0.count < $1.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n  \
    \          new_lst.append(i)\n        }\n    }\n    new_lst.sort()\n    return\
    \ new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp20by6ldl/tmp20by6ldl.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66fd78dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66fd484b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66fd484988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66fd4837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20by6ldl                        0x000055eb78ec16cb <unavailable> + 9931

    5    libc.so.6                          0x00002b66fd979460 __libc_start_main +
    245

    6    tmp20by6ldl                        0x000055eb78ec04e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    ///\
    \ your code here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp30whc4yp/tmp30whc4yp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b517889dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5178594b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5178594988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51785937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp30whc4yp                        0x00005594ce684546 <unavailable> + 5446

    5    libc.so.6                          0x00002b5178a89460 __libc_start_main +
    245

    6    tmp30whc4yp                        0x00005594ce6840c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sortedLst = lst.sorted {\n        $0.count == $1.count ? $0 < $1 : $0.count\
    \ < $1.count\n    }\n    let filteredLst = sortedLst.filter {\n        $0.count\
    \ % 2 == 0\n    }\n    return filteredLst\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res = [String]()\n    var dic = [Int: [String]]()\n    lst.forEach { str in\n\
    \        let cnt = str.count\n        dic[cnt] = (dic[cnt] ?? []) + [str]\n  \
    \  }\n    dic.keys.sorted().forEach { key in\n        let arr = dic[key]!.sorted()\n\
    \        res += arr\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpi8bhq3p2/tmpi8bhq3p2.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b106c531c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b106c228b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b106c228988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b106c2277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi8bhq3p2                        0x00005588a6b76a86 <unavailable> + 6790

    5    libc.so.6                          0x00002b106c71d460 __libc_start_main +
    245

    6    tmpi8bhq3p2                        0x00005588a6b76609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ list: [String] = []\n    var final_list: [String] = []\n    for i in lst {\n\
    \        if i.count % 2 == 0 {\n            list.append(i)\n        }\n    }\n\
    \    let new_list = list.sorted {$0.count < $1.count}\n    for i in new_list {\n\
    \        if i.count == new_list[0].count {\n            final_list.append(i)\n\
    \        }\n    }\n    return final_list\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpvlaefb8i/tmpvlaefb8i.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e299e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e296d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e296d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e296d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlaefb8i                        0x0000562ae591dafe <unavailable> + 6910

    5    libc.so.6                          0x00002b8e29bcd460 __libc_start_main +
    245

    6    tmpvlaefb8i                        0x0000562ae591d439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({ word in word.count % 2 == 0}).sorted(by: { a, b in a.count < b.count\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3xnd4lm5/tmp3xnd4lm5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b694dc81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b694d978b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b694d978988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b694d9777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xnd4lm5                        0x0000562d201d1dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b694de6d460 __libc_start_main +
    245

    6    tmp3xnd4lm5                        0x0000562d201d12e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__zq38mj/tmp__zq38mj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee81042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee80d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee80d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee80d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__zq38mj                        0x000055c0c8135546 <unavailable> + 5446

    5    libc.so.6                          0x00002aee8122e460 __libc_start_main +
    245

    6    tmp__zq38mj                        0x000055c0c81350c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted()\n    let odd_lengths = sorted.filter { $0.count % 2 ==\
    \ 1 }\n    return odd_lengths\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoyrpim7w/tmpoyrpim7w.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c6a653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c6a34ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c6a34a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c6a3497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoyrpim7w                        0x0000560674f89796 <unavailable> + 6038

    5    libc.so.6                          0x00002b6c6a83f460 __libc_start_main +
    245

    6    tmpoyrpim7w                        0x0000560674f89319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    var lstCopy = lst\n    lstCopy.sort(by: { $0.count\
    \ < $1.count })\n    for i in lstCopy {\n        if i.count % 2 == 0 {\n     \
    \       result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp4js8uhk7/tmp4js8uhk7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1316d0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1316a04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1316a04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1316a037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4js8uhk7                        0x000055f0ca01febf <unavailable> + 7871

    5    libc.so.6                          0x00002b1316ef9460 __libc_start_main +
    245

    6    tmp4js8uhk7                        0x000055f0ca01f3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  var removed\
    \ = [String]()\n  var sorted = [String]()\n  for word in lst {\n    if word.count\
    \ % 2 == 0 {\n      removed.append(word)\n    }\n  }\n  sorted = removed.sorted()\n\
    \  return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpo3_ynd9_/tmpo3_ynd9_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1002504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10021fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10021fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10021fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3_ynd9_                        0x0000564ced06764b <unavailable> + 9803

    5    libc.so.6                          0x00002b10026f0460 __libc_start_main +
    245

    6    tmpo3_ynd9_                        0x0000564ced066469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ empty_list = [String]()\n    for index in lst {\n        if index.count % 2\
    \ == 0 {\n            empty_list.append(index)\n        }\n    }\n    return empty_list.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpu_1abqe2/tmpu_1abqe2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e7b517c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e7b20eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e7b20e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e7b20d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_1abqe2                        0x0000559a6bb8464b <unavailable> + 9803

    5    libc.so.6                          0x00002b6e7b703460 __libc_start_main +
    245

    6    tmpu_1abqe2                        0x0000559a6bb83469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ uniqueWords: [String] = []\n    var uniqueLengths: [Int] = []\n    for word\
    \ in lst {\n        if !uniqueLengths.contains(word.count) {\n            uniqueLengths.append(word.count)\n\
    \        }\n    }\n    uniqueLengths.sort()\n    for length in uniqueLengths {\n\
    \        var wordsToDelete: [String] = []\n        for word in lst {\n       \
    \     if word.count == length {\n                if !uniqueWords.contains(word)\
    \ {\n                    uniqueWords.append(word)\n                }\n       \
    \     }\n        }\n    }\n    return uniqueWords\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoh9tyc0c/tmpoh9tyc0c.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ba6b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ba680ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ba680a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ba68097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoh9tyc0c                        0x0000557574063946 <unavailable> + 6470

    5    libc.so.6                          0x00002b0ba6cff460 __libc_start_main +
    245

    6    tmpoh9tyc0c                        0x00005575740634c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ list: [String] = []\n    for str in lst {\n        if str.count % 2 == 0 {\n\
    \            list.append(str)\n        }\n    }\n    return list.sorted(by: {\
    \ ($0.count, $0) < ($1.count, $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n    \
    \        arr.append(i)\n        }\n    }\n    return arr.sorted(by: {$0.count\
    \ < $1.count || ($0.count == $1.count && $0 < $1)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ [String]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp10y3ep6o/tmp10y3ep6o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34f55d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34f52c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34f52c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34f52c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10y3ep6o                        0x0000559bceec0596 <unavailable> + 5526

    5    libc.so.6                          0x00002b34f57bd460 __libc_start_main +
    245

    6    tmp10y3ep6o                        0x0000559bceec0119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    ///\n\
    \    ///\n    var result = [String]()\n    var counter = 0\n    for word in lst\
    \ {\n        if word.count % 2 == 0 {\n            result.append(word)\n     \
    \   }\n    }\n    for _ in result {\n        for word in lst {\n            if\
    \ word.count == counter {\n                result.append(word)\n            }\n\
    \        }\n        counter += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpc6c10zk8/tmpc6c10zk8.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac01ea1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac01e711b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac01e711988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac01e7107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6c10zk8                        0x000055e4f387ea8e <unavailable> + 6798

    5    libc.so.6                          0x00002ac01ec06460 __libc_start_main +
    245

    6    tmpc6c10zk8                        0x000055e4f387e3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted(by: {\n        if $0.count == $1.count {\n            return\
    \ $0 < $1\n        }\n        return $0.count < $1.count\n    })\n    var res\
    \ = [String]()\n    var prev = 0\n    for i in sorted {\n        if i.count %\
    \ 2 == 0 {\n            res.append(i)\n            prev = i.count\n        } else\
    \ if i.count != prev {\n            res.append(i)\n            prev = i.count\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpnkh1x4zg/tmpnkh1x4zg.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b944e7b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b944e4acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b944e4ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b944e4ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkh1x4zg                        0x0000564576b57906 <unavailable> + 6406

    5    libc.so.6                          0x00002b944e9a1460 __libc_start_main +
    245

    6    tmpnkh1x4zg                        0x0000564576b57489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { ($0.count, $0) < ($1.count, $1) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst: [String] = lst\n    for index in stride(from: lst.count - 1, through: 0,\
    \ by: -1) {\n        if lst[index].count % 2 != 0 {\n            lst.remove(at:\
    \ index)\n        }\n    }\n    lst.sort(by: {\n        if $0.count == $1.count\
    \ {\n            return $0 < $1\n        }\n        return $0.count < $1.count\n\
    \    })\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl3cxia84/tmpl3cxia84.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ee3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6eb31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6eb31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6eb307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3cxia84                        0x0000564ded3dadbf <unavailable> + 7615

    5    libc.so.6                          0x00002b8e6f026460 __libc_start_main +
    245

    6    tmpl3cxia84                        0x0000564ded3da2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__zq38mj/tmp__zq38mj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee81042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee80d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee80d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee80d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__zq38mj                        0x000055c0c8135546 <unavailable> + 5446

    5    libc.so.6                          0x00002aee8122e460 __libc_start_main +
    245

    6    tmp__zq38mj                        0x000055c0c81350c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ odd_lengths = lst.filter { $0.count % 2 != 0 }\n    return odd_lengths.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6szz8rk8/tmp6szz8rk8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b4943cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b49133b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b49133988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b491327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6szz8rk8                        0x000055e66f474796 <unavailable> + 6038

    5    libc.so.6                          0x00002b9b49628460 __libc_start_main +
    245

    6    tmp6szz8rk8                        0x000055e66f474319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    let sorted_result\
    \ = result.sorted()\n    return sorted_result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp5oakjw4p/tmp5oakjw4p.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32fd6b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32fd3aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32fd3ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32fd3ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5oakjw4p                        0x00005624152a85fb <unavailable> + 9723

    5    libc.so.6                          0x00002b32fd8a3460 __libc_start_main +
    245

    6    tmp5oakjw4p                        0x00005624152a7419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ arr = lst.filter { $0.count % 2 == 0 }\n    return arr.sorted { $0.count < $1.count\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5wfwsqws/tmp5wfwsqws.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b665028ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b664ff81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b664ff81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b664ff807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wfwsqws                        0x000055df43d5edbf <unavailable> + 7615

    5    libc.so.6                          0x00002b6650476460 __libc_start_main +
    245

    6    tmp5wfwsqws                        0x000055df43d5e2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lstOddNumbers: [String] = []\n    var lstOddNumbersSorted: [String] = []\n \
    \   var stringIsAnOddNumber: Bool = false\n    for item in lst {\n        stringIsAnOddNumber\
    \ = false\n        for i in 1...item.count {\n            if item.count == i {\n\
    \                stringIsAnOddNumber = true\n            }\n        }\n      \
    \  if stringIsAnOddNumber {\n            lstOddNumbers.append(item)\n        }\n\
    \    }\n    lstOddNumbersSorted = lstOddNumbers.sorted()\n    return lstOddNumbersSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpxgrvxexn/tmpxgrvxexn.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f132abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f12fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f12fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f12fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxgrvxexn                        0x000055ea34043986 <unavailable> + 6534

    5    libc.so.6                          0x00002b5f13497460 __libc_start_main +
    245

    6    tmpxgrvxexn                        0x000055ea34043509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ even_lst = lst.filter({ $0.count % 2 == 0 })\n    return even_lst.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpji13zn3r/tmpji13zn3r.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b945464ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9454341b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9454341988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94543407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpji13zn3r                        0x000055817e5044fb <unavailable> + 9467

    5    libc.so.6                          0x00002b9454836460 __libc_start_main +
    245

    6    tmpji13zn3r                        0x000055817e503319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted_list = lst.sorted {$0.characters.count < $1.characters.count}\n    let\
    \ result = sorted_list.filter {($0.characters.count % 2) == 0}\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpmjb0x5pw.swift:18:38: error: 'characters' is unavailable: Please\
    \ use String directly\n    let sorted_list = lst.sorted {$0.characters.count <\
    \ $1.characters.count}\n                                     ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmjb0x5pw.swift:18:60: error: 'characters'\
    \ is unavailable: Please use String directly\n    let sorted_list = lst.sorted\
    \ {$0.characters.count < $1.characters.count}\n                              \
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmjb0x5pw.swift:19:42: error: 'characters' is unavailable:\
    \ Please use String directly\n    let result = sorted_list.filter {($0.characters.count\
    \ % 2) == 0}\n                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ odd: [String] = []\n    for string in lst {\n        if string.count % 2 !=\
    \ 0 {\n            odd.append(string)\n        }\n    }\n    var result: [String]\
    \ = []\n    for string in odd {\n        if !result.contains(string) {\n     \
    \       result.append(string)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpi3eemv67/tmpi3eemv67.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a64f3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a64c34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a64c34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a64c337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3eemv67                        0x0000560220ccd976 <unavailable> + 6518

    5    libc.so.6                          0x00002b7a65129460 __libc_start_main +
    245

    6    tmpi3eemv67                        0x0000560220ccd4f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ list = [String]()\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            list.append(word)\n        }\n    }\n    return list.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpded69gzv/tmpded69gzv.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a2ab09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a2a800b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a2a800988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a2a7ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpded69gzv                        0x00005650da5f664b <unavailable> + 9803

    5    libc.so.6                          0x00002b2a2acf5460 __libc_start_main +
    245

    6    tmpded69gzv                        0x00005650da5f5469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ array = lst.sorted(by: {\n        if $0.count == $1.count {\n            return\
    \ $0 < $1\n        }\n        return $0.count < $1.count\n    })\n    return array.filter\
    \ { $0.count % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst.filter({ $0.count % 2 == 0 })\n    result.sort(by: {$0.count ==\
    \ $1.count ? $0 < $1 : $0.count < $1.count})\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  let lst_new\
    \ = lst.filter { $0.count % 2 == 0 }\n  return lst_new.sorted(by: { $0.count <\
    \ $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp85yzoqpj/tmp85yzoqpj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05c60fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05c5df2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05c5df2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05c5df17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85yzoqpj                        0x00005573d976cdbf <unavailable> + 7615

    5    libc.so.6                          0x00002b05c62e7460 __libc_start_main +
    245

    6    tmp85yzoqpj                        0x00005573d976c2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    var sortedArray: [String] = []\n    var lst = lst\n    \n    while !lst.isEmpty\
    \ {\n        let shortestElement = lst.min { (s1, s2) -> Bool in\n           \
    \ if s1.count == s2.count {\n                return s1 < s2\n            }\n \
    \           return s1.count < s2.count\n        }\n        lst.removeAll { (s)\
    \ -> Bool in\n            s == shortestElement\n        }\n        if shortestElement?.count\
    \ ?? 0 % 2 == 0 {\n            sortedArray.append(shortestElement ?? \"\")\n \
    \       }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp9d_9a4e6/tmp9d_9a4e6.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86bf5cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86bf2c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86bf2c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86bf2c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9d_9a4e6                        0x000055e775d5d926 <unavailable> + 6438

    5    libc.so.6                          0x00002b86bf7b7460 __libc_start_main +
    245

    6    tmp9d_9a4e6                        0x000055e775d5d4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ result = lst.filter {$0.count % 2 == 0}\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpwiw42acf/tmpwiw42acf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6241f53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6241c4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6241c4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6241c497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwiw42acf                        0x000055ef32c9c4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b624213f460 __libc_start_main +
    245

    6    tmpwiw42acf                        0x000055ef32c9b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { (x) -> Bool in\n        return x.count % 2 == 0\n    }.sorted {\
    \ (x, y) -> Bool in\n        if x.count == y.count {\n            return x < y\n\
    \        }\n        return x.count < y.count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ dict = [Int: [String]]()\n    var array = [String]()\n    for i in lst {\n \
    \       if dict[i.count] == nil {\n            dict[i.count] = [i]\n        }\
    \ else {\n            dict[i.count]?.append(i)\n        }\n    }\n    for i in\
    \ dict {\n        if i.key % 2 == 0 {\n            for j in i.value {\n      \
    \          array.append(j)\n            }\n        }\n    }\n    for i in array\
    \ {\n        print(i)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpivh0k0wr/tmpivh0k0wr.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401275ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4012451b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4012451988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40124507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivh0k0wr                        0x000055883b14ee9e <unavailable> + 7838

    5    libc.so.6                          0x00002b4012946460 __libc_start_main +
    245

    6    tmpivh0k0wr                        0x000055883b14e7d9 <unavailable> + 6105

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            result.append(word)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpglpdom28/tmpglpdom28.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ebf0b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ebedafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ebedaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ebedae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglpdom28                        0x00005562fd97f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b8ebf2a4460 __libc_start_main +
    245

    6    tmpglpdom28                        0x00005562fd97e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var result2 = [String]()\n    for i in lst {\n    \
    \    if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n \
    \   result.sort()\n    for i in result {\n        if !result2.contains(i) {\n\
    \            result2.append(i)\n        }\n    }\n    return result2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7n0m83o8/tmp7n0m83o8.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13b76b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13b73aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13b73aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13b73a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7n0m83o8                        0x000055c2d1b9b72b <unavailable> + 10027

    5    libc.so.6                          0x00002b13b789f460 __libc_start_main +
    245

    6    tmp7n0m83o8                        0x000055c2d1b9a549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl3cxia84/tmpl3cxia84.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ee3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6eb31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6eb31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6eb307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3cxia84                        0x0000564ded3dadbf <unavailable> + 7615

    5    libc.so.6                          0x00002b8e6f026460 __libc_start_main +
    245

    6    tmpl3cxia84                        0x0000564ded3da2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__zq38mj/tmp__zq38mj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee81042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee80d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee80d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee80d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__zq38mj                        0x000055c0c8135546 <unavailable> + 5446

    5    libc.so.6                          0x00002aee8122e460 __libc_start_main +
    245

    6    tmp__zq38mj                        0x000055c0c81350c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst.filter({$0.count % 2 == 0})\n    result.sort(by: {\n        if\
    \ $0.count == $1.count {\n            return $0 < $1\n        }\n        return\
    \ $0.count < $1.count\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr: [String] = []\n    for word in lst {\n        if word.count % 2 == 0 {\n\
    \            arr.append(word)\n        }\n    }\n    return arr.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpllb5uw8t/tmpllb5uw8t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4998a0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4998701b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4998701988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49987007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpllb5uw8t                        0x0000556d4ac475fb <unavailable> + 9723

    5    libc.so.6                          0x00002b4998bf6460 __libc_start_main +
    245

    6    tmpllb5uw8t                        0x0000556d4ac46419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ arr = lst.filter({ $0.count % 2 == 0 })\n    return arr.sorted(by: { $0.count\
    \ < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmru61cj6/tmpmru61cj6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad1ff14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad1fc0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad1fc0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad1fc0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmru61cj6                        0x0000557fb0291dbf <unavailable> + 7615

    5    libc.so.6                          0x00002aad20100460 __libc_start_main +
    245

    6    tmpmru61cj6                        0x0000557fb02912e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ evenStrings = lst.filter { (string) -> Bool in\n        string.count % 2 ==\
    \ 0\n    }\n    let sortedStrings = evenStrings.sorted { (string1, string2) ->\
    \ Bool in\n        if string1.count == string2.count {\n            return string1\
    \ < string2\n        }\n        return string1.count < string2.count\n    }\n\
    \    return sortedStrings\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ result = lst.filter { $0.count % 2 == 0 }\n    return result.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp3_llqs2e/tmp3_llqs2e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab429fdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab429cd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab429cd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab429cd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_llqs2e                        0x0000560233d754fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab42a1ca460 __libc_start_main +
    245

    6    tmp3_llqs2e                        0x0000560233d74319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result : [String] = []\n    for i in lst {\n        if (i.count % 2 == 0) {\n\
    \            result.append(i)\n        }\n    }\n    result.sort(by: {$0.count\
    \ < $1.count})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpxee4m29c/tmpxee4m29c.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad594c82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad594979b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad594979988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5949787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxee4m29c                        0x0000555d37017ebf <unavailable> + 7871

    5    libc.so.6                          0x00002ad594e6e460 __libc_start_main +
    245

    6    tmpxee4m29c                        0x0000555d370173e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ a = lst.filter({$0.count % 2 == 0})\n    let b = a.sorted {$0.count < $1.count}\n\
    \    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_b7cvze9/tmp_b7cvze9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d101d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d0fec7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d0fec7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d0fec67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_b7cvze9                        0x00005647fb818dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4d103bc460 __libc_start_main +
    245

    6    tmp_b7cvze9                        0x00005647fb8182e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ lst = lst.filter { $0.count % 2 == 0 }\n    return lst.sorted { $0.count < $1.count\
    \ || ($0.count == $1.count && $0 < $1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = lst.filter { $0.count % 2 == 0 }\n    result.sort { $0.count < $1.count\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpd2m1cd_f/tmpd2m1cd_f.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac256e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac256afbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac256afb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac256afa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2m1cd_f                        0x0000559d72585dcf <unavailable> + 7631

    5    libc.so.6                          0x00002ac256ff0460 __libc_start_main +
    245

    6    tmpd2m1cd_f                        0x0000559d725852f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ arr: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n    \
    \        arr.append(i)\n        }\n    }\n    return arr.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpa3xc_ky2/tmpa3xc_ky2.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa70c83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa7097ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa7097a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa709797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa3xc_ky2                        0x00005643488a55fb <unavailable> + 9723

    5    libc.so.6                          0x00002baa70e6f460 __libc_start_main +
    245

    6    tmpa3xc_ky2                        0x00005643488a4419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ result = lst.filter{ $0.count % 2 == 0 }\n    let sorted = result.sorted{ $0.count\
    \ < $1.count }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_3qnr785/tmp_3qnr785.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67ad6aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67ad3a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67ad3a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67ad3a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3qnr785                        0x00005565e4b39dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b67ad896460 __libc_start_main +
    245

    6    tmp_3qnr785                        0x00005565e4b392e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for item in lst {\n        if item.count % 2 != 0 {\n   \
    \         new_lst.remove(at: lst.firstIndex(of: item)!)\n        }\n    }\n  \
    \  return new_lst.sorted(by: {($0.count < $1.count) || ($0.count == $1.count &&\
    \ $0 < $1)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f17843c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f1753a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6f1753a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6f1753a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6f17539bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6f17527018 <unavailable> + 1355800

    6    tmpmtc4aydk                        0x00005612c4b5f9a2 <unavailable> + 10658

    7    tmpmtc4aydk                        0x00005612c4b5e82d <unavailable> + 6189

    8    libc.so.6                          0x00002b6f17a2f460 __libc_start_main +
    245

    9    tmpmtc4aydk                        0x00005612c4b5e4a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ lst = lst.filter { $0.count % 2 == 0 }\n    return lst.sorted { $0.count ==\
    \ $1.count ? $0 < $1 : $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted {\n        if $0.count == $1.count {\n\
    \            return $0 < $1\n        }\n        return $0.count < $1.count\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__zq38mj/tmp__zq38mj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee81042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee80d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee80d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee80d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__zq38mj                        0x000055c0c8135546 <unavailable> + 5446

    5    libc.so.6                          0x00002aee8122e460 __libc_start_main +
    245

    6    tmp__zq38mj                        0x000055c0c81350c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newLst: [String] = []\n    let set: NSCountedSet = NSCountedSet()\n    for str\
    \ in lst {\n        set.add(str)\n    }\n    let sortedLst: NSArray = set.allObjects.sorted()\
    \ { (obj1, obj2) -> Bool in\n        let a = obj1 as! String\n        let b =\
    \ obj2 as! String\n        if a.count == b.count {\n            return a < b\n\
    \        }\n        return a.count < b.count\n    }\n    for obj in sortedLst\
    \ {\n        let str = obj as! String\n        if set.count(for: str) % 2 == 0\
    \ {\n            newLst.append(str)\n        }\n    }\n    return newLst\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpy2f4u7oq.swift:19:14: error: cannot find type 'NSCountedSet' in\
    \ scope\n    let set: NSCountedSet = NSCountedSet()\n             ^~~~~~~~~~~~\n\
    /tmp/tmpy2f4u7oq.swift:23:20: error: cannot find type 'NSArray' in scope\n   \
    \ let sortedLst: NSArray = set.allObjects.sorted() { (obj1, obj2) -> Bool in\n\
    \                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n    \
    \        res.append(i)\n        }\n    }\n    return res.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpsgq0_5fc/tmpsgq0_5fc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c7816fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c77e66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c77e66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c77e657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgq0_5fc                        0x0000555bff94a5fb <unavailable> + 9723

    5    libc.so.6                          0x00002b9c7835b460 __libc_start_main +
    245

    6    tmpsgq0_5fc                        0x0000555bff949419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({$0.count % 2 == 0}).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpodu6of7u/tmpodu6of7u.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fba8e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fba5d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fba5d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fba5d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodu6of7u                        0x000055c4190624fb <unavailable> + 9467

    5    libc.so.6                          0x00002b2fbaace460 __libc_start_main +
    245

    6    tmpodu6of7u                        0x000055c419061319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({ $0.count % 2 == 0 }).sorted(by: { $0.count < $1.count })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpeza7hp6h/tmpeza7hp6h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abebcd46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abebca3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abebca3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abebca3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeza7hp6h                        0x000055d2bbd71dbf <unavailable> + 7615

    5    libc.so.6                          0x00002abebcf32460 __libc_start_main +
    245

    6    tmpeza7hp6h                        0x000055d2bbd712e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ myArray = lst\n    for i in stride(from: myArray.count - 1, through: 0, by:\
    \ -1) {\n        if myArray[i].count % 2 != 0 {\n            myArray.remove(at:\
    \ i)\n        }\n    }\n    return myArray.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpt8e33xtf/tmpt8e33xtf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5338982c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5338679b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5338679988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53386787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt8e33xtf                        0x0000558ae81b776b <unavailable> + 10091

    5    libc.so.6                          0x00002b5338b6e460 __libc_start_main +
    245

    6    tmpt8e33xtf                        0x0000558ae81b6589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for str in lst {\n        if str.count % 2 == 0 {\n\
    \            result.append(str)\n        }\n    }\n    result.sort()\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp2sn4xqi9/tmp2sn4xqi9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31a87e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31a84d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31a84d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31a84d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2sn4xqi9                        0x000055942e0c867b <unavailable> + 9851

    5    libc.so.6                          0x00002b31a89cc460 __libc_start_main +
    245

    6    tmp2sn4xqi9                        0x000055942e0c7499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var index = 0\n    while index < lst.count {\n    \
    \    if lst[index].count % 2 == 0 {\n            result.append(lst[index])\n \
    \       }\n        index += 1\n    }\n    return result.sorted()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyxwl8nzg/tmpyxwl8nzg.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec3b72fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec3b426b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec3b426988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec3b4257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxwl8nzg                        0x000055a7a3c4f58b <unavailable> + 9611

    5    libc.so.6                          0x00002aec3b91b460 __libc_start_main +
    245

    6    tmpyxwl8nzg                        0x000055a7a3c4e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    ///\
    \ Write your code here\n    var newArray = [String]()\n    for i in lst {\n  \
    \      if i.count % 2 == 0 {\n            newArray.append(i)\n        }\n    }\n\
    \    newArray.sort()\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpzdddn4vu/tmpzdddn4vu.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89d12adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89d0fa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89d0fa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89d0fa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdddn4vu                        0x000055f946c506cb <unavailable> + 9931

    5    libc.so.6                          0x00002b89d1499460 __libc_start_main +
    245

    6    tmpzdddn4vu                        0x000055f946c4f4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ s = \"\"\n    return sorted(lst, {(s1: String, s2: String) -> Bool in return\
    \ count(s1) < count(s2)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpgq8d34xx.swift:19:12: error: cannot find 'sorted' in scope\n  \
    \  return sorted(lst, {(s1: String, s2: String) -> Bool in return count(s1) <\
    \ count(s2)})\n           ^~~~~~\n/tmp/tmpgq8d34xx.swift:19:68: error: cannot\
    \ find 'count' in scope\n    return sorted(lst, {(s1: String, s2: String) -> Bool\
    \ in return count(s1) < count(s2)})\n                                        \
    \                           ^~~~~\n/tmp/tmpgq8d34xx.swift:19:80: error: cannot\
    \ find 'count' in scope\n    return sorted(lst, {(s1: String, s2: String) -> Bool\
    \ in return count(s1) < count(s2)})\n                                        \
    \                                       ^~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count == $1.count ? $0 < $1 : $0.count\
    \ < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ lst = lst\n    let first = lst.removeFirst()\n    var result = [first]\n   \
    \ for i in lst {\n        for j in 0..<result.count {\n            if i.count\
    \ > result[j].count {\n                result.insert(i, at: j)\n             \
    \   break\n            } else if i.count == result[j].count {\n              \
    \  if i > result[j] {\n                    result.insert(i, at: j)\n         \
    \           break\n                } else {\n                    result.insert(i,\
    \ at: j + 1)\n                    break\n                }\n            } else\
    \ if j == result.count - 1 {\n                result.append(i)\n             \
    \   break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpg0_v8ww4/tmpg0_v8ww4.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bfccb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bfc9adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bfc9ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bfc9ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0_v8ww4                        0x000056539e8cfb26 <unavailable> + 6950

    5    libc.so.6                          0x00002b3bfcea2460 __libc_start_main +
    245

    6    tmpg0_v8ww4                        0x000056539e8cf6a9 <unavailable> + 5801

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    var dict: [Int: [String]] = [:]\n    for index in\
    \ 0..<lst.count {\n        let string = lst[index]\n        let length = string.count\n\
    \        if dict[length] == nil {\n            dict[length] = [string]\n     \
    \   } else {\n            dict[length]?.append(string)\n        }\n    }\n   \
    \ let sorted = dict.sorted { (a, b) -> Bool in\n        if a.key < b.key {\n \
    \           return true\n        } else if a.key == b.key {\n            let a_strings\
    \ = a.value\n            let b_strings = b.value\n            let a_string = a_strings[0]\n\
    \            let b_string = b_strings[0]\n            return a_string < b_string\n\
    \        } else {\n            return false\n        }\n    }\n    for (key, _)\
    \ in sorted {\n        if key % 2 == 0 {\n            for (_, lst) in dict {\n\
    \                for string in lst {\n                    result.append(string)\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpheyugmlp/tmpheyugmlp.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1073eeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1073be5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1073be5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1073be47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpheyugmlp                        0x000055c1a7e81da6 <unavailable> + 7590

    5    libc.so.6                          0x00002b10740da460 __libc_start_main +
    245

    6    tmpheyugmlp                        0x000055c1a7e81929 <unavailable> + 6441

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ filteredLst = lst.filter { String($0.count % 2 == 0) }\n    return Array(Set(filteredLst)).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpjfezi6jc.swift:18:36: error: cannot convert value of type 'String'\
    \ to closure result type 'Bool'\n    let filteredLst = lst.filter { String($0.count\
    \ % 2 == 0) }\n                                   ^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyw_52b95/tmpyw_52b95.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3dfcc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3df9b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3df9b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3df9b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyw_52b95                        0x000055a54e97d546 <unavailable> + 5446

    5    libc.so.6                          0x00002ab3dfead460 __libc_start_main +
    245

    6    tmpyw_52b95                        0x000055a54e97d0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9uj5q0qs/tmp9uj5q0qs.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cd6989c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cd6680b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cd6680988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cd667f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uj5q0qs                        0x00005576040945fb <unavailable> + 9723

    5    libc.so.6                          0x00002b2cd6b75460 __libc_start_main +
    245

    6    tmp9uj5q0qs                        0x0000557604093419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl3cxia84/tmpl3cxia84.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ee3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6eb31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6eb31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6eb307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3cxia84                        0x0000564ded3dadbf <unavailable> + 7615

    5    libc.so.6                          0x00002b8e6f026460 __libc_start_main +
    245

    6    tmpl3cxia84                        0x0000564ded3da2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted {\n        $0.count == $1.count ? $0 < $1 : $0.count < $1.count\n\
    \    }\n    let filtered = sorted.filter { $0.count % 2 == 0 }\n    return filtered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ lst = lst.filter { $0.count % 2 == 0 }\n    return lst.sorted { (s1, s2) ->\
    \ Bool in\n        if s1.count == s2.count {\n            return s1 < s2\n   \
    \     }\n        return s1.count < s2.count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted(by:\
    \ { $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9_uwyqr_/tmp9_uwyqr_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f2ec64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f2e95bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f2e95b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f2e95a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_uwyqr_                        0x00005633f411bebf <unavailable> + 7871

    5    libc.so.6                          0x00002b1f2ee50460 __libc_start_main +
    245

    6    tmp9_uwyqr_                        0x00005633f411b3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ [String]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp10y3ep6o/tmp10y3ep6o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34f55d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34f52c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34f52c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34f52c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10y3ep6o                        0x0000559bceec0596 <unavailable> + 5526

    5    libc.so.6                          0x00002b34f57bd460 __libc_start_main +
    245

    6    tmp10y3ep6o                        0x0000559bceec0119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted {\n        if $0.count == $1.count {\n\
    \            return $0 < $1\n        }\n        return $0.count < $1.count\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ sortedArray = lst.filter { (word) -> Bool in\n        word.count % 2 == 0\n\
    \    }\n    sortedArray.sort { (word1, word2) -> Bool in\n        return word1.count\
    \ < word2.count\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsl9gxqup/tmpsl9gxqup.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a253dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a250d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a250d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a250d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl9gxqup                        0x00005571de96ddcf <unavailable> + 7631

    5    libc.so.6                          0x00002b4a255c7460 __libc_start_main +
    245

    6    tmpsl9gxqup                        0x00005571de96d2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ ret: [String] = []\n    var index: Int = 0\n    while index < lst.count {\n\
    \        if lst[index].count % 2 == 0 {\n            ret.append(lst[index])\n\
    \        }\n        index += 1\n    }\n    ret.sort()\n    return ret\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpe45w0dn2/tmpe45w0dn2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c21029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c20d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c20d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c20d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe45w0dn2                        0x0000558b9e8a55bb <unavailable> + 9659

    5    libc.so.6                          0x00002b2c21215460 __libc_start_main +
    245

    6    tmpe45w0dn2                        0x0000558b9e8a43d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ creating a new array that will hold strings with even lengths\n    var newArray:\
    \ [String] = []\n    // sorting the array from smaller string to bigger string\n\
    \    lst.sorted()\n    // creating a loop that goes to the end of the array\n\
    \    for string in lst {\n        // if the length of the current string is even\
    \ than\n        if string.count % 2 == 0 {\n            // append it to the new\
    \ array\n            newArray.append(string)\n        }\n    }\n    // returning\
    \ the new array\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpre2sy9aw/tmpre2sy9aw.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad512948c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad51263fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad51263f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad51263e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpre2sy9aw                        0x0000563a82c14ade <unavailable> + 6878

    5    libc.so.6                          0x00002ad512b34460 __libc_start_main +
    245

    6    tmpre2sy9aw                        0x0000563a82c14419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { ($0.count == $1.count) ? $0 < $1 :\
    \ $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ filtered_list = [String]()\n    for element in lst {\n        if element.count\
    \ % 2 == 0 {\n            filtered_list.append(element)\n        }\n    }\n  \
    \  return filtered_list.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9wugw0ok/tmp9wugw0ok.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad39d417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad39d10eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad39d10e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad39d10d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9wugw0ok                        0x000055e3aef5a64b <unavailable> + 9803

    5    libc.so.6                          0x00002ad39d603460 __libc_start_main +
    245

    6    tmp9wugw0ok                        0x000055e3aef59469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    var result = [String]()\n    var i = 0\n    while i < lst.count {\n     \
    \   if lst[i].count % 2 == 0 {\n            result.append(lst[i])\n        }\n\
    \        i += 1\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp_z7c1amw/tmp_z7c1amw.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b2e71ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b2e415b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b2e415988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b2e4147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_z7c1amw                        0x0000561c6baa460b <unavailable> + 9739

    5    libc.so.6                          0x00002b2b2e90a460 __libc_start_main +
    245

    6    tmp_z7c1amw                        0x0000561c6baa3429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter {\n        $0.count % 2 == 0\n    }.sorted {\n        if $0.count\
    \ == $1.count {\n            return $0 < $1\n        }\n        return $0.count\
    \ < $1.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ list: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         list.append(i)\n        }\n    }\n    list.sort()\n    return list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpi_r4a6gx/tmpi_r4a6gx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aced9c3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aced9932b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aced9932988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aced99317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_r4a6gx                        0x000055947486367b <unavailable> + 9851

    5    libc.so.6                          0x00002aced9e27460 __libc_start_main +
    245

    6    tmpi_r4a6gx                        0x0000559474862499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({ $0.count % 2 == 0 }).sorted(by: { $0.count < $1.count })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpeza7hp6h/tmpeza7hp6h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abebcd46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abebca3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abebca3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abebca3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeza7hp6h                        0x000055d2bbd71dbf <unavailable> + 7615

    5    libc.so.6                          0x00002abebcf32460 __libc_start_main +
    245

    6    tmpeza7hp6h                        0x000055d2bbd712e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ temp: [String] = []\n    var sorted_list: [String] = []\n    var sorted_list_2:\
    \ [String] = []\n    for index in 0..<lst.count {\n        if lst[index].count\
    \ % 2 == 0 {\n            temp.append(lst[index])\n        }\n    }\n    for str\
    \ in temp {\n        if sorted_list.count == 0 {\n            sorted_list.append(str)\n\
    \        } else {\n            for ind in 0..<sorted_list.count {\n          \
    \      if str.count < sorted_list[ind].count {\n                    sorted_list.insert(str,\
    \ at: ind)\n                    break\n                } else if str.count ==\
    \ sorted_list[ind].count {\n                    if str < sorted_list[ind] {\n\
    \                        sorted_list.insert(str, at: ind)\n                  \
    \      break\n                    } else if ind == sorted_list.count - 1 {\n \
    \                       sorted_list.append(str)\n                        break\n\
    \                    }\n                } else if ind == sorted_list.count - 1\
    \ {\n                    sorted_list.append(str)\n                    break\n\
    \                }\n            }\n        }\n    }\n    for str in sorted_list\
    \ {\n        if sorted_list_2.count == 0 {\n            sorted_list_2.append(str)\n\
    \        } else {\n            for ind in 0..<sorted_list_2.count {\n        \
    \        if str.count > sorted_list_2[ind].count {\n                    sorted_list_2.insert(str,\
    \ at: ind)\n                    break\n                } else if str.count ==\
    \ sorted_list_2[ind].count {\n                    if str > sorted_list_2[ind]\
    \ {\n                        sorted_list_2.insert(str, at: ind)\n            \
    \            break\n                    } else if ind == sorted_list_2.count -\
    \ 1 {\n                        sorted_list_2.append(str)\n                   \
    \     break\n                    }\n                } else if ind == sorted_list_2.count\
    \ - 1 {\n                    sorted_list_2.append(str)\n                    break\n\
    \                }\n            }\n        }\n    }\n    return sorted_list_2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp67e7mau3/tmp67e7mau3.swift:89: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f65569c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f65260b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f65260988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f6525f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67e7mau3                        0x0000562b04bc1d1e <unavailable> + 7454

    5    libc.so.6                          0x00002b3f65755460 __libc_start_main +
    245

    6    tmp67e7mau3                        0x0000562b04bc1659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ list = lst\n    list.sort { (a, b) -> Bool in\n        if a.count == b.count\
    \ {\n            return a < b\n        }\n        return a.count < b.count\n \
    \   }\n    list = list.filter { (e) -> Bool in\n        return e.count % 2 ==\
    \ 0\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ odd = lst.filter {$0.count % 2 == 1}\n    let even = lst.filter {$0.count %\
    \ 2 == 0}\n    return odd.sorted(by: <) + even.sorted(by: <)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpf54c4ytn/tmpf54c4ytn.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abddb11bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abddae12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abddae12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abddae117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf54c4ytn                        0x000055bc0e1d5816 <unavailable> + 6166

    5    libc.so.6                          0x00002abddb307460 __libc_start_main +
    245

    6    tmpf54c4ytn                        0x000055bc0e1d5399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for str in lst {\n        if str.count % 2 == 0 {\n\
    \            result.append(str)\n        }\n    }\n    result.sort(by: {$0.count\
    \ < $1.count})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpnupqll24/tmpnupqll24.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ef1051c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ef0d48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ef0d48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ef0d477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnupqll24                        0x00005586f96b3ebf <unavailable> + 7871

    5    libc.so.6                          0x00002b4ef123d460 __libc_start_main +
    245

    6    tmpnupqll24                        0x00005586f96b33e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__zq38mj/tmp__zq38mj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee81042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee80d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee80d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee80d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__zq38mj                        0x000055c0c8135546 <unavailable> + 5446

    5    libc.so.6                          0x00002aee8122e460 __libc_start_main +
    245

    6    tmp__zq38mj                        0x000055c0c81350c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count < $1.count }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl3cxia84/tmpl3cxia84.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e6ee3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e6eb31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e6eb31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e6eb307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3cxia84                        0x0000564ded3dadbf <unavailable> + 7615

    5    libc.so.6                          0x00002b8e6f026460 __libc_start_main +
    245

    6    tmpl3cxia84                        0x0000564ded3da2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({x in x.count % 2 == 0}).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpemgmj0jn/tmpemgmj0jn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52ee94dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52ee644b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52ee644988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52ee6437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemgmj0jn                        0x0000561f64c294fb <unavailable> + 9467

    5    libc.so.6                          0x00002b52eeb39460 __libc_start_main +
    245

    6    tmpemgmj0jn                        0x0000561f64c28319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({$0.count % 2 == 0}).sorted(by: {$0.count < $1.count || ($0.count\
    \ == $1.count && $0 < $1)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort(by: {$0.count <\
    \ $1.count || ($0.count == $1.count && $0 < $1)})\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ oddLength: [String] = []\n    for i in lst {\n        if i.count % 2 != 0 {\n\
    \            oddLength.append(i)\n        }\n    }\n    oddLength.sort()\n   \
    \ return oddLength\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpksjti9mx/tmpksjti9mx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af384062c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af383d59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af383d59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af383d587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpksjti9mx                        0x000055fd4f4f2916 <unavailable> + 6422

    5    libc.so.6                          0x00002af38424e460 __libc_start_main +
    245

    6    tmpksjti9mx                        0x000055fd4f4f2499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted { $0.count == $1.count ? $0 < $1 : $0.count\
    \ < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ odd_length_string = lst.filter { $0.count % 2 == 1 }\n    let even_length_string\
    \ = lst.filter { $0.count % 2 == 0 }\n    let result = even_length_string.sorted(by:\
    \ { ($0.count, $0) < ($1.count, $1) })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9uj5q0qs/tmp9uj5q0qs.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cd6989c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cd6680b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cd6680988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cd667f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9uj5q0qs                        0x00005576040945fb <unavailable> + 9723

    5    libc.so.6                          0x00002b2cd6b75460 __libc_start_main +
    245

    6    tmp9uj5q0qs                        0x0000557604093419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter {$0.count % 2 == 0}.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpex48x680/tmpex48x680.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9dee0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9deb02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9deb02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9deb017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpex48x680                        0x0000560927e2a4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9deff7460 __libc_start_main +
    245

    6    tmpex48x680                        0x0000560927e29319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({$0.count % 2 == 0}).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpodu6of7u/tmpodu6of7u.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fba8e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fba5d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fba5d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fba5d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodu6of7u                        0x000055c4190624fb <unavailable> + 9467

    5    libc.so.6                          0x00002b2fbaace460 __libc_start_main +
    245

    6    tmpodu6of7u                        0x000055c419061319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result: [String] = []\n    for item in lst {\n        if item.count % 2 == 0\
    \ {\n            result.append(item)\n        }\n    }\n    result.sort()\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpb6p3mcey/tmpb6p3mcey.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e1dd00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e1d9f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e1d9f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e1d9f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb6p3mcey                        0x000055fb7d76f67b <unavailable> + 9851

    5    libc.so.6                          0x00002b3e1deec460 __libc_start_main +
    245

    6    tmpb6p3mcey                        0x000055fb7d76e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n  var result:\
    \ [String] = []\n  var evenLst: [String] = []\n  for i in lst {\n    if i.count\
    \ % 2 == 0 {\n      evenLst.append(i)\n    }\n  }\n  let sortedLst = evenLst.sorted()\n\
    \  for i in sortedLst {\n    if !result.contains(i) {\n      result.append(i)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpagrkp3ek/tmpagrkp3ek.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b410c59cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b410c293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b410c293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b410c2927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagrkp3ek                        0x00005613c3d3c65b <unavailable> + 9819

    5    libc.so.6                          0x00002b410c788460 __libc_start_main +
    245

    6    tmpagrkp3ek                        0x00005613c3d3b479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    ///\
    \ ************************* Code ************************* ///\n    /// Get length\
    \ of input list\n    let len = lst.count\n    /// Sort the input list.\n    let\
    \ orderedLst = lst.sorted()\n    /// Create an array to contain output\n    var\
    \ result = [String]()\n    /// Loop through the ordered list.\n    for i in orderedLst\
    \ {\n        /// If element has even length\n        if i.count % 2 == 0 {\n \
    \           /// Add element to output list\n            result.append(i)\n   \
    \     }\n    }\n    /// Return output list\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpftmtafg5/tmpftmtafg5.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc99e9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc99b94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc99b94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc99b937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpftmtafg5                        0x0000559699f066ab <unavailable> + 9899

    5    libc.so.6                          0x00002acc9a089460 __libc_start_main +
    245

    6    tmpftmtafg5                        0x0000559699f054c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ if count less than or equal to 1 -> return lst\n    if lst.count <= 1 {\n  \
    \      return lst\n    }\n    // iterate through the list\n    var newList: [String]\
    \ = []\n    for i in lst {\n        // if the character count % 2 == 0 -> add\
    \ to the new list\n        if i.count % 2 == 0 {\n            newList.append(i)\n\
    \        }\n    }\n    return newList.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpzkr5qq1p/tmpzkr5qq1p.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37c41f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37c3ee7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37c3ee7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37c3ee67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzkr5qq1p                        0x0000557b983fe64b <unavailable> + 9803

    5    libc.so.6                          0x00002b37c43dc460 __libc_start_main +
    245

    6    tmpzkr5qq1p                        0x0000557b983fd469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ output = lst.filter({$0.count % 2 == 0})\n    return output.sorted(by: { $0.count\
    \ == $1.count ? $0 < $1 : $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ odd_words: [String] = []\n    for word in lst {\n        if word.count % 2 ==\
    \ 1 {\n            odd_words.append(word)\n        }\n    }\n    odd_words.sort()\n\
    \    return odd_words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbe4hzm5m/tmpbe4hzm5m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac11710ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac116e01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac116e01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac116e007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbe4hzm5m                        0x00005587c567e916 <unavailable> + 6422

    5    libc.so.6                          0x00002ac1172f6460 __libc_start_main +
    245

    6    tmpbe4hzm5m                        0x00005587c567e499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    new_lst.sort()\n    var result: [String] = []\n    var count\
    \ = 0\n    while new_lst.count > count {\n        if new_lst[count].count % 2\
    \ == 0 {\n            result.append(new_lst[count])\n        }\n        count\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpc5co1ipq/tmpc5co1ipq.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9969741c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9969438b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9969438988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99694377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc5co1ipq                        0x0000559f83af35bb <unavailable> + 9659

    5    libc.so.6                          0x00002b996992d460 __libc_start_main +
    245

    6    tmpc5co1ipq                        0x0000559f83af23d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ new_lst = lst\n    for i in 0..<new_lst.count {\n        if new_lst[i].count\
    \ % 2 != 0 {\n            new_lst.remove(at: i)\n        }\n    }\n    return\
    \ new_lst.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9aec387c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aec07e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9aec07e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9aec07e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9aec07dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9aebe7dfc3 <unavailable> + 188355

    6    tmp154gyi_m                        0x00005623214027b5 <unavailable> + 10165

    7    tmp154gyi_m                        0x00005623214017cd <unavailable> + 6093

    8    libc.so.6                          0x00002b9aec573460 __libc_start_main +
    245

    9    tmp154gyi_m                        0x0000562321401449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ res = lst.filter { $0.count % 2 == 0 }\n    return res.sorted(by: { $0.count\
    \ < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpcwesgnbb/tmpcwesgnbb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad14f1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad14c12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad14c12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad14c117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcwesgnbb                        0x00005577dbab9dbf <unavailable> + 7615

    5    libc.so.6                          0x00002aad15107460 __libc_start_main +
    245

    6    tmpcwesgnbb                        0x00005577dbab92e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter({ (elem) -> Bool in\n        return elem.count % 2 == 0\n    }).sorted(by:\
    \ { (elem1, elem2) -> Bool in\n        if elem1.count == elem2.count {\n     \
    \       return elem1 < elem2\n        }\n        return elem1.count < elem2.count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ even_lst = lst.filter({ str in\n        str.count % 2 == 0\n    })\n    let\
    \ sorted_lst = even_lst.sorted(by: { str1, str2 in\n        if str1.count == str2.count\
    \ {\n            return str1 < str2\n        }\n        return str1.count < str2.count\n\
    \    })\n    return sorted_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ [String]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp10y3ep6o/tmp10y3ep6o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34f55d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34f52c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34f52c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34f52c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10y3ep6o                        0x0000559bceec0596 <unavailable> + 5526

    5    libc.so.6                          0x00002b34f57bd460 __libc_start_main +
    245

    6    tmp10y3ep6o                        0x0000559bceec0119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newList: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n\
    \            newList.append(i)\n        }\n    }\n    return newList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6ph4igy8/tmp6ph4igy8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fea106c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fe9dfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fe9dfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fe9dfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ph4igy8                        0x000055fd9bb235fb <unavailable> + 9723

    5    libc.so.6                          0x00002b5fea2f2460 __libc_start_main +
    245

    6    tmp6ph4igy8                        0x000055fd9bb22419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ result = lst.filter { (word) -> Bool in\n        return word.count % 2 == 0\n\
    \    }\n    return result.sorted { (word1, word2) -> Bool in\n        if word1.count\
    \ == word2.count {\n            return word1 < word2\n        }\n        return\
    \ word1.count < word2.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ Array(Set(lst.filter { $0.count % 2 == 0 })).sorted { lhs, rhs in\n        if\
    \ lhs.count == rhs.count {\n            return lhs < rhs\n        }\n        return\
    \ lhs.count < rhs.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ odd_lst: [String] = []\n    for string in lst {\n        if string.count % 2\
    \ == 1 {\n            odd_lst.append(string)\n        }\n    }\n    odd_lst.sort()\n\
    \    return odd_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpxyezu9pa/tmpxyezu9pa.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba759913c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba75960ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba75960a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7596097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxyezu9pa                        0x0000561577b81916 <unavailable> + 6422

    5    libc.so.6                          0x00002ba759aff460 __libc_start_main +
    245

    6    tmpxyezu9pa                        0x0000561577b81499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ arr = lst.filter { $0.count % 2 == 0 }\n    return arr.sorted { $0.count < $1.count\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp5wfwsqws/tmp5wfwsqws.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b665028ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b664ff81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b664ff81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b664ff807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wfwsqws                        0x000055df43d5edbf <unavailable> + 7615

    5    libc.so.6                          0x00002b6650476460 __libc_start_main +
    245

    6    tmp5wfwsqws                        0x000055df43d5e2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ empty_str_arr = [String]()\n    let lst_len = lst.count\n    if lst_len == 0\
    \ {\n        return empty_str_arr\n    }\n    var new_lst = [String]()\n    for\
    \ ind in 0..<lst_len {\n        if lst[ind].count % 2 == 0 {\n            new_lst.append(lst[ind])\n\
    \        }\n    }\n    new_lst.sort(by: { $0.count < $1.count })\n    return new_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpnzeebqbc/tmpnzeebqbc.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb91045c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb90d3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb90d3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb90d3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzeebqbc                        0x0000555ef79d4f4f <unavailable> + 8015

    5    libc.so.6                          0x00002aeb91231460 __libc_start_main +
    245

    6    tmpnzeebqbc                        0x0000555ef79d4479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ newList = [String]()\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            newList.append(word)\n        }\n    }\n    return newList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpyqv7t5s1/tmpyqv7t5s1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b17696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b1738db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b1738d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b1738c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyqv7t5s1                        0x000056507eeea64b <unavailable> + 9803

    5    libc.so.6                          0x00002b5b17882460 __libc_start_main +
    245

    6    tmpyqv7t5s1                        0x000056507eee9469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter {$0.count % 2 == 0}.sorted(by: {$0.count < $1.count}).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpki8openl/tmpki8openl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad89bc7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad89b976b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad89b976988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad89b9757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpki8openl                        0x000055d35357856b <unavailable> + 9579

    5    libc.so.6                          0x00002ad89be6b460 __libc_start_main +
    245

    6    tmpki8openl                        0x000055d353577389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: 1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted_list = lst.sorted(by: {$0.characters.count < $1.characters.count})\n\
    \    var result: [String] = []\n    for i in sorted_list {\n        if i.characters.count\
    \ % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmpmiu8kw3q.swift:18:42: error: 'characters' is unavailable: Please\
    \ use String directly\n    let sorted_list = lst.sorted(by: {$0.characters.count\
    \ < $1.characters.count})\n                                         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmiu8kw3q.swift:18:64:\
    \ error: 'characters' is unavailable: Please use String directly\n    let sorted_list\
    \ = lst.sorted(by: {$0.characters.count < $1.characters.count})\n            \
    \                                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmiu8kw3q.swift:21:14: error: 'characters'\
    \ is unavailable: Please use String directly\n        if i.characters.count %\
    \ 2 == 0 {\n             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp2l72hyhz/tmp2l72hyhz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f9746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f943db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f943d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f943c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l72hyhz                        0x000055d296eed4fb <unavailable> + 9467

    5    libc.so.6                          0x00002b86f9932460 __libc_start_main +
    245

    6    tmp2l72hyhz                        0x000055d296eec319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ TODO\n    return [\"\"]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpiu6nn5f5/tmpiu6nn5f5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2b6e51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2b6b48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2b6b48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2b6b477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiu6nn5f5                        0x00005644d4fa9546 <unavailable> + 5446

    5    libc.so.6                          0x00002ae2b703d460 __libc_start_main +
    245

    6    tmpiu6nn5f5                        0x00005644d4fa90c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ oddLengths = lst.filter({ $0.count % 2 != 0 }).sorted()\n    return oddLengths\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmprfdifoo3/tmprfdifoo3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60862e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6085fd7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6085fd7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6085fd67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfdifoo3                        0x000055bdc400c796 <unavailable> + 6038

    5    libc.so.6                          0x00002b60864cc460 __libc_start_main +
    245

    6    tmprfdifoo3                        0x000055bdc400c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ len2words = Dictionary(grouping: lst) { $0.count }\n    var sorted_len2words\
    \ = len2words.sorted { first, second in\n        if first.key < second.key {\n\
    \            return true\n        } else if first.key > second.key {\n       \
    \     return false\n        } else {\n            let word1 = first.value.sorted()\n\
    \            let word2 = second.value.sorted()\n            if word1[0] < word2[0]\
    \ {\n                return true\n            } else {\n                return\
    \ false\n            }\n        }\n    }\n    let res = sorted_len2words.filter\
    \ { $0.key % 2 == 0 }\n    return res.flatMap { $0.value }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpurwyh6bd/tmpurwyh6bd.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d14722c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d14419b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d14419988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d144187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurwyh6bd                        0x000055cfe52ad07f <unavailable> + 8319

    5    libc.so.6                          0x00002b0d1490e460 __libc_start_main +
    245

    6    tmpurwyh6bd                        0x000055cfe52ac5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res: [String] = []\n    for i in lst {\n        if i.count % 2 == 0 {\n    \
    \        res.append(i)\n        }\n    }\n    res.sort()\n    return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp8lf90ilp/tmp8lf90ilp.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54d49d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54d46ccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54d46cc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54d46cb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8lf90ilp                        0x000055d2e5a1967b <unavailable> + 9851

    5    libc.so.6                          0x00002b54d4bc1460 __libc_start_main +
    245

    6    tmp8lf90ilp                        0x000055d2e5a18499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { $0.count % 2 == 0 }.sorted {\n        if $0.count == $1.count {\n\
    \            return $0 < $1\n        }\n        return $0.count < $1.count\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: -1
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var sorted_lst = lst.sorted(by: <)\n    var smallest_length\
    \ = sorted_lst[0].count\n    while !sorted_lst.isEmpty {\n        for (i, word)\
    \ in sorted_lst.enumerated() {\n            if word.count % 2 == 0 && word.count\
    \ == smallest_length {\n                result.append(word)\n                sorted_lst.remove(at:\
    \ i)\n            }\n        }\n        smallest_length += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979854
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ lst.filter { (word) -> Bool in\n        return word.count % 2 == 0\n    }.sorted\
    \ { (word1, word2) -> Bool in\n        return word1.count < word2.count\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpprdhzg6u/tmpprdhzg6u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdef11dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdeee14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdeee14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdeee137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpprdhzg6u                        0x00005602b867ddbf <unavailable> + 7615

    5    libc.so.6                          0x00002afdef309460 __libc_start_main +
    245

    6    tmpprdhzg6u                        0x00005602b867d2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ odd_lst = lst.filter({$0.count % 2 == 1})\n    let sorted_lst = odd_lst.sorted\
    \ { first, second in\n        if first.count != second.count {\n            return\
    \ first.count < second.count\n        } else {\n            return first < second\n\
    \        }\n    }\n    return sorted_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpo7ocph1x/tmpo7ocph1x.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee7dbdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee7d8d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee7d8d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee7d8d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7ocph1x                        0x0000562e451dc7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002aee7ddca460 __libc_start_main +
    245

    6    tmpo7ocph1x                        0x0000562e451dc339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__zq38mj/tmp__zq38mj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee81042c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee80d39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee80d39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee80d387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__zq38mj                        0x000055c0c8135546 <unavailable> + 5446

    5    libc.so.6                          0x00002aee8122e460 __libc_start_main +
    245

    6    tmp__zq38mj                        0x000055c0c81350c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sorted = lst.sorted { (lhs, rhs) -> Bool in\n        if lhs.count == rhs.count\
    \ {\n            return lhs < rhs\n        }\n        return lhs.count < rhs.count\n\
    \    }\n    let result = sorted.filter { (s) -> Bool in\n        return s.count\
    \ % 2 == 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    \n\
    \    var arr = [String]()\n    var min = 0\n    var max = 0\n    var new_arr =\
    \ [String]()\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for word\
    \ in lst {\n        for char in word {\n            if alphabet.contains(char)\
    \ {\n                arr.append(word)\n            }\n        }\n    }\n    for\
    \ index in 0..<arr.count {\n        if arr[index].count > arr[max].count {\n \
    \           max = index\n        }\n        if arr[index].count < arr[min].count\
    \ {\n            min = index\n        }\n    }\n    for index in min...max {\n\
    \        new_arr.append(arr[index])\n    }\n    return new_arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp1ogvqy7i/tmp1ogvqy7i.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac430854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac43054bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac43054b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac43054a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ogvqy7i                        0x0000563119d37c76 <unavailable> + 7286

    5    libc.so.6                          0x00002ac430a40460 __libc_start_main +
    245

    6    tmp1ogvqy7i                        0x0000563119d377f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    //\
    \ TODO: your implementation here\n    return lst\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpp4oshepm/tmpp4oshepm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8136680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8136377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8136377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81363767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp4oshepm                        0x00005636cd6e8546 <unavailable> + 5446

    5    libc.so.6                          0x00002b813686c460 __libc_start_main +
    245

    6    tmpp4oshepm                        0x00005636cd6e80c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    for i in lst {\n        if i.count % 2 == 0 {\n   \
    \         result.append(i)\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpowogxflb/tmpowogxflb.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a1e93fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a1e636b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a1e636988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a1e6357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowogxflb                        0x000055e24b8766cb <unavailable> + 9931

    5    libc.so.6                          0x00002b9a1eb2b460 __libc_start_main +
    245

    6    tmpowogxflb                        0x000055e24b8754e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ result: [String] = lst.filter { $0.count % 2 == 0 }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp6yp07esm/tmp6yp07esm.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a737a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a7349db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a7349d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a7349c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yp07esm                        0x00005561957b24fb <unavailable> + 9467

    5    libc.so.6                          0x00002b6a73992460 __libc_start_main +
    245

    6    tmp6yp07esm                        0x00005561957b1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ res = lst.filter({ $0.count % 2 == 0 })\n    return res.sorted(by: { $0.count\
    \ == $1.count ? $0 < $1 : $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ odd_length_array = lst.filter({$0.count % 2 != 0})\n    let odd_length_array_sorted\
    \ = odd_length_array.sorted(by: {$0.count < $1.count})\n    return odd_length_array_sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmphbcy6sdt/tmphbcy6sdt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c00631c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c00328b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c00328988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c003277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphbcy6sdt                        0x00005654464f2766 <unavailable> + 5990

    5    libc.so.6                          0x00002b1c0081d460 __libc_start_main +
    245

    6    tmphbcy6sdt                        0x00005654464f22e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ res_lst = [String]()\n    for word in lst {\n        if word.count % 2 == 0\
    \ {\n            res_lst.append(word)\n        }\n    }\n    res_lst.sort()\n\
    \    return res_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpv1t5e2q9/tmpv1t5e2q9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8301cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83019f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83019f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83019ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv1t5e2q9                        0x0000564a24deb6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b8301ee5460 __libc_start_main +
    245

    6    tmpv1t5e2q9                        0x0000564a24dea4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    let\
    \ sortedArray = lst.sorted(by: {$0.count < $1.count})\n    let sortedWords = sortedArray.filter\
    \ {\n        $0.count % 2 == 0\n    }\n    return sortedWords\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) ==\
    \ [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\",\
    \ \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpisqmssa9/tmpisqmssa9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc28fc7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc28cbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc28cbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc28cbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpisqmssa9                        0x000055dfcafcddbf <unavailable> + 7615

    5    libc.so.6                          0x00002adc291b3460 __libc_start_main +
    245

    6    tmpisqmssa9                        0x000055dfcafcd2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979849
- exit_code: -4
  program: "\n/// Write a function that accepts an array of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ array with a sorted order,\n/// The array is always an array of strings and\
    \ never an array of numbers,\n/// and it may contain duplicates.\n/// The order\
    \ of the array should be ascending by length of each word, and you\n/// should\
    \ return the array sorted by that rule.\n/// If two words have the same length,\
    \ sort the array alphabetically.\n/// The function should return an array of strings\
    \ in sorted order.\n/// You may assume that all words will have the same length.\n\
    /// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n///\
    \ [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n///\
    \ [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var\
    \ result = [String]()\n    var arr = lst\n    let sorted = arr.sorted { (s1, s2)\
    \ -> Bool in\n        if s1.count > s2.count {\n            return true\n    \
    \    } else if s1.count == s2.count {\n            return s1 < s2\n        } else\
    \ {\n            return false\n        }\n    }\n    for (i, str) in sorted.enumerated()\
    \ {\n        if (i == 0 || str.count > sorted[i - 1].count) && str.count % 2 ==\
    \ 0 {\n            result.append(str)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpjp6m7sgw/tmpjp6m7sgw.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad41b45fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad41b156b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad41b156988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad41b1557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjp6m7sgw                        0x0000560728865a06 <unavailable> + 6662

    5    libc.so.6                          0x00002ad41b64b460 __libc_start_main +
    245

    6    tmpjp6m7sgw                        0x0000560728865589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1659979849
