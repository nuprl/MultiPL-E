language: swift
name: HumanEval_139_special_factorial
results:
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmprz8fvmyj/tmprz8fvmyj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36fde3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fdb33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fdb33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fdb327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8fvmyj                        0x0000557dc32671b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b36fe028460 __libc_start_main +
    245

    6    tmprz8fvmyj                        0x0000557dc3266e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // Your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpyqyt3h11/tmpyqyt3h11.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac238eb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac238bacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac238bac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac238bab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyqyt3h11                        0x000055a5edac21b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ac2390a1460 __libc_start_main +
    245

    6    tmpyqyt3h11                        0x000055a5edac1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp12znz_mn.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    var specialFactorial = 1\n    \n    for i in 1...n\
    \ {\n        specialFactorial *= factorial(n: i)\n    }\n    \n    return specialFactorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpm93e3a_8.swift:15:29: error: cannot find 'factorial' in scope\n\
    \        specialFactorial *= factorial(n: i)\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var a = 1\n    for i in 1...n {\n        a *= i\n    }\n\
    \    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpo_89jvbu/tmpo_89jvbu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e8b209c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e8af00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e8af00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e8aeff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo_89jvbu                        0x0000561657e0b337 <unavailable> + 4919

    5    libc.so.6                          0x00002b9e8b3f5460 __libc_start_main +
    245

    6    tmpo_89jvbu                        0x0000561657e0afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // your code here\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp4xxbj56a.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    var total = 1\n    for i in 1...n\
    \ {\n        factorial *= i\n        total *= factorial\n    }\n    return total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    var answer = 0\n    for i in 1..<n+1 {\n        answer\
    \ = 1\n        for j in 1..<i+1 {\n            answer *= j\n        }\n    }\n\
    \    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpldd93oud/tmpldd93oud.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7465e38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7465b2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7465b2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7465b2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldd93oud                        0x0000562c5df66337 <unavailable> + 4919

    5    libc.so.6                          0x00002b7466024460 __libc_start_main +
    245

    6    tmpldd93oud                        0x0000562c5df65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var brazilianFactorial: Int = 1\n    for i in 1...n {\n \
    \       var factorialI: Int = 1\n        for j in 1...i {\n            factorialI\
    \ *= j\n        }\n        brazilianFactorial *= factorialI\n    }\n    return\
    \ brazilianFactorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    } else {\n        return\
    \ n * special_factorial(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp86q1tmxp/tmp86q1tmxp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac23c671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac23c368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac23c368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac23c3677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86q1tmxp                        0x0000560682a761b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ac23c85d460 __libc_start_main +
    245

    6    tmp86q1tmxp                        0x0000560682a75e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var output: Int = 1\n    var i: Int = n\n    while i > 0\
    \ {\n        output *= factorial(i)\n        i -= 1\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmput64g2yl.swift:14:19: error: cannot find 'factorial' in scope\n\
    \        output *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var product = 1\n    for number in 1...n {\n        product\
    \ *= factorial(n: number)\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnyxmrnsg.swift:13:20: error: cannot find 'factorial' in scope\n\
    \        product *= factorial(n: number)\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp7ez0f_i3/tmp7ez0f_i3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66f7012c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66f6d09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66f6d09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66f6d087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ez0f_i3                        0x0000558cdd52b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b66f71fe460 __libc_start_main +
    245

    6    tmp7ez0f_i3                        0x0000558cdd52ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    var nArray: [Int] = []\n    var result: Int = 1\n \
    \   \n    for i in 1...n {\n        nArray.append(i)\n    }\n    \n    for i in\
    \ nArray {\n        result *= i\n    }\n    \n    for i in (1...n-1).reversed()\
    \ {\n        result *= i\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpn7_xvfii/tmpn7_xvfii.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5cc3c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5cc0bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5cc0bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5cc0be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7_xvfii                        0x000055b8d7693887 <unavailable> + 6279

    5    libc.so.6                          0x00002ac5cc5b4460 __libc_start_main +
    245

    6    tmpn7_xvfii                        0x000055b8d7693539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // Write your code here\n    var brazilian_factorial: Int\
    \ = 1\n    if n == 0 {\n        return 1\n    }\n    else {\n        var num =\
    \ n\n        while num > 0 {\n            var i = num\n            while i > 0\
    \ {\n                brazilian_factorial *= i\n                i -= 1\n      \
    \      }\n            num -= 1\n        }\n    }\n    return brazilian_factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n \
    \       return 1\n    }\n    return n * special_factorial(n: n - 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp7coap6wt/tmp7coap6wt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2f16d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2f13c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2f13c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2f13c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7coap6wt                        0x000055ed71c161b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ab2f18bc460 __libc_start_main +
    245

    6    tmp7coap6wt                        0x000055ed71c15e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    var second_factorial = 1\n    var\
    \ product = 1\n    for index in 1...n {\n        factorial *= index\n        second_factorial\
    \ *= index\n        product *= factorial\n    }\n    for index in 1...n-1 {\n\
    \        product *= second_factorial\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpf1_y6iuc/tmpf1_y6iuc.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dcd031c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dccd28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dccd28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dccd277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1_y6iuc                        0x000055662e797337 <unavailable> + 4919

    5    libc.so.6                          0x00002b2dcd21d460 __libc_start_main +
    245

    6    tmpf1_y6iuc                        0x000055662e796fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return (1...n).reduce(1, *)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpmf0dkdyi/tmpmf0dkdyi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9136a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b913676eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b913676e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b913676d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmf0dkdyi                        0x000055c2a2ac0387 <unavailable> + 4999

    5    libc.so.6                          0x00002b9136c63460 __libc_start_main +
    245

    6    tmpmf0dkdyi                        0x000055c2a2ac0039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    var result = 1\n    var numArray = [Int]()\n    \n\
    \    for i in 1...n {\n        numArray.append(i)\n    }\n    \n    for i in numArray\
    \ {\n        result *= i\n    }\n    \n    for i in numArray.reverse() {\n   \
    \     result *= i\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3wes3d4z.swift:23:23: error: for-in loop requires '()' to conform\
    \ to 'Sequence'\n    for i in numArray.reverse() {\n             ~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // Write your solution here\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpzxxppljm/tmpzxxppljm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae99c054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae99bd4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae99bd4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae99bd4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxxppljm                        0x000055c28f4411b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ae99c240460 __libc_start_main +
    245

    6    tmpzxxppljm                        0x000055c28f440e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var total = 1;\n    for i in 1...n {\n        total *= i;\n\
    \    }\n    for i in 1...n-1 {\n        total *= i;\n    }\n    return total;\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp9qm7su5o/tmp9qm7su5o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b923cfddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b923ccd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b923ccd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b923ccd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qm7su5o                        0x000055e3739a0337 <unavailable> + 4919

    5    libc.so.6                          0x00002b923d1c9460 __libc_start_main +
    245

    6    tmp9qm7su5o                        0x000055e37399ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    while n > 0 {\n        result *= n *\
    \ (n - 1)\n        n -= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp86ubz1lw.swift:14:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    if n > 0 {\n        for i in 1...n {\n\
    \            result *= factorial(n: i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgsmcudex.swift:14:23: error: cannot find 'factorial' in scope\n\
    \            result *= factorial(n: i)\n                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp_lx1y7ps/tmp_lx1y7ps.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae71835cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae718053b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae718053988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7180527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lx1y7ps                        0x0000558c274321b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ae718548460 __libc_start_main +
    245

    6    tmp_lx1y7ps                        0x0000558c27431e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return\
    \ n * special_factorial(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmpipeoiurs/tmpipeoiurs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23189aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23186a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23186a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23186a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipeoiurs                        0x000055c95cd5e1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b2318b96460 __libc_start_main +
    245

    6    tmpipeoiurs                        0x000055c95cd5de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n * special_factorial(n: n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979280
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 1 {\n        return 0\n    } else if n == 1 {\n  \
    \      return 1\n    } else {\n        return n * special_factorial(n: n - 1)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(special_factorial(n: 4)\
    \ == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp_nq5sfr7/tmp_nq5sfr7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a93d99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a93a90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a93a90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a93a8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_nq5sfr7                        0x0000563d7cd7c1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b6a93f85460 __libc_start_main +
    245

    6    tmp_nq5sfr7                        0x0000563d7cd7be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 0 }\n    return (1...n).map{ $0.factorial\
    \ }.reduce(1, *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpczgga8wk.swift:12:28: error: value of type 'Int' has no member\
    \ 'factorial'\n    return (1...n).map{ $0.factorial }.reduce(1, *)\n         \
    \               ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // Enter your code below\n    var result = 1\n    if n >\
    \ 0 {\n        for i in 1...n {\n            result *= i\n        }\n        for\
    \ i in 1...n-1 {\n            result *= i\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpa471smdx/tmpa471smdx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75acb38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75ac82fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75ac82f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75ac82e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa471smdx                        0x000055c13dc06337 <unavailable> + 4919

    5    libc.so.6                          0x00002b75acd24460 __libc_start_main +
    245

    6    tmpa471smdx                        0x000055c13dc05fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n > 0 ? n * special_factorial(n: n - 1) : 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpvs9tjsun/tmpvs9tjsun.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad7d1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad7cea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad7cea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad7cea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvs9tjsun                        0x000055643b8311b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aad7d398460 __libc_start_main +
    245

    6    tmpvs9tjsun                        0x000055643b830e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmprz8fvmyj/tmprz8fvmyj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36fde3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fdb33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fdb33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fdb327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8fvmyj                        0x0000557dc32671b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b36fe028460 __libc_start_main +
    245

    6    tmprz8fvmyj                        0x0000557dc3266e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factor = 1\n    for i in 1...n {\n        factor *= i\n\
    \    }\n    return factor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpdx8lo1cx/tmpdx8lo1cx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d9d3d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d9d0cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d9d0cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d9d0ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdx8lo1cx                        0x00005645b0808337 <unavailable> + 4919

    5    libc.so.6                          0x00002b4d9d5c4460 __libc_start_main +
    245

    6    tmpdx8lo1cx                        0x00005645b0807fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmprz8fvmyj/tmprz8fvmyj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36fde3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fdb33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fdb33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fdb327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8fvmyj                        0x0000557dc32671b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b36fe028460 __libc_start_main +
    245

    6    tmprz8fvmyj                        0x0000557dc3266e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var sum = 1\n    var i = n\n    while i > 0 {\n        sum\
    \ *= i\n        i -= 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp4qz_vl01/tmp4qz_vl01.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae963918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae96360fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae96360f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae96360e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4qz_vl01                        0x000055a43aaae1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ae963b04460 __libc_start_main +
    245

    6    tmp4qz_vl01                        0x000055a43aaade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp12znz_mn.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmprz8fvmyj/tmprz8fvmyj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36fde3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fdb33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fdb33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fdb327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8fvmyj                        0x0000557dc32671b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b36fe028460 __libc_start_main +
    245

    6    tmprz8fvmyj                        0x0000557dc3266e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let factorial = n.factorial\n    var brazilian_factorial\
    \ = factorial\n    if n < 2 {\n        return factorial\n    }\n    for i in 1..<n\
    \ {\n        brazilian_factorial *= (n - i).factorial\n    }\n    return brazilian_factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp58wqjtgy.swift:11:23: error: value of type 'Int' has no member\
    \ 'factorial'\n    let factorial = n.factorial\n                    ~ ^~~~~~~~~\n\
    /tmp/tmp58wqjtgy.swift:17:40: error: value of type 'Int' has no member 'factorial'\n\
    \        brazilian_factorial *= (n - i).factorial\n                          \
    \     ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp12znz_mn.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // Your code here!\n    if n == 0 {\n        return 1\n \
    \   }\n    var a = n\n    var b = n - 1\n    while a > 1 {\n        b *= a\n \
    \       a -= 1\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmpjprsrw5i/tmpjprsrw5i.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8a6f58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8a6c4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8a6c4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8a6c4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjprsrw5i                        0x000055d6c05e61b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ae8a7144460 __libc_start_main +
    245

    6    tmpjprsrw5i                        0x000055d6c05e5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    //TODO: Implement!\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp61ht4nqa/tmp61ht4nqa.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff8e319c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff8e010b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff8e010988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff8e00f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61ht4nqa                        0x0000558b614d91b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aff8e505460 __libc_start_main +
    245

    6    tmp61ht4nqa                        0x0000558b614d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // TODO: Implement this function\n    return 1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp4d8lyjig/tmp4d8lyjig.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5cf91ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5cf611b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5cf611988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5cf6107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4d8lyjig                        0x0000563f5819d1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ac5cfb06460 __libc_start_main +
    245

    6    tmp4d8lyjig                        0x0000563f5819ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // your code here\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: SyntaxError
  stderr: '/tmp/tmp4xxbj56a.swift:12:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var factorial =\
    \ 1\n    for i in 1...n {\n        factorial *= i\n    }\n    return special_factorial(n:\
    \ n - 1) * factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n > 0 ? n * special_factorial(n: n - 1) : 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpvs9tjsun/tmpvs9tjsun.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad7d1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad7cea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad7cea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad7cea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvs9tjsun                        0x000055643b8311b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aad7d398460 __libc_start_main +
    245

    6    tmpvs9tjsun                        0x000055643b830e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp12znz_mn.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return (1...n).reduce(1, *)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpmf0dkdyi/tmpmf0dkdyi.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9136a77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b913676eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b913676e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b913676d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmf0dkdyi                        0x000055c2a2ac0387 <unavailable> + 4999

    5    libc.so.6                          0x00002b9136c63460 __libc_start_main +
    245

    6    tmpmf0dkdyi                        0x000055c2a2ac0039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpo50g346x/tmpo50g346x.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88f596ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88f5665b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88f5665988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88f56647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo50g346x                        0x0000562536fdb1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88f5b5a460 __libc_start_main +
    245

    6    tmpo50g346x                        0x0000562536fdae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let factorial = n.factorial()\n    var brazilianFactorial\
    \ = factorial\n    if n > 1 {\n        brazilianFactorial *= (n - 1).factorial()\n\
    \    }\n    if n > 2 {\n        brazilianFactorial *= (n - 2).factorial()\n  \
    \  }\n    return brazilianFactorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbf_k1i36.swift:11:23: error: value of type 'Int' has no member\
    \ 'factorial'\n    let factorial = n.factorial()\n                    ~ ^~~~~~~~~\n\
    /tmp/tmpbf_k1i36.swift:14:39: error: value of type 'Int' has no member 'factorial'\n\
    \        brazilianFactorial *= (n - 1).factorial()\n                         \
    \     ~~~~~~~ ^~~~~~~~~\n/tmp/tmpbf_k1i36.swift:17:39: error: value of type 'Int'\
    \ has no member 'factorial'\n        brazilianFactorial *= (n - 2).factorial()\n\
    \                              ~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for num in 1...n {\n        result *=\
    \ factorial(n: num)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppdjfjm3f.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: num)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var fact = 1\n    for i in 1...n {\n        fact *= i\n \
    \   }\n    return fact\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpjirmlk0p/tmpjirmlk0p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab01a251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab019f48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab019f48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab019f477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjirmlk0p                        0x0000563c86fee337 <unavailable> + 4919

    5    libc.so.6                          0x00002ab01a43d460 __libc_start_main +
    245

    6    tmpjirmlk0p                        0x0000563c86fedfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  // YOUR CODE HERE\n  if n <= 1 {\n    return 1\n  }\n  return\
    \ n * special_factorial(n: n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp33zqrws2/tmp33zqrws2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba347f84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba347c7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba347c7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba347c7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33zqrws2                        0x000055cd7e8b51b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ba348170460 __libc_start_main +
    245

    6    tmp33zqrws2                        0x000055cd7e8b4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmprz8fvmyj/tmprz8fvmyj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36fde3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fdb33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fdb33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fdb327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8fvmyj                        0x0000557dc32671b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b36fe028460 __libc_start_main +
    245

    6    tmprz8fvmyj                        0x0000557dc3266e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return\
    \ n * special_factorial(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmpipeoiurs/tmpipeoiurs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23189aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23186a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23186a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23186a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipeoiurs                        0x000055c95cd5e1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b2318b96460 __libc_start_main +
    245

    6    tmpipeoiurs                        0x000055c95cd5de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    for i in 1..<n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp_zk65rkb/tmp_zk65rkb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2177cb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21779aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21779aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21779a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zk65rkb                        0x000056220b73b427 <unavailable> + 5159

    5    libc.so.6                          0x00002b2177e9f460 __libc_start_main +
    245

    6    tmp_zk65rkb                        0x000056220b73b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n <= 1 ? 1 : n * special_factorial(n: n - 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpp5ipssxg/tmpp5ipssxg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b6d5a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b6d29cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b6d29c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b6d29b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5ipssxg                        0x00005562e31c81b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b6b6d791460 __libc_start_main +
    245

    6    tmpp5ipssxg                        0x00005562e31c7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n > 0 ? n * special_factorial(n: n - 1) : 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpvs9tjsun/tmpvs9tjsun.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad7d1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad7cea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad7cea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad7cea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvs9tjsun                        0x000055643b8311b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aad7d398460 __libc_start_main +
    245

    6    tmpvs9tjsun                        0x000055643b830e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpqetkyzxj/tmpqetkyzxj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad937895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad93758cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad93758c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad93758b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqetkyzxj                        0x000055e85cdf91b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad937a81460 __libc_start_main +
    245

    6    tmpqetkyzxj                        0x000055e85cdf8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in (1...n).reversed() {\n     \
    \   result *= factorial(n: i)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7jm5s9q7.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n: n) / factorial(n: n - 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptj1evqwu.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n: n) / factorial(n: n - 1)\n           ^~~~~~~~~\n/tmp/tmptj1evqwu.swift:11:30:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n: n) / factorial(n:\
    \ n - 1)\n                             ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 0 }\n    return (1...n).reduce(1,\
    \ { $0 * $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpeozx2yym/tmpeozx2yym.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3885864c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388555bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388555b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388555a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeozx2yym                        0x000055a74d30b387 <unavailable> + 4999

    5    libc.so.6                          0x00002b3885a50460 __libc_start_main +
    245

    6    tmpeozx2yym                        0x000055a74d30b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 0 }\n    return n == 1 ? 1 : n\
    \ * special_factorial(n: n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpiovzyn8_/tmpiovzyn8_.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeda59f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeda56ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeda56ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeda56eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiovzyn8_                        0x0000562d219161b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aeda5be1460 __libc_start_main +
    245

    6    tmpiovzyn8_                        0x0000562d21915e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmprz8fvmyj/tmprz8fvmyj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36fde3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fdb33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fdb33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fdb327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8fvmyj                        0x0000557dc32671b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b36fe028460 __libc_start_main +
    245

    6    tmprz8fvmyj                        0x0000557dc3266e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // This function computes n! as a product of 1 * 2 * ...\
    \ * n\n    func factorial(x: Int) -> Int {\n        return Array(1...x).reduce(1,\
    \ *)\n    }\n    // This function returns an array of numbers from n downto 1\n\
    \    func sequence(x: Int) -> [Int] {\n        return Array(1...x).reversed()\n\
    \    }\n    // Compute n! * (n-1)! * (n-2)! * ... * 1! as a product of factorials\
    \ from n downto 1\n    return sequence(x: n).map { factorial(x: $0) }.reduce(1,\
    \ *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let factorials = [1, 1, 2, 6, 24, 120, 720, 5040, 40320,\
    \ 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000,\
    \ 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000]\n\
    \    var result = 1\n    for i in 0...n {\n        result *= factorials[i]\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return\
    \ n * special_factorial(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmpipeoiurs/tmpipeoiurs.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23189aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23186a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23186a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23186a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipeoiurs                        0x000055c95cd5e1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b2318b96460 __libc_start_main +
    245

    6    tmpipeoiurs                        0x000055c95cd5de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    var i = n\n    while i >= 1 {\n     \
    \   result *= factorial(n: i)\n        i -= 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpy41xc25l.swift:14:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let a = n;\n    let b = n-1;\n    let c = n-2;\n    let d\
    \ = n-3;\n    let e = n-4;\n    let f = n-5;\n    let g = n-6;\n    let h = n-7;\n\
    \    let i = n-8;\n    let j = n-9;\n    let k = n-10;\n    let l = n-11;\n  \
    \  let m = n-12;\n    let o = n-13;\n    let p = n-14;\n    let q = n-15;\n  \
    \  let r = n-16;\n    let s = n-17;\n    let t = n-18;\n    let u = n-19;\n  \
    \  let v = n-20;\n    let w = n-21;\n    let x = n-22;\n    let y = n-23;\n  \
    \  let z = n-24;\n    let aa = n-25;\n    let ab = n-26;\n    let ac = n-27;\n\
    \    let ad = n-28;\n    let ae = n-29;\n    let af = n-30;\n    let ag = n-31;\n\
    \    let ah = n-32;\n    let ai = n-33;\n    let aj = n-34;\n    let ak = n-35;\n\
    \    let al = n-36;\n    let am = n-37;\n    let an = n-38;\n    let ao = n-39;\n\
    \    let ap = n-40;\n    let aq = n-41;\n    let ar = n-42;\n    let as = n-43;\n\
    \    let at = n-44;\n    let au = n-45;\n    let av = n-46;\n    let aw = n-47;\n\
    \    let ax = n-48;\n    let ay = n-49;\n    let az = n-50;\n    let ba = n-51;\n\
    \    let bb = n-52;\n    let bc = n-53;\n    let bd = n-54;\n    let be = n-55;\n\
    \   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp31rld6om.swift:54:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    let as = n-43;\n        ^\n/tmp/tmp31rld6om.swift:54:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    let as = n-43;\n      \
    \  ^~\n        `as`\n/tmp/tmp31rld6om.swift:11:9: warning: initialization of immutable\
    \ value 'a' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let a = n;\n    ~~~~^\n    _\n/tmp/tmp31rld6om.swift:12:9: warning:\
    \ initialization of immutable value 'b' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let b = n-1;\n    ~~~~^\n    _\n/tmp/tmp31rld6om.swift:13:9:\
    \ warning: initialization of immutable value 'c' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let c = n-2;\n    ~~~~^\n    _\n\
    /tmp/tmp31rld6om.swift:14:9: warning: initialization of immutable value 'd' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ d = n-3;\n    ~~~~^\n    _\n/tmp/tmp31rld6om.swift:15:9: warning: initialization\
    \ of immutable value 'e' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let e = n-4;\n    ~~~~^\n    _\n/tmp/tmp31rld6om.swift:16:9:\
    \ warning: initialization of immutable value 'f' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let f = n-5;\n    ~~~~^\n    _\n\
    /tmp/tmp31rld6om.swift:17:9: warning: initialization of immutable value 'g' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ g = n-6;\n    ~~~~^\n    _\n/tmp/tmp31rld6om.swift:18:9: warning: initialization\
    \ of immutable value 'h' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    let h = n-7;\n    ~~~~^\n    _\n/tmp/tmp31rld6om.swift:19:9:\
    \ warning: initialization of immutable value 'i' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let i = n-8;\n    ~~~~^\n    _\n\
    /tmp/tmp31rld6om.swift:20:9: warning: initialization of immutable value 'j' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    let\
    \ j = n-"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // TODO: Implement this function.\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpih_ihup5/tmpih_ihup5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaa8f23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaa8c1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaa8c1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaa8c197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpih_ihup5                        0x000055b5bd83e1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002acaa910f460 __libc_start_main +
    245

    6    tmpih_ihup5                        0x000055b5bd83de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var sum = 1\n    if n == 0 || n == 1 {\n        return 1\n\
    \    }\n    for i in 1...n {\n        sum *= i\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp3lr6z8pm/tmp3lr6z8pm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b597cd29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b597ca20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b597ca20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b597ca1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3lr6z8pm                        0x000055b63c849337 <unavailable> + 4919

    5    libc.so.6                          0x00002b597cf15460 __libc_start_main +
    245

    6    tmp3lr6z8pm                        0x000055b63c848fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var n = n\n    var result = 1\n    while n > 0 {\n      \
    \  result *= factorial(n: n)\n        n -= 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsprh89us.swift:14:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: n)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let n = n - 1\n    var sum = n\n    while n > 0 {\n     \
    \   sum *= n\n        n -= 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpuo8ili_k.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n/tmp/tmpuo8ili_k.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let n = n - 1\n    ^~~\n\
    \    var\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 0 }\n    return (1...n).reduce(1,\
    \ *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8xpguo_u/tmp8xpguo_u.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b839a68dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b839a384b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b839a384988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b839a3837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xpguo_u                        0x000056024aa65387 <unavailable> + 4999

    5    libc.so.6                          0x00002b839a879460 __libc_start_main +
    245

    6    tmp8xpguo_u                        0x000056024aa65039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var total = 1;\n    var i = n;\n    while i > 0 {\n     \
    \   total *= i;\n        i -= 1;\n    }\n    i = n - 1;\n    while i > 0 {\n \
    \       total *= i;\n        i -= 1;\n    }\n    return total;\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpisfk_fe3/tmpisfk_fe3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bd456cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bd4263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bd4263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bd42627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpisfk_fe3                        0x000055a48d1b71b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b0bd4758460 __libc_start_main +
    245

    6    tmpisfk_fe3                        0x000055a48d1b6e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return (1..<n).reduce(factorial(n)) {$0 * factorial($1)}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpd8a1_cbl.swift:11:27: error: cannot find 'factorial' in scope\n\
    \    return (1..<n).reduce(factorial(n)) {$0 * factorial($1)}\n              \
    \            ^~~~~~~~~\n/tmp/tmpd8a1_cbl.swift:11:47: error: cannot find 'factorial'\
    \ in scope\n    return (1..<n).reduce(factorial(n)) {$0 * factorial($1)}\n   \
    \                                           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var n = n\n    var result = 1\n    while n > 0 {\n      \
    \  result *= n--\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpag4dostw.swift:14:20: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n        result *= n--\n                   ^~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return (1...n).map { factorial(n: $0) }.reduce(1, *)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbt6udkf2.swift:11:26: error: cannot find 'factorial' in scope\n\
    \    return (1...n).map { factorial(n: $0) }.reduce(1, *)\n                  \
    \       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmpv64frcrc/tmpv64frcrc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25fe215c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25fdf0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25fdf0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25fdf0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv64frcrc                        0x00005597ae6ae1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b25fe401460 __libc_start_main +
    245

    6    tmpv64frcrc                        0x00005597ae6ade69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmprz8fvmyj/tmprz8fvmyj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36fde3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fdb33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fdb33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fdb327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8fvmyj                        0x0000557dc32671b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b36fe028460 __libc_start_main +
    245

    6    tmprz8fvmyj                        0x0000557dc3266e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    var ans = 1\n \
    \   for i in 1...n {\n        ans *= i\n    }\n    for i in 1..<n {\n        ans\
    \ *= i\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpzcbpdzwa/tmpzcbpdzwa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0149242c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0148f39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0148f39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0148f387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcbpdzwa                        0x000055a9599e6427 <unavailable> + 5159

    5    libc.so.6                          0x00002b014942e460 __libc_start_main +
    245

    6    tmpzcbpdzwa                        0x000055a9599e60d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var factorial =\
    \ 1\n    for i in 1...n {\n        factorial *= i\n    }\n    return special_factorial(n:\
    \ n - 1) * factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpqetkyzxj/tmpqetkyzxj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad937895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad93758cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad93758c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad93758b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqetkyzxj                        0x000055e85cdf91b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad937a81460 __libc_start_main +
    245

    6    tmpqetkyzxj                        0x000055e85cdf8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var total = 1\n    for i in 1..<n+1 {\n        total *= i\
    \ * (i-1)\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp0yklhmn3/tmp0yklhmn3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2833e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2830dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2830da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2830d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0yklhmn3                        0x00005627ed9e3337 <unavailable> + 4919

    5    libc.so.6                          0x00002ae2835cf460 __libc_start_main +
    245

    6    tmp0yklhmn3                        0x00005627ed9e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp7ez0f_i3/tmp7ez0f_i3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66f7012c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66f6d09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66f6d09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66f6d087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ez0f_i3                        0x0000558cdd52b1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b66f71fe460 __libc_start_main +
    245

    6    tmp7ez0f_i3                        0x0000558cdd52ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  var factorial = 1\n  for i in 1...n {\n    factorial *= i\n\
    \  }\n  return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpdw21v4r8/tmpdw21v4r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59cdd04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59cd9fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59cd9fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59cd9fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdw21v4r8                        0x0000562336bb9337 <unavailable> + 4919

    5    libc.so.6                          0x00002b59cdef0460 __libc_start_main +
    245

    6    tmpdw21v4r8                        0x0000562336bb8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  var num = n\n  var result = 1\n  while num > 0 {\n    result\
    \ *= (num * (num - 1))\n    num -= 2\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmprjqbqcm1/tmprjqbqcm1.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac33c710c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac33c407b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac33c407988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac33c4067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjqbqcm1                        0x00005579b4b921b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ac33c8fc460 __libc_start_main +
    245

    6    tmprjqbqcm1                        0x00005579b4b91e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var i = n\n    var factorial = 1\n    while i > 0 {\n   \
    \     factorial *= factorial_of(i)\n        i -= 1\n    }\n    return factorial\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmploexs4ud.swift:14:22: error: cannot find 'factorial_of' in scope\n\
    \        factorial *= factorial_of(i)\n                     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    // Base Case\n    if n == 1 {\n        return 1\n \
    \   }\n    \n    // Recursive Case\n    let nFactorial = n * special_factorial(n:\
    \ n - 1)\n    return nFactorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphya7vu85/tmphya7vu85.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b64854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b6454bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b6454b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b6454a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphya7vu85                        0x00005600243381b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b6b64a40460 __libc_start_main +
    245

    6    tmphya7vu85                        0x0000560024337e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var total: Int = 1\n    var originalNumber: Int = n\n   \
    \ while n > 0 {\n        var product: Int = 1\n        for i in 1...n {\n    \
    \        product *= i\n        }\n        total *= product\n        n -= 1\n \
    \   }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_mbpgy3b.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n * (n - 1) * (n - 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp8qkkqnu_/tmp8qkkqnu_.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aceb79acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aceb76a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aceb76a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aceb76a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8qkkqnu_                        0x0000557f1f30d1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aceb7b98460 __libc_start_main +
    245

    6    tmp8qkkqnu_                        0x0000557f1f30ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let arrayOfFactorials = Array(1...n).map{ factorial(n: $0)\
    \ }\n    return arrayOfFactorials.reduce(1, *)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5zin30_w.swift:11:47: error: cannot find 'factorial' in scope\n\
    \    let arrayOfFactorials = Array(1...n).map{ factorial(n: $0) }\n          \
    \                                    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    var result = 1\n    var i = 1\n    \n    while i <=\
    \ n {\n        result *= factorial(n: i)\n        i += 1\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpsqj_ciqd.swift:16:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpcnfz21en/tmpcnfz21en.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae341d3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae341a34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae341a34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae341a337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnfz21en                        0x000055e1ff93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002ae341f29460 __libc_start_main +
    245

    6    tmpcnfz21en                        0x000055e1ff93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var result = 1\n\
    \    var iter: Int = n\n    while iter > 0 {\n        result *= factorial(number:\
    \ iter)\n        iter -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpvrq17nh0.swift:17:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(number: iter)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  if n == 0 {\n    return 1\n  } else {\n    return n * special_factorial(n:\
    \ n - 1)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp9h1at7qq/tmp9h1at7qq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a72fe9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a72ce0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a72ce0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a72cdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9h1at7qq                        0x000055ad6b4bc1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b5a731d5460 __libc_start_main +
    245

    6    tmp9h1at7qq                        0x000055ad6b4bbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n > 0 ? n * special_factorial(n: n - 1) : 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpvs9tjsun/tmpvs9tjsun.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad7d1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad7cea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad7cea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad7cea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvs9tjsun                        0x000055643b8311b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aad7d398460 __libc_start_main +
    245

    6    tmpvs9tjsun                        0x000055643b830e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // YOUR CODE HERE\n    var y = 1\n    for x in 1...n {\n\
    \        y = y * x\n    }\n    return y\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmpzfaxnz10/tmpzfaxnz10.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d1ad68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d1aa5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d1aa5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d1aa5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfaxnz10                        0x000055ddea003337 <unavailable> + 4919

    5    libc.so.6                          0x00002b0d1af54460 __libc_start_main +
    245

    6    tmpzfaxnz10                        0x000055ddea002fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpcnfz21en/tmpcnfz21en.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae341d3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae341a34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae341a34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae341a337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnfz21en                        0x000055e1ff93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002ae341f29460 __libc_start_main +
    245

    6    tmpcnfz21en                        0x000055e1ff93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 1 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp1q9oqq6p/tmp1q9oqq6p.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b931f0bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b931edb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b931edb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b931edb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1q9oqq6p                        0x00005587eeb7f1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b931f2ab460 __libc_start_main +
    245

    6    tmp1q9oqq6p                        0x00005587eeb7ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpcnfz21en/tmpcnfz21en.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae341d3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae341a34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae341a34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae341a337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnfz21en                        0x000055e1ff93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002ae341f29460 __libc_start_main +
    245

    6    tmpcnfz21en                        0x000055e1ff93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp12znz_mn.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var answer = 1\n    for i in 1...n {\n        answer *= i\n\
    \    }\n    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpoeg_gr69/tmpoeg_gr69.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92aa0f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a9de8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a9de8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a9de77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoeg_gr69                        0x00005597c627c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b92aa2dd460 __libc_start_main +
    245

    6    tmpoeg_gr69                        0x00005597c627bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var total = 1\n    for i in 1..<n {\n        for j in 1...i\
    \ {\n            total *= j\n        }\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpxz4shwku/tmpxz4shwku.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30bc02cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30bbd23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30bbd23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30bbd227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxz4shwku                        0x000055d4a9cd4427 <unavailable> + 5159

    5    libc.so.6                          0x00002b30bc218460 __libc_start_main +
    245

    6    tmpxz4shwku                        0x000055d4a9cd40d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n >= 1 else {\n        return 0\n    }\n    var fact\
    \ = 1\n    for i in 1...n {\n        fact *= i\n    }\n    return fact\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpevhdz4xc/tmpevhdz4xc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf5dc69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf5d960b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf5d960988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf5d95f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevhdz4xc                        0x0000555d522b8337 <unavailable> + 4919

    5    libc.so.6                          0x00002abf5de55460 __libc_start_main +
    245

    6    tmpevhdz4xc                        0x0000555d522b7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var ret = n\n    for i in 1..<n {\n        ret *= i\n   \
    \ }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp2toswvzp/tmp2toswvzp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84a9955c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84a964cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84a964c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84a964b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2toswvzp                        0x000055ba052c9337 <unavailable> + 4919

    5    libc.so.6                          0x00002b84a9b41460 __libc_start_main +
    245

    6    tmp2toswvzp                        0x000055ba052c8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // Implement your solution here.\n    var total = 1\n   \
    \ for x in 1...n {\n        total *= x\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp2ewwuafe/tmp2ewwuafe.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae743060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae742d57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae742d57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae742d567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ewwuafe                        0x000055cbe4cbe337 <unavailable> + 4919

    5    libc.so.6                          0x00002ae74324c460 __libc_start_main +
    245

    6    tmp2ewwuafe                        0x000055cbe4cbdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= (factorial(n:\
    \ i) * factorial(n: i - 1))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpnfaj5b5c.swift:13:20: error: cannot find 'factorial' in scope\n\
    \        result *= (factorial(n: i) * factorial(n: i - 1))\n                 \
    \  ^~~~~~~~~\n/tmp/tmpnfaj5b5c.swift:13:38: error: cannot find 'factorial' in\
    \ scope\n        result *= (factorial(n: i) * factorial(n: i - 1))\n         \
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    var result = 1\n\
    \    for i in 1...n {\n        result *= i\n    }\n    return result * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    } else {\n        return\
    \ n * special_factorial(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp86q1tmxp/tmp86q1tmxp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac23c671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac23c368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac23c368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac23c3677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86q1tmxp                        0x0000560682a761b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ac23c85d460 __libc_start_main +
    245

    6    tmp86q1tmxp                        0x0000560682a75e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmprz8fvmyj/tmprz8fvmyj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36fde3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36fdb33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36fdb33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36fdb327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprz8fvmyj                        0x0000557dc32671b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b36fe028460 __libc_start_main +
    245

    6    tmprz8fvmyj                        0x0000557dc3266e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    var factorial:\
    \ Int = 1\n    for i in (1...n).reversed() {\n        factorial *= i\n    }\n\
    \    return special_factorial(n: n - 1) * factorial\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n < 2 ? 1 : n * special_factorial(n: n - 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp1zgzdoy0/tmp1zgzdoy0.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8375226c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8374f1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8374f1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8374f1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zgzdoy0                        0x000055e37a5d81b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b8375412460 __libc_start_main +
    245

    6    tmp1zgzdoy0                        0x000055e37a5d7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n: n) * factorial(n: n - 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjima296a.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n: n) * factorial(n: n - 1)\n           ^~~~~~~~~\n/tmp/tmpjima296a.swift:11:30:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n: n) * factorial(n:\
    \ n - 1)\n                             ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n <= 1 ? 1 : n * special_factorial(n: n - 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpp5ipssxg/tmpp5ipssxg.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b6d5a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b6d29cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b6d29c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b6d29b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5ipssxg                        0x00005562e31c81b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b6b6d791460 __libc_start_main +
    245

    6    tmpp5ipssxg                        0x00005562e31c7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // Your code here\n    var result = 1\n    var N = n\n  \
    \  while N > 0 {\n        result *= N\n        N -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpbaa1_v44/tmpbaa1_v44.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f3613ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f35e35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f35e35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f35e347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbaa1_v44                        0x0000556a16f621b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b5f3632a460 __libc_start_main +
    245

    6    tmpbaa1_v44                        0x0000556a16f61e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n < 1 {\n        return 0\n    }\n    var result = 1\n\
    \    var n = n\n    while n > 0 {\n        result *= factorial(n: n)\n       \
    \ n -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2l89ryni.swift:17:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: n)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        var\
    \ factorial = 1\n        for i in 1...n {\n            factorial *= i\n      \
    \  }\n        return factorial * special_factorial(n: n - 1)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    var factorial = 0\n    \n    for i in 1...n {\n   \
    \     factorial = factorial * i\n    }\n    \n    return factorial\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpzxrwf5hm/tmpzxrwf5hm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab22140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab21e37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab21e37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab21e367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxrwf5hm                        0x00005584b958b337 <unavailable> + 4919

    5    libc.so.6                          0x00002aab2232c460 __libc_start_main +
    245

    6    tmpzxrwf5hm                        0x00005584b958afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    var iter = n\n    while iter > 0 {\n\
    \        factorial *= iter\n        iter -= 1\n    }\n    return special_factorial(n:\
    \ n-1) * factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979281
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    if n > 0 {\n        for i in 1...n {\n\
    \            result *= factorial(n: i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgsmcudex.swift:14:23: error: cannot find 'factorial' in scope\n\
    \            result *= factorial(n: i)\n                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    } else {\n        return\
    \ n * special_factorial(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp86q1tmxp/tmp86q1tmxp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac23c671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac23c368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac23c368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac23c3677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86q1tmxp                        0x0000560682a761b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ac23c85d460 __libc_start_main +
    245

    6    tmp86q1tmxp                        0x0000560682a75e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else {\n        return 0\n    }\n    return n\
    \ * special_factorial(n: n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp0s65cehx/tmp0s65cehx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3446427c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344611eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344611e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b344611d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0s65cehx                        0x000055a5be4f91b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b3446613460 __libc_start_main +
    245

    6    tmp0s65cehx                        0x000055a5be4f8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp12znz_mn.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp12znz_mn.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // Write your code below...\n    var result = 1\n    var\
    \ factorial = 1\n    var mutableNumber = n\n    while mutableNumber > 0 {\n  \
    \      result *= factorial\n        factorial = mutableNumber * factorial\n  \
    \      mutableNumber -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpvfdedmce/tmpvfdedmce.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abefd27fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abefcf76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abefcf76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abefcf757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfdedmce                        0x0000562cf945e1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002abefd46b460 __libc_start_main +
    245

    6    tmpvfdedmce                        0x0000562cf945de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var total = n\n    var total2 = n - 1\n    var i = 1\n  \
    \  var j = 2\n    while i < n - 1 {\n        total = total * (n - i)\n       \
    \ total2 = total2 * (n - j)\n        i += 1\n        j += 1\n    }\n    return\
    \ total * total2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpgh_2p4s7/tmpgh_2p4s7.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94637d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94634cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94634ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94634c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgh_2p4s7                        0x000055a46ec191b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b94639bf460 __libc_start_main +
    245

    6    tmpgh_2p4s7                        0x000055a46ec18e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 0\n    var x = n\n    while x > 0 {\n      \
    \  if x == 1 {\n            result += 1\n        } else {\n            result\
    \ *= x\n        }\n        x -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpdyvi82bs/tmpdyvi82bs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fecf94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fecc8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fecc8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fecc8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdyvi82bs                        0x000056311352c1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b2fed180460 __libc_start_main +
    245

    6    tmpdyvi82bs                        0x000056311352be69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var f = 1\n    for x in 1...n {\n        f *= x\n    }\n\
    \    return f\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp2w43wnvd/tmp2w43wnvd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5aae78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5aab6fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5aab6f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5aab6e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2w43wnvd                        0x0000556dce967337 <unavailable> + 4919

    5    libc.so.6                          0x00002ba5ab064460 __libc_start_main +
    245

    6    tmp2w43wnvd                        0x0000556dce966fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp12znz_mn.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpcnfz21en/tmpcnfz21en.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae341d3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae341a34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae341a34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae341a337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnfz21en                        0x000055e1ff93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002ae341f29460 __libc_start_main +
    245

    6    tmpcnfz21en                        0x000055e1ff93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpo50g346x/tmpo50g346x.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88f596ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88f5665b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88f5665988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88f56647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo50g346x                        0x0000562536fdb1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88f5b5a460 __libc_start_main +
    245

    6    tmpo50g346x                        0x0000562536fdae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var product = 1\n    for i in (1...n).reversed() {\n    \
    \    product *= factorial(n: i)\n    }\n    return product\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzd_uh8la.swift:13:20: error: cannot find 'factorial' in scope\n\
    \        product *= factorial(n: i)\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpcnfz21en/tmpcnfz21en.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae341d3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae341a34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae341a34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae341a337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcnfz21en                        0x000055e1ff93d337 <unavailable> + 4919

    5    libc.so.6                          0x00002ae341f29460 __libc_start_main +
    245

    6    tmpcnfz21en                        0x000055e1ff93cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return special_factorial(n:\
    \ n - 1) * n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp3hfdw1s2/tmp3hfdw1s2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3e3f5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3e3c51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3e3c51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3e3c507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3hfdw1s2                        0x000056174dc041b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad3e4146460 __libc_start_main +
    245

    6    tmp3hfdw1s2                        0x000056174dc03e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial_total = 1\n    for i in 1...n {\n        factorial_total\
    \ *= i\n    }\n    for i in 1...n-1 {\n        factorial_total *= i\n    }\n \
    \   return factorial_total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp02sond8k/tmp02sond8k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5aac968c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5aac65fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5aac65f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5aac65e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02sond8k                        0x000055ab7594b337 <unavailable> + 4919

    5    libc.so.6                          0x00002b5aacb54460 __libc_start_main +
    245

    6    tmp02sond8k                        0x000055ab7594afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    for i in 1..<n {\n        result *= i\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp_zk65rkb/tmp_zk65rkb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2177cb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21779aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21779aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21779a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zk65rkb                        0x000056220b73b427 <unavailable> + 5159

    5    libc.so.6                          0x00002b2177e9f460 __libc_start_main +
    245

    6    tmp_zk65rkb                        0x000056220b73b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var res = 1\n    for i in 1...n {\n        res *= i * (i\
    \ - 1)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp_t2jwry_/tmp_t2jwry_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ece516c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ece20db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ece20d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ece20c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_t2jwry_                        0x000055856ed8c337 <unavailable> + 4919

    5    libc.so.6                          0x00002b2ece702460 __libc_start_main +
    245

    6    tmp_t2jwry_                        0x000055856ed8bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 0 }\n    return special_factorial(n:\
    \ n - 1) * factorial(n: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6_2qd3fx.swift:12:42: error: cannot find 'factorial' in scope\n\
    \    return special_factorial(n: n - 1) * factorial(n: n)\n                  \
    \                       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n > 0 ? n * special_factorial(n: n - 1) : 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpvs9tjsun/tmpvs9tjsun.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad7d1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad7cea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad7cea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad7cea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvs9tjsun                        0x000055643b8311b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aad7d398460 __libc_start_main +
    245

    6    tmpvs9tjsun                        0x000055643b830e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let numFactorial = factorial(n: n)\n    var num = n - 1\n\
    \    while num > 0 {\n        numFactorial *= factorial(n: num)\n        num -=\
    \ 1\n    }\n    return numFactorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xwwe0kx.swift:11:24: error: cannot find 'factorial' in scope\n\
    \    let numFactorial = factorial(n: n)\n                       ^~~~~~~~~\n/tmp/tmp7xwwe0kx.swift:14:25:\
    \ error: cannot find 'factorial' in scope\n        numFactorial *= factorial(n:\
    \ num)\n                        ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var prod = 1\n    if n > 0 {\n        for i in 1...n {\n\
    \            prod *= i\n        }\n    }\n    return prod\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpzayzi1zq/tmpzayzi1zq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03563fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03560f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03560f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03560f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzayzi1zq                        0x000055a147efe337 <unavailable> + 4919

    5    libc.so.6                          0x00002b03565e6460 __libc_start_main +
    245

    6    tmpzayzi1zq                        0x000055a147efdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 0 }\n    return n * special_factorial(n:\
    \ n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmptx4o36cm/tmptx4o36cm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2fd4dd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2fd4acab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2fd4aca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2fd4ac97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptx4o36cm                        0x0000560ee6e301b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b2fd4fbf460 __libc_start_main +
    245

    6    tmptx4o36cm                        0x0000560ee6e2fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    if n > 0 {\n        for x in 1...n {\n\
    \            result *= factorial(n: x)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpkfzuvdd8.swift:14:23: error: cannot find 'factorial' in scope\n\
    \            result *= factorial(n: x)\n                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    while n >= 2 {\n        result *= n *\
    \ factorial(n: n - 1)\n        n -= 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpv6f7gfzc.swift:13:23: error: cannot find 'factorial' in scope\n\
    \        result *= n * factorial(n: n - 1)\n                      ^~~~~~~~~\n\
    /tmp/tmpv6f7gfzc.swift:14:11: error: left side of mutating operator isn't mutable:\
    \ 'n' is a 'let' constant\n        n -= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 0 }\n    return (1...n).reduce(1,\
    \ *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp8xpguo_u/tmp8xpguo_u.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b839a68dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b839a384b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b839a384988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b839a3837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8xpguo_u                        0x000056024aa65387 <unavailable> + 4999

    5    libc.so.6                          0x00002b839a879460 __libc_start_main +
    245

    6    tmp8xpguo_u                        0x000056024aa65039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(i)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7tryma3d.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpqetkyzxj/tmpqetkyzxj.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad937895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad93758cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad93758c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad93758b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqetkyzxj                        0x000055e85cdf91b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ad937a81460 __libc_start_main +
    245

    6    tmpqetkyzxj                        0x000055e85cdf8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    \n    var number = n\n    var specialFactorial = 1\n    \n\
    \    while number > 0 {\n        specialFactorial *= number\n        number -=\
    \ 1\n    }\n    \n    return specialFactorial\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpqxjh7yv3/tmpqxjh7yv3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fece2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fecb21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fecb21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fecb207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqxjh7yv3                        0x00005601a5a2a1b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b1fed016460 __libc_start_main +
    245

    6    tmpqxjh7yv3                        0x00005601a5a29e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var prod: Int = 1\n    for i in 1...n {\n        prod *=\
    \ factorial(n: i)\n    }\n    return prod\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpyrehi3pu.swift:13:17: error: cannot find 'factorial' in scope\n\
    \        prod *= factorial(n: i)\n                ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let nums = Array(1...n)\n    return nums.reduce(1, *)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpaohgyrv9/tmpaohgyrv9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab41306dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab412d64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab412d64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab412d637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaohgyrv9                        0x0000562e872d63f7 <unavailable> + 5111

    5    libc.so.6                          0x00002ab413259460 __libc_start_main +
    245

    6    tmpaohgyrv9                        0x0000562e872d60a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    var factorial = 1\n    if n < 0 {\n \
    \       return 0\n    }\n    for i in 1...n {\n        factorial *= i\n      \
    \  result *= factorial\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let array: [Int] = Array(1...n)\n    let nFactorial = array.reduce(1,\
    \ *)\n    let factorialArray = array.dropFirst().reversed()\n    let n2Factorial\
    \ = factorialArray.reduce(1, *)\n    return nFactorial * n2Factorial\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpddxkihtr/tmpddxkihtr.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab745e2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab745b26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab745b26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab745b257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddxkihtr                        0x00005644f3306687 <unavailable> + 5767

    5    libc.so.6                          0x00002ab74601b460 __libc_start_main +
    245

    6    tmpddxkihtr                        0x00005644f3306339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var res = 1\n    for i in 1...n {\n        res *= i\n   \
    \ }\n    for i in 1..<n {\n        res *= i\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpergthjgl/tmpergthjgl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7013156c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7012e4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7012e4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7012e4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpergthjgl                        0x0000559ccd696427 <unavailable> + 5159

    5    libc.so.6                          0x00002b7013342460 __libc_start_main +
    245

    6    tmpergthjgl                        0x0000559ccd6960d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpqwyy4pum/tmpqwyy4pum.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48bf27ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48bef75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48bef75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48bef747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqwyy4pum                        0x0000561f2ab961b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b48bf46a460 __libc_start_main +
    245

    6    tmpqwyy4pum                        0x0000561f2ab95e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= i\n\
    \    }\n    var j = 1\n    for i in 2...n {\n        j *= i\n        result *=\
    \ j\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp7k9jzqtx/tmp7k9jzqtx.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee3fcb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee3f9afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee3f9af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee3f9ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7k9jzqtx                        0x0000558742e73337 <unavailable> + 4919

    5    libc.so.6                          0x00002aee3fea4460 __libc_start_main +
    245

    6    tmp7k9jzqtx                        0x0000558742e72fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: -1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n * special_factorial(n: n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979280
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in 1...n {\n        result *= factorial(n:\
    \ i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp12znz_mn.swift:13:19: error: cannot find 'factorial' in scope\n\
    \        result *= factorial(n: i)\n                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var specialFactorial = 1\n    var number = n\n    while number\
    \ > 0 {\n        let factorial = getFactorial(number: number)\n        specialFactorial\
    \ *= factorial\n        number -= 1\n    }\n    return specialFactorial\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp46042xlj.swift:14:25: error: cannot find 'getFactorial' in scope\n\
    \        let factorial = getFactorial(number: number)\n                      \
    \  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n <= 1 {\n        return 1\n    } else {\n        return\
    \ n * special_factorial(n: n - 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp86q1tmxp/tmp86q1tmxp.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac23c671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac23c368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac23c368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac23c3677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86q1tmxp                        0x0000560682a761b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ac23c85d460 __libc_start_main +
    245

    6    tmp86q1tmxp                        0x0000560682a75e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for i in 1...n {\n        factorial\
    \ *= i\n    }\n    return special_factorial(n: n - 1) * factorial\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b393b997c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b393b68e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b393b68e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b393b68e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b393b68dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpq_y3bmbc                        0x000056265c54a5c1 <unavailable> + 5569

    6    tmpq_y3bmbc                        0x000056265c54a630 <unavailable> + 5680

    7    tmpq_y3bmbc                        0x000056265c54a630 <unavailable> + 5680

    8    tmpq_y3bmbc                        0x000056265c54a630 <unavailable> + 5680

    9    tmpq_y3bmbc                        0x000056265c54a630 <unavailable> + 5680

    10   tmpq_y3bmbc                        0x000056265c54a2c8 <unavailable> + 4808

    11   libc.so.6                          0x00002b393bb83460 __libc_start_main +
    245

    12   tmpq_y3bmbc                        0x000056265c549fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else { return 1 }\n    return (1...n).reduce(1,\
    \ *)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(special_factorial(n: 4) == 288)\n\
    assert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\n\
    assert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpz7ndaydp/tmpz7ndaydp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b051ad4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b051aa45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b051aa45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b051aa447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7ndaydp                        0x000055e58c4ab387 <unavailable> + 4999

    5    libc.so.6                          0x00002b051af3a460 __libc_start_main +
    245

    6    tmpz7ndaydp                        0x000055e58c4ab039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for i in 1...n {\n        factorial\
    \ *= factorial(n: i)\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpl5hqoe9t.swift:13:22: error: cannot call value of non-function\
    \ type 'Int'\n        factorial *= factorial(n: i)\n                     ^\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = n\n    while n > 1 {\n        n -= 1\n     \
    \   result *= n\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1kqz3lxw.swift:13:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    // Write your code here\n    if n == 0 {\n        return\
    \ 1\n    }\n    return n * special_factorial(n: n - 1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpee_9bc1n/tmpee_9bc1n.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba626f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba626c13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba626c13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba626c127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpee_9bc1n                        0x0000559b2b4e31b7 <unavailable> + 4535

    5    libc.so.6                          0x00002ba627108460 __libc_start_main +
    245

    6    tmpee_9bc1n                        0x0000559b2b4e2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n) * factorial(n - 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_bl_bvnq.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n) * factorial(n - 1)\n           ^~~~~~~~~\n/tmp/tmp_bl_bvnq.swift:11:27:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n) * factorial(n\
    \ - 1)\n                          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    precondition(n > 0)\n    var value = 1\n    for i in 1...n\
    \ {\n        value *= i\n    }\n    for i in 1..<n {\n        value *= i\n   \
    \ }\n    return value\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpzz7mjel8/tmpzz7mjel8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b317c656c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b317c34db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b317c34d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b317c34c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzz7mjel8                        0x0000563e4c811427 <unavailable> + 5159

    5    libc.so.6                          0x00002b317c842460 __libc_start_main +
    245

    6    tmpzz7mjel8                        0x0000563e4c8110d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpy_o9kofh/tmpy_o9kofh.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73d74a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73d71a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73d71a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73d719f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_o9kofh                        0x00005645860731b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b73d7695460 __libc_start_main +
    245

    6    tmpy_o9kofh                        0x0000564586072e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n  var total = 1\n  for i in 1...n {\n    var factor = i\n   \
    \ while factor > 1 {\n      total *= factor\n      factor -= 1\n    }\n  }\n \
    \ return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var result = 1\n\
    \    for i in 1...n {\n        result *= i\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpal5y3d7u/tmpal5y3d7u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b455e9b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b455e6aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b455e6ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b455e6ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpal5y3d7u                        0x00005620fbde5337 <unavailable> + 4919

    5    libc.so.6                          0x00002b455eba3460 __libc_start_main +
    245

    6    tmpal5y3d7u                        0x00005620fbde4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for a in 1...n {\n        result *= (factorial(n:\
    \ a))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqfmw3974.swift:13:20: error: cannot find 'factorial' in scope\n\
    \        result *= (factorial(n: a))\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return n > 0 ? n * special_factorial(n: n - 1) : 1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpvs9tjsun/tmpvs9tjsun.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad7d1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad7cea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad7cea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad7cea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvs9tjsun                        0x000055643b8311b7 <unavailable> + 4535

    5    libc.so.6                          0x00002aad7d398460 __libc_start_main +
    245

    6    tmpvs9tjsun                        0x000055643b830e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return factorial(n: n) * factorial(n: n - 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjima296a.swift:11:12: error: cannot find 'factorial' in scope\n\
    \    return factorial(n: n) * factorial(n: n - 1)\n           ^~~~~~~~~\n/tmp/tmpjima296a.swift:11:30:\
    \ error: cannot find 'factorial' in scope\n    return factorial(n: n) * factorial(n:\
    \ n - 1)\n                             ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979275
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for number in 1...n {\n        factorial\
    \ *= factorial * number\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpoq2k4k3s/tmpoq2k4k3s.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8bb748c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8bb43fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8bb43f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8bb43e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoq2k4k3s                        0x000055f69f2b7337 <unavailable> + 4919

    5    libc.so.6                          0x00002ad8bb934460 __libc_start_main +
    245

    6    tmpoq2k4k3s                        0x000055f69f2b6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    var total = 1\n\
    \    for i in 1...n {\n        var factorial = 1\n        for j in 1...i {\n \
    \           factorial *= j\n        }\n        total *= factorial\n    }\n   \
    \ return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return special_factorial_acc(n: n, acc: 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpwq1q_wcg.swift:11:12: error: cannot find 'special_factorial_acc'\
    \ in scope\n    return special_factorial_acc(n: n, acc: 1)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var result = 1\n    for i in (1...n).reversed() {\n     \
    \   result *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5)\
    \ == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpdcruwt8s/tmpdcruwt8s.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d7d5cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d7d2c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d7d2c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d7d2c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdcruwt8s                        0x000055f953d57507 <unavailable> + 5383

    5    libc.so.6                          0x00002b2d7d7bb460 __libc_start_main +
    245

    6    tmpdcruwt8s                        0x000055f953d571b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    guard n > 0 else {\n        return 0\n    }\n    return n\
    \ * special_factorial(n: n - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmp0s65cehx/tmp0s65cehx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3446427c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344611eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344611e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b344611d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0s65cehx                        0x000055a5be4f91b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b3446613460 __libc_start_main +
    245

    6    tmp0s65cehx                        0x000055a5be4f8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979275
- exit_code: 0
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    func factorial(n: Int) -> Int {\n        if n == 0 {\n  \
    \          return 1\n        }\n        return n * factorial(n: n - 1)\n    }\n\
    \    var result = 1\n    for i in 1...n {\n        result *= factorial(n: i)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var r = 1\n    for i in 1...n {\n        r *= i\n    }\n\
    \    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmpy5v0kcml/tmpy5v0kcml.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96869c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96866b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96866b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96866b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5v0kcml                        0x000055a91bcff337 <unavailable> + 4919

    5    libc.so.6                          0x00002b9686bac460 __libc_start_main +
    245

    6    tmpy5v0kcml                        0x000055a91bcfefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var p = 1\n    for i in 1...n {\n        p *= factorial(n:\
    \ i)\n    }\n    return p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0d54bwec.swift:13:14: error: cannot find 'factorial' in scope\n\
    \        p *= factorial(n: i)\n             ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var factorial = 1\n    for i in 1...n {\n        factorial\
    \ *= i\n    }\n    return factorial\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(special_factorial(n: 4) == 288)\nassert(special_factorial(n: 5) == 34560)\n\
    assert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n: 1)\
    \ == 1)"
  status: Exception
  stderr: 'tmp98ltvf00/tmp98ltvf00.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb45dc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb45abdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb45abd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb45abc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98ltvf00                        0x00005650e705c337 <unavailable> + 4919

    5    libc.so.6                          0x00002abb45fb2460 __libc_start_main +
    245

    6    tmp98ltvf00                        0x00005650e705bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    let factorialN = factorial(n: n)\n    var result = factorialN\n\
    \    for index in 1..<n {\n        result *= factorial(n: index)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpo84dudjq.swift:11:22: error: cannot find 'factorial' in scope\n\
    \    let factorialN = factorial(n: n)\n                     ^~~~~~~~~\n/tmp/tmpo84dudjq.swift:14:19:\
    \ error: cannot find 'factorial' in scope\n        result *= factorial(n: index)\n\
    \                  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979276
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(special_factorial(n:\
    \ 4) == 288)\nassert(special_factorial(n: 5) == 34560)\nassert(special_factorial(n:\
    \ 7) == 125411328000)\nassert(special_factorial(n: 1) == 1)"
  status: Exception
  stderr: 'tmphsqu3109/tmphsqu3109.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88870c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8886dbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8886dbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8886dba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsqu3109                        0x000055d8dd8721b7 <unavailable> + 4535

    5    libc.so.6                          0x00002b88872b0460 __libc_start_main +
    245

    6    tmphsqu3109                        0x000055d8dd871e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979274
- exit_code: -4
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    var n = n\n    var arr = [Int]()\n    while n > 0 {\n   \
    \     arr.append(n)\n        n -= 1\n    }\n    var result = 1\n    for i in arr\
    \ {\n        result *= i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmpgul1c_g0/tmpgul1c_g0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d30590c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d30287b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d30287988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d302867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgul1c_g0                        0x000055d56fc16417 <unavailable> + 5143

    5    libc.so.6                          0x00002b9d3077c460 __libc_start_main +
    245

    6    tmpgul1c_g0                        0x000055d56fc160c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659979276
- exit_code: 1
  program: "\n/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as\
    \ input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n:\
    \ Int) -> Int {\n    return Int(factorial(UInt(n)))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(special_factorial(n: 4) == 288)\nassert(special_factorial(n:\
    \ 5) == 34560)\nassert(special_factorial(n: 7) == 125411328000)\nassert(special_factorial(n:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpno9yytcp.swift:11:16: error: cannot find 'factorial' in scope\n\
    \    return Int(factorial(UInt(n)))\n               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979276
