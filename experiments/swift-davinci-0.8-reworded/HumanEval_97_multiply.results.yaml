language: swift
name: HumanEval_97_multiply
results:
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  let res = String(a\
    \ * b).characters.map{Int(String($0))!}\n  return res.count == 1 ? res[0] : res[1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpa8n1kprt.swift:15:27: error: 'characters' is unavailable: Please\
    \ use String directly\n  let res = String(a * b).characters.map{Int(String($0))!}\n\
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  let aUnitDigit\
    \ = a.magnitude.description.last!\n  let bUnitDigit = b.magnitude.description.last!\n\
    \  return aUnitDigit.wholeNumberValue! * bUnitDigit.wholeNumberValue!\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let n = String(a\
    \ % 10)\n    let m = String(b % 10)\n    return Int(n)! * Int(m)!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp1m2o_sti/tmp1m2o_sti.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b643f050c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b643ed47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b643ed47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b643ed467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1m2o_sti                        0x0000560c73d2e53f <unavailable> + 5439

    5    libc.so.6                          0x00002b643f23c460 __libc_start_main +
    245

    6    tmp1m2o_sti                        0x0000560c73d2e069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  let left = a\
    \ < 0 ? -a : a\n  let right = b < 0 ? -b : b\n  return (left % 10) * (right %\
    \ 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b: 412)\
    \ == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851)\
    \ == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67)\
    \ == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) ==\
    \ 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return a.digit().reversed().first!\
    \ * b.digit().reversed().first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpg8t_dl0n.swift:15:14: error: value of type 'Int' has no member\
    \ 'digit'\n    return a.digit().reversed().first! * b.digit().reversed().first!\n\
    \           ~ ^~~~~\n/tmp/tmpg8t_dl0n.swift:15:44: error: value of type 'Int'\
    \ has no member 'digit'\n    return a.digit().reversed().first! * b.digit().reversed().first!\n\
    \                                         ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a *\
    \ b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqaduw6t1/tmpqaduw6t1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8189c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8189931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8189931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81899307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaduw6t1                        0x00005584c969c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8189e26460 __libc_start_main +
    245

    6    tmpqaduw6t1                        0x00005584c969bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitA =\
    \ a % 10\n    let unitB = b % 10\n    return unitA * unitB\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmpe5mcp0lh/tmpe5mcp0lh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f3abd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f3a8c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f3a8c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f3a8c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5mcp0lh                        0x00005626eb4413cf <unavailable> + 5071

    5    libc.so.6                          0x00002b3f3adbc460 __libc_start_main +
    245

    6    tmpe5mcp0lh                        0x00005626eb440ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  return a%10 *\
    \ b%10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b: 412)\
    \ == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851)\
    \ == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67)\
    \ == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) ==\
    \ 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp779sfde2/tmp779sfde2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05e95d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05e92cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05e92cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05e92cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp779sfde2                        0x000055889dfd924d <unavailable> + 4685

    5    libc.so.6                          0x00002b05e97c2460 __libc_start_main +
    245

    6    tmp779sfde2                        0x000055889dfd8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = String(a).map\
    \ { Int(String($0))! }.last!\n    let b = String(b).map { Int(String($0))! }.last!\n\
    \    return a * b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpo4twkym5/tmpo4twkym5.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f27b0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f27805561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f27805286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f2780513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f27804bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpo4twkym5                        0x000055d3160c0ec1 <unavailable> + 7873

    6    libswiftCore.so                    0x00002b7f277ed820 Collection.map<A>(_:)
    + 426

    7    tmpo4twkym5                        0x000055d3160c0b56 <unavailable> + 6998

    8    tmpo4twkym5                        0x000055d3160c06a2 <unavailable> + 5794

    9    libc.so.6                          0x00002b7f27cfa460 __libc_start_main +
    245

    10   tmpo4twkym5                        0x000055d3160c0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitDigitA\
    \ = abs(a) % 10\n    let unitDigitB = abs(b) % 10\n    return unitDigitA * unitDigitB\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let singleDigitA\
    \ = getSingleDigit(a)\n    let singleDigitB = getSingleDigit(b)\n    return singleDigitA\
    \ * singleDigitB\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmphjb4ijyk.swift:15:24: error: cannot find 'getSingleDigit' in scope\n\
    \    let singleDigitA = getSingleDigit(a)\n                       ^~~~~~~~~~~~~~\n\
    /tmp/tmphjb4ijyk.swift:16:24: error: cannot find 'getSingleDigit' in scope\n \
    \   let singleDigitB = getSingleDigit(b)\n                       ^~~~~~~~~~~~~~\n\
    /tmp/tmphjb4ijyk.swift:17:25: error: cannot convert return expression of type\
    \ 'Duration' to return type 'Int'\n    return singleDigitA * singleDigitB\n  \
    \         ~~~~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  let aUnitDigit\
    \ = a % 10\n  let bUnitDigit = b % 10\n  return aUnitDigit * bUnitDigit\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpuq0brhd6/tmpuq0brhd6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8679c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8676beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8676be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8676bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuq0brhd6                        0x00005564524eb3cf <unavailable> + 5071

    5    libc.so.6                          0x00002ae867bb3460 __libc_start_main +
    245

    6    tmpuq0brhd6                        0x00005564524eaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var result\
    \ = a * b\n    while result >= 10 {\n        result /= 10\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp6lsc879y/tmp6lsc879y.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7100ed7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7100bceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7100bce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7100bcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6lsc879y                        0x000055f8e3de724d <unavailable> + 4685

    5    libc.so.6                          0x00002b71010c3460 __libc_start_main +
    245

    6    tmp6lsc879y                        0x000055f8e3de6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    return ((a % 10) * (b % 10))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpz6d8pzby/tmpz6d8pzby.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e411b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e40eaab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e40eaa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e40ea97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6d8pzby                        0x0000559ca2cd93cf <unavailable> + 5071

    5    libc.so.6                          0x00002b9e4139f460 __libc_start_main +
    245

    6    tmpz6d8pzby                        0x0000559ca2cd8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = (a\
    \ % 10) * (b % 10)\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp2n0ummdr/tmp2n0ummdr.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb5bb8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb5b886b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb5b886988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb5b8857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2n0ummdr                        0x00005603968523cf <unavailable> + 5071

    5    libc.so.6                          0x00002abb5bd7b460 __libc_start_main +
    245

    6    tmp2n0ummdr                        0x0000560396851ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aUnitDigit\
    \ = a % 10\n    let bUnitDigit = b % 10\n    return aUnitDigit * bUnitDigit\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp1_piahxs/tmp1_piahxs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c58e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c58b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c58b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c58b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_piahxs                        0x00005575ae6ae3cf <unavailable> + 5071

    5    libc.so.6                          0x00002b1c5905b460 __libc_start_main +
    245

    6    tmp1_piahxs                        0x00005575ae6adef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return [a,\
    \ b].map { abs($0) % 10 }.reduce(1, *)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a *\
    \ b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqaduw6t1/tmpqaduw6t1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8189c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8189931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8189931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81899307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaduw6t1                        0x00005584c969c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8189e26460 __libc_start_main +
    245

    6    tmpqaduw6t1                        0x00005584c969bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let n1 = String(a).map\
    \ { Int(String($0))! }.last!\n    let n2 = String(b).map { Int(String($0))! }.last!\n\
    \    return n1 * n2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpt5_2_cg1/tmpt5_2_cg1.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b8be5f71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8be5c68561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8be5c68286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8be5c6813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8be5c67bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpt5_2_cg1                        0x000055b83bef0ec1 <unavailable> + 7873

    6    libswiftCore.so                    0x00002b8be5c50820 Collection.map<A>(_:)
    + 426

    7    tmpt5_2_cg1                        0x000055b83bef0b56 <unavailable> + 6998

    8    tmpt5_2_cg1                        0x000055b83bef06a2 <unavailable> + 5794

    9    libc.so.6                          0x00002b8be615d460 __libc_start_main +
    245

    10   tmpt5_2_cg1                        0x000055b83bef0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitDigitA\
    \ = a.remainderReportingOverflow(dividingBy: 10).partialValue\n    let unitDigitB\
    \ = b.remainderReportingOverflow(dividingBy: 10).partialValue\n    return unitDigitA\
    \ * unitDigitB\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpsu_rr87c/tmpsu_rr87c.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5129662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5129359b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5129359988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51293587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu_rr87c                        0x0000563f7531f33f <unavailable> + 4927

    5    libc.so.6                          0x00002b512984e460 __libc_start_main +
    245

    6    tmpsu_rr87c                        0x0000563f7531ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n\tlet a = a < 0\
    \ ? a * -1 : a\n\tlet b = b < 0 ? b * -1 : b\n\treturn a % 10 * b % 10\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmprrlphlsp/tmprrlphlsp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d26de7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d26adeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d26ade988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d26add7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrlphlsp                        0x00005652333ea24d <unavailable> + 4685

    5    libc.so.6                          0x00002b5d26fd3460 __libc_start_main +
    245

    6    tmprrlphlsp                        0x00005652333e9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a%10)*(b%10)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp4mpot6t9/tmp4mpot6t9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69b5c62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69b5959b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69b5959988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69b59587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mpot6t9                        0x00005558137113cf <unavailable> + 5071

    5    libc.so.6                          0x00002b69b5e4e460 __libc_start_main +
    245

    6    tmp4mpot6t9                        0x0000555813710ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    // your code\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp01ijkuw4/tmp01ijkuw4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace1ca3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace1c731b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace1c731988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace1c7307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp01ijkuw4                        0x000055ec7e2e01bd <unavailable> + 4541

    5    libc.so.6                          0x00002ace1cc26460 __libc_start_main +
    245

    6    tmp01ijkuw4                        0x000055ec7e2dfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let x = (abs(a\
    \ % 10) * abs(b % 10))\n    return x > 9 ? x % 10 : x\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmpqfqfklkp/tmpqfqfklkp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba201956c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba20164db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba20164d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba20164c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqfqfklkp                        0x000055e034afd33d <unavailable> + 4925

    5    libc.so.6                          0x00002ba201b42460 __libc_start_main +
    245

    6    tmpqfqfklkp                        0x000055e034afcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return a %\
    \ 10 * b % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpiu_avr6m/tmpiu_avr6m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba9321ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba92f15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba92f15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba92f147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiu_avr6m                        0x000055f4cfc9624d <unavailable> + 4685

    5    libc.so.6                          0x00002aba9340a460 __libc_start_main +
    245

    6    tmpiu_avr6m                        0x000055f4cfc95ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var num1 =\
    \ a\n    var num2 = b\n    if num1 < 0 {\n        num1 *= -1\n    }\n    if num2\
    \ < 0 {\n        num2 *= -1\n    }\n    return (num1 % 10) * (num2 % 10)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let first =\
    \ abs(a)\n    let second = abs(b)\n    var result = (first % 10) * (second % 10)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpyuz9csjv/tmpyuz9csjv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe8525ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe84f51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe84f51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe84f507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyuz9csjv                        0x00005575595561bd <unavailable> + 4541

    5    libc.so.6                          0x00002abe85446460 __libc_start_main +
    245

    6    tmpyuz9csjv                        0x0000557559555e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = abs(a)\n\
    \    let b = abs(b)\n    let a_u = a % 10\n    let b_u = b % 10\n    return a_u\
    \ * b_u\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b: 412)\
    \ == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851)\
    \ == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67)\
    \ == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) ==\
    \ 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let prod =\
    \ a * b\n    let unit = prod % 10\n    return unit\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmp8woq89fm/tmp8woq89fm.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f584a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f5819fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f5819f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f5819e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8woq89fm                        0x00005600fbdc324d <unavailable> + 4685

    5    libc.so.6                          0x00002b4f58694460 __libc_start_main +
    245

    6    tmp8woq89fm                        0x00005600fbdc2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a%10)\
    \ * abs(b%10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aLast =\
    \ a % 10\n    let bLast = b % 10\n    return aLast * bLast\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmpz7_zy0ak/tmpz7_zy0ak.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b818ac89c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b818a980b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b818a980988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b818a97f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz7_zy0ak                        0x00005603ca52c3cf <unavailable> + 5071

    5    libc.so.6                          0x00002b818ae75460 __libc_start_main +
    245

    6    tmpz7_zy0ak                        0x00005603ca52bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = a.magnitude\n\
    \    let b = b.magnitude\n    return (a % 10) * (b % 10)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp_fr0t_xc.swift:17:21: error: cannot convert return expression of\
    \ type 'UInt' to return type 'Int'\n    return (a % 10) * (b % 10)\n         \
    \  ~~~~~~~~~^~~~~~~~~~\n           Int(               )\n"
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitDigitA\
    \ = a % 10\n    let unitDigitB = b % 10\n    return unitDigitA * unitDigitB\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpr2yr0s3a/tmpr2yr0s3a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea2857cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea28273b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea28273988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea282727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2yr0s3a                        0x000055ed69a623cf <unavailable> + 5071

    5    libc.so.6                          0x00002aea28768460 __libc_start_main +
    245

    6    tmpr2yr0s3a                        0x000055ed69a61ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  let c = a * b\n\
    \  let digit = String(c).last!\n  return Int(String(digit))!\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmpbbs25k9i/tmpbbs25k9i.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae28f07dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae28ed74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae28ed74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae28ed737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbs25k9i                        0x0000564c1b7ff4dd <unavailable> + 5341

    5    libc.so.6                          0x00002ae28f269460 __libc_start_main +
    245

    6    tmpbbs25k9i                        0x0000564c1b7ff189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a *\
    \ b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqaduw6t1/tmpqaduw6t1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8189c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8189931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8189931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81899307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaduw6t1                        0x00005584c969c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8189e26460 __libc_start_main +
    245

    6    tmpqaduw6t1                        0x00005584c969bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    // implement\
    \ this function\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpf94mu1e_/tmpf94mu1e_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acde9da7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acde9a9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acde9a9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acde9a9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf94mu1e_                        0x00005597a32ca1bd <unavailable> + 4541

    5    libc.so.6                          0x00002acde9f93460 __libc_start_main +
    245

    6    tmpf94mu1e_                        0x00005597a32c9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let first =\
    \ abs(a) % 10\n    let second = abs(b) % 10\n    return first * second\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  var a = abs(a)\n\
    \  var b = abs(b)\n  if a < 10 && b < 10 {\n    return a * b\n  }\n  if a < 10\
    \ {\n    b %= 10\n    return a * b\n  }\n  if b < 10 {\n    a %= 10\n    return\
    \ a * b\n  }\n  a %= 10\n  b %= 10\n  return a * b\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    // your code\
    \ here\n    let nums = [a, b]\n    let units = nums.map {\n        var x = $0\n\
    \        if x < 0 {\n            x *= -1\n        }\n        return x % 10\n \
    \   }\n    return units[0] * units[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    //go through\
    \ each digit and add them up\n    let aStr = String(a)\n    let bStr = String(b)\n\
    \    var aSum = 0\n    var bSum = 0\n    for i in aStr {\n        if i != \"-\"\
    \ {\n            aSum += Int(String(i))!\n        }\n    }\n    for i in bStr\
    \ {\n        if i != \"-\" {\n            bSum += Int(String(i))!\n        }\n\
    \    }\n    return aSum * bSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpimjhbc3w/tmpimjhbc3w.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03af228c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03aef1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03aef1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03aef1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpimjhbc3w                        0x000055f0d310b5bd <unavailable> + 5565

    5    libc.so.6                          0x00002b03af414460 __libc_start_main +
    245

    6    tmpimjhbc3w                        0x000055f0d310b269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = a.abs\n\
    \    let b = b.abs\n    let result = a % 10 * b % 10\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpjb4zch31.swift:15:15: error: value of type 'Int' has no member\
    \ 'abs'\n    let a = a.abs\n            ~ ^~~\n/tmp/tmpjb4zch31.swift:16:15: error:\
    \ value of type 'Int' has no member 'abs'\n    let b = b.abs\n            ~ ^~~\n"
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  var left = a,\
    \ right = b\n  return (left.digits.last ?? 1) * (right.digits.last ?? 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp7pewyf15.swift:16:16: error: value of type 'Int' has no member\
    \ 'digits'\n  return (left.digits.last ?? 1) * (right.digits.last ?? 1)\n    \
    \      ~~~~ ^~~~~~\n/tmp/tmp7pewyf15.swift:16:43: error: value of type 'Int' has\
    \ no member 'digits'\n  return (left.digits.last ?? 1) * (right.digits.last ??\
    \ 1)\n                                    ~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let c = a *\
    \ b\n    return c % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpfw9s_c71/tmpfw9s_c71.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa677ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa674c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa674c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa674c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfw9s_c71                        0x000055dd9fe7024d <unavailable> + 4685

    5    libc.so.6                          0x00002baa679b8460 __libc_start_main +
    245

    6    tmpfw9s_c71                        0x000055dd9fe6fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a%10)*(b%10)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp4mpot6t9/tmp4mpot6t9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69b5c62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69b5959b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69b5959988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69b59587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mpot6t9                        0x00005558137113cf <unavailable> + 5071

    5    libc.so.6                          0x00002b69b5e4e460 __libc_start_main +
    245

    6    tmp4mpot6t9                        0x0000555813710ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let result\
    \ = (a%10) * (b%10)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpmjv_kqi1/tmpmjv_kqi1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae40450c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae40147b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae40147988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae401467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmjv_kqi1                        0x0000559d5948f3cf <unavailable> + 5071

    5    libc.so.6                          0x00002aae4063c460 __libc_start_main +
    245

    6    tmpmjv_kqi1                        0x0000559d5948eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let x = a\n\
    \    let y = b\n    var first = 0\n    var second = 0\n    if a < 0 {\n      \
    \  first = (-a) % 10\n    } else {\n        first = a % 10\n    }\n    if b <\
    \ 0 {\n        second = (-b) % 10\n    } else {\n        second = b % 10\n   \
    \ }\n    return first * second\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aUnits\
    \ = a < 0 ? -(a % 10) : a % 10\n    let bUnits = b < 0 ? -(b % 10) : b % 10\n\
    \    return aUnits * bUnits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let (aa, bb)\
    \ = (a < 0 ? -a : a, b < 0 ? -b : b)\n    return ((aa % 10) * (bb % 10))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  return (a % 10)\
    \ * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnltwsl_e/tmpnltwsl_e.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea1cd2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea1ca26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea1ca26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea1ca257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnltwsl_e                        0x0000562031b3e3cf <unavailable> + 5071

    5    libc.so.6                          0x00002aea1cf1b460 __libc_start_main +
    245

    6    tmpnltwsl_e                        0x0000562031b3def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n\tlet x = (a >\
    \ 0) ? a : -a\n\tlet y = (b > 0) ? b : -b\n\treturn (x % 10) * (y % 10)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitProduct\
    \ = a * b\n    let unitDigit = unitProduct % 10\n    return unitDigit\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpeffqecmk/tmpeffqecmk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b966d7fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b966d4f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b966d4f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b966d4f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeffqecmk                        0x000055ac8286124d <unavailable> + 4685

    5    libc.so.6                          0x00002b966d9ea460 __libc_start_main +
    245

    6    tmpeffqecmk                        0x000055ac82860ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var product\
    \ = 0\n    switch (a, b) {\n    case (let x, let y) where x > 0 && y > 0:\n  \
    \      product = (x % 10) * (y % 10)\n    case (let x, let y) where x < 0 && y\
    \ < 0:\n        product = (x % 10) * (y % 10)\n    case (let x, let y) where x\
    \ < 0 && y > 0:\n        product = (x % 10) * (y % 10)\n    case (let x, let y)\
    \ where x > 0 && y < 0:\n        product = (x % 10) * (y % 10)\n    default:\n\
    \        product = 0\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) ==\
    \ 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15)\
    \ == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27)\
    \ == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpyytkgckg/tmpyytkgckg.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4556b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b455680ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b455680a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45568097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyytkgckg                        0x000055647cfc33cf <unavailable> + 5071

    5    libc.so.6                          0x00002b4556cff460 __libc_start_main +
    245

    6    tmpyytkgckg                        0x000055647cfc2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let (n1, n2)\
    \ = (abs(a), abs(b))\n    let product = String(n1 * n2)\n    return Int(String(product.last!))!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpffhn20a_/tmpffhn20a_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5be30adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5be2da4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5be2da4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5be2da37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpffhn20a_                        0x000055dca18b65cd <unavailable> + 5581

    5    libc.so.6                          0x00002b5be3299460 __libc_start_main +
    245

    6    tmpffhn20a_                        0x000055dca18b6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let stringA\
    \ = String(a), stringB = String(b)\n    let ansA = Int(String(stringA.last!))!\n\
    \    let ansB = Int(String(stringB.last!))!\n    return ansA * ansB\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpyuz9csjv/tmpyuz9csjv.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe8525ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe84f51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe84f51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe84f507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyuz9csjv                        0x00005575595561bd <unavailable> + 4541

    5    libc.so.6                          0x00002abe85446460 __libc_start_main +
    245

    6    tmpyuz9csjv                        0x0000557559555e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = abs(a)\n\
    \    let b = abs(b)\n    let v = a % 10 * b % 10\n    return v\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmp85v60q35/tmp85v60q35.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b917d1edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b917cee4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b917cee4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b917cee37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp85v60q35                        0x0000556fe31cb33d <unavailable> + 4925

    5    libc.so.6                          0x00002b917d3d9460 __libc_start_main +
    245

    6    tmp85v60q35                        0x0000556fe31cafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (abs(a)\
    \ % 10) * (abs(b) % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (abs(a)\
    \ % 10) * (abs(b) % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var product\
    \ = 1\n    let firstInt = a % 10\n    let secondInt = b % 10\n    product = firstInt\
    \ * secondInt\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp8b7l9llr/tmp8b7l9llr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac96edf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96eaeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96eaea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96eae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8b7l9llr                        0x0000555f640df3cf <unavailable> + 5071

    5    libc.so.6                          0x00002ac96efdf460 __libc_start_main +
    245

    6    tmp8b7l9llr                        0x0000555f640deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var a = abs(a)\n\
    \    var b = abs(b)\n    var res = 0\n    if a >= 10 {\n        a %= 10\n    }\n\
    \    if b >= 10 {\n        b %= 10\n    }\n    res = a * b\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let product\
    \ = \"\\(a * b)\".compactMap { $0.wholeNumberValue }\n    return product.count\
    \ > 1 ? product[product.count - 2] * product[product.count - 1] : product[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmppp55jhun/tmppp55jhun.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff15576c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff1526db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff1526d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff1526c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp55jhun                        0x00005620a9ede68d <unavailable> + 5773

    5    libc.so.6                          0x00002aff15762460 __libc_start_main +
    245

    6    tmppp55jhun                        0x00005620a9ede339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aa = abs(a)\n\
    \    let bb = abs(b)\n    return (aa % 10) * (bb % 10)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmprxpe0a3t/tmprxpe0a3t.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cfefcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cfecc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cfecc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cfecc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxpe0a3t                        0x0000557a7ce551bd <unavailable> + 4541

    5    libc.so.6                          0x00002b0cff1b6460 __libc_start_main +
    245

    6    tmprxpe0a3t                        0x0000557a7ce54e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a%10)\
    \ * abs(b%10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var product\
    \ = 1\n    for int in [a, b] {\n        if int == 0 {\n            product = 0\n\
    \            break\n        }\n        let num = String(int).filter { $0 != \"\
    -\" }\n        product *= Int(String(num.last!))!\n    }\n    return product\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aUnitDigit\
    \ = a % 10\n    let bUnitDigit = b % 10\n    return aUnitDigit * bUnitDigit\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp1_piahxs/tmp1_piahxs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c58e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c58b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c58b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c58b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_piahxs                        0x00005575ae6ae3cf <unavailable> + 5071

    5    libc.so.6                          0x00002b1c5905b460 __libc_start_main +
    245

    6    tmp1_piahxs                        0x00005575ae6adef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let firstDigit\
    \ = a % 10\n    let secondDigit = b % 10\n    return firstDigit * secondDigit\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmprhf7es6b/tmprhf7es6b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b652aa04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b652a6fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b652a6fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b652a6fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhf7es6b                        0x000056209c10f3cf <unavailable> + 5071

    5    libc.so.6                          0x00002b652abf0460 __libc_start_main +
    245

    6    tmprhf7es6b                        0x000056209c10eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let stringA\
    \ = String(a)\n    let stringB = String(b)\n    return Int(String(stringA.last!))!\
    \ * Int(String(stringB.last!))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    // TODO: Implement\
    \ me\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpxnyz7us_/tmpxnyz7us_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae550578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae55026fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae55026f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae55026e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnyz7us_                        0x00005649b75db1bd <unavailable> + 4541

    5    libc.so.6                          0x00002ae550764460 __libc_start_main +
    245

    6    tmpxnyz7us_                        0x00005649b75dae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aString\
    \ = \"\\(a)\"\n    let bString = \"\\(b)\"\n    let a1 = aString.first\n    let\
    \ b1 = bString.first\n    let a2 = aString.last\n    let b2 = bString.last\n \
    \   let aInt = Int(String(a1!))\n    let bInt = Int(String(b1!))\n    let a2Int\
    \ = Int(String(a2!))\n    let b2Int = Int(String(b2!))\n    print(aInt, bInt,\
    \ a2Int, b2Int)\n    return (aInt! * bInt!) * (a2Int! * b2Int!)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmps0xody63/tmps0xody63.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc7ab29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc7a820b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc7a820988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc7a81f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0xody63                        0x000055b4e24a494d <unavailable> + 6477

    5    libc.so.6                          0x00002acc7ad15460 __libc_start_main +
    245

    6    tmps0xody63                        0x000055b4e24a45f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return a.unitDigit\
    \ * b.unitDigit\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp6j0s1w5.swift:15:14: error: value of type 'Int' has no member\
    \ 'unitDigit'\n    return a.unitDigit * b.unitDigit\n           ~ ^~~~~~~~~\n\
    /tmp/tmpp6j0s1w5.swift:15:24: error: cannot convert return expression of type\
    \ 'Duration' to return type 'Int'\n    return a.unitDigit * b.unitDigit\n    \
    \       ~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpp6j0s1w5.swift:15:28: error: value\
    \ of type 'Int' has no member 'unitDigit'\n    return a.unitDigit * b.unitDigit\n\
    \                         ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = abs(a)\n\
    \    let b = abs(b)\n    let aMod10 = a % 10\n    let bMod10 = b % 10\n    return\
    \ aMod10 * bMod10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (abs(a)\
    \ % 10) * (abs(b) % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (abs(a)\
    \ % 10) * (abs(b) % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitOfA\
    \ = a % 10\n    let unitOfB = b % 10\n    return unitOfA * unitOfB\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp6gmtpkbk/tmp6gmtpkbk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba35eeeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba35ebe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba35ebe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba35ebe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6gmtpkbk                        0x0000556dcdb893cf <unavailable> + 5071

    5    libc.so.6                          0x00002ba35f0da460 __libc_start_main +
    245

    6    tmp6gmtpkbk                        0x0000556dcdb88ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var product:\
    \ Int = 0\n    product = abs(a) % 10 * abs(b) % 10\n    return product\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp08fi1xl9/tmp08fi1xl9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4629c0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4629901b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4629901988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46299007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp08fi1xl9                        0x000055bb0ff5e33d <unavailable> + 4925

    5    libc.so.6                          0x00002b4629df6460 __libc_start_main +
    245

    6    tmp08fi1xl9                        0x000055bb0ff5dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    if a < 0 {\n\
    \        return a * b % 10\n    }\n    return a * b % 10\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmp4jv6li6k/tmp4jv6li6k.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e9717fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e96e76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e96e76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e96e757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4jv6li6k                        0x000055ad1fe7f24d <unavailable> + 4685

    5    libc.so.6                          0x00002b0e9736b460 __libc_start_main +
    245

    6    tmp4jv6li6k                        0x000055ad1fe7eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let c = a *\
    \ b\n    var d = c % 10\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmphzrt69h2/tmphzrt69h2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b098882fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0988526b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0988526988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09885257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzrt69h2                        0x000056171b37624d <unavailable> + 4685

    5    libc.so.6                          0x00002b0988a1b460 __libc_start_main +
    245

    6    tmphzrt69h2                        0x000056171b375ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    //your code\
    \ here\n    let first = a % 10\n    let second = b % 10\n    return first * second\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpvrq5b3jx/tmpvrq5b3jx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513d5d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b513d2c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b513d2c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b513d2c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrq5b3jx                        0x0000563733f503cf <unavailable> + 5071

    5    libc.so.6                          0x00002b513d7bc460 __libc_start_main +
    245

    6    tmpvrq5b3jx                        0x0000563733f4fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aUnits\
    \ = abs(a) % 10\n    let bUnits = abs(b) % 10\n    return aUnits * bUnits\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aDigit\
    \ = a % 10\n    let bDigit = b % 10\n    return aDigit * bDigit\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmpae88c8a8/tmpae88c8a8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6d5542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6d5239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6d5239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6d52387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpae88c8a8                        0x000056012f54f3cf <unavailable> + 5071

    5    libc.so.6                          0x00002ab6d572e460 __libc_start_main +
    245

    6    tmpae88c8a8                        0x000056012f54eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let abs = a\
    \ * b\n    let absStr = String(abs)\n    let digit = Int(String(absStr.last!))!\n\
    \    return digit\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp6z_dovhs/tmp6z_dovhs.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72da939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72da630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72da630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72da62f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6z_dovhs                        0x000055af307d04dd <unavailable> + 5341

    5    libc.so.6                          0x00002b72dab25460 __libc_start_main +
    245

    6    tmp6z_dovhs                        0x000055af307d0189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    // should return\
    \ product of last digits of `a` and `b`\n    return (a % 10) * (b % 10)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpp2r12i9g/tmpp2r12i9g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b591fc36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b591f92db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b591f92d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b591f92c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2r12i9g                        0x000055a1065733cf <unavailable> + 5071

    5    libc.so.6                          0x00002b591fe22460 __libc_start_main +
    245

    6    tmpp2r12i9g                        0x000055a106572ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aStr =\
    \ String(a)\n    let bStr = String(b)\n    let aUnit = Int(String(aStr.last!))!\n\
    \    let bUnit = Int(String(bStr.last!))!\n    return aUnit * bUnit\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  return (a % 10)\
    \ * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnltwsl_e/tmpnltwsl_e.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea1cd2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea1ca26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea1ca26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea1ca257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnltwsl_e                        0x0000562031b3e3cf <unavailable> + 5071

    5    libc.so.6                          0x00002aea1cf1b460 __libc_start_main +
    245

    6    tmpnltwsl_e                        0x0000562031b3def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var aDigits\
    \ = [Int]()\n    var bDigits = [Int]()\n    if a < 0 {\n        aDigits.append(-1)\n\
    \    }\n    if b < 0 {\n        bDigits.append(-1)\n    }\n    aDigits.append(abs(a)\
    \ % 10)\n    bDigits.append(abs(b) % 10)\n    let result = aDigits.reduce(1, *)\
    \ * bDigits.reduce(1, *)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) ==\
    \ 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15)\
    \ == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27)\
    \ == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpyw2hgglw/tmpyw2hgglw.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac9c128c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac9be1fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac9be1f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac9be1e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyw2hgglw                        0x0000565480c2a62f <unavailable> + 5679

    5    libc.so.6                          0x00002aac9c314460 __libc_start_main +
    245

    6    tmpyw2hgglw                        0x0000565480c2a159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let x = a >\
    \ 0 ? a : -a\n    let y = b > 0 ? b : -b\n    let c = x % 10 * y % 10\n    return\
    \ c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\n\
    assert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\n\
    assert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\n\
    assert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a:\
    \ 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpsvmb_qpo/tmpsvmb_qpo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac72131bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac721012b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac721012988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7210117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsvmb_qpo                        0x0000555b847a624d <unavailable> + 4685

    5    libc.so.6                          0x00002ac721507460 __libc_start_main +
    245

    6    tmpsvmb_qpo                        0x0000555b847a5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return a %\
    \ 10 * b % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpiu_avr6m/tmpiu_avr6m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba9321ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba92f15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba92f15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba92f147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiu_avr6m                        0x000055f4cfc9624d <unavailable> + 4685

    5    libc.so.6                          0x00002aba9340a460 __libc_start_main +
    245

    6    tmpiu_avr6m                        0x000055f4cfc95ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aUnitDigit\
    \ = abs(a) % 10\n    let bUnitDigit = abs(b) % 10\n    return aUnitDigit * bUnitDigit\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return ((a\
    \ % 10) * (b % 10))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp2949m5bt/tmp2949m5bt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b073df5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b073dc54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b073dc54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b073dc537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2949m5bt                        0x0000560409cad3cf <unavailable> + 5071

    5    libc.so.6                          0x00002b073e149460 __libc_start_main +
    245

    6    tmp2949m5bt                        0x0000560409cacef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return ((a\
    \ % 10) * (b % 10)).abs\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpzrl5aj1v.swift:15:34: error: value of type 'Int' has no member\
    \ 'abs'\n    return ((a % 10) * (b % 10)).abs\n           ~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a *\
    \ b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqaduw6t1/tmpqaduw6t1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8189c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8189931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8189931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81899307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaduw6t1                        0x00005584c969c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8189e26460 __libc_start_main +
    245

    6    tmpqaduw6t1                        0x00005584c969bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let number1\
    \ = String(abs(a))\n    let number2 = String(abs(b))\n    return Int(String(number1.last!))!\
    \ * Int(String(number2.last!))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var a = a,\
    \ b = b\n    if a < 0 { a *= -1 }\n    if b < 0 { b *= -1 }\n    return (a % 10)\
    \ * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var res = 0,\
    \ first = a, second = b\n    if a < 0 {\n        first = -a\n    }\n    if b <\
    \ 0 {\n        second = -b\n    }\n    res = (first % 10) * (second % 10)\n  \
    \  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (abs(a\
    \ % 10) * abs(b % 10))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let units =\
    \ [\n        a % 10,\n        b % 10\n    ]\n    return units.reduce(1, *)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmphs1q46i0/tmphs1q46i0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f5a201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f59ef8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f59ef8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f59ef77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs1q46i0                        0x0000558f2522c54f <unavailable> + 5455

    5    libc.so.6                          0x00002b9f5a3ed460 __libc_start_main +
    245

    6    tmphs1q46i0                        0x0000558f2522c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var result\
    \ = 0\n    let arr = [a, b]\n    for x in arr {\n        let res = abs(x) % 10\n\
    \        if result == 0 {\n            result = res\n        } else {\n      \
    \      result *= res\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmp8x3jbj0n/tmp8x3jbj0n.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4f5fcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4f5cc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4f5cc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4f5cc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8x3jbj0n                        0x00005612c2c2d6ad <unavailable> + 5805

    5    libc.so.6                          0x00002af4f61b7460 __libc_start_main +
    245

    6    tmp8x3jbj0n                        0x00005612c2c2d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a%10)\
    \ * (b%10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpj77jj9o7/tmpj77jj9o7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1822378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b182206fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b182206f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b182206e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj77jj9o7                        0x00005567b21a33cf <unavailable> + 5071

    5    libc.so.6                          0x00002b1822564460 __libc_start_main +
    245

    6    tmpj77jj9o7                        0x00005567b21a2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    // Solution\n\
    \    // let a = String(abs(a))\n    // let b = String(abs(b))\n    // return Int(String(a.last!))!\
    \ * Int(String(b.last!))!\n    // Or\n    return (abs(a) % 10) * (abs(b) % 10)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a)\
    \ % 10 * abs(b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqqyd8_rw/tmpqqyd8_rw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cfe7e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cfe4dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cfe4db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cfe4da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqyd8_rw                        0x000055c023d1233d <unavailable> + 4925

    5    libc.so.6                          0x00002b5cfe9d0460 __libc_start_main +
    245

    6    tmpqqyd8_rw                        0x000055c023d11fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (abs(a)\
    \ % 10) * (abs(b) % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var res = 0\n\
    \    var a = a\n    var b = b\n    if a < 0 {\n        a = -a\n    }\n    if b\
    \ < 0 {\n        b = -b\n    }\n    if a < 10 && b < 10 {\n        res = a * b\n\
    \    } else {\n        while a > 10 {\n            a /= 10\n        }\n      \
    \  while b > 10 {\n            b /= 10\n        }\n        res = a * b\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp5k88j0g1/tmp5k88j0g1.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affd0abfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affd07b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affd07b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affd07b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5k88j0g1                        0x0000558db48f024d <unavailable> + 4685

    5    libc.so.6                          0x00002affd0cab460 __libc_start_main +
    245

    6    tmp5k88j0g1                        0x0000558db48efef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let product\
    \ = (a * b) % 10\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmps7kfazlo/tmps7kfazlo.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adff6ceac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adff69e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adff69e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adff69e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7kfazlo                        0x000055785630f24d <unavailable> + 4685

    5    libc.so.6                          0x00002adff6ed6460 __libc_start_main +
    245

    6    tmps7kfazlo                        0x000055785630eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let (x, y)\
    \ = (abs(a), abs(b))\n    return (x%10) * (y%10)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return ((a\
    \ % 10) * (b % 10))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp2949m5bt/tmp2949m5bt.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b073df5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b073dc54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b073dc54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b073dc537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2949m5bt                        0x0000560409cad3cf <unavailable> + 5071

    5    libc.so.6                          0x00002b073e149460 __libc_start_main +
    245

    6    tmp2949m5bt                        0x0000560409cacef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let prod =\
    \ a * b\n    return prod % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp_ma17uoc/tmp_ma17uoc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab089a78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab08976fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab08976f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab08976e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ma17uoc                        0x000055bcb259324d <unavailable> + 4685

    5    libc.so.6                          0x00002ab089c64460 __libc_start_main +
    245

    6    tmp_ma17uoc                        0x000055bcb2592ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return ((abs(a)\
    \ % 10) * (abs(b) % 10))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let ints =\
    \ [a, b].map { $0 < 0 ? $0 * -1 : $0 }\n    let unitDigits = ints.map { $0 % 10\
    \ }\n    return unitDigits.reduce(1, *)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitDigitA\
    \ = a % 10\n    let unitDigitB = b % 10\n    return unitDigitA * unitDigitB\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpr2yr0s3a/tmpr2yr0s3a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea2857cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea28273b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea28273988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea282727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2yr0s3a                        0x000055ed69a623cf <unavailable> + 5071

    5    libc.so.6                          0x00002aea28768460 __libc_start_main +
    245

    6    tmpr2yr0s3a                        0x000055ed69a61ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a *\
    \ b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqaduw6t1/tmpqaduw6t1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8189c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8189931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8189931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81899307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaduw6t1                        0x00005584c969c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8189e26460 __libc_start_main +
    245

    6    tmpqaduw6t1                        0x00005584c969bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  let a = abs(a),\
    \ b = abs(b)\n  let m = a % 10, n = b % 10\n  return m * n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var a = a\n\
    \    var b = b\n    a = a < 0 ? -a : a\n    b = b < 0 ? -b : b\n    return (a\
    \ % 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a)\
    \ % 10 * abs(b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqqyd8_rw/tmpqqyd8_rw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cfe7e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cfe4dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cfe4db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cfe4da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqyd8_rw                        0x000055c023d1233d <unavailable> + 4925

    5    libc.so.6                          0x00002b5cfe9d0460 __libc_start_main +
    245

    6    tmpqqyd8_rw                        0x000055c023d11fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let x = (a\
    \ % 10) * (b % 10)\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpbowmt26e/tmpbowmt26e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d69f20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d69c17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d69c17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d69c167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbowmt26e                        0x0000555d3a1a63cf <unavailable> + 5071

    5    libc.so.6                          0x00002b5d6a10c460 __libc_start_main +
    245

    6    tmpbowmt26e                        0x0000555d3a1a5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aa = String(abs(a))\n\
    \    let bb = String(abs(b))\n    let ai = Int(String(aa.last!))!\n    let bi\
    \ = Int(String(bb.last!))!\n    return ai * bi\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) ==\
    \ 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15)\
    \ == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27)\
    \ == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let abProduct\
    \ = (a * b) % 10\n    return abProduct\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpi4fkblrs/tmpi4fkblrs.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8f92a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8f8f99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8f8f99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8f8f987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4fkblrs                        0x0000565443a2b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ad8f948e460 __libc_start_main +
    245

    6    tmpi4fkblrs                        0x0000565443a2aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n\treturn abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a)\
    \ % 10 * abs(b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqqyd8_rw/tmpqqyd8_rw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cfe7e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cfe4dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cfe4db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cfe4da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqyd8_rw                        0x000055c023d1233d <unavailable> + 4925

    5    libc.so.6                          0x00002b5cfe9d0460 __libc_start_main +
    245

    6    tmpqqyd8_rw                        0x000055c023d11fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = Array(String(a)).map({\
    \ Int(String($0))! })\n    let b = Array(String(b)).map({ Int(String($0))! })\n\
    \    return a.last! * b.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpkm4ob077/tmpkm4ob077.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f7f296c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f7ef8d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7f7ef8d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7f7ef8d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7f7ef8cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkm4ob077                        0x00005611455d5001 <unavailable> + 8193

    6    libswiftCore.so                    0x00002b7f7ef75820 Collection.map<A>(_:)
    + 426

    7    tmpkm4ob077                        0x00005611455d4b99 <unavailable> + 7065

    8    tmpkm4ob077                        0x00005611455d4782 <unavailable> + 6018

    9    libc.so.6                          0x00002b7f7f482460 __libc_start_main +
    245

    10   tmpkm4ob077                        0x00005611455d4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var aRemainder\
    \ = a % 10\n    var bRemainder = b % 10\n    var result = aRemainder * bRemainder\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp_dmm_jgk/tmp_dmm_jgk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9f08d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9f05ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9f05ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9f05cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_dmm_jgk                        0x000055baa83103cf <unavailable> + 5071

    5    libc.so.6                          0x00002af9f0ac3460 __libc_start_main +
    245

    6    tmp_dmm_jgk                        0x000055baa830fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var unitA =\
    \ a % 10\n    var unitB = b % 10\n    if unitA < 0 {\n        unitA = abs(unitA)\n\
    \    }\n    if unitB < 0 {\n        unitB = abs(unitB)\n    }\n    return unitA\
    \ * unitB\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var val: Int\
    \ = 0\n    val = (abs(a) % 10) * (abs(b) % 10)\n    return val\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return [a,\
    \ b].map{ abs($0 % 10) }.reduce(1, *)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let result\
    \ = a * b\n    let lastDigit = result.lastDigit\n    return lastDigit\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp02jtwv9s.swift:16:28: error: value of type 'Int' has no member\
    \ 'lastDigit'\n    let lastDigit = result.lastDigit\n                    ~~~~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let (first,\
    \ second) = (a % 10, b % 10)\n    return first * second\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmp75bvxmtq/tmp75bvxmtq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac23c908c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac23c5ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac23c5ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac23c5fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75bvxmtq                        0x0000556a6bb793cf <unavailable> + 5071

    5    libc.so.6                          0x00002ac23caf4460 __libc_start_main +
    245

    6    tmp75bvxmtq                        0x0000556a6bb78ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let x = (a\
    \ > 0) ? a : -a\n    let y = (b > 0) ? b : -b\n    return (x % 10) * (y % 10)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a%10)\
    \ * (b%10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpj77jj9o7/tmpj77jj9o7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1822378c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b182206fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b182206f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b182206e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj77jj9o7                        0x00005567b21a33cf <unavailable> + 5071

    5    libc.so.6                          0x00002b1822564460 __libc_start_main +
    245

    6    tmpj77jj9o7                        0x00005567b21a2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  return String(a).last.flatMap\
    \ { String($0).asInt }\n    ?? 1 * String(b).last.flatMap { String($0).asInt }\n\
    \    ?? 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp300josvk.swift:15:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return String(a).last.flatMap { String($0).asInt }\n    \
    \     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028632
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var result\
    \ = 1\n    if a >= 0 && b >= 0 {\n        result = (a % 10) * (b % 10)\n    }\
    \ else if a < 0 && b < 0 {\n        result = ((a * -1) % 10) * ((b * -1) % 10)\n\
    \    } else if a >= 0 && b < 0 {\n        result = (a % 10) * ((b * -1) % 10)\n\
    \    } else if a < 0 && b >= 0 {\n        result = ((a * -1) % 10) * (b % 10)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitA =\
    \ a % 10\n    let unitB = b % 10\n    return unitA * unitB\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmpe5mcp0lh/tmpe5mcp0lh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f3abd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f3a8c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f3a8c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f3a8c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5mcp0lh                        0x00005626eb4413cf <unavailable> + 5071

    5    libc.so.6                          0x00002b3f3adbc460 __libc_start_main +
    245

    6    tmpe5mcp0lh                        0x00005626eb440ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let product\
    \ = a * b\n    let digits = product > 0 ? product.digits : (product * -1).digits\n\
    \    return digits.count == 1 ? digits[0] : digits[1]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpz6ctbdvi.swift:16:40: error: value of type 'Int' has no member\
    \ 'digits'\n    let digits = product > 0 ? product.digits : (product * -1).digits\n\
    \                               ~~~~~~~ ^~~~~~\n/tmp/tmpz6ctbdvi.swift:16:64:\
    \ error: value of type 'Int' has no member 'digits'\n    let digits = product\
    \ > 0 ? product.digits : (product * -1).digits\n                             \
    \                   ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var a = abs(a)\n\
    \    var b = abs(b)\n    var product = 1\n    while a > 0 {\n        product *=\
    \ a % 10\n        a /= 10\n    }\n    while b > 0 {\n        product *= b % 10\n\
    \        b /= 10\n    }\n    return product % 10\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmpyrxhtmeu/tmpyrxhtmeu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90cd7b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90cd4b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90cd4b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90cd4af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrxhtmeu                        0x000056121da5f33d <unavailable> + 4925

    5    libc.so.6                          0x00002b90cd9a5460 __libc_start_main +
    245

    6    tmpyrxhtmeu                        0x000056121da5efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    func getLastDigit(from\
    \ integer: Int) -> Int {\n        return abs(integer % 10)\n    }\n    return\
    \ getLastDigit(from: a) * getLastDigit(from: b)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) ==\
    \ 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15)\
    \ == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27)\
    \ == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return a.unitDigit\
    \ * b.unitDigit\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpp6j0s1w5.swift:15:14: error: value of type 'Int' has no member\
    \ 'unitDigit'\n    return a.unitDigit * b.unitDigit\n           ~ ^~~~~~~~~\n\
    /tmp/tmpp6j0s1w5.swift:15:24: error: cannot convert return expression of type\
    \ 'Duration' to return type 'Int'\n    return a.unitDigit * b.unitDigit\n    \
    \       ~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpp6j0s1w5.swift:15:28: error: value\
    \ of type 'Int' has no member 'unitDigit'\n    return a.unitDigit * b.unitDigit\n\
    \                         ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028610
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let product\
    \ = (a * b) % 10\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmps7kfazlo/tmps7kfazlo.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adff6ceac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adff69e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adff69e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adff69e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps7kfazlo                        0x000055785630f24d <unavailable> + 4685

    5    libc.so.6                          0x00002adff6ed6460 __libc_start_main +
    245

    6    tmps7kfazlo                        0x000055785630eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = a%10,\
    \ b = b%10\n    return a*b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp350f4qht/tmp350f4qht.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45a11d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45a0ed0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45a0ed0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45a0ecf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp350f4qht                        0x000055aae68963cf <unavailable> + 5071

    5    libc.so.6                          0x00002b45a13c5460 __libc_start_main +
    245

    6    tmp350f4qht                        0x000055aae6895ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a *\
    \ b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqaduw6t1/tmpqaduw6t1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8189c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8189931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8189931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81899307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaduw6t1                        0x00005584c969c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8189e26460 __libc_start_main +
    245

    6    tmpqaduw6t1                        0x00005584c969bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  return (String(a).last\
    \ ?? \"0\")\n    .unicodeScalars\n    .first?\n    .value\n    .multipliedReportingOverflow(by:\
    \ \n      (String(b).last ?? \"0\")\n        .unicodeScalars\n        .first?\n\
    \        .value\n    )\n    .partialValue\n    ?? 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: SyntaxError
  stderr: "/tmp/tmp8zsweps2.swift:26:5: error: cannot convert return expression of\
    \ type 'UInt32' to return type 'Int'\n    ?? 0\n~~~~^~~~\n        )\n/tmp/tmp8zsweps2.swift:23:10:\
    \ error: value of optional type 'UInt32?' must be unwrapped to a value of type\
    \ 'UInt32'\n        .value\n         ^\n/tmp/tmp8zsweps2.swift:23:10: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     .value\n         ^\n               ?? <#default value#>\n/tmp/tmp8zsweps2.swift:23:10:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        .value\n         ^\n"
  stdout: ''
  timestamp: 1660028613
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let strA =\
    \ a.description\n    let strB = b.description\n    return Int(String(strA.last!))!\
    \ * Int(String(strB.last!))!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let x = abs(a)\
    \ % 10\n    let y = abs(b) % 10\n    return x * y\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028611
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  let aArray =\
    \ Array(String(a))\n  let bArray = Array(String(b))\n  return Int(String(aArray[aArray.count\
    \ - 1]))! * Int(String(bArray[bArray.count - 1]))!\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b:\
    \ 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a.description.last\
    \ ?? \"0\").wholeNumberValue! * (b.description.last ?? \"0\").wholeNumberValue!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a)\
    \ % 10 * abs(b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqqyd8_rw/tmpqqyd8_rw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cfe7e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cfe4dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cfe4db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cfe4da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqyd8_rw                        0x000055c023d1233d <unavailable> + 4925

    5    libc.so.6                          0x00002b5cfe9d0460 __libc_start_main +
    245

    6    tmpqqyd8_rw                        0x000055c023d11fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitsA\
    \ = Int(String(a).last!)!\n    let unitsB = Int(String(b).last!)!\n    return\
    \ unitsA * unitsB\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpyi5sl40m.swift:15:36: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    let unitsA = Int(String(a).last!)!\n\
    \                                   ^\n/tmp/tmpyi5sl40m.swift:16:36: error: cannot\
    \ convert value of type 'String.Element' (aka 'Character') to expected argument\
    \ type 'String'\n    let unitsB = Int(String(b).last!)!\n                    \
    \               ^\n/tmp/tmpyi5sl40m.swift:17:19: error: cannot convert return\
    \ expression of type 'Duration' to return type 'Int'\n    return unitsA * unitsB\n\
    \           ~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let firstNumber\
    \ = a % 10\n    let secondNumber = b % 10\n    return firstNumber * secondNumber\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpedivtpoq/tmpedivtpoq.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c7453fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c74236b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c74236988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c742357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedivtpoq                        0x00005591b05153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b3c7472b460 __libc_start_main +
    245

    6    tmpedivtpoq                        0x00005591b0514ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitA =\
    \ a % 10\n    let unitB = b % 10\n    return unitA * unitB\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmpe5mcp0lh/tmpe5mcp0lh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f3abd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f3a8c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f3a8c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f3a8c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5mcp0lh                        0x00005626eb4413cf <unavailable> + 5071

    5    libc.so.6                          0x00002b3f3adbc460 __libc_start_main +
    245

    6    tmpe5mcp0lh                        0x00005626eb440ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aLastDigit\
    \ = a % 10\n    let bLastDigit = b % 10\n    return aLastDigit * bLastDigit\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpzbwbaz54/tmpzbwbaz54.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c2cbf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c2c8f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c2c8f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c2c8ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbwbaz54                        0x0000562d5e7b13cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2c2cde5460 __libc_start_main +
    245

    6    tmpzbwbaz54                        0x0000562d5e7b0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let x = (a\
    \ % 10) * (b % 10)\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpbowmt26e/tmpbowmt26e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d69f20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d69c17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d69c17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d69c167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbowmt26e                        0x0000555d3a1a63cf <unavailable> + 5071

    5    libc.so.6                          0x00002b5d6a10c460 __libc_start_main +
    245

    6    tmpbowmt26e                        0x0000555d3a1a5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028611
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  return (abs(a)\
    \ % 10) * (abs(b) % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n\tlet x = String(a).map\
    \ { String($0) }.last!\n\tlet y = String(b).map { String($0) }.last!\n\treturn\
    \ Int(x)! * Int(y)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let nums =\
    \ [a, b].map { abs($0) }\n    return nums.reduce(1) { $0 * $1 % 10 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp136tyanu/tmp136tyanu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad789b1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad789811b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad789811988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7898107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp136tyanu                        0x00005570a96c255d <unavailable> + 5469

    5    libc.so.6                          0x00002ad789d06460 __libc_start_main +
    245

    6    tmp136tyanu                        0x00005570a96c2209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    // enter code\
    \ here\n    let a = a % 10\n    let b = b % 10\n    return a * b\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmpxp883bwn/tmpxp883bwn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad099b68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad09985fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad09985f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad09985e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxp883bwn                        0x0000555efdbb03cf <unavailable> + 5071

    5    libc.so.6                          0x00002ad099d54460 __libc_start_main +
    245

    6    tmpxp883bwn                        0x0000555efdbafef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aUnitDigit\
    \ = a % 10\n    let bUnitDigit = b % 10\n    return aUnitDigit * bUnitDigit\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp1_piahxs/tmp1_piahxs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c58e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c58b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c58b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c58b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_piahxs                        0x00005575ae6ae3cf <unavailable> + 5071

    5    libc.so.6                          0x00002b1c5905b460 __libc_start_main +
    245

    6    tmp1_piahxs                        0x00005575ae6adef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return abs(a\
    \ % 10) * abs(b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a1 = a\
    \ % 10\n    let b1 = b % 10\n    return a1 * b1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) ==\
    \ 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15)\
    \ == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27)\
    \ == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpz2m6fgzz/tmpz2m6fgzz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adffe858c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adffe54fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adffe54f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adffe54e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2m6fgzz                        0x0000564f2b44f3cf <unavailable> + 5071

    5    libc.so.6                          0x00002adffea44460 __libc_start_main +
    245

    6    tmpz2m6fgzz                        0x0000564f2b44eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var newA =\
    \ a\n    var newB = b\n    if a < 0 {\n        newA = -a\n    }\n    if b < 0\
    \ {\n        newB = -b\n    }\n    let product = (newA % 10) * (newB % 10)\n \
    \   return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  return abs(a)\
    \ % 10 * abs(b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(multiply(a:\
    \ 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a:\
    \ 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a:\
    \ 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmp6d2cpblh/tmp6d2cpblh.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98066fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98063f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98063f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98063f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6d2cpblh                        0x0000558d195d033d <unavailable> + 4925

    5    libc.so.6                          0x00002b98068e6460 __libc_start_main +
    245

    6    tmp6d2cpblh                        0x0000558d195cffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660028612
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = String(a).characters.last!.wholeNumberValue!\n\
    \    let b = String(b).characters.last!.wholeNumberValue!\n    return a * b\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmpnzb_w7m7.swift:15:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    let a = String(a).characters.last!.wholeNumberValue!\n\
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpnzb_w7m7.swift:16:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    let b = String(b).characters.last!.wholeNumberValue!\n\
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a *\
    \ b) % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpqaduw6t1/tmpqaduw6t1.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8189c3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8189931b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8189931988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81899307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqaduw6t1                        0x00005584c969c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b8189e26460 __libc_start_main +
    245

    6    tmpqaduw6t1                        0x00005584c969bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let aUnitDigit\
    \ = a % 10\n    let bUnitDigit = b % 10\n    return aUnitDigit * bUnitDigit\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: Exception
  stderr: 'tmp1_piahxs/tmp1_piahxs.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c58e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c58b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c58b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c58b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_piahxs                        0x00005575ae6ae3cf <unavailable> + 5071

    5    libc.so.6                          0x00002b1c5905b460 __libc_start_main +
    245

    6    tmp1_piahxs                        0x00005575ae6adef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let (a, b)\
    \ = (abs(a), abs(b))\n    let aDigit = a % 10\n    let bDigit = b % 10\n    return\
    \ aDigit * bDigit\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let a = abs(a),\
    \ b = abs(b)\n    return (a%10) * (b%10)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\n\
    assert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\n\
    assert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a:\
    \ 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028612
- exit_code: 0
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    // Get the\
    \ unit digit of 'a' and 'b'\n    let aUnitDigit = abs(a % 10)\n    let bUnitDigit\
    \ = abs(b % 10)\n    \n    // Multiply both of them\n    return aUnitDigit * bUnitDigit\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n  return String(a\
    \ % 10 * b % 10).compactMap { Int(String($0)) }.first ?? 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmp_sz6h0ag/tmp_sz6h0ag.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45fd8d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45fd5c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45fd5c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45fd5c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_sz6h0ag                        0x000055d4e14cc59d <unavailable> + 5533

    5    libc.so.6                          0x00002b45fdabd460 __libc_start_main +
    245

    6    tmp_sz6h0ag                        0x000055d4e14cc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    let unitA =\
    \ a % 10\n    let unitB = b % 10\n    return unitA * unitB\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a: 19,\
    \ b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a: 14,\
    \ b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a: 17,\
    \ b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0, b: 0)\
    \ == 0)"
  status: Exception
  stderr: 'tmpe5mcp0lh/tmpe5mcp0lh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f3abd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f3a8c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f3a8c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f3a8c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5mcp0lh                        0x00005626eb4413cf <unavailable> + 5071

    5    libc.so.6                          0x00002b3f3adbc460 __libc_start_main +
    245

    6    tmpe5mcp0lh                        0x00005626eb440ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
- exit_code: 1
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var aString\
    \ = String(a)\n    var bString = String(b)\n    aString = aString.trimmingCharacters(in:\
    \ CharacterSet(charactersIn: \"-0\"))\n    bString = bString.trimmingCharacters(in:\
    \ CharacterSet(charactersIn: \"-0\"))\n    var aInt = Int(aString)!\n    var bInt\
    \ = Int(bString)!\n    if aInt < 0 {\n        aInt = -aInt\n    }\n    if bInt\
    \ < 0 {\n        bInt = -bInt\n    }\n    return (aInt % 10) * (bInt % 10)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(multiply(a: 148, b: 412) == 16)\nassert(multiply(a:\
    \ 19, b: 28) == 72)\nassert(multiply(a: 2020, b: 1851) == 0)\nassert(multiply(a:\
    \ 14, b: -15) == 20)\nassert(multiply(a: 76, b: 67) == 42)\nassert(multiply(a:\
    \ 17, b: 27) == 49)\nassert(multiply(a: 0, b: 1) == 0)\nassert(multiply(a: 0,\
    \ b: 0) == 0)"
  status: SyntaxError
  stderr: "/tmp/tmptiujgo69.swift:17:46: error: cannot find 'CharacterSet' in scope\n\
    \    aString = aString.trimmingCharacters(in: CharacterSet(charactersIn: \"-0\"\
    ))\n                                             ^~~~~~~~~~~~\n/tmp/tmptiujgo69.swift:17:23:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    aString\
    \ = aString.trimmingCharacters(in: CharacterSet(charactersIn: \"-0\"))\n     \
    \         ~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmptiujgo69.swift:18:46: error: cannot\
    \ find 'CharacterSet' in scope\n    bString = bString.trimmingCharacters(in: CharacterSet(charactersIn:\
    \ \"-0\"))\n                                             ^~~~~~~~~~~~\n/tmp/tmptiujgo69.swift:18:23:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    bString\
    \ = bString.trimmingCharacters(in: CharacterSet(charactersIn: \"-0\"))\n     \
    \         ~~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028612
- exit_code: -4
  program: "\n/// Complete the function that takes two integers and returns \n///\
    \ the product of their unit digits.\n/// Assume the input is always valid.\n///\
    \ Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19,\
    \ b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a:\
    \ 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    return (a %\
    \ 10) * (b % 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(multiply(a: 148, b:\
    \ 412) == 16)\nassert(multiply(a: 19, b: 28) == 72)\nassert(multiply(a: 2020,\
    \ b: 1851) == 0)\nassert(multiply(a: 14, b: -15) == 20)\nassert(multiply(a: 76,\
    \ b: 67) == 42)\nassert(multiply(a: 17, b: 27) == 49)\nassert(multiply(a: 0, b:\
    \ 1) == 0)\nassert(multiply(a: 0, b: 0) == 0)"
  status: Exception
  stderr: 'tmpnzro0cg2/tmpnzro0cg2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2baa29ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ba9f95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ba9f95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ba9f947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzro0cg2                        0x0000564e1d3153cf <unavailable> + 5071

    5    libc.so.6                          0x00002b2baa48a460 __libc_start_main +
    245

    6    tmpnzro0cg2                        0x0000564e1d314ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660028609
