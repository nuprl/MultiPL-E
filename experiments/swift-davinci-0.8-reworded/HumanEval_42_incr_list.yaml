name: HumanEval_42_incr_list
language: swift
prompt: "\n/// Return array with elements incremented by 1.\n/// >>> incr_list(l:\
  \ [1, 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
  /// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(incr_list(l: [] as [Int]) == [] as [Int])\n\
  assert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3,\
  \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
completions: ["    var result = [Int]()\n    for i in l {\n        result.append(i\
    \ + 1)\n    }\n    return result", '    return l.map { $0 + 1 }', "    var incr\
    \ = [Int]()\n    for e in l {\n        incr.append(e + 1)\n    }\n    return incr",
  '    return map(l, { $0 + 1 })', '    return l.map { $0 + 1 }', "    var new_list\
    \ = [Int]()\n    for element in l {\n        new_list.append(element + 1)\n  \
    \  }\n    return new_list", "    var res = [Int]()\n    for v in l {\n       \
    \ res.append(v + 1)\n    }\n    return res", '    return l.map({ (i: Int) -> Int
    in return i + 1 })', "    var result = [Int]()\n    for i in l {\n        result.append(i\
    \ + 1)\n    }\n    return result", "    var l2 = l\n    for i in 0..<l.count {\n\
    \        l2[i] = l[i] + 1\n    }\n    return l2", '    return l.map({ return $0
    + 1 })', "    var list = l\n    for i in 0..<list.count {\n        list[i] +=\
    \ 1\n    }\n    return list", '    return l.map{$0 + 1}', "    var new_list =\
    \ [Int]()\n    for i in l {\n        new_list.append(i + 1)\n    }\n    return\
    \ new_list", "    return l.map { (item: Int) -> Int in\n        return item +\
    \ 1\n    }", '    return l.map { return $0 + 1 }', "    var tmp = l\n    for i\
    \ in 0..<l.count {\n        tmp[i] += 1\n    }\n    return tmp", "    // TODO:\
    \ IMPLEMENT ME.\n    return l.map({$0 + 1})", "    var new_list = [Int]()\n  \
    \  for el in l {\n        new_list.append(el + 1)\n    }\n    return new_list",
  "    var li = l\n    for (i, _) in l.enumerated() {\n        li[i] += 1\n    }\n\
    \    return li", '  return map(l, { $0 + 1 })', "    var r = [Int]()\n    for\
    \ e in l {\n        r.append(e + 1)\n    }\n    return r", '    return l.map {
    $0 + 1 }', '    return map(l, { i in i + 1 })', "    var r = [Int]()\n    for\
    \ i in l {\n        r.append(i + 1)\n    }\n    return r", "    var new_l = l\n\
    \    for i in 0..<l.count {\n        new_l[i] += 1\n    }\n    return new_l",
  '    return l.map { $0 + 1 }', '    return map(l, { $0 + 1 })', '    return l.map{$0
    + 1}', '    return l.map { $0 + 1 }', '  return l.map { $0 + 1 }', "    // TODO\n\
    \    return []", '    return l.map { $0 + 1 }', '    return l.map { (i: Int) ->
    Int in i + 1 }', '    return map(l, incr)', '    return map(l) { x in x + 1 }',
  "    var arr: [Int] = []\n    for element in l {\n        arr.append(element + 1)\n\
    \    }\n    return arr", "    var incr = [Int]()\n    for i in l {\n        incr.append(i\
    \ + 1)\n    }\n    return incr", '    return l.map({$0 + 1})', '    return l.map({
    $0 + 1 })', '    return l.map { $0 + 1 }', "    // START SOLUTION\n    return\
    \ l.map { $0 + 1 }\n    // END SOLUTION", '    return map(l, {$0 + 1})', '    return
    map(l, incr)', "    let ixs = [Int](0..<l.count)\n    return map(ixs, { l[$0]\
    \ + 1 })", "    // TODO\n    return []", "    var acc: [Int] = []\n    for i in\
    \ l {\n        acc.append(i + 1)\n    }\n    return acc", "    var res = [Int]()\n\
    \    for n in l {\n        res.append(n + 1)\n    }\n    return res", '    return
    map(l: l, f: incr)', '    return l.map { i in i + 1 }', '    return l.map({ $0
    + 1 })', "    var r = l\n    for i in 0..<l.count {\n        r[i] = l[i] + 1\n\
    \    }\n    return r", "    var ret = [Int]()\n    for x in l {\n        ret.append(x\
    \ + 1)\n    }\n    return ret", '    return l.map({ $0 + 1 })', "    var out:\
    \ [Int] = []\n    for num in l {\n        out.append(num + 1)\n    }\n    return\
    \ out", "    var ret: [Int] = []\n    for i in l {\n        ret.append(i + 1)\n\
    \    }\n    return ret", "    var res = l\n    for i in stride(from: 0, to: l.count,\
    \ by: 1) {\n        res[i] += 1\n    }\n    return res", "    var acc: [Int] =\
    \ []\n    for var index = 0; index < l.count; ++index {\n        let i = l[index]\n\
    \        acc.append(i + 1)\n    }\n    return acc", '    return map_list(f: f_incr,
    l: l)', "  var new_list = l\n  for i in 0..<l.count {\n    new_list[i] += 1\n\
    \  }\n  return new_list", "    if l.isEmpty {\n        return []\n    }\n    let\
    \ head = l[0]\n    let tail = l[1..<l.count]\n    let incremented_tail = incr_list(l:\
    \ Array(tail))\n    let result = [head + 1] + incremented_tail\n    return result",
  "    var list: [Int] = []\n    for element in l {\n        list.append(element +\
    \ 1)\n    }\n    return list", '    return l.map { $0 + 1 }', "    var incr_l\
    \ = [Int]()\n    for element in l {\n        incr_l.append(element + 1)\n    }\n\
    \    return incr_l", '    return l.map { $0 + 1 }', '    return map(l, { x in
    x + 1 })', '  return l.map { $0 + 1 }', '    return map(l: l, f: { x in x + 1
    })', '  return [Int]()', '    return l.map { $0 + 1 }', "    var ll = l\n    for\
    \ i in ll.indices {\n        ll[i] += 1\n    }\n    return ll", '    return map(l,
    { (e: Int) -> Int in e + 1 })', "    var l = l\n    for i in 0..<l.count {\n \
    \       l[i] += 1\n    }\n    return l", "    var result: [Int] = []\n    for\
    \ (index, n) in l.enumerated() {\n        result.append(n + 1)\n    }\n    return\
    \ result", "    var res: [Int] = []\n    for elem in l {\n        res.append(elem\
    \ + 1)\n    }\n    return res", '    return l.map { $0 + 1 }', "    var res =\
    \ [Int]()\n    for n in l {\n        res.append(n + 1)\n    }\n    return res",
  '    return l.map { $0 + 1 }', "    // YOUR CODE HERE\n    var m = [Int]()\n   \
    \ for n in l {\n        m.append(n+1)\n    }\n    return m", "    var tmp: [Int]\
    \ = []\n    for i in l {\n        tmp.append(i + 1)\n    }\n    return tmp", " \
    \   if l.isEmpty {\n        return []\n    } else {\n        return [l[0] + 1]\
    \ + incr_list(l: Array(l[1..<l.count]))\n    }", '    return l.map { $0 + 1 }',
  '    return l.map({x in x + 1})', "    if l.isEmpty {\n        return []\n    }\
    \ else {\n        return [l[0] + 1] + incr_list(l: Array(l[1...]))\n    }", '    return
    l.map({ x in x + 1 })', '    return l.map({x in x + 1})', '    return l.map({$0
    + 1})', "    var res: [Int] = []\n    for i in l {\n        res.append(i + 1)\n\
    \    }\n    return res", '    return map(l, incr)', '  return l.map { $0 + 1 }',
  "    var ll = l\n    for (i, _) in ll.enumerated() {\n        ll[i] += 1\n    }\n\
    \    return ll", "  var l_incr: [Int] = []\n  for item in l {\n    l_incr.append(item\
    \ + 1)\n  }\n  return l_incr", '    return l.map { $0 + 1 }', "    var incr_list\
    \ = [Int]()\n    for i in l {\n        incr_list.append(i + 1)\n    }\n    return\
    \ incr_list", "    var list = l\n    for i in 0..<list.count {\n        list[i]\
    \ = list[i] + 1\n    }\n    return list", "    var l1 = l\n    for (idx, val)\
    \ in l.enumerated() {\n        l1[idx] = val + 1\n    }\n    return l1", "  var\
    \ result = l\n  for i in 0..<l.count {\n    result[i] += 1\n  }\n  return result",
  "    var l_out = l\n    var i = 0\n    while i < l.count {\n        l_out[i] = l_out[i]\
    \ + 1\n        i = i + 1\n    }\n    return l_out", '    return map(l) { x in
    x + 1 }', "  var arr = l\n  for index in 0..<arr.count {\n    arr[index] += 1\n\
    \  }\n  return arr", '  return l.map { $0 + 1 }', "    var ret = [Int]()\n   \
    \ for e in l {\n        ret.append(e + 1)\n    }\n    return ret", "  var result\
    \ = [Int]()\n  for x in l {\n    result.append(x + 1)\n  }\n  return result",
  '    return map(list: l, f: incr)', "    var result: [Int] = []\n    for e in l\
    \ {\n        result.append(e + 1)\n    }\n    return result", '    return l.map
    { $0 + 1 }', "    var result = [Int]()\n    for i in l {\n        result.append(i\
    \ + 1)\n    }\n    return result", '    return l.map { $0 + 1 }', "    var res\
    \ = [Int]()\n    for i in l {\n        res.append(i + 1)\n    }\n    return res",
  '    return l.map({$0 + 1})', '    return map(l, {x in x + 1})', '    return map(l,
    {x in x + 1})', '    return l.map { $0 + 1 }', "    func incr(n: Int) -> Int {\n\
    \        return n + 1\n    }\n    return map(l, incr)", "    var res = [Int]()\n\
    \    for i in l {\n        res.append(i + 1)\n    }\n    return res", '    return
    l.map { $0 + 1 }', "    // YOUR CODE HERE\n    var l2 = l\n    for i in 0..<l.count\
    \ {\n        l2[i] = l[i] + 1\n    }\n    return l2", '    return []', '  return
    l.map { n in n + 1 }', '    return map(l, incr)', "  var result = [Int]()\n  for\
    \ i in l {\n    result.append(i + 1)\n  }\n  return result", "    var incr_list\
    \ = l\n    for i in 0..<incr_list.count {\n        incr_list[i] += 1\n    }\n\
    \    return incr_list", '    return l.map { $0 + 1 }', "    var incrL = l\n  \
    \  for i in 0..<incrL.count {\n        incrL[i] = incrL[i] + 1\n    }\n    return\
    \ incrL", '    return l.map { i in i + 1 }', '    return l.map({ (a: Int) -> Int
    in return a + 1 })', "    var r = l;\n    for i in 0..<l.count {\n        r[i]\
    \ += 1;\n    }\n    return r;", "    return list_map(l: l, fun: fun(x: Int) ->\
    \ Int {\n        return x + 1\n    })", "  if l.isEmpty {\n    return []\n  }\n\
    \  let head = l[0]\n  let tail = Array(l[1..<l.count])\n  return [head + 1] +\
    \ incr_list(l: tail)", "  var r = [Int]()\n  for x in l {\n    r.append(x + 1)\n\
    \  }\n  return r", '    return []', '    return l.map { $0 + 1 }', '    return
    l.map { $0 + 1 }', '    return l.map { $0 + 1 }', "    // *** YOUR CODE HERE ***\n\
    \    var out = [Int]()\n    for i in l {\n        out.append(i + 1)\n    }\n \
    \   return out", "  var out: [Int] = []\n  for elem in l {\n    out.append(elem\
    \ + 1)\n  }\n  return out", '  return l.map { $0 + 1 }', "    var newList = [Int]()\n\
    \    for i in l {\n        newList.append(i + 1)\n    }\n    return newList",
  '  return map(l, incr)', '  return map(l) { $0 + 1 }', "    var result: [Int] =\
    \ []\n    for i in l {\n        result.append(i + 1)\n    }\n    return result",
  "    let incr = l.map({ $0 + 1 })\n    return incr", "    let res = l.map { $0 +\
    \ 1 }\n    return res", "    var res: [Int] = []\n    for i in l {\n        res.append(i\
    \ + 1)\n    }\n    return res", '    return map(l, { x in x + 1})', "    return\
    \ l.map{ x in\n        return x + 1\n    }", "    var result = [Int]()\n    for\
    \ i in l {\n        result.append(i + 1)\n    }\n    return result", "    var\
    \ l2 = l\n    for i in 0..<l.count {\n        l2[i] += 1\n    }\n    return l2",
  "  var result: [Int] = [Int]()\n  for i in l {\n    result.append(i + 1)\n  }\n\
    \  return result", '    return [Int]()', "  var new_list = l\n  for i in 0..<l.count\
    \ {\n    new_list[i] += 1\n  }\n  return new_list", "    var res: [Int] = []\n\
    \    for x in l {\n        res.append(x + 1)\n    }\n    return res", "    var\
    \ new_list = [Int]()\n    for n in l {\n        new_list.append(n + 1)\n    }\n\
    \    return new_list", "    var new_list = [Int]()\n    for i in l {\n       \
    \ new_list.append(i + 1)\n    }\n    return new_list", "    var a = l\n    for\
    \ i in 0..<a.count {\n        a[i] += 1\n    }\n    return a", '    return map(l)
    { $0 + 1 }', "    var new_list = l;\n    for i in 0..<l.count {\n        new_list[i]\
    \ += 1;\n    }\n    return new_list;", "    var result: [Int] = []\n    var tmp:\
    \ Int\n    for element in l {\n        tmp = element + 1\n        result.append(tmp)\n\
    \    }\n    return result", "    var l1 = l\n    for i in 0..<l.count {\n    \
    \    l1[i] = l[i] + 1\n    }\n    return l1", "    var result = [Int]()\n    for\
    \ e in l {\n        result.append(e + 1)\n    }\n    return result", '    return
    l.map { $0 + 1 }', '    return _increment(l: l, a: 1)', '    return l.map { $0
    + 1 }', '    return l.map { $0 + 1 }', '    return l.map { $0 + 1 }', "    var\
    \ i: Int = 0\n    var newL: [Int] = []\n    for i = 0; i < l.count; i += 1 {\n\
    \        let a: Int = l[i]\n        newL.append(a + 1)\n    }\n    return newL",
  '    return l.map({ $0 + 1 })', '    return map(l, incr)', "    var result = [Int]()\n\
    \    for element in l {\n        result.append(element + 1)\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for i in l {\n        result.append(i\
    \ + 1)\n    }\n    return result", "    var result = [Int]()\n    for i in l {\n\
    \        result.append(i + 1)\n    }\n    return result", '    return l.map {
    $0 + 1 }', "    var res: [Int] = []\n    for x in l {\n        res.append(x +\
    \ 1)\n    }\n    return res", "    var arr = l\n    for i in 0..<arr.count {\n\
    \        arr[i] += 1\n    }\n    return arr", '    return map(l, incr_int)', " \
    \   var arr = l\n    for index in 0..<arr.count {\n        arr[index] = arr[index]\
    \ + 1\n    }\n    return arr", "    func add1(a: Int) -> Int {\n        return\
    \ a + 1\n    }\n    return map(l, add1)", '    return Array(0 ..< l.count).map
    { l[$0] + 1 }', "    var incr_l = [Int]()\n    for i in l {\n        incr_l.append(i\
    \ + 1)\n    }\n    return incr_l", "    var new_list = [Int]()\n    for num in\
    \ l {\n        new_list.append(num + 1)\n    }\n    return new_list", "    var\
    \ _l = l\n    for i in 0..<_l.count {\n        _l[i] = _l[i] + 1\n    }\n    return\
    \ _l", "    if l.isEmpty {\n        return []\n    }\n    return [l[0] + 1] +\
    \ incr_list(l: l.dropFirst())", '    return map(l, incr)', '    return l.map({
    x in x + 1 })', '  return l.map { x in x + 1 }', "    if l.isEmpty {\n       \
    \ return []\n    }\n    else {\n        return [(l[0] + 1)] + incr_list(l: Array(l[1..<l.count]))\n\
    \    }", "    if l.isEmpty {\n        return []\n    }\n    var new_l = l\n  \
    \  new_l[new_l.startIndex] += 1\n    return new_l", '    return l.map{$0 + 1}',
  '    return l.map {$0 + 1}', "    var l_incr: [Int] = []\n    var j = 0\n    while\
    \ j < l.count {\n        l_incr.append(l[j] + 1)\n        j += 1\n    }\n    return\
    \ l_incr", "    var arr = [Int]()\n    for a in l {\n        arr.append(a + 1)\n\
    \    }\n    return arr", '  return map(l, { (x: Int) -> Int in x + 1 })', "  \
    \  if let (head, tail) = l.match {\n        return [head + 1] + incr_list(l: tail)\n\
    \    } else {\n        return []\n    }", '    return l.map { $0 + 1 }', "   \
    \ // Increment each element of the list\n    let result = l.map { $0 + 1 }\n \
    \   return result", '    return map_list(l: l, f: { x in x + 1 })', "    var l2\
    \ = [Int]()\n    for i in l {\n        l2.append(i + 1)\n    }\n    return l2",
  '    return map(l) { x in x + 1 }', '    return l.map { $0 + 1 }', "    if l.isEmpty\
    \ {\n        return []\n    } else {\n        return [l[0] + 1] + incr_list(l:\
    \ Array(l[1..<l.count]))\n    }"]
stop_tokens:
- "\n}"
