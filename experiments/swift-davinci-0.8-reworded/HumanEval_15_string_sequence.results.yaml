language: swift
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    }\n    return (0...n).map({ String($0) }).joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ Array(0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result = result + String(i) + \" \"\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpghpnc444/tmpghpnc444.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22611a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2260e98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2260e98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2260e977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghpnc444                        0x000055615b14f582 <unavailable> + 5506

    5    libc.so.6                          0x00002b226138d460 __libc_start_main +
    245

    6    tmpghpnc444                        0x000055615b14f1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let xs\
    \ = [Int](0...n)\n    return xs.map({\"\\($0)\"}).joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = [String]()\n    for i in 0...n {\n        result.append(String(i))\n    }\n\
    \    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\";\n    for i in 0...n {\n        s += String(i) + \" \";\n    }\n    return\
    \ s;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\"\
    )\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmppzzkbcwr/tmppzzkbcwr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02e6cbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02e69b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02e69b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02e69b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzzkbcwr                        0x000056461a1d55d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b02e6ea6460 __libc_start_main +
    245

    6    tmppzzkbcwr                        0x000056461a1d5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var output\
    \ = \"\"\n    for i in 0...n {\n        output += String(i) + \" \"\n    }\n \
    \   return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpcmuu7zmw/tmpcmuu7zmw.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6497e7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6497b71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6497b71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6497b707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmuu7zmw                        0x0000562fa68055d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b6498066460 __libc_start_main +
    245

    6    tmpcmuu7zmw                        0x0000562fa6805239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  if n <\
    \ 0 {\n    return \"\"\n  }\n  var result = \"\"\n  for i in 0...n {\n    result\
    \ += String(i)\n    if i != n {\n      result += \" \"\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ String(0...n).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: SyntaxError
  stderr: "/tmp/tmp7ok3x9s3.swift:8:12: error: no exact matches in call to initializer\
    \ \n    return String(0...n).joined(separator: \" \")\n           ^\n/tmp/tmp7ok3x9s3.swift:8:12:\
    \ note: found candidate with type '(ClosedRange<Int>) -> String'\n    return String(0...n).joined(separator:\
    \ \" \")\n           ^\n/tmp/tmp7ok3x9s3.swift:8:12: note: found candidate with\
    \ type '(ClosedRange<Int>) -> String'\n    return String(0...n).joined(separator:\
    \ \" \")\n           ^\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = String()\n    for i in 0...n {\n        s += \"\\(i) \"\n    }\n    return\
    \ s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\"\
    )\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpr334tj24/tmpr334tj24.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e28049c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e27d40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e27d40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e27d3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr334tj24                        0x000055a51023c762 <unavailable> + 5986

    5    libc.so.6                          0x00002b0e28235460 __libc_start_main +
    245

    6    tmpr334tj24                        0x000055a51023c3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var buf\
    \ = \"\"\n    for i in 0...n {\n        buf += \"\\(i) \"\n    }\n    return buf\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpr43fu284/tmpr43fu284.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3f06a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3f03a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3f03a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3f039f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr43fu284                        0x0000564f8dd38722 <unavailable> + 5922

    5    libc.so.6                          0x00002ae3f0895460 __libc_start_main +
    245

    6    tmpr43fu284                        0x0000564f8dd38389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += String(i) + \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnxufm5pz/tmpnxufm5pz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdccf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdc9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdc9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdc9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxufm5pz                        0x000055873c3895d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adbdcedd460 __libc_start_main +
    245

    6    tmpnxufm5pz                        0x000055873c389239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  var result\
    \ = \"\"\n  for i in 0...n {\n    result += \"\\(i) \"\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpqtq8r560/tmpqtq8r560.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bcc561c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bcc258b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bcc258988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bcc2577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqtq8r560                        0x000055c65ac84722 <unavailable> + 5922

    5    libc.so.6                          0x00002b6bcc74d460 __libc_start_main +
    245

    6    tmpqtq8r560                        0x000055c65ac84389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\";\n    for i in 0 ... n {\n        s += \"\\(i) \";\n    }\n    return\
    \ s;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\"\
    )\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpaea6_dfl/tmpaea6_dfl.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e9a6c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9a3bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9a3bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9a3bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaea6_dfl                        0x000055e4cb2f4722 <unavailable> + 5922

    5    libc.so.6                          0x00002b7e9a8b2460 __libc_start_main +
    245

    6    tmpaea6_dfl                        0x000055e4cb2f4389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let numbers\
    \ = Array(0...n)\n    let sequence = numbers.map { String($0) }\n    return sequence.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ sequence(first: 0, next: {$0 < n}).map({String($0)}).joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpkj8dux1g.swift:8:41: error: cannot convert value of type 'Bool'\
    \ to closure result type 'Int?'\n    return sequence(first: 0, next: {$0 < n}).map({String($0)}).joined(separator:\
    \ \" \")\n                                     ~~~^~~\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { \"\\($0)\" }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let array\
    \ = (0...n).map { String($0) }\n    return array.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var sequence\
    \ = \"\"\n    for i in 0...n {\n        sequence += String(i) + \" \"\n    }\n\
    \    return sequence\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpl4bc8sgf/tmpl4bc8sgf.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a0da31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a0d728b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a0d728988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a0d7277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4bc8sgf                        0x0000560d565f65d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b5a0dc1d460 __libc_start_main +
    245

    6    tmpl4bc8sgf                        0x0000560d565f6239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let str\
    \ = (0...n).map { String($0) }.joined(separator: \" \")\n    return str\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ <= 0 {\n        return \"\\(n)\"\n    } else {\n        return string_sequence(n:\
    \ n - 1) + \" \\(n)\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ String(repeating: String((0...n).map{ String($0) + \" \" }), count: 1)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpqkkhs2dr.swift:8:30: error: no exact matches in call to initializer\
    \ \n    return String(repeating: String((0...n).map{ String($0) + \" \" }), count:\
    \ 1)\n                             ^\nSwift.String:4:12: note: candidate requires\
    \ that the types 'String' and 'Character' be equivalent (requirement specified\
    \ as 'S.Element' == 'Character')\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate requires that the types 'String.Element' (aka 'Character') and\
    \ 'String' be equivalent (requirement specified as 'Self.Element' == 'S.Element')\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\nSwift.String:2:12: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = String()\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmp0rmepzol/tmp0rmepzol.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf87b7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf87872b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf87872988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf878717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0rmepzol                        0x000055ff17a23762 <unavailable> + 5986

    5    libc.so.6                          0x00002adf87d67460 __libc_start_main +
    245

    6    tmp0rmepzol                        0x000055ff17a233c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var output\
    \ = \"\"\n    for i in 0...n {\n        output += String(i) + \" \"\n    }\n \
    \   return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpcmuu7zmw/tmpcmuu7zmw.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6497e7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6497b71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6497b71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6497b707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmuu7zmw                        0x0000562fa68055d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b6498066460 __libc_start_main +
    245

    6    tmpcmuu7zmw                        0x0000562fa6805239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \" \\(i)\"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpldu1cqzb/tmpldu1cqzb.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b891d634c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b891d32bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b891d32b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b891d32a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldu1cqzb                        0x0000562829316722 <unavailable> + 5922

    5    libc.so.6                          0x00002b891d820460 __libc_start_main +
    245

    6    tmpldu1cqzb                        0x0000562829316389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ Array(0...n).map {String($0)}.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var out:\
    \ String = \"\"\n    for i in 0...n {\n        out += \" \\(i)\"\n    }\n    return\
    \ out\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) ==\
    \ \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmp8uf6drud/tmp8uf6drud.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14d7deac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14d7ae1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14d7ae1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14d7ae07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uf6drud                        0x000055d1e9ed0722 <unavailable> + 5922

    5    libc.so.6                          0x00002b14d7fd6460 __libc_start_main +
    245

    6    tmp8uf6drud                        0x000055d1e9ed0389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ < 0 {\n        return \"\"\n    }\n    if n == 0 {\n        return \"0\"\n \
    \   }\n    return 0.stride(to: n+1, by: 1).map{String($0)}.joinWithSeparator(\"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) ==\
    \ \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: SyntaxError
  stderr: "/tmp/tmp6rbkie0c.swift:14:14: error: value of type 'Int' has no member\
    \ 'stride'\n    return 0.stride(to: n+1, by: 1).map{String($0)}.joinWithSeparator(\"\
    \ \")\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var a\
    \ = [String]()\n    for i in 0...n {\n        a.append(String(i))\n    }\n   \
    \ return a.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ n.stride(through: 0, by: -1).map({String($0)}).joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjm9d_8n1.swift:8:12: error: value of type 'Int' has no member 'stride'\n\
    \  return n.stride(through: 0, by: -1).map({String($0)}).joined(separator: \"\
    \ \")\n         ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \" \\(i)\"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpldu1cqzb/tmpldu1cqzb.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b891d634c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b891d32bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b891d32b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b891d32a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldu1cqzb                        0x0000562829316722 <unavailable> + 5922

    5    libc.so.6                          0x00002b891d820460 __libc_start_main +
    245

    6    tmpldu1cqzb                        0x0000562829316389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var array\
    \ = Array(0...n)\n    return array.map(String.init).joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map({ String($0) }).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var res\
    \ = \"\"\n    for i in 0...n {\n        res += \" \\(i)\"\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp1ugrpibr/tmp1ugrpibr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f4279dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f42494b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f42494988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f424937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ugrpibr                        0x0000564129f08722 <unavailable> + 5922

    5    libc.so.6                          0x00002b5f42989460 __libc_start_main +
    245

    6    tmp1ugrpibr                        0x0000564129f08389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += String(i)\n        if i != n {\n\
    \            s += \" \"\n        }\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    guard\
    \ n >= 0 else {\n        preconditionFailure(\"string_sequence(n: Int) expects\
    \ n to be non-negative\")\n    }\n    return String(Array(0...n).map { String($0)\
    \ }.joined(separator: \" \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = String()\n    for i in 0...n {\n        result += String(i)\n        if i\
    \ != n {\n            result += \" \"\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let sequence\
    \ = (0...n).map { String($0) }\n    return sequence.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map({ String($0) }).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    var number = 0\n    while number <= n {\n        result += \"\\\
    (number) \"\n        number += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpq73yhtiy/tmpq73yhtiy.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02d1a4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02d1744b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02d1744988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02d17437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq73yhtiy                        0x000055dc7318d592 <unavailable> + 5522

    5    libc.so.6                          0x00002b02d1c39460 __libc_start_main +
    245

    6    tmpq73yhtiy                        0x000055dc7318d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    //print(\"\
    in string_sequence(\\(n))\")\n    if n > 0 {\n        return string_sequence(n:\
    \ n-1) + \" \\(n)\"\n    } else {\n        return \"\\(n)\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ Array(0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += String(i) + \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnxufm5pz/tmpnxufm5pz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdccf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdc9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdc9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdc9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxufm5pz                        0x000055873c3895d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adbdcedd460 __libc_start_main +
    245

    6    tmpnxufm5pz                        0x000055873c389239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  if n <\
    \ 0 {\n    return \"\"\n  }\n  return (0...n).map { String($0) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += String(i) + \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnxufm5pz/tmpnxufm5pz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdccf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdc9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdc9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdc9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxufm5pz                        0x000055873c3895d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adbdcedd460 __libc_start_main +
    245

    6    tmpnxufm5pz                        0x000055873c389239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    // return\
    \ sequence.joinWithSeparator(\" \")\n    var sequence = [String]()\n    for i\
    \ in 0...n {\n        sequence.append(String(i))\n    }\n    return sequence.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  var result\
    \ = \"\"\n  for i in 0...n {\n    result += String(i)\n    if i != n {\n     \
    \ result += \" \"\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    guard\
    \ n >= 0 else {\n        return \"\"\n    }\n    let numbers = (0...n).map(String.init)\n\
    \    return numbers.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ Array(0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let xs\
    \ = sequence(first: 0, next: { $0+1 }).prefix(n+1)\n    return xs.map { String($0)\
    \ }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  var str\
    \ = \"\"\n  var i = 0\n  repeat {\n    str += String(i)\n    if i != n {\n   \
    \   str += \" \"\n    }\n    i += 1\n  } while i <= n\n  return str\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var string\
    \ = \"\"\n    for i in 0...n {\n        string.append(\"\\(i) \")\n    }\n   \
    \ return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpipylzidn/tmpipylzidn.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66e7e46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66e7b3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66e7b3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66e7b3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipylzidn                        0x0000560f5bf72722 <unavailable> + 5922

    5    libc.so.6                          0x00002b66e8032460 __libc_start_main +
    245

    6    tmpipylzidn                        0x0000560f5bf72389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s = s + \" \" + String(i)\n    }\n   \
    \ return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpsuhio_pa/tmpsuhio_pa.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaf175cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaf1453b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaf1453988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaf14527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsuhio_pa                        0x000055bee8d21582 <unavailable> + 5506

    5    libc.so.6                          0x00002abaf1948460 __libc_start_main +
    245

    6    tmpsuhio_pa                        0x000055bee8d211e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += String(i)\n        if i != n {\n\
    \            s += \" \"\n        }\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var string\
    \ = \"\"\n    for i in 0...n {\n        string += String(i) + \" \"\n    }\n \
    \   return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpas2boga5/tmpas2boga5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b964eb5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b964e855b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b964e855988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b964e8547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpas2boga5                        0x0000557b491b35d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b964ed4a460 __libc_start_main +
    245

    6    tmpas2boga5                        0x0000557b491b3239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    }\n    return string_sequence(n: n - 1) +\
    \ \" \\(n)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ Array(0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var number\
    \ = 0\n    var result = String()\n    while number <= n {\n        result += String(number)\n\
    \        result += \" \"\n        number += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp2rwa3klx/tmp2rwa3klx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2303179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2302e70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2302e70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2302e6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rwa3klx                        0x000055e83c85b442 <unavailable> + 5186

    5    libc.so.6                          0x00002b2303365460 __libc_start_main +
    245

    6    tmp2rwa3klx                        0x000055e83c85b0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var m\
    \ = \"\"\n    for i in 0...n {\n        m += String(i) + \" \"\n    }\n    return\
    \ m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\"\
    )\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpcqkdh2xq/tmpcqkdh2xq.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17640fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1763df2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1763df2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1763df17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcqkdh2xq                        0x000055d18493b5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b17642e7460 __libc_start_main +
    245

    6    tmpcqkdh2xq                        0x000055d18493b239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += String(i) + \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnxufm5pz/tmpnxufm5pz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdccf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdc9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdc9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdc9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxufm5pz                        0x000055873c3895d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adbdcedd460 __libc_start_main +
    245

    6    tmpnxufm5pz                        0x000055873c389239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var str\
    \ = \"\"\n    for i in 0...n {\n        str += \"\\(i) \"\n    }\n    return str\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpvx9ztrab/tmpvx9ztrab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2967ddec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2967ad5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2967ad5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2967ad47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvx9ztrab                        0x0000562be199c722 <unavailable> + 5922

    5    libc.so.6                          0x00002b2967fca460 __libc_start_main +
    245

    6    tmpvx9ztrab                        0x0000562be199c389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += \" \\(i)\"\n    }\n    return s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpcgh004re/tmpcgh004re.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab23d2bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab23cfb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab23cfb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab23cfb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgh004re                        0x000055d34af0d722 <unavailable> + 5922

    5    libc.so.6                          0x00002ab23d4a6460 __libc_start_main +
    245

    6    tmpcgh004re                        0x000055d34af0d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let array\
    \ = [Int](0...n)\n    return array.map { String($0) }.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var str\
    \ = \"\"\n    for i in 0...n {\n        str += \"\\(i) \"\n    }\n    return str\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpvx9ztrab/tmpvx9ztrab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2967ddec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2967ad5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2967ad5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2967ad47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvx9ztrab                        0x0000562be199c722 <unavailable> + 5922

    5    libc.so.6                          0x00002b2967fca460 __libc_start_main +
    245

    6    tmpvx9ztrab                        0x0000562be199c389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    guard\
    \ n > 0 else { return String(n) }\n    var result = String(n)\n    for i in (0...n-1).reversed()\
    \ {\n        result += \" \\(i)\"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpgos7wtnk/tmpgos7wtnk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20c125cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20c0f53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20c0f53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20c0f527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgos7wtnk                        0x000055634dfb2a78 <unavailable> + 6776

    5    libc.so.6                          0x00002b20c1448460 __libc_start_main +
    245

    6    tmpgos7wtnk                        0x000055634dfb2619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result.append(\"\\(i) \")\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmp0c8t8jzh/tmp0c8t8jzh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee65c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee65949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee65949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee659487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0c8t8jzh                        0x00005563fcede722 <unavailable> + 5922

    5    libc.so.6                          0x00002aee65e3e460 __libc_start_main +
    245

    6    tmp0c8t8jzh                        0x00005563fcede389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ string_sequence(n: n, prefix: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: SyntaxError
  stderr: "/tmp/tmp_5y13y8b.swift:8:40: error: extra argument 'prefix' in call\n \
    \ return string_sequence(n: n, prefix: \"\")\n                        ~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var string\
    \ = \"\"\n    for i in 0...n {\n        string += \"\\(i) \"\n    }\n    return\
    \ string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpurazyhe6/tmpurazyhe6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93d677bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93d6472b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93d6472988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93d64717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurazyhe6                        0x000055839d6ea722 <unavailable> + 5922

    5    libc.so.6                          0x00002b93d6967460 __libc_start_main +
    245

    6    tmpurazyhe6                        0x000055839d6ea389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n:\
    \ n - 1) + \" \\(n)\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  var s =\
    \ \"\"\n  var i = 0\n  while i <= n {\n    s += \" \\(i)\"\n    i += 1\n  }\n\
    \  return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpdc4ecbcq/tmpdc4ecbcq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaee506c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaee1fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaee1fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaee1fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdc4ecbcq                        0x000055f17123a592 <unavailable> + 5522

    5    libc.so.6                          0x00002aaaee6f2460 __libc_start_main +
    245

    6    tmpdc4ecbcq                        0x000055f17123a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let sequence\
    \ = (0...n).map(String.init)\n    return sequence.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ < 0 {\n        return \"ERROR: argument should be greater than 0\"\n    }\n\
    \    return String(Array(0...n))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: SyntaxError
  stderr: "/tmp/tmpx8_z7nqa.swift:11:12: error: no exact matches in call to initializer\
    \ \n    return String(Array(0...n))\n           ^\nSwift.String:2:12: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(describing:)')\n    public init<Subject>(describing\
    \ instance: Subject)\n           ^\nSwift.String:3:23: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(describing:)')\n    @inlinable public\
    \ init<Subject>(describing instance: Subject) where Subject : CustomStringConvertible\n\
    \                      ^\nSwift.String:6:12: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(reflecting:)')\n    public init<Subject>(reflecting\
    \ subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    (0...n).map\
    \ { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    var i = 0\n    while i <= n {\n        s += \"\\(i) \"\n       \
    \ i += 1\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmp3s7a2_ll/tmp3s7a2_ll.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada85e20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada85b17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada85b17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada85b167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3s7a2_ll                        0x000055d6da532592 <unavailable> + 5522

    5    libc.so.6                          0x00002ada8600c460 __libc_start_main +
    245

    6    tmp3s7a2_ll                        0x000055d6da5321f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    }\n    return (0...n).map { String($0) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var all\
    \ = \"\"\n    for i in 0...n {\n        all = all + \" \" + String(i)\n    }\n\
    \    return all\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmp9ba2x1s9/tmp9ba2x1s9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86a1939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86a1630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86a1630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86a162f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ba2x1s9                        0x0000557294f3e582 <unavailable> + 5506

    5    libc.so.6                          0x00002b86a1b25460 __libc_start_main +
    245

    6    tmp9ba2x1s9                        0x0000557294f3e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var buffer\
    \ = \"\"\n    for i in 0...n {\n        buffer += \"\\(i) \"\n    }\n    return\
    \ buffer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpjzlq_ksg/tmpjzlq_ksg.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b908abcdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b908a8c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b908a8c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b908a8c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjzlq_ksg                        0x000055790e151722 <unavailable> + 5922

    5    libc.so.6                          0x00002b908adb9460 __libc_start_main +
    245

    6    tmpjzlq_ksg                        0x000055790e151389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var sequence\
    \ = \"\"\n    for i in 0...n {\n        sequence += String(i) + \" \"\n    }\n\
    \    sequence.removeLast()\n    return sequence\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n:\
    \ n - 1) + \" \\(n)\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  var string\
    \ = \"\"\n  for i in 0...n {\n    string += \"\\(i) \"\n  }\n  return string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp39zijbky/tmp39zijbky.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b008a839c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b008a530b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b008a530988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b008a52f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp39zijbky                        0x0000563aa0ab4722 <unavailable> + 5922

    5    libc.so.6                          0x00002b008aa25460 __libc_start_main +
    245

    6    tmp39zijbky                        0x0000563aa0ab4389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ Array(0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n:\
    \ n - 1) + \" \\(n)\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var list\
    \ = [String]()\n    for x in 0...n {\n        list.append(String(x))\n    }\n\
    \    return list.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    var x = n\n    while x >= 0 {\n        s = s + \"\\(x) \"\n    \
    \    x = x - 1\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpj2j53k80/tmpj2j53k80.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaec676c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaec36db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaec36d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaec36c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj2j53k80                        0x0000556462aba592 <unavailable> + 5522

    5    libc.so.6                          0x00002acaec862460 __libc_start_main +
    245

    6    tmpj2j53k80                        0x0000556462aba1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var sequence\
    \ = \"\"\n    for i in 0...n {\n        sequence.append(\"\\(i) \")\n    }\n \
    \   return sequence\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpltwsdpoc/tmpltwsdpoc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b212b026c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b212ad1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b212ad1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b212ad1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltwsdpoc                        0x00005653df1bb722 <unavailable> + 5922

    5    libc.so.6                          0x00002b212b212460 __libc_start_main +
    245

    6    tmpltwsdpoc                        0x00005653df1bb389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var nums:\
    \ [String] = []\n    for i in 0...n {\n        nums.append(String(i))\n    }\n\
    \    return nums.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  var s =\
    \ \"\"\n  for i in 0...n {\n    s += \"\\(i) \"\n  }\n  return s\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp_84_kg1w/tmp_84_kg1w.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d64e06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d64afdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d64afd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d64afc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_84_kg1w                        0x00005640e847a722 <unavailable> + 5922

    5    libc.so.6                          0x00002b0d64ff2460 __libc_start_main +
    245

    6    tmp_84_kg1w                        0x00005640e847a389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += String(i)\n        if i != n {\n\
    \            s += \" \"\n        }\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += \"\\(i) \"\n    }\n    return s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp_8j4tn9l/tmp_8j4tn9l.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f8d31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f8a28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f8a28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f8a277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8j4tn9l                        0x00005606c2dc3722 <unavailable> + 5922

    5    libc.so.6                          0x00002b00f8f1d460 __libc_start_main +
    245

    6    tmp_8j4tn9l                        0x00005606c2dc3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ sequence(first: 0, next: { $0 + 1 }).prefix(n + 1).map({ String($0) }).joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var elements\
    \ = [String]()\n    for i in 0...n {\n        elements.append(String(i))\n   \
    \ }\n    return elements.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var string\
    \ = \"\"\n    for i in 0...n {\n        string.append(\"\\(i) \")\n    }\n   \
    \ return string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpipylzidn/tmpipylzidn.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66e7e46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66e7b3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66e7b3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66e7b3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipylzidn                        0x0000560f5bf72722 <unavailable> + 5922

    5    libc.so.6                          0x00002b66e8032460 __libc_start_main +
    245

    6    tmpipylzidn                        0x0000560f5bf72389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ ((0...n).map { String($0) }).joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    }\n    var result = \"\"\n    for i in 0...n\
    \ {\n        result += \"\\(i) \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp6ea8l3ki/tmp6ea8l3ki.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6da3cf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6da39edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6da39ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6da39ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ea8l3ki                        0x000056128030a7e8 <unavailable> + 6120

    5    libc.so.6                          0x00002b6da3ee2460 __libc_start_main +
    245

    6    tmp6ea8l3ki                        0x000056128030a389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ String(Array(0...n).map { String($0) }.joined(separator: \" \"))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += \" \\(i)\"\n    }\n    return s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpcgh004re/tmpcgh004re.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab23d2bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab23cfb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab23cfb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab23cfb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgh004re                        0x000055d34af0d722 <unavailable> + 5922

    5    libc.so.6                          0x00002ab23d4a6460 __libc_start_main +
    245

    6    tmpcgh004re                        0x000055d34af0d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var str\
    \ = \"\"\n    for i in 0...n {\n        str += String(i) + \" \"\n    }\n    return\
    \ str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) ==\
    \ \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpdzliuvxi/tmpdzliuvxi.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac673fe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac673cdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac673cdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac673cde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzliuvxi                        0x000055e7d8d975d2 <unavailable> + 5586

    5    libc.so.6                          0x00002ac6741d4460 __libc_start_main +
    245

    6    tmpdzliuvxi                        0x000055e7d8d97239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ Array<Int>(0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var string\
    \ = \"\"\n    for i in 0...n {\n        string += \" \\(i)\"\n    }\n    return\
    \ string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmp2ujgfh_k/tmp2ujgfh_k.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4afe7a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4afe49eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4afe49e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4afe49d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ujgfh_k                        0x0000561c51f30722 <unavailable> + 5922

    5    libc.so.6                          0x00002b4afe993460 __libc_start_main +
    245

    6    tmp2ujgfh_k                        0x0000561c51f30389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let nums\
    \ = stride(from: 0, to: n + 1, by: 1)\n    let str = nums.map { String($0) }.joined(separator:\
    \ \" \")\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  var result\
    \ = \"\"\n  var i = 0\n  while i <= n {\n    result += \"\\(i) \"\n    i += 1\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpoz1rypn8/tmpoz1rypn8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73f21a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73f1e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73f1e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73f1e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoz1rypn8                        0x000055b19f16f592 <unavailable> + 5522

    5    libc.so.6                          0x00002b73f2393460 __libc_start_main +
    245

    6    tmpoz1rypn8                        0x000055b19f16f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let m\
    \ = max(0, n)\n    let nums = (0...m).map({ String($0) })\n    return nums.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map({ String($0) }).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  if n <\
    \ 0 {\n    return \"\"\n  }\n  var result = \"\"\n  for i in 0...n {\n    result\
    \ += \"\\(i) \"\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpe0dv5s7l/tmpe0dv5s7l.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98a52c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98a4fc0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98a4fc0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98a4fbf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0dv5s7l                        0x0000556f9b9df722 <unavailable> + 5922

    5    libc.so.6                          0x00002b98a54b5460 __libc_start_main +
    245

    6    tmpe0dv5s7l                        0x0000556f9b9df389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\n\
    \        (0...n).map {\n            String($0)\n        }.joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) ==\
    \ \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ Array(0...n).map{ String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  var result\
    \ = \"\"\n  for i in 0...n {\n    result += String(i)\n    if i != n {\n     \
    \ result += \" \"\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    }\n    return (0...n).map { String($0) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var str\
    \ = \"\"\n    for i in 0...n {\n        str.append(\" \\(i)\")\n    }\n    return\
    \ str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) ==\
    \ \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmp_7ohvwcp/tmp_7ohvwcp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeeb4610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeeb4307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeeb4307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeeb43067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_7ohvwcp                        0x00005604188c1722 <unavailable> + 5922

    5    libc.so.6                          0x00002aeeb47fc460 __libc_start_main +
    245

    6    tmp_7ohvwcp                        0x00005604188c1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let numbers\
    \ = [Int](0...n)\n    return numbers.map({ String($0) }).joined(separator: \"\
    \ \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) ==\
    \ \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += String(i) + \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnxufm5pz/tmpnxufm5pz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdccf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdc9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdc9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdc9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxufm5pz                        0x000055873c3895d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adbdcedd460 __libc_start_main +
    245

    6    tmpnxufm5pz                        0x000055873c389239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let series\
    \ = (0...n).map { String($0) }\n    return series.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var m\
    \ = \"\"\n    for i in 0...n {\n        m += \"\\(i) \"\n    }\n    return m\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpzwep73be/tmpzwep73be.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13e59e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13e56dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13e56db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13e56da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwep73be                        0x000055710a7f3722 <unavailable> + 5922

    5    libc.so.6                          0x00002b13e5bd0460 __libc_start_main +
    245

    6    tmpzwep73be                        0x000055710a7f3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let numbers\
    \ = Array(0...n)\n    return numbers.map { String($0) }.joined(separator: \" \"\
    )\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ str(0...n).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: SyntaxError
  stderr: "/tmp/tmpr4yzkkpf.swift:8:12: error: cannot find 'str' in scope\n    return\
    \ str(0...n).joined(separator: \" \")\n           ^~~\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  var values\
    \ = \"\"\n  for i in 0...n {\n    values += \"\\(i) \"\n  }\n  return values\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpheqoy_2t/tmpheqoy_2t.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef77d56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef77a4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef77a4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef77a4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpheqoy_2t                        0x0000561e56e15722 <unavailable> + 5922

    5    libc.so.6                          0x00002aef77f42460 __libc_start_main +
    245

    6    tmpheqoy_2t                        0x0000561e56e15389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var res\
    \ = \"\"\n    for i in 0...n {\n        res += \"\\(i) \"\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmps4ad0ct3/tmps4ad0ct3.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6e10e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6e0dd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6e0dd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6e0dd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4ad0ct3                        0x00005655327fb722 <unavailable> + 5922

    5    libc.so.6                          0x00002ab6e12ce460 __libc_start_main +
    245

    6    tmps4ad0ct3                        0x00005655327fb389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += \"\\(i) \"\n    }\n    return s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp_8j4tn9l/tmp_8j4tn9l.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f8d31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f8a28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f8a28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f8a277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8j4tn9l                        0x00005606c2dc3722 <unavailable> + 5922

    5    libc.so.6                          0x00002b00f8f1d460 __libc_start_main +
    245

    6    tmp_8j4tn9l                        0x00005606c2dc3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ Array(0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var text\
    \ = \"\"\n    for i in 0...n {\n        text += \"\\(i) \"\n    }\n    return\
    \ text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) ==\
    \ \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmprr8av0ux/tmprr8av0ux.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96c9e86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96c9b7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96c9b7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96c9b7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprr8av0ux                        0x0000557cc40e1722 <unavailable> + 5922

    5    libc.so.6                          0x00002b96ca072460 __libc_start_main +
    245

    6    tmprr8av0ux                        0x0000557cc40e1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  guard n\
    \ > 0 else { return String(n) }\n  return Array(0...n).map(String.init).joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var string\
    \ = \"\"\n    for i in 0...n {\n        string += \"\\(i) \"\n    }\n    return\
    \ string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpurazyhe6/tmpurazyhe6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93d677bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93d6472b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93d6472988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93d64717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurazyhe6                        0x000055839d6ea722 <unavailable> + 5922

    5    libc.so.6                          0x00002b93d6967460 __libc_start_main +
    245

    6    tmpurazyhe6                        0x000055839d6ea389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ <= 0 {\n        return \"0\"\n    } else {\n        var result = \"\"\n    \
    \    for i in 0...n {\n            result += String(i) + \" \"\n        }\n  \
    \      return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpegnceju7/tmpegnceju7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95c0faac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95c0ca1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95c0ca1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95c0ca07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegnceju7                        0x000055c943c79698 <unavailable> + 5784

    5    libc.so.6                          0x00002b95c1196460 __libc_start_main +
    245

    6    tmpegnceju7                        0x000055c943c79239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let arr\
    \ = Array(0...n)\n    return arr.map { String($0) }.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ \" \".join(\n    (0...n).map { $0.description }\n  )\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp_y1yon80.swift:8:14: error: value of type 'String' has no member\
    \ 'join'\n  return \" \".join(\n         ~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ [Int](0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    }\n    var s = \"\"\n    for i in 0...n {\n\
    \        s += \"\\(i) \"\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpzsljbp4i/tmpzsljbp4i.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72c8e0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72c8b03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72c8b03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72c8b027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzsljbp4i                        0x000055f37f7337e8 <unavailable> + 6120

    5    libc.so.6                          0x00002b72c8ff8460 __libc_start_main +
    245

    6    tmpzsljbp4i                        0x000055f37f733389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  return\
    \ Array(0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += \"\\(i) \"\n    }\n    return s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp_8j4tn9l/tmp_8j4tn9l.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f8d31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f8a28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f8a28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f8a277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8j4tn9l                        0x00005606c2dc3722 <unavailable> + 5922

    5    libc.so.6                          0x00002b00f8f1d460 __libc_start_main +
    245

    6    tmp_8j4tn9l                        0x00005606c2dc3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let sb\
    \ = NSMutableString()\n    for i in 0...n {\n        sb.append(\"\\(i) \")\n \
    \   }\n    return sb.trim.string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: SyntaxError
  stderr: "/tmp/tmpy46oti4f.swift:8:14: error: cannot find 'NSMutableString' in scope\n\
    \    let sb = NSMutableString()\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map(String.init).joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    guard\
    \ n > 0 else { return \"\\(n)\" }\n    return string_sequence(n: n - 1) + \" \\\
    (n)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0) ==\
    \ \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var str\
    \ = \"\"\n    for i in 0...n {\n        str += \"\\(i) \"\n    }\n    return str\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmpvx9ztrab/tmpvx9ztrab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2967ddec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2967ad5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2967ad5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2967ad47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvx9ztrab                        0x0000562be199c722 <unavailable> + 5922

    5    libc.so.6                          0x00002b2967fca460 __libc_start_main +
    245

    6    tmpvx9ztrab                        0x0000562be199c389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = [String]()\n    for i in 0...n {\n        result.append(String(i))\n    }\n\
    \    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s = s + \" \" + String(i)\n    }\n   \
    \ return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpsuhio_pa/tmpsuhio_pa.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaf175cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaf1453b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaf1453988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaf14527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsuhio_pa                        0x000055bee8d21582 <unavailable> + 5506

    5    libc.so.6                          0x00002abaf1948460 __libc_start_main +
    245

    6    tmpsuhio_pa                        0x000055bee8d211e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += String(i) + \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnxufm5pz/tmpnxufm5pz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdccf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdc9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdc9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdc9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxufm5pz                        0x000055873c3895d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adbdcedd460 __libc_start_main +
    245

    6    tmpnxufm5pz                        0x000055873c389239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var numbers\
    \ = [String]()\n    var i = 0\n    while i <= n {\n        numbers.append(String(i))\n\
    \        i += 1\n    }\n    return numbers.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += \"\\(i) \"\n    }\n    return s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp_8j4tn9l/tmp_8j4tn9l.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f8d31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f8a28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f8a28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f8a277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8j4tn9l                        0x00005606c2dc3722 <unavailable> + 5922

    5    libc.so.6                          0x00002b00f8f1d460 __libc_start_main +
    245

    6    tmp_8j4tn9l                        0x00005606c2dc3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result = result + \" \" + String(i)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpr3e5fyd1/tmpr3e5fyd1.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd8c611c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd8c308b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd8c308988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd8c3077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3e5fyd1                        0x000055f89d0b1582 <unavailable> + 5506

    5    libc.so.6                          0x00002afd8c7fd460 __libc_start_main +
    245

    6    tmpr3e5fyd1                        0x000055f89d0b11e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  if n <\
    \ 0 {\n    return \"\"\n  }\n  return (0...n).map { String($0) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += String(i)\n        if i != n {\n\
    \            s += \" \"\n        }\n    }\n    return s\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var s\
    \ = \"\"\n    for i in 0...n {\n        s += \"\\(i) \"\n    }\n    return s\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp_8j4tn9l/tmp_8j4tn9l.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f8d31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f8a28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f8a28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f8a277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8j4tn9l                        0x00005606c2dc3722 <unavailable> + 5922

    5    libc.so.6                          0x00002b00f8f1d460 __libc_start_main +
    245

    6    tmp_8j4tn9l                        0x00005606c2dc3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var a:\
    \ [String] = []\n    for i in 0...n {\n        a.append(String(i))\n    }\n  \
    \  return a.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var arr\
    \ = [String]()\n    for i in 0...n {\n        arr.append(String(i))\n    }\n \
    \   return arr.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ string_sequence(n: 0, m: n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: SyntaxError
  stderr: "/tmp/tmp7zv9r8p0.swift:8:37: error: extra argument 'm' in call\n    return\
    \ string_sequence(n: 0, m: n)\n                          ~~~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map {String($0)}.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n:\
    \ n - 1) + \" \\(n)\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    }\n    return string_sequence(n: n - 1) +\
    \ \" \\(n)\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var res\
    \ = \"\"\n    for i in 0...n {\n        res = res + String(i) + \" \"\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmp541228hz/tmp541228hz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6689d6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6689a64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6689a64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6689a637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp541228hz                        0x000055e04c505582 <unavailable> + 5506

    5    libc.so.6                          0x00002b6689f59460 __libc_start_main +
    245

    6    tmp541228hz                        0x000055e04c5051e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var seq\
    \ = [String]()\n    for i in 0...n {\n        seq.append(String(i))\n    }\n \
    \   return seq.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var seq\
    \ = \"\"\n    for i in 0...n {\n        seq += \"\\(i) \"\n    }\n    return seq\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: Exception
  stderr: 'tmp2tmjiwrz/tmp2tmjiwrz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ad067cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ad0373b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ad0373988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ad03727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2tmjiwrz                        0x00005589f5cf1722 <unavailable> + 5922

    5    libc.so.6                          0x00002b5ad0868460 __libc_start_main +
    245

    6    tmp2tmjiwrz                        0x00005589f5cf1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map({ $0.description }).joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ < 0 {\n        fatalError(\"Cannot return string_sequence for \\(n) as it is\
    \ less than 0\")\n    }\n    let range = 0...n\n    let result = range.map { String($0)\
    \ }.joined(separator: \" \")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += String(i) + \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnxufm5pz/tmpnxufm5pz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdccf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdc9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdc9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdc9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxufm5pz                        0x000055873c3895d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adbdcedd460 __libc_start_main +
    245

    6    tmpnxufm5pz                        0x000055873c389239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ (0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ Array(0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 1
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let numbers\
    \ = String(0...n)\n    return numbers.replacingOccurrences(of: \" \", with: \"\
    \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(string_sequence(n: 0) == \"0\"\
    )\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: SyntaxError
  stderr: "/tmp/tmp512gmjzn.swift:8:19: error: no exact matches in call to initializer\
    \ \n    let numbers = String(0...n)\n                  ^\nSwift.String:2:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n \
    \   public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(_:)', expected: '(reflecting:)')\n \
    \   public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    if n\
    \ == 0 {\n        return \"0\"\n    } else {\n        return string_sequence(n:\
    \ n - 1) + \" \\(n)\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var arr\
    \ = [String]()\n    for i in 0...n {\n        arr.append(String(i))\n    }\n \
    \   return arr.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1\
    \ 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += String(i) + \" \"\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnxufm5pz/tmpnxufm5pz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdccf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdc9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdc9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdc9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxufm5pz                        0x000055873c3895d2 <unavailable> + 5586

    5    libc.so.6                          0x00002adbdcedd460 __libc_start_main +
    245

    6    tmpnxufm5pz                        0x000055873c389239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var result\
    \ = \"\"\n    for i in 0...n {\n        result += \"\\(i) \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmpnkp_rp2n/tmpnkp_rp2n.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b014f883c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b014f57ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b014f57a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b014f5797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnkp_rp2n                        0x0000559848087722 <unavailable> + 5922

    5    libc.so.6                          0x00002b014fa6f460 __libc_start_main +
    245

    6    tmpnkp_rp2n                        0x0000559848087389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659978859
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var sequence\
    \ = \"\"\n    for i in 0...n {\n        sequence += String(i) + \" \"\n    }\n\
    \    sequence.removeLast()\n    return sequence\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    guard\
    \ n > 0 else { return \"0\" }\n    return (0...n).map { $0.description }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(string_sequence(n: 0)\
    \ == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978861
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n  if n ==\
    \ 0 {\n    return \"0\"\n  }\n  else {\n    return (string_sequence(n: n - 1)\
    \ + \" \\(n)\")\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var values\
    \ = [String]()\n    for i in 0...n {\n        values.append(String(i))\n    }\n\
    \    return values.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n: 3) ==\
    \ \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: 0
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    return\
    \ Array(0...n).map { String($0) }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_sequence(n: 0) == \"0\")\nassert(string_sequence(n:\
    \ 3) == \"0 1 2 3\")\nassert(string_sequence(n: 10) == \"0 1 2 3 4 5 6 7 8 9 10\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978860
- exit_code: -4
  program: "\n/// Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n:\
    \ 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    var text\
    \ = \"\"\n    for i in 0...n {\n        text += String(i) + \" \"\n    }\n   \
    \ return text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_sequence(n:\
    \ 0) == \"0\")\nassert(string_sequence(n: 3) == \"0 1 2 3\")\nassert(string_sequence(n:\
    \ 10) == \"0 1 2 3 4 5 6 7 8 9 10\")"
  status: Exception
  stderr: 'tmp5g6udl5m/tmp5g6udl5m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19f6aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19f67a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19f67a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19f67a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5g6udl5m                        0x00005626b577c5d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b19f6c97460 __libc_start_main +
    245

    6    tmp5g6udl5m                        0x00005626b577c239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978860
