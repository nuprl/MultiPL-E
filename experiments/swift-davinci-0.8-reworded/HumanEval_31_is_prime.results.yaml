language: swift
name: HumanEval_31_is_prime
results:
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i = n - 1\n    while (i > 1) {\n    \
    \    if (n % i == 0) {\n            return false\n        }\n        i -= 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpuzk_dr10/tmpuzk_dr10.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bb39a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bb3697b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bb3697988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bb36967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuzk_dr10                        0x000055f14c5644ff <unavailable> + 5375

    5    libc.so.6                          0x00002b3bb3b8c460 __libc_start_main +
    245

    6    tmpuzk_dr10                        0x000055f14c563ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    var i = 2\n    while i < n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    for i in 2...(n - 1) {\n        if n % i\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abca4775c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abca446c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abca446c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abca446c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abca446bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnbtw59fe                        0x0000557ae36129fd <unavailable> + 6653

    6    tmpnbtw59fe                        0x0000557ae3612587 <unavailable> + 5511

    7    libc.so.6                          0x00002abca4961460 __libc_start_main +
    245

    8    tmpnbtw59fe                        0x0000557ae3611fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n == 2 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    } else {\n        var i = 3\n        while i * i <= n {\n       \
    \     if n % i == 0 {\n                return false\n            }\n         \
    \   i += 2\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 2..<Int(n ** 0.5 + 1) {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo91rzsoq.swift:27:24: error: cannot find operator '**' in scope\n\
    \    for i in 2..<Int(n ** 0.5 + 1) {\n                       ^~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n == 2 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    } else {\n        let max = Int(ceil(sqrt(Double(n))))\n        for\
    \ i in 3...max {\n            if n % i == 0 {\n                return false\n\
    \            }\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0pour7mp.swift:25:23: error: cannot find 'ceil' in scope\n    \
    \    let max = Int(ceil(sqrt(Double(n))))\n                      ^~~~\n/tmp/tmp0pour7mp.swift:25:28:\
    \ error: cannot find 'sqrt' in scope\n        let max = Int(ceil(sqrt(Double(n))))\n\
    \                           ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let number = abs(n)\n    if (number == 1\
    \ || number == 2) {\n        return true\n    }\n    if number % 2 == 0 {\n  \
    \      return false\n    }\n    var i = 3\n    while i <= Int(sqrt(Double(number)))\
    \ {\n        if number % i == 0 {\n            return false\n        }\n     \
    \   i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3j6e51kb.swift:26:20: error: cannot find 'sqrt' in scope\n    while\
    \ i <= Int(sqrt(Double(number))) {\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var prime = true\n    if n <= 1 {\n     \
    \   prime = false\n    }\n    if n % 2 == 0 {\n        prime = false\n    }\n\
    \    if n % 3 == 0 {\n        prime = false\n    }\n    if n % 5 == 0 {\n    \
    \    prime = false\n    }\n    if n % 7 == 0 {\n        prime = false\n    }\n\
    \    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpl9ivolyx/tmpl9ivolyx.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0fc808c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0fc4ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0fc4ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0fc4fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl9ivolyx                        0x000055bb75696579 <unavailable> + 5497

    5    libc.so.6                          0x00002ad0fc9f4460 __libc_start_main +
    245

    6    tmpl9ivolyx                        0x000055bb75695ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    } else\
    \ if n < 2 || n % 2 == 0 {\n        return false\n    } else {\n        var f\
    \ = 3\n        while f * f <= n {\n            if n % f == 0 {\n             \
    \   return false\n            }\n            f += 2\n        }\n        return\
    \ true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    //implement me\n    var result = true\n \
    \   var c = 2\n    if n == 1 {\n        result = false\n    }\n    else if n ==\
    \ 2 || n == 3 {\n        result = true\n    }\n    else {\n        while c < n\
    \ {\n            if n % c == 0 {\n                result = false\n           \
    \     break\n            }\n            c += 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    let limit = n / 2\n    for i in 3...limit {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b51d66e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51d63dc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b51d63dc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b51d63dc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b51d63dbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzktujix8                        0x000055b907e9cb61 <unavailable> + 7009

    6    tmpzktujix8                        0x000055b907e9c5fd <unavailable> + 5629

    7    libc.so.6                          0x00002b51d68d1460 __libc_start_main +
    245

    8    tmpzktujix8                        0x000055b907e9bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    for i in 2..<n {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aac45864c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac4555b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac4555b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac4555b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac4555abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqtjayfc2                        0x0000555734b439e1 <unavailable> + 6625

    6    tmpqtjayfc2                        0x0000555734b43587 <unavailable> + 5511

    7    libc.so.6                          0x00002aac45a50460 __libc_start_main +
    245

    8    tmpqtjayfc2                        0x0000555734b42fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Write your is_prime function here!\n\
    \    if n == 1 || n == 0 {\n        return false\n    }\n    for i in 2...n {\n\
    \        if n % i == 0 && i != n {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for m in 2..<n {\n        if n % m == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Start with 2\n    var m = 2\n    // If\
    \ n is an even number, it is not prime\n    if n % 2 == 0 {\n        return false\n\
    \    }\n    // If n is divisible by any number in the range (2, n-1), it is not\
    \ prime\n    while m < n {\n        if n % m == 0 {\n            return false\n\
    \        }\n        m += 1\n    }\n    // n is not divisible by any number in\
    \ the range (2, n-1), it is prime\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpy_yw1a_k/tmpy_yw1a_k.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b818d5adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b818d2a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b818d2a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b818d2a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_yw1a_k                        0x0000564ce9b044ff <unavailable> + 5375

    5    libc.so.6                          0x00002b818d799460 __libc_start_main +
    245

    6    tmpy_yw1a_k                        0x0000564ce9b03ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var prime = true\n    for i in 2..<n {\n        if n % i == 0 {\n       \
    \     prime = false\n        }\n    }\n    return prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n == 2 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    }\n    for var i = 3; i * i <= n; i += 2 {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2ftseiru.swift:25:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 3; i * i <= n; i += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 || n < 0 {\n        return false\n\
    \    } else if n == 2 {\n        return true\n    } else {\n        for i in 2..<n\
    \ {\n            if n % i == 0 {\n                return false\n            }\n\
    \        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tvar flag\
    \ = true\n\tfor i in 2..<Int(sqrt(Double(n))) + 1 {\n\t\tif n % i == 0 {\n\t\t\
    \tflag = false\n\t\t\tbreak\n\t\t}\n\t}\n\treturn flag\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpupg0ux01.swift:22:19: error: cannot find 'sqrt' in scope\n    \
    \    for i in 2..<Int(sqrt(Double(n))) + 1 {\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var endIndex = Int(sqrt(Double(n)))\n   \
    \ if n == 1 {\n        return false\n    }\n    for i in 2...endIndex {\n    \
    \    if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwwpdqp4t.swift:18:24: error: cannot find 'sqrt' in scope\n    var\
    \ endIndex = Int(sqrt(Double(n)))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let sqrt_n = Int(sqrt(Double(n)))\n    for\
    \ i in 2...sqrt_n {\n        if n % i == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4bw_cj2o.swift:18:22: error: cannot find 'sqrt' in scope\n    let\
    \ sqrt_n = Int(sqrt(Double(n)))\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO\n    if n <= 1 {\n        return\
    \ false\n    }\n    if n <= 3 {\n        return true\n    }\n    var i = 2\n \
    \   while i*i <= n {\n        if n % i == 0 {\n            return false\n    \
    \    }\n        i = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tvar i = 1\n\tvar count = 0\n\twhile i <= n\
    \ {\n\t\tif n % i == 0 {\n\t\t\tcount = count + 1\n\t\t}\n\t\ti = i + 1\n\t}\n\
    \tif count == 2 {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Your code here!\n    if n <= 1 {\n   \
    \     return false\n    }\n    if n == 2 {\n        return true\n    }\n    if\
    \ n % 2 == 0 {\n        return false\n    }\n    let upper: Int = Int(floor(sqrt(Double(n))))\n\
    \    for i in 2...upper {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1ees302v.swift:28:26: error: cannot find 'floor' in scope\n   \
    \ let upper: Int = Int(floor(sqrt(Double(n))))\n                         ^~~~~\n\
    /tmp/tmp1ees302v.swift:28:32: error: cannot find 'sqrt' in scope\n    let upper:\
    \ Int = Int(floor(sqrt(Double(n))))\n                               ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return n > 1 && !(2..<n).contains { n % $0\
    \ == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // Edit this code\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp19i6x5ki/tmp19i6x5ki.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b456934ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4569041b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4569041988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45690407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp19i6x5ki                        0x000055a4d73e9227 <unavailable> + 4647

    5    libc.so.6                          0x00002b4569536460 __libc_start_main +
    245

    6    tmp19i6x5ki                        0x000055a4d73e8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    for d in 2...(n-1) {\n        if n % d ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b5db4c81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5db4978561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5db4978286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5db497813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5db4977bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnvmc_pyg                        0x0000557fe1e729fd <unavailable> + 6653

    6    tmpnvmc_pyg                        0x0000557fe1e72587 <unavailable> + 5511

    7    libc.so.6                          0x00002b5db4e6d460 __libc_start_main +
    245

    8    tmpnvmc_pyg                        0x0000557fe1e71fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<(n) {\n        if n % i == 0 {\n            return false\n \
    \       }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var n = n\n    if n == 2 {\n        return\
    \ true\n    }\n    else if n % 2 == 0 {\n        return false\n    }\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp084r5i2z.swift:25:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 0 {\n        return false\n    }\n\
    \    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_67jcn3z.swift:21:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return true;\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpp39f4vvz/tmpp39f4vvz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b782dda8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b782da9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b782da9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b782da9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp39f4vvz                        0x00005601083e51b3 <unavailable> + 4531

    5    libc.so.6                          0x00002b782df94460 __libc_start_main +
    245

    6    tmpp39f4vvz                        0x00005601083e4e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO\n    if n==1 {\n        return false\n\
    \    }\n    else if n==2{\n        return true\n    }\n    else{\n        for\
    \ i in 2...n-1{\n            if n%i==0{\n                return false\n      \
    \      }\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpyke2t7eo.swift:19:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var prime = true\n    for i in 2..<n {\n        if n % i == 0 {\n       \
    \     prime = false\n        }\n    }\n    return prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n == 2 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    } else {\n        for i in 3...Int(floor(sqrt(Double(n)))) {\n  \
    \          if n % i == 0 {\n                return false\n            }\n    \
    \    }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6ojb2mfj.swift:25:26: error: cannot find 'floor' in scope\n   \
    \     for i in 3...Int(floor(sqrt(Double(n)))) {\n                         ^~~~~\n\
    /tmp/tmp6ojb2mfj.swift:25:32: error: cannot find 'sqrt' in scope\n        for\
    \ i in 3...Int(floor(sqrt(Double(n)))) {\n                               ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    var i = 2\n    while i < n {\n\
    \        if n % i == 0 {\n            return false\n        }\n        i += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO: Implement\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpqi3gdedt/tmpqi3gdedt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75efeeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75efbe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75efbe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75efbe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqi3gdedt                        0x0000560899483227 <unavailable> + 4647

    5    libc.so.6                          0x00002b75f00d6460 __libc_start_main +
    245

    6    tmpqi3gdedt                        0x0000560899482e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n == 1 || n % 2 == 0 {\n        return false\n    }\n    for i in stride(from:\
    \ 3, through: Int(floor(sqrt(Double(n)))), by: 2) {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9rtswied.swift:24:43: error: cannot find 'floor' in scope\n   \
    \ for i in stride(from: 3, through: Int(floor(sqrt(Double(n)))), by: 2) {\n  \
    \                                        ^~~~~\n/tmp/tmp9rtswied.swift:24:49:\
    \ error: cannot find 'sqrt' in scope\n    for i in stride(from: 3, through: Int(floor(sqrt(Double(n)))),\
    \ by: 2) {\n                                                ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if n <= 1 {\n    return false\n  }\n  for k\
    \ in 2..<n {\n    if n % k == 0 {\n      return false\n    }\n  }\n  return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n == 2 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    } else {\n        for i in 3...Int(sqrt(Double(n))) {\n         \
    \   if n % i == 0 {\n                return false\n            }\n        }\n\
    \        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8t1ngnx1.swift:25:26: error: cannot find 'sqrt' in scope\n    \
    \    for i in 3...Int(sqrt(Double(n))) {\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n == 1 || n % 2 == 0 {\n        return false\n    }\n    for i in 3 ..<\
    \ Int(n ** 0.5) + 1 {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2jfbl1su.swift:24:26: error: cannot find operator '**' in scope\n\
    \    for i in 3 ..< Int(n ** 0.5) + 1 {\n                         ^~\n"
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    } else\
    \ if n < 2 || n % 2 == 0 {\n        return false\n    } else {\n        let bound\
    \ = Int(floor(sqrt(Double(n))))\n        for i in stride(from: 3, through: bound,\
    \ by: 2) {\n            if n % i == 0 {\n                return false\n      \
    \      }\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3rzzcn8a.swift:23:25: error: cannot find 'floor' in scope\n   \
    \     let bound = Int(floor(sqrt(Double(n))))\n                        ^~~~~\n\
    /tmp/tmp3rzzcn8a.swift:23:31: error: cannot find 'sqrt' in scope\n        let\
    \ bound = Int(floor(sqrt(Double(n))))\n                              ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if n < 2 {\n    return false\n  }\n  for i\
    \ in 2..<n {\n    if n % i == 0 {\n      return false\n    }\n  }\n  return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpnxt455k7/tmpnxt455k7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e0ac28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e0a91fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e0a91f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e0a91e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxt455k7                        0x000055823f51d1b3 <unavailable> + 4531

    5    libc.so.6                          0x00002b1e0ae14460 __libc_start_main +
    245

    6    tmpnxt455k7                        0x000055823f51ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return n.isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp11ji0uta.swift:18:14: error: value of type 'Int' has no member\
    \ 'isPrime'\n    return n.isPrime\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n < 2 {\n\t\treturn false\n\t}\n\tfor factor\
    \ in 2..<n {\n\t\tif n % factor == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n == 2 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    } else {\n        let prime = Int(floor(sqrt(Double(n))))\n     \
    \   if prime % 2 == 0 {\n            var i = prime + 1\n            while i <\
    \ n {\n                if n % i == 0 {\n                    return false\n   \
    \             }\n                i += 2\n            }\n        } else {\n   \
    \         var i = prime\n            while i < n {\n                if n % i ==\
    \ 0 {\n                    return false\n                }\n                i\
    \ += 2\n            }\n        }\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd8iynnj6.swift:25:25: error: cannot find 'floor' in scope\n   \
    \     let prime = Int(floor(sqrt(Double(n))))\n                        ^~~~~\n\
    /tmp/tmpd8iynnj6.swift:25:31: error: cannot find 'sqrt' in scope\n        let\
    \ prime = Int(floor(sqrt(Double(n))))\n                              ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if n == 2 {\n    return true\n  }\n  if n ==\
    \ 1 || n % 2 == 0 {\n    return false\n  }\n  for i in 3.stride(through: Int(sqrt(Double(n))),\
    \ by: 2) {\n    if n % i == 0 {\n      return false\n    }\n  }\n  return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmc02y5t6.swift:24:34: error: cannot find 'sqrt' in scope\n  for\
    \ i in 3.stride(through: Int(sqrt(Double(n))), by: 2) {\n                    \
    \             ^~~~\n/tmp/tmpmc02y5t6.swift:24:14: error: value of type 'Int' has\
    \ no member 'stride'\n  for i in 3.stride(through: Int(sqrt(Double(n))), by: 2)\
    \ {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // YOUR CODE GOES HERE\n    var is_prime\
    \ = true\n    if n == 1 {\n        is_prime = false\n    }\n    else if n > 1\
    \ {\n        for i in 2..<n {\n            if n % i == 0 {\n                is_prime\
    \ = false\n            }\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 { return false }\n    for i in\
    \ 2..<n {\n        if n % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // YOUR CODE GOES HERE!\n    if n < 2 {\n\
    \        return false\n    }\n    for i in 2..<n {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    let max = Int(n ** 0.5)\n    for i in 3...max {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsmvtww_r.swift:27:21: error: cannot find operator '**' in scope\n\
    \    let max = Int(n ** 0.5)\n                    ^~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\
    \ else if n == 2 {\n        return true\n    } else {\n        let stopValue =\
    \ Int(ceil(sqrt(Double(n))))\n        var divisor = 2\n        while divisor <=\
    \ stopValue {\n            if n % divisor == 0 {\n                return false\n\
    \            }\n            divisor += 1\n        }\n        return true\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
    \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) ==\
    \ true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsjry867n.swift:23:29: error: cannot find 'ceil' in scope\n    \
    \    let stopValue = Int(ceil(sqrt(Double(n))))\n                            ^~~~\n\
    /tmp/tmpsjry867n.swift:23:34: error: cannot find 'sqrt' in scope\n        let\
    \ stopValue = Int(ceil(sqrt(Double(n))))\n                                 ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 2..<n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    else if n == 2 {\n        return true\n    }\n    else if n % 2 == 0 {\n\
    \        return false\n    }\n    else {\n        for i in 3..<Int(sqrt(Double(n)))\
    \ + 1 {\n            if n % i == 0 {\n                return false\n         \
    \   }\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmrp3psyr.swift:28:26: error: cannot find 'sqrt' in scope\n    \
    \    for i in 3..<Int(sqrt(Double(n))) + 1 {\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 0 {\n        return false\n    }\n\
    \    if n == 1 {\n        return false\n    }\n    var i = 2\n    while i * i\
    \ <= n {\n        if n % i == 0 {\n            return false\n        }\n     \
    \   i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpnxt455k7/tmpnxt455k7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e0ac28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e0a91fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e0a91f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e0a91e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxt455k7                        0x000055823f51d1b3 <unavailable> + 4531

    5    libc.so.6                          0x00002b1e0ae14460 __libc_start_main +
    245

    6    tmpnxt455k7                        0x000055823f51ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    let limit = Int(sqrt(Double(n)))\n    for i in 3...limit {\n\
    \        if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptal0lolv.swift:27:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var counter = 2\n    if n == 1 {\n      \
    \  return false\n    }\n    while counter < n {\n        if n % counter == 0 {\n\
    \            return false\n        }\n        counter += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    var divisor = 2\n    while divisor * divisor <= n {\n        if n % divisor\
    \ == 0 {\n            return false\n        }\n        divisor += 1\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var output = true\n    if n > 1 {\n     \
    \   for i in 2...n-1 {\n            if n % i == 0 {\n                output =\
    \ false\n            }\n        }\n    }\n    else {\n        output = false\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i = 2\n    while i * i <= n {\n     \
    \   if n % i == 0 {\n            return false\n        }\n        i += 1\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpwoxc86kc/tmpwoxc86kc.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b948ac2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b948a926b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b948a926988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b948a9257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwoxc86kc                        0x000055b328c414ff <unavailable> + 5375

    5    libc.so.6                          0x00002b948ae1b460 __libc_start_main +
    245

    6    tmpwoxc86kc                        0x000055b328c40ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    let max = Int(ceil(sqrt(Double(n))))\n    for i in 3.stride(through:\
    \ max, by: 2) {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzmd7in51.swift:27:19: error: cannot find 'ceil' in scope\n    let\
    \ max = Int(ceil(sqrt(Double(n))))\n                  ^~~~\n/tmp/tmpzmd7in51.swift:27:24:\
    \ error: cannot find 'sqrt' in scope\n    let max = Int(ceil(sqrt(Double(n))))\n\
    \                       ^~~~\n/tmp/tmpzmd7in51.swift:28:16: error: value of type\
    \ 'Int' has no member 'stride'\n    for i in 3.stride(through: max, by: 2) {\n\
    \             ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var res = false\n    if n == 2 {\n      \
    \  res = true\n    } else if n % 2 == 0 {\n        res = false\n    } else {\n\
    \        var i = 3\n        while i * i <= n {\n            if n % i == 0 {\n\
    \                res = false\n                break\n            }\n         \
    \   i += 2\n        }\n        res = true\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp3nphdwcx/tmp3nphdwcx.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac742f98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac742c8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac742c8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac742c8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nphdwcx                        0x000055632bc954ff <unavailable> + 5375

    5    libc.so.6                          0x00002ac743184460 __libc_start_main +
    245

    6    tmp3nphdwcx                        0x000055632bc94ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for divisor in 2...n-1 {\n        if n % divisor == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n == 1 || n % 2 == 0 {\n        return false\n    }\n    let upperBound\
    \ = Int(ceil(sqrt(Double(n))))\n    for i in 2..<upperBound {\n        if n %\
    \ i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp94knh7b7.swift:24:26: error: cannot find 'ceil' in scope\n    let\
    \ upperBound = Int(ceil(sqrt(Double(n))))\n                         ^~~~\n/tmp/tmp94knh7b7.swift:24:31:\
    \ error: cannot find 'sqrt' in scope\n    let upperBound = Int(ceil(sqrt(Double(n))))\n\
    \                              ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    let p = Int(ceil(sqrt(Double(n))))\n    for i in stride(from:\
    \ 3, to: p, by: 2) {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2g9ogqxi.swift:27:17: error: cannot find 'ceil' in scope\n    let\
    \ p = Int(ceil(sqrt(Double(n))))\n                ^~~~\n/tmp/tmp2g9ogqxi.swift:27:22:\
    \ error: cannot find 'sqrt' in scope\n    let p = Int(ceil(sqrt(Double(n))))\n\
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    } else\
    \ if n <= 1 || n % 2 == 0 {\n        return false\n    }\n    for i in 3...Int(floor(sqrt(Double(n))))\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpih_bh74d.swift:23:22: error: cannot find 'floor' in scope\n   \
    \ for i in 3...Int(floor(sqrt(Double(n)))) {\n                     ^~~~~\n/tmp/tmpih_bh74d.swift:23:28:\
    \ error: cannot find 'sqrt' in scope\n    for i in 3...Int(floor(sqrt(Double(n))))\
    \ {\n                           ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 { return false }\n    if n <= 3\
    \ { return true }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgtspgu2w.swift:20:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n > 1 {\n\t\tif n == 2 {\n\t\t\treturn true\n\
    \t\t}\n\t\tif n % 2 == 0 {\n\t\t\treturn false\n\t\t}\n\t\tfor i in stride(from:\
    \ 3, to: Int(sqrt(Double(n))) + 1, by: 2) {\n\t\t\tif n % i == 0 {\n\t\t\t\treturn\
    \ false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\treturn false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2isjaom3.swift:25:36: error: cannot find 'sqrt' in scope\n    \
    \            for i in stride(from: 3, to: Int(sqrt(Double(n))) + 1, by: 2) {\n\
    \                                                 ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // TODO\n    if n == 1 || n == 0{\n     \
    \   return false\n    }\n    for index in 2...n-1{\n        if n % index == 0{\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 0 {\n        return false\n    }\n\
    \    if n == 1 {\n        return false\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    let limit\
    \ = Int(Double(n).squareRoot())\n    for i in stride(from: 3, through: limit,\
    \ by: 2) {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.w8kSde/tmpom2cqbj7-1.o:tmpom2cqbj7-1.o:function $s11tmpom2cqbj78is_prime1nSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2...Int(floor(sqrt(Double(n)))) {\n        if n % i == 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp22bxfy7t.swift:21:22: error: cannot find 'floor' in scope\n   \
    \ for i in 2...Int(floor(sqrt(Double(n)))) {\n                     ^~~~~\n/tmp/tmp22bxfy7t.swift:21:28:\
    \ error: cannot find 'sqrt' in scope\n    for i in 2...Int(floor(sqrt(Double(n))))\
    \ {\n                           ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    let x = 2\n    var count = 0\n    if n ==\
    \ 1 {\n        return false\n    }\n    for i in x...n/2{\n        if n % i ==\
    \ 0 {\n            count = count + 1\n        }\n    }\n    if count == 0 {\n\
    \        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // If a number is less than 2 it is not prime,\
    \ so return false\n    if n < 2 {\n        return false\n    }\n    // A number\
    \ greater than 2 is only prime if it is not divisible by\n    // any odd number\
    \ between 3 and its square root.\n    let m = Int(floor(sqrt(Double(n))))\n  \
    \  for d in 3...m {\n        if n % d == 0 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqxngo5zr.swift:24:17: error: cannot find 'floor' in scope\n   \
    \ let m = Int(floor(sqrt(Double(n))))\n                ^~~~~\n/tmp/tmpqxngo5zr.swift:24:23:\
    \ error: cannot find 'sqrt' in scope\n    let m = Int(floor(sqrt(Double(n))))\n\
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    for i in 2..<n{\n        if n % i == 0{\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002afc31789c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc31480561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc31480286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc3148013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc3147fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb6vbczmh                        0x00005621b79299e1 <unavailable> + 6625

    6    tmpb6vbczmh                        0x00005621b7929587 <unavailable> + 5511

    7    libc.so.6                          0x00002afc31975460 __libc_start_main +
    245

    8    tmpb6vbczmh                        0x00005621b7928fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    for i in 2..<n {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aac45864c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac4555b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac4555b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac4555b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac4555abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqtjayfc2                        0x0000555734b439e1 <unavailable> + 6625

    6    tmpqtjayfc2                        0x0000555734b43587 <unavailable> + 5511

    7    libc.so.6                          0x00002aac45a50460 __libc_start_main +
    245

    8    tmpqtjayfc2                        0x0000555734b42fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tvar m = n;\n\tif m == 1 { return false; }\n\
    \tfor i in 2..<n {\n\t\tif m % i == 0 { return false; }\n\t}\n\treturn true;\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    for i in 2...n/2 {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpw961dvnx/tmpw961dvnx.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b575bfadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b575bca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b575bca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b575bca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw961dvnx                        0x000055d4c92075ef <unavailable> + 5615

    5    libc.so.6                          0x00002b575c199460 __libc_start_main +
    245

    6    tmpw961dvnx                        0x000055d4c9206fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i = 2\n    while i * i <= n {\n     \
    \   if n % i == 0 {\n            return false\n        }\n        i += 1\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpwoxc86kc/tmpwoxc86kc.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b948ac2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b948a926b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b948a926988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b948a9257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwoxc86kc                        0x000055b328c414ff <unavailable> + 5375

    5    libc.so.6                          0x00002b948ae1b460 __libc_start_main +
    245

    6    tmpwoxc86kc                        0x000055b328c40ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 { return false }\n    if n < 4\
    \ { return true }\n    if n % 2 == 0 { return false }\n    if n < 9 { return true\
    \ }\n    if n % 3 == 0 { return false }\n    let r = Int(sqrt(Double(n)))\n  \
    \  var f = 5\n    while f <= r {\n        if n % f == 0 { return false }\n   \
    \     if n % (f + 2) == 0 { return false }\n        f += 6\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp80gz0wh4.swift:23:17: error: cannot find 'sqrt' in scope\n    let\
    \ r = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2...n - 1 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var m = 2\n    if n == 1 {\n        return\
    \ false\n    }\n    while m < n {\n        if n % m == 0 {\n            return\
    \ false\n        }\n        m += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var k = 5\n    while k*k <= n {\n    \
    \    if n % k == 0 || n % (k + 2) == 0 {\n            return false\n        }\n\
    \        k += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpefj0cblc/tmpefj0cblc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ed4236c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ed3f2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ed3f2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ed3f2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefj0cblc                        0x0000564fdb514227 <unavailable> + 4647

    5    libc.so.6                          0x00002b5ed4422460 __libc_start_main +
    245

    6    tmpefj0cblc                        0x0000564fdb513e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return find_divisor(n: n, test_divisor: n\
    \ - 1) == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbcg9fzqm.swift:18:12: error: cannot find 'find_divisor' in scope\n\
    \    return find_divisor(n: n, test_divisor: n - 1) == 1\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpefj0cblc/tmpefj0cblc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ed4236c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ed3f2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ed3f2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ed3f2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefj0cblc                        0x0000564fdb514227 <unavailable> + 4647

    5    libc.so.6                          0x00002b5ed4422460 __libc_start_main +
    245

    6    tmpefj0cblc                        0x0000564fdb513e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var flag = true\n    var i = 2\n    while\
    \ (i <= n/2) {\n        if (n % i == 0) {\n            flag = false\n        \
    \    return flag\n        }\n        i += 1\n    }\n    return flag\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp1ni1z3t2/tmp1ni1z3t2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacec3a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacec09ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacec09a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacec0997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ni1z3t2                        0x000055eb59b5b4ff <unavailable> + 5375

    5    libc.so.6                          0x00002aacec58f460 __libc_start_main +
    245

    6    tmp1ni1z3t2                        0x000055eb59b5aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // 1 is not a prime number\n    if n == 1\
    \ {\n        return false\n    }\n    // Check if n is divisible by 2 and if not,\
    \ check every number between 2 and the square root of n\n    if n == 2 || n %\
    \ 2 != 0 {\n        for i in 2...Int(sqrt(Double(n))) {\n            if n % i\
    \ == 0 {\n                return false\n            }\n        }\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg_h6tfq3.swift:24:26: error: cannot find 'sqrt' in scope\n    \
    \    for i in 2...Int(sqrt(Double(n))) {\n                         ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpefj0cblc/tmpefj0cblc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ed4236c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ed3f2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ed3f2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ed3f2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefj0cblc                        0x0000564fdb514227 <unavailable> + 4647

    5    libc.so.6                          0x00002b5ed4422460 __libc_start_main +
    245

    6    tmpefj0cblc                        0x0000564fdb513e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var ret: Bool = true\n    var i: Int = 2\n    while i < n {\n        if n\
    \ % i == 0 {\n            ret = false\n            break\n        }\n        i\
    \ += 1\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n == 1 || n % 2 == 0 {\n        return false\n    }\n    var check_up_to\
    \ = Int(ceil(sqrt(Double(n))))\n    if check_up_to % 2 == 0 {\n        check_up_to\
    \ -= 1\n    }\n    for divisor in (3...check_up_to).filter({$0 % 2 != 0}) {\n\
    \        if n % divisor == 0 {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3hl1zo89.swift:24:27: error: cannot find 'ceil' in scope\n    var\
    \ check_up_to = Int(ceil(sqrt(Double(n))))\n                          ^~~~\n/tmp/tmp3hl1zo89.swift:24:32:\
    \ error: cannot find 'sqrt' in scope\n    var check_up_to = Int(ceil(sqrt(Double(n))))\n\
    \                               ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    else if n < 4 {\n        return true\n    }\n    else if n % 2 == 0 {\n \
    \       return false\n    }\n    else if n < 9 {\n        return true\n    }\n\
    \    else if n % 3 == 0 {\n        return false\n    }\n    else {\n        var\
    \ r = Int(sqrt(Double(n)))\n        var f = 5\n        while f <= r {\n      \
    \      if n % f == 0 {\n                return false\n            }\n        \
    \    if n % (f + 2) == 0 {\n                return false\n            }\n    \
    \        f += 6\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4png4gyb.swift:34:21: error: cannot find 'sqrt' in scope\n    \
    \    var r = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    let m = Int(sqrt(Double(n)))\n    for i in 3...m {\n     \
    \   if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpz77st1de.swift:27:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu3hvn9ng.swift:21:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    } else\
    \ if n % 2 == 0 {\n        return false\n    } else {\n        for i in 3...n/2\
    \ {\n            if n % i == 0 {\n                return false\n            }\n\
    \        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abe3e0e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe3ddd8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abe3ddd8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abe3ddd813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abe3ddd7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6p0tm3_e                        0x000055b5a421eb37 <unavailable> + 6967

    6    tmp6p0tm3_e                        0x000055b5a421e587 <unavailable> + 5511

    7    libc.so.6                          0x00002abe3e2cd460 __libc_start_main +
    245

    8    tmp6p0tm3_e                        0x000055b5a421dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpnxt455k7/tmpnxt455k7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e0ac28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e0a91fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e0a91f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e0a91e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxt455k7                        0x000055823f51d1b3 <unavailable> + 4531

    5    libc.so.6                          0x00002b1e0ae14460 __libc_start_main +
    245

    6    tmpnxt455k7                        0x000055823f51ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i = 1\n    var counter = 0\n    while\
    \ i <= n {\n        if n % i == 0 {\n            counter += 1\n        }\n   \
    \     i += 1\n    }\n    if counter == 2 {\n        return true\n    } else {\n\
    \        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    var i = 3\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return false\n        }\n \
    \       i += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpycnx0ffr/tmpycnx0ffr.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7bebcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7be8c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7be8c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7be8c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpycnx0ffr                        0x00005641e54a44ff <unavailable> + 5375

    5    libc.so.6                          0x00002af7bedb7460 __libc_start_main +
    245

    6    tmpycnx0ffr                        0x00005641e54a3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n    \
    \    if n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\
    \        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n % 2 == 0 {\n        return false\n    }\n    for i in 3...n-1 {\n  \
    \      if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a7ab56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a7a84d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2a7a84d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2a7a84d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2a7a84cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp636uisf6                        0x000056017a465ab7 <unavailable> + 6839

    6    tmp636uisf6                        0x000056017a465587 <unavailable> + 5511

    7    libc.so.6                          0x00002b2a7ad42460 __libc_start_main +
    245

    8    tmp636uisf6                        0x000056017a464fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tif n <= 1 {\n\t\treturn false\n\t}\n\tif n\
    \ <= 3 {\n\t\treturn true\n\t}\n\tif n % 2 == 0 || n % 3 == 0 {\n\t\treturn false\n\
    \t}\n\tvar i = 5\n\twhile i * i <= n {\n\t\tif n % i == 0 || n % (i + 2) == 0\
    \ {\n\t\t\treturn false\n\t\t}\n\t\ti += 6\n\t}\n\treturn true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // your code here\n    if n <= 1 {\n    \
    \    return false\n    } else if n <= 3 {\n        return true\n    } else if\
    \ n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var i = 5\n   \
    \ while i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n          \
    \  return false\n        }\n        i += 6\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return n > 1 && !(2..<n).contains { n % $0\
    \ == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    else if n <= 3 {\n        return true\n    }\n    else if n % 2 == 0 || n\
    \ % 3 == 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n\
    \ {\n        if n % i == 0 || n % (i + 2) == 0 {\n            return false\n \
    \       }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpefj0cblc/tmpefj0cblc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ed4236c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ed3f2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ed3f2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ed3f2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefj0cblc                        0x0000564fdb514227 <unavailable> + 4647

    5    libc.so.6                          0x00002b5ed4422460 __libc_start_main +
    245

    6    tmpefj0cblc                        0x0000564fdb513e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if n == 2 {\n    return true\n  }\n  if n ==\
    \ 1 || n % 2 == 0 {\n    return false\n  }\n  var i = 3\n  while i * i <= n {\n\
    \    if n % i == 0 {\n      return false\n    }\n    i += 2\n  }\n  return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2...n {\n        if n % i == 0 && i != n {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n < 4 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    } else if n < 9 {\n        return true\n    } else if n % 3 == 0\
    \ {\n        return false\n    } else {\n        var test = 5\n        while test\
    \ * test <= n {\n            if n % test == 0 {\n                return false\n\
    \            } else if n % (test + 2) == 0 {\n                return false\n \
    \           }\n            test += 6\n        }\n        return true\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    for i in 2...n-1 {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ac0eecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ac0be3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1ac0be3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1ac0be313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1ac0be2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3mfz1ddb                        0x000055eea4e029fd <unavailable> + 6653

    6    tmp3mfz1ddb                        0x000055eea4e02587 <unavailable> + 5511

    7    libc.so.6                          0x00002b1ac10d8460 __libc_start_main +
    245

    8    tmp3mfz1ddb                        0x000055eea4e01fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    else if n <= 3 {\n        return true\n    }\n    else if n % 2 == 0 || n\
    \ % 3 == 0 {\n        return false\n    }\n    else {\n        var i = 5\n   \
    \     while i * i <= n {\n            if n % i == 0 || n % (i + 2) == 0 {\n  \
    \              return false\n            }\n            i += 6\n        }\n  \
    \      return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var num = n\n    if n == 1 {\n        return\
    \ false\n    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    if n % 3 == 0 {\n        return false\n\
    \    }\n    if n % 5 == 0 {\n        return false\n    }\n    if n % 7 == 0 {\n\
    \        return false\n    }\n    if n % 11 == 0 {\n        return false\n   \
    \ }\n    if n % 13 == 0 {\n        return false\n    }\n    if n % 17 == 0 {\n\
    \        return false\n    }\n    if n % 19 == 0 {\n        return false\n   \
    \ }\n    if n % 23 == 0 {\n        return false\n    }\n    if n % 29 == 0 {\n\
    \        return false\n    }\n    if n % 31 == 0 {\n        return false\n   \
    \ }\n    if n % 37 == 0 {\n        return false\n    }\n    if n % 41 == 0 {\n\
    \        return false\n    }\n    if n % 43 == 0 {\n        return false\n   \
    \ }\n    if n % 47 == 0 {\n        return false\n    }\n    if n % 53 == 0 {\n\
    \        return false\n    }\n    if n % 59 == 0 {\n        return false\n   \
    \ }\n    var divisor = 61\n    while divisor * divisor <= n {\n        if n %\
    \ divisor == 0 {\n            return false\n        }\n        divisor += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpzud86p6s/tmpzud86p6s.swift:101: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3099a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba30969bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba30969b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba30969a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzud86p6s                        0x0000564cd329432b <unavailable> + 4907

    5    libc.so.6                          0x00002ba309b90460 __libc_start_main +
    245

    6    tmpzud86p6s                        0x0000564cd3293ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    var i = 3\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpn9ad_gbf/tmpn9ad_gbf.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b2776ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b27461b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b27461988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b274607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9ad_gbf                        0x00005631fe47f243 <unavailable> + 4675

    5    libc.so.6                          0x00002b3b27956460 __libc_start_main +
    245

    6    tmpn9ad_gbf                        0x00005631fe47eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n < 4 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n < 9 {\n        return true\n    }\n    if n % 3 == 0\
    \ {\n        return false\n    }\n    let r = Int(sqrt(Double(n)))\n    var f\
    \ = 5\n    while f <= r {\n        if n % f == 0 {\n            return false\n\
    \        }\n        if n % (f + 2) == 0 {\n            return false\n        }\n\
    \        f += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0covujan.swift:33:17: error: cannot find 'sqrt' in scope\n    let\
    \ r = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n\tvar i = 2\n\twhile (i < n) {\n\t\tif (n % i\
    \ == 0) {\n\t\t\treturn false\n\t\t}\n\t\ti += 1\n\t}\n\treturn true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmprq57ox6x/tmprq57ox6x.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb69f65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb69c5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb69c5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb69c5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprq57ox6x                        0x0000558071ab04ff <unavailable> + 5375

    5    libc.so.6                          0x00002adb6a151460 __libc_start_main +
    245

    6    tmprq57ox6x                        0x0000558071aafef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    else if n == 2 {\n        return true\n    }\n    else if n % 2 == 0 {\n\
    \        return false\n    }\n    else {\n        let root = Int(floor(sqrt(Double(n))))\n\
    \        for i in 3...root {\n            if n % i == 0 {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_hy1abib.swift:28:24: error: cannot find 'floor' in scope\n   \
    \     let root = Int(floor(sqrt(Double(n))))\n                       ^~~~~\n/tmp/tmp_hy1abib.swift:28:30:\
    \ error: cannot find 'sqrt' in scope\n        let root = Int(floor(sqrt(Double(n))))\n\
    \                             ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 { return true }\n    if n < 2 ||\
    \ n % 2 == 0 { return false }\n    for i in 3...Int(sqrt(Double(n))) {\n     \
    \   if n % i == 0 { return false }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph9up907t.swift:20:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return (2..<n).filter{ n % $0 == 0 }.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c2bdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c28d2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b14c28d2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b14c28d213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b14c28d1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpknf14keb                        0x00005591ec737aa3 <unavailable> + 6819

    6    tmpknf14keb                        0x00005591ec737627 <unavailable> + 5671

    7    libc.so.6                          0x00002b14c2dc7460 __libc_start_main +
    245

    8    tmpknf14keb                        0x00005591ec737089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 2..<n/2+1 {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // YOUR CODE GOES HERE\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpd5cbvflf/tmpd5cbvflf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc5035dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc50054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc50054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc500537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd5cbvflf                        0x000055ee79cd91b3 <unavailable> + 4531

    5    libc.so.6                          0x00002abc50549460 __libc_start_main +
    245

    6    tmpd5cbvflf                        0x000055ee79cd8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  if n <= 1 {\n    return false\n  }\n  if n\
    \ <= 3 {\n    return true\n  }\n  if n % 2 == 0 || n % 3 == 0 {\n    return false\n\
    \  }\n  for i in stride(from: 5, through: sqrt(Double(n)), by: 6) {\n    if n\
    \ % Int(i) == 0 || n % Int(i + 2) == 0 {\n      return false\n    }\n  }\n  return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp515ykkzs.swift:27:37: error: cannot find 'sqrt' in scope\n  for\
    \ i in stride(from: 5, through: sqrt(Double(n)), by: 6) {\n                  \
    \                  ^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0\
    \ {\n        return false\n    }\n    for i in stride(from: 5, through: Int(sqrt(Double(n))),\
    \ by: 6) {\n        if n % i == 0 || n % (i + 2) == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxd8t5xdr.swift:27:43: error: cannot find 'sqrt' in scope\n    for\
    \ i in stride(from: 5, through: Int(sqrt(Double(n))), by: 6) {\n             \
    \                             ^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl2lhgk1m.swift:21:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu3hvn9ng.swift:21:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 { return true }\n    if n % 2 ==\
    \ 0 { return false }\n    if n == 1 { return false }\n    for i in 3..<n/2 {\n\
    \        if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b08dd4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08dd1bb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b08dd1bb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b08dd1bb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b08dd1babb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpiecgl_6f                        0x0000560d5a8c7b43 <unavailable> + 6979

    6    tmpiecgl_6f                        0x0000560d5a8c75fd <unavailable> + 5629

    7    libc.so.6                          0x00002b08dd6b0460 __libc_start_main +
    245

    8    tmpiecgl_6f                        0x0000560d5a8c6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    var is_prime = true\n    for\
    \ i in 2..<n {\n        if n % i == 0 {\n            is_prime = false\n      \
    \      break\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 { return false }\n    if n == 2\
    \ { return true }\n    if n % 2 == 0 { return false }\n    var i = 3\n    while\
    \ i * i <= n {\n        if n % i == 0 { return false }\n        i += 2\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    else if n == 2 {\n        return true\n    }\n    var i = 2\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            return false\n        }\n \
    \       i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return n > 1 && !(2..<n).contains { n % $0\
    \ == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprkdudemp.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    else if n == 2 {\n        return true\n    }\n    else if n % 2 == 0 {\n\
    \        return false\n    }\n    else {\n        var i = 3\n        while i *\
    \ i <= n {\n            if n % i == 0 {\n                return false\n      \
    \      }\n            i += 2\n        }\n        return true\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpnstx37c_/tmpnstx37c_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fa76b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fa73abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fa73ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fa73aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnstx37c_                        0x000055b124bfa227 <unavailable> + 4647

    5    libc.so.6                          0x00002b4fa78a0460 __libc_start_main +
    245

    6    tmpnstx37c_                        0x000055b124bf9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 0 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp1lnboi0k/tmp1lnboi0k.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f19aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f16a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f16a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f16a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1lnboi0k                        0x000055772f4054ff <unavailable> + 5375

    5    libc.so.6                          0x00002b85f1b96460 __libc_start_main +
    245

    6    tmp1lnboi0k                        0x000055772f404ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpnxt455k7/tmpnxt455k7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e0ac28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e0a91fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e0a91f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e0a91e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxt455k7                        0x000055823f51d1b3 <unavailable> + 4531

    5    libc.so.6                          0x00002b1e0ae14460 __libc_start_main +
    245

    6    tmpnxt455k7                        0x000055823f51ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n == 2 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    } else {\n        var i = 3\n        while i * i <= n {\n       \
    \     if n % i == 0 {\n                return false\n            }\n         \
    \   i += 2\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    } else\
    \ if n <= 1 || n % 2 == 0 {\n        return false\n    } else {\n        var i\
    \ = 3\n        while i * i <= n {\n            if n % i == 0 {\n             \
    \   return false\n            }\n            i += 2\n        }\n        return\
    \ true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n  // Check whether n is prime. Assume n is prime.\
    \ If we find a divisor of n,\n  // that means we were wrong, so we return false.\n\
    \  if n == 2 {\n    return true\n  }\n  if n % 2 == 0 {\n    return false\n  }\n\
    \  for d in 3..<n {\n    if n % d == 0 {\n      return false\n    }\n  }\n  return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ce2c76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ce296d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5ce296d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5ce296d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5ce296cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp23vixx88                        0x000055a6c6df0a97 <unavailable> + 6807

    6    tmp23vixx88                        0x000055a6c6df0587 <unavailable> + 5511

    7    libc.so.6                          0x00002b5ce2e62460 __libc_start_main +
    245

    8    tmp23vixx88                        0x000055a6c6deffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\
    \    for i in 2...n - 1 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 0 {\n        return false\n    }\n\
    \    if n <= 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp5acwxw_9/tmp5acwxw_9.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c13575c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c1326cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c1326c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c1326b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5acwxw_9                        0x0000563403a824ff <unavailable> + 5375

    5    libc.so.6                          0x00002b0c13761460 __libc_start_main +
    245

    6    tmp5acwxw_9                        0x0000563403a81ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i = 2\n    while i < n {\n        if\
    \ n % i == 0 {\n            return false\n        }\n        i += 1\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpcixv8h0_/tmpcixv8h0_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65c5548c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65c523fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65c523f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65c523e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcixv8h0_                        0x0000557d5c1424ff <unavailable> + 5375

    5    libc.so.6                          0x00002b65c5734460 __libc_start_main +
    245

    6    tmpcixv8h0_                        0x0000557d5c141ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\
    \ else if n <= 3 {\n        return true\n    } else if n % 2 == 0 || n % 3 ==\
    \ 0 {\n        return false\n    }\n    var i = 5\n    while i * i <= n {\n  \
    \      if n % i == 0 || n % (i + 2) == 0 {\n            return false\n       \
    \ }\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n\
    \    if n == 1 || n % 2 == 0 {\n        return false\n    }\n    for i in 3..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return n > 1 && (!(2..<n).contains { n %\
    \ $0 == 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpefj0cblc/tmpefj0cblc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ed4236c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ed3f2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ed3f2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ed3f2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpefj0cblc                        0x0000564fdb514227 <unavailable> + 4647

    5    libc.so.6                          0x00002b5ed4422460 __libc_start_main +
    245

    6    tmpefj0cblc                        0x0000564fdb513e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n == 2 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    } else {\n        for i in stride(from: 3, through: Int(sqrt(Double(n))),\
    \ by: 2) {\n            if n % i == 0 {\n                return false\n      \
    \      }\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmqe483ff.swift:25:47: error: cannot find 'sqrt' in scope\n    \
    \    for i in stride(from: 3, through: Int(sqrt(Double(n))), by: 2) {\n      \
    \                                        ^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpnstx37c_/tmpnstx37c_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fa76b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fa73abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fa73ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fa73aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnstx37c_                        0x000055b124bfa227 <unavailable> + 4647

    5    libc.so.6                          0x00002b4fa78a0460 __libc_start_main +
    245

    6    tmpnstx37c_                        0x000055b124bf9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var i = 2\n    while (i * i <= n) {\n   \
    \     if (n % i == 0) {\n            return false\n        }\n        i += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp17juj1qi/tmp17juj1qi.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab2b59bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab2b292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab2b292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab2b2917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17juj1qi                        0x000055dc81f2f4ff <unavailable> + 5375

    5    libc.so.6                          0x00002aab2b787460 __libc_start_main +
    245

    6    tmp17juj1qi                        0x000055dc81f2eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    } else\
    \ if n == 2 {\n        return true\n    } else if n % 2 == 0 {\n        return\
    \ false\n    } else {\n        for i in 3...n-1 {\n            if n % i == 0 {\n\
    \                return false\n            }\n        }\n        return true\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    if n <= 3 {\n        return true\n    }\n    var i = 2\n    while i*i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ = i + 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978555
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    return Int.max\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_x667bzr.swift:18:16: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n    return Int.max\n               ^\n           (\
    \       != 0)\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var n = n\n    if n < 2 {\n        return\
    \ false\n    }\n    else if n == 2 {\n        return true\n    }\n    else if\
    \ n % 2 == 0 {\n        return false\n    }\n    else {\n        for i in stride(from:\
    \ 3, through: Int(sqrt(Double(n))), by: 2) {\n            if n % i == 0 {\n  \
    \              return false\n            }\n        }\n        return true\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj2rl896e.swift:29:47: error: cannot find 'sqrt' in scope\n    \
    \    for i in stride(from: 3, through: Int(sqrt(Double(n))), by: 2) {\n      \
    \                                        ^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var count = 0\n    for i in 2...n {\n   \
    \     if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\
    \ == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b914807dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9147d74561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9147d74286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9147d7413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9147d73bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_hpafg39                        0x00005601bfe45a01 <unavailable> + 6657

    6    tmp_hpafg39                        0x00005601bfe45587 <unavailable> + 5511

    7    libc.so.6                          0x00002b9148269460 __libc_start_main +
    245

    8    tmp_hpafg39                        0x00005601bfe44fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978556
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    for i in 2..<n {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aac45864c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac4555b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac4555b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac4555b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac4555abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqtjayfc2                        0x0000555734b439e1 <unavailable> + 6625

    6    tmpqtjayfc2                        0x0000555734b43587 <unavailable> + 5511

    7    libc.so.6                          0x00002aac45a50460 __libc_start_main +
    245

    8    tmpqtjayfc2                        0x0000555734b42fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n\
    \    for i in 2..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978554
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n:\
    \ 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n\
    /// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\n\
    func is_prime(n: Int) -> Bool {\n    var is_prime = true\n    if n <= 1 {\n  \
    \      is_prime = false\n    }\n    if n > 2 {\n        for num in 2..<n {\n \
    \           if n % num == 0 {\n                is_prime = false\n            }\n\
    \        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978556
