name: HumanEval_58_common
language: swift
prompt: "\n/// Return sorted unique common elements for two arrays.\n/// >>> common(l1:\
  \ [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n///\
  \ >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2:\
  \ [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(common(l1: [1, 4, 3, 34, 653, 2, 5], l2:\
  \ [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\nassert(common(l1: [5, 3, 2, 8], l2:\
  \ [3, 2]) == [2, 3])\nassert(common(l1: [4, 3, 2, 8], l2: [3, 2, 4]) == [2, 3, 4])\n\
  assert(common(l1: [4, 3, 2, 8], l2: [] as [Int]) == [] as [Int])"
completions: ["    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    let inter = set1.intersection(set2)\n\
    \    return Array(inter).sorted()", "    var result = [Int]()\n    for item in\
    \ l1 {\n        if l2.contains(item) {\n            result.append(item)\n    \
    \    }\n    }\n    return Array(Set(result)).sorted()", "    let l1_set = Set(l1)\n\
    \    let l2_set = Set(l2)\n    let common = l1_set.intersection(l2_set)\n    return\
    \ Array(common).sorted()", "    let set1 = Set(l1)\n    let set2 = Set(l2)\n \
    \   return Array(set1.intersection(set2)).sorted()", '  return Array(Set(l1).intersection(Set(l2)))',
  "    var commonArray = [Int]()\n    var hashTable = [Int: Int]()\n    \n    for\
    \ i in l1 {\n        hashTable[i] = (hashTable[i] ?? 0) + 1\n    }\n    \n   \
    \ for i in l2 {\n        if hashTable[i] != nil {\n            commonArray.append(i)\n\
    \            hashTable[i] = nil\n        }\n    }\n    \n    return commonArray.sorted()",
  '    return Array(Set(l1).intersection(Set(l2)))', "    var common = Set(l1).intersection(Set(l2))\n\
    \    return Array(common).sorted()", "    // Write your solution here\n    //\
    \ return [1, 5, 653]\n    var l1_sorted = l1.sorted()\n    var l2_sorted = l2.sorted()\n\
    \    var result: [Int] = []\n    var i = 0\n    var j = 0\n    while i < l1_sorted.count\
    \ && j < l2_sorted.count {\n        if l1_sorted[i] == l2_sorted[j] {\n      \
    \      result.append(l1_sorted[i])\n            i += 1\n            j += 1\n \
    \       } else if l1_sorted[i] < l2_sorted[j] {\n            i += 1\n        }\
    \ else {\n            j += 1\n        }\n    }\n    return result", '    return
    []', "    let l1 = l1.sorted()\n    let l2 = l2.sorted()\n    var result = [Int]()\n\
    \    var i = 0\n    var j = 0\n    while i < l1.count && j < l2.count {\n    \
    \    if l1[i] < l2[j] {\n            i += 1\n        } else if l1[i] > l2[j] {\n\
    \            j += 1\n        } else {\n            result.append(l1[i])\n    \
    \        i += 1\n            j += 1\n        }\n    }\n    return result", "\t\
    return unique(l1: l1).filter({ l2.contains($0) })", '    return Array(Set(l1).intersection(Set(l2)))',
  "  return l1.unique().filter({\n    l2.unique().contains($0)\n  })", "    let set1\
    \ = Set(l1)\n    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  '    return Set(l1).intersection(Set(l2)).sorted()', "    var r = [Int]()\n    var\
    \ ll1 = l1\n    var ll2 = l2\n    for i in ll1 {\n        for j in ll2 {\n   \
    \         if i == j {\n                r.append(i)\n                ll1.remove(at:\
    \ ll1.index(of: i)!)\n                ll2.remove(at: ll2.index(of: j)!)\n    \
    \        }\n        }\n    }\n    return r.sorted()", '    return Set(l1).intersection(Set(l2)).sorted()',
  '    return Array(Set(l1).intersection(Set(l2)))', "    var s1 = Set(l1)\n    var\
    \ s2 = Set(l2)\n    s1.formIntersection(s2)\n    return Array(s1).sorted()", " \
    \   let set = Set(l1).intersection(Set(l2))\n    return Array(set).sorted()",
  "    var t = l1\n    t.append(contentsOf: l2)\n    let l3 = t.sorted()\n    var\
    \ c: [Int] = []\n    var i = 0\n    while i < l3.count - 1 {\n        if l3[i]\
    \ == l3[i + 1] {\n            c.append(l3[i])\n            i += 1\n        }\n\
    \        i += 1\n    }\n    return c", "    var uniqueList1 = [Int]()\n    var\
    \ uniqueList2 = [Int]()\n    var result = [Int]()\n    \n    for i in l1 {\n \
    \       if !uniqueList1.contains(i) {\n            uniqueList1.append(i)\n   \
    \     }\n    }\n    \n    for i in l2 {\n        if !uniqueList2.contains(i) {\n\
    \            uniqueList2.append(i)\n        }\n    }\n    \n    for i in uniqueList1\
    \ {\n        if uniqueList2.contains(i) {\n            result.append(i)\n    \
    \    }\n    }\n    \n    return result.sorted()", '    return Array(Set(l1).intersection(Set(l2)))',
  '    return l1.filter { l2.contains($0) }.sorted()', '    return Array(Set(l1).intersection(Set(l2)))',
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  "    var l3 = Set(l1)\n    var l4 = Set(l2)\n    l3.formIntersection(l4)\n    return\
    \ Array(l3).sorted()", '    return Array(Set(l1).intersection(Set(l2))).sorted()',
  '    return []', "    let count1 = l1.count\n    let count2 = l2.count\n    var\
    \ sortArr = [Int]()\n    var result = [Int]()\n    var i = 0\n    var j = 0\n\
    \    while i < count1 && j < count2 {\n        if l1[i] == l2[j] {\n         \
    \   sortArr.append(l1[i])\n            i += 1\n            j += 1\n        } else\
    \ if l1[i] < l2[j] {\n            i += 1\n        } else {\n            j += 1\n\
    \        }\n    }\n    if sortArr.count == 0 {\n        return result\n    }\n\
    \    var res = sortArr[0]\n    result.append(res)\n    for item in sortArr {\n\
    \        if item == res {\n            continue\n        }\n        result.append(item)\n\
    \        res = item\n    }\n    return result", '    return Array(Set(l1).intersection(Set(l2)))',
  '    return Array(Set(l1).intersection(Set(l2)))', "    var result = [Int]()\n \
    \   for i in l1 {\n        for j in l2 {\n            if (i == j) {\n        \
    \        result.append(i)\n            }\n        }\n    }\n    return result.sort()",
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  '    return Set(l1).intersection(Set(l2)).sorted()', "    let sortedL1 = l1.sorted()\n\
    \    let sortedL2 = l2.sorted()\n    let uniqueL1 = sortedL1.unique()\n    let\
    \ uniqueL2 = sortedL2.unique()\n    let set1 = Set(uniqueL1)\n    let set2 = Set(uniqueL2)\n\
    \    return Array(set1.intersection(set2))", "    guard l1.count > 0, l2.count\
    \ > 0 else { return [] }\n    guard l1.count > 1, l2.count > 1 else { return l1\
    \ == l2 ? l1 : [] }\n    return l1.filter { l2.contains($0) }.sorted { $0 < $1\
    \ }", '    return Array(Set(l1).intersection(Set(l2)))', "    var result = [Int]()\n\
    \    for i in l1 {\n        for j in l2 {\n            if i == j {\n         \
    \       result.append(i)\n            }\n        }\n    }\n    return result.sort()",
  "    let l1 = Set(l1)\n    let l2 = Set(l2)\n    return Array(l1.intersection(l2)).sorted()",
  "    let result = Set(l1).intersection(Set(l2))\n    return Array(result).sorted()",
  "    var result: [Int] = []\n    let c1 = l1.sorted()\n    let c2 = l2.sorted()\n\
    \    var i = 0\n    var j = 0\n    while i < c1.count && j < c2.count {\n    \
    \    if c1[i] == c2[j] {\n            result.append(c1[i])\n            i += 1\n\
    \            j += 1\n        } else if c1[i] < c2[j] {\n            i += 1\n \
    \       } else {\n            j += 1\n        }\n    }\n    return result", "\t\
    return Array(Set(l1).intersection(Set(l2)))", '    return []', '  return Array(Set(l1).intersection(Set(l2)))',
  '    return Set(l1).intersection(Set(l2)).sorted()', "    var result: [Int] = []\n\
    \    var l1Dict: [Int: Bool] = [:]\n    var l2Dict: [Int: Bool] = [:]\n    for\
    \ element in l1 {\n        l1Dict[element] = true\n    }\n    for element in l2\
    \ {\n        l2Dict[element] = true\n    }\n    for element in l1 {\n        if\
    \ l2Dict[element] != nil {\n            result.append(element)\n        }\n  \
    \  }\n    return result.sorted()", "    var result = [Int]()\n    var counter\
    \ = 0\n    while counter < l1.count {\n        if (l2.contains(l1[counter])) {\n\
    \            result.append(l1[counter])\n        }\n        counter += 1\n   \
    \ }\n    let unique = result.reduce([]) { (unique, x) in unique.contains(x) ?\
    \ unique : unique + [x] }\n    return unique.sorted()", "\treturn Array(Set(l1).intersection(Set(l2))).sorted()",
  "    var list = l1\n    var list2 = l2\n    list.sort()\n    list2.sort()\n    var\
    \ i = 0\n    var j = 0\n    var result = [Int]()\n    while i < list.count &&\
    \ j < list2.count {\n        if list[i] == list2[j] {\n            result.append(list[i])\n\
    \            i += 1\n            j += 1\n        } else if list[i] < list2[j]\
    \ {\n            i += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    var usedIndexes = [Int]()\n\
    \    for i in 0..<l1.count {\n        let value = l1[i]\n        if usedIndexes.contains(i)\
    \ {\n            continue\n        }\n        if let firstIndex = l2.firstIndex(of:\
    \ value) {\n            result.append(value)\n            usedIndexes.append(firstIndex)\n\
    \        }\n    }\n    return result", '    return l1.filter{l2.contains($0)}.sorted().unique()',
  "    var result: [Int] = []\n    if l1.count < l2.count {\n        result = findCommon(l1:\
    \ l1, l2: l2)\n    } else {\n        result = findCommon(l1: l2, l2: l1)\n   \
    \ }\n    return result", "    let commonElements = Set(l1).intersection(Set(l2))\n\
    \    return Array(commonElements).sorted()", "    let set1 = Set(l1)\n    let\
    \ set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()", '    return
    unique(l1: l1, l2: l2).sorted()', "    var sortL1 = l1.sorted()\n    var sortL2\
    \ = l2.sorted()\n    var count = 0\n    var result = [Int]()\n    var check =\
    \ false\n    for i in 0..<sortL1.count {\n        for j in count..<sortL2.count\
    \ {\n            if sortL1[i] == sortL2[j] {\n                result.append(sortL1[i])\n\
    \                count = j + 1\n                check = true\n               \
    \ break\n            }\n        }\n        if check == false {\n            count\
    \ = 0\n        }\n        check = false\n    }\n    return result", "    let s1\
    \ = Set(l1)\n    let s2 = Set(l2)\n    return Array(s1.intersection(s2)).sorted()",
  '    return Array(Set(l1).intersection(Set(l2)))', "\treturn Array(Set(l1).intersection(Set(l2))).sorted()",
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return set1.intersection(set2).sorted()",
  "    var result = [Int]()\n    for element in l1 {\n        if l2.contains(element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result.sorted()",
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  '    return Array(Set(l1).intersection(Set(l2))).sorted()', "    // FIXME: Return\
    \ unique and sorted array with common elements.\n    return l1.filter{ l2.contains($0)\
    \ }.sorted()", '    return Array(Set(l1).intersection(Set(l2)))', "    var result\
    \ = [Int]()\n    let sortedL1 = l1.sorted()\n    let sortedL2 = l2.sorted()\n\
    \    var i = 0\n    var j = 0\n    while i < sortedL1.count && j < sortedL2.count\
    \ {\n        if sortedL1[i] < sortedL2[j] {\n            i += 1\n        } else\
    \ if sortedL1[i] > sortedL2[j] {\n            j += 1\n        } else {\n     \
    \       result.append(sortedL1[i])\n            i += 1\n            j += 1\n \
    \       }\n    }\n    return result", '    return Array(Set(l1).intersection(Set(l2)))',
  "    var result: [Int] = []\n    for i in l1 {\n        for j in l2 {\n        \
    \    if i == j {\n                result.append(i)\n            }\n        }\n\
    \    }\n    return result.sorted()", "    let s1 = Set(l1)\n    let s2 = Set(l2)\n\
    \    return Array(s1.intersection(s2)).sorted()", '    return l1.filter { l2.contains($0)
    }.sorted().unique()', '    return Array(Set(l1).intersection(Set(l2)))', "   \
    \ var set = Set<Int>()\n    var c = [Int]()\n    for i in l1 {\n        set.insert(i)\n\
    \    }\n    for i in l2 {\n        if set.contains(i) {\n            c.append(i)\n\
    \        }\n    }\n    return c.sorted()", "    let set1 = Set(l1)\n    let set2\
    \ = Set(l2)\n    return Array(set1.intersection(set2)).sorted()", "    var c =\
    \ [Int]()\n    var l1 = l1.sorted()\n    var l2 = l2.sorted()\n    for i in 0..<l1.count\
    \ {\n        for j in 0..<l2.count {\n            if l1[i] == l2[j] {\n      \
    \          c.append(l1[i])\n                l2.remove(at: j)\n               \
    \ break\n            }\n        }\n    }\n    return c", '    return l1.filter
    { l2.contains($0) }.uniqued()', "    let s1 = Set(l1)\n    let s2 = Set(l2)\n\
    \    return Array(s1.intersection(s2)).sorted()", '    return Array(Set(l1).intersection(Set(l2))).sorted()',
  "    // Write your code here\n    let l1Set = Set(l1)\n    let l2Set = Set(l2)\n\
    \    let resultSet = l1Set.intersection(l2Set)\n    return Array(resultSet).sorted()",
  "\tvar common = Set(l1).intersection(Set(l2))\n\tvar commonArray = Array(common)\n\
    \tcommonArray.sort()\n\treturn commonArray", '    return Array(Set(l1).intersection(Set(l2))).sorted()',
  "    var l1Dict = [Int: Bool]()\n    var l2Dict = [Int: Bool]()\n    for i in l1\
    \ {\n        l1Dict[i] = true\n    }\n    for i in l2 {\n        l2Dict[i] = true\n\
    \    }\n    var result = [Int]()\n    for (key, _) in l1Dict {\n        if l2Dict[key]\
    \ == true {\n            result.append(key)\n        }\n    }\n    return result.sorted()",
  "    let l1 = l1.sorted()\n    let l2 = l2.sorted()\n    var count1 = 0\n    var\
    \ count2 = 0\n    var res = [Int]()\n    while count1 < l1.count && count2 < l2.count\
    \ {\n        if l1[count1] == l2[count2] {\n            if !res.contains(l1[count1])\
    \ {\n                res.append(l1[count1])\n            }\n            count1\
    \ += 1\n            count2 += 1\n        } else if l1[count1] < l2[count2] {\n\
    \            count1 += 1\n        } else {\n            count2 += 1\n        }\n\
    \    }\n    return res", "    let l1Set = Set(l1)\n    let l2Set = Set(l2)\n \
    \   return Array(l1Set.intersection(l2Set)).sorted()", '    return l1.filter {
    l2.contains($0) }.sorted()', "\t// code\n\treturn l1.filter{l2.contains($0)}.sorted()",
  '  return Array(Set(l1).intersection(Set(l2)))', "    var common: [Int] = []\n \
    \   let sortedList1 = l1.sorted()\n    let sortedList2 = l2.sorted()\n    var\
    \ i = 0\n    var j = 0\n    while i < sortedList1.count && j < sortedList2.count\
    \ {\n        if sortedList1[i] == sortedList2[j] {\n            common.append(sortedList1[i])\n\
    \            i += 1\n            j += 1\n        } else if sortedList1[i] < sortedList2[j]\
    \ {\n            i += 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return common", '    return l1.filter{l2.contains($0)}.unique()', '    return
    Array(Set(l1).intersection(Set(l2))).sorted()', '  return Array(Set(l1).intersection(Set(l2)))',
  '    return l1.filter { l2.contains($0) }.sorted()', "    let set1 = Set(l1)\n \
    \   let set2 = Set(l2)\n    let common = set1.intersection(set2)\n    return Array(common).sorted()",
  "    let l1Set = Set(l1)\n    let l2Set = Set(l2)\n    return Array(l1Set.intersection(l2Set)).sorted()",
  "    let l1Set = Set(l1)\n    let l2Set = Set(l2)\n    let intersection = l1Set.intersection(l2Set)\n\
    \    return Array(intersection).sorted()", "    var result = [Int]()\n    var\
    \ l1 = l1\n    var l2 = l2\n    l1.sort()\n    l2.sort()\n    var i = 0\n    var\
    \ j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j] {\n\
    \            result.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    return result", "\tlet a1 = l1.sorted(by:\
    \ <)\n\tlet a2 = l2.sorted(by: <)\n\t\n\tvar result = [Int]()\n\tvar index = 0\n\
    \tfor i in 0..<a1.count {\n\t\tif index >= a2.count {\n\t\t\tbreak\n\t\t}\n\t\t\
    if a1[i] == a2[index] {\n\t\t\tresult.append(a1[i])\n\t\t\twhile index < a2.count\
    \ && a2[index] == a1[i] {\n\t\t\t\tindex += 1\n\t\t\t}\n\t\t} else if a1[i] >\
    \ a2[index] {\n\t\t\twhile index < a2.count && a2[index] < a1[i] {\n\t\t\t\tindex\
    \ += 1\n\t\t\t}\n\t\t\tif index >= a2.count {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\
    if a1[i] == a2[index] {\n\t\t\t\tresult.append(a1[i])\n\t\t\t\twhile index < a2.count\
    \ && a2[index] == a1[i] {\n\t\t\t\t\tindex += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn result", "    var res = Set<Int>()\n    var p1 = 0\n    var p2 = 0\n\
    \    while p1 < l1.count && p2 < l2.count {\n        if l1[p1] == l2[p2] {\n \
    \           res.insert(l1[p1])\n            p1 += 1\n            p2 += 1\n   \
    \     } else if l1[p1] < l2[p2] {\n            p1 += 1\n        } else {\n   \
    \         p2 += 1\n        }\n    }\n    return Array(res)", "    let n1 = l1.count\n\
    \    let n2 = l2.count\n    let n = min(n1, n2)\n    var c: [Int] = []\n    var\
    \ i = 0\n    var j = 0\n    while i < n1 && j < n2 {\n        if l1[i] < l2[j]\
    \ {\n            i += 1\n        } else if l1[i] > l2[j] {\n            j += 1\n\
    \        } else {\n            c.append(l1[i])\n            i += 1\n         \
    \   j += 1\n        }\n    }\n    return c", "    let set1 = Set(l1)\n    let\
    \ set2 = Set(l2)\n    let common = set1.intersection(set2)\n    return Array(common).sorted()",
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  "    let s1 = Set(l1)\n    let s2 = Set(l2)\n    return Array(s1.intersection(s2)).sorted()",
  '  return Set(l1).intersection(Set(l2)).sorted()', "    var a = Array(Set(l1)),\
    \ b = Array(Set(l2))\n    var c = [Int]()\n    while !a.isEmpty && !b.isEmpty\
    \ {\n        if a.first! < b.first! {\n            a.removeFirst()\n        }\
    \ else if a.first! > b.first! {\n            b.removeFirst()\n        } else {\n\
    \            c.append(a.removeFirst())\n            b.removeFirst()\n        }\n\
    \    }\n    return c", "    var s1 = Set(l1)\n    var s2 = Set(l2)\n    s1.formIntersection(s2)\n\
    \    return Array(s1).sorted()", "    guard l1.count > 0 && l2.count > 0 else\
    \ { return [] }\n    let x = l1.reduce(into: [Int]()) { (res, e) in if l2.contains(e)\
    \ { res.append(e) } }\n    return Array(Set(x)).sorted()", "    let a1 = l1.sorted()\n\
    \    let a2 = l2.sorted()\n    var c = [Int]()\n    var i = 0\n    var j = 0\n\
    \    while i < a1.count && j < a2.count {\n        if a1[i] == a2[j] {\n     \
    \       c.append(a1[i])\n            i += 1\n            j += 1\n        } else\
    \ if a1[i] < a2[j] {\n            i += 1\n        } else {\n            j += 1\n\
    \        }\n    }\n    return c", '    return l1.filter { l2.contains($0) }.sorted().uniq()',
  "    // Get only the elements that the other array contains.\n    let inter = l1.filter\
    \ { l2.contains($0) }\n    // Return the uniques.\n    return inter.reduce([])\
    \ { $0.contains($1) ? $0 : $0 + [$1] }", '    return []', '    return Array(Set(l1).intersection(Set(l2)))',
  '    return l1.filter { l2.contains($0) }.sorted { $0 < $1 }', "    let set1 = Set(l1)\n\
    \    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  "\tlet arr = l1 + l2\n\treturn Array(Set(arr)).sorted()", "    let items = Set(l1).intersection(Set(l2))\n\
    \    return Array(items).sorted()", '    return Array(Set(l1).intersection(Set(l2)))',
  "    // TODO: Write me\n    return []", "    let s1 = Set(l1)\n    let s2 = Set(l2)\n\
    \    return Array(s1.intersection(s2)).sorted()", "    let commonElements = l1.filter\
    \ { l2.contains($0) }\n    return commonElements.sorted()", "    let set1 = Set(l1)\n\
    \    let set2 = Set(l2)\n    let intersection = set1.intersection(set2)\n    return\
    \ Array(intersection).sorted()", "    var list = l1\n    var set: Set<Int> = []\n\
    \    for element in l2 {\n        if list.contains(element) {\n            set.insert(element)\n\
    \        }\n    }\n    return Array(set.sorted())", "    var l1sorted = l1.sorted()\n\
    \    var l2sorted = l2.sorted()\n    var commonList = [Int]()\n    var l1Index\
    \ = 0\n    var l2Index = 0\n    while l1Index < l1sorted.count && l2Index < l2sorted.count\
    \ {\n        if l1sorted[l1Index] == l2sorted[l2Index] {\n            commonList.append(l1sorted[l1Index])\n\
    \            l1Index += 1\n            l2Index += 1\n        } else if l1sorted[l1Index]\
    \ < l2sorted[l2Index] {\n            l1Index += 1\n        } else {\n        \
    \    l2Index += 1\n        }\n    }\n    return commonList", "    let s1 = Set(l1)\n\
    \    let s2 = Set(l2)\n    let common = s1.intersection(s2)\n    return Array(common).sorted()",
  "    var set1 = Set(l1)\n    let set2 = Set(l2)\n    set1.formIntersection(set2)\n\
    \    return Array(set1).sorted()", "    let l1Set = Set(l1)\n    let l2Set = Set(l2)\n\
    \    let common = l1Set.intersection(l2Set)\n    return Array(common).sorted()",
  '    return []', '    return []', "    let arr1 = l1.sorted(by: <)\n    let arr2\
    \ = l2.sorted(by: <)\n    var res: [Int] = []\n    var i = 0\n    var j = 0\n\
    \    while i < arr1.count && j < arr2.count {\n        if arr1[i] == arr2[j] {\n\
    \            res.append(arr1[i])\n            i += 1\n            j += 1\n   \
    \     } else if arr1[i] < arr2[j] {\n            i += 1\n        } else {\n  \
    \          j += 1\n        }\n    }\n    return res", "    var s1 = Set(l1)\n\
    \    var s2 = Set(l2)\n    s1.formIntersection(s2)\n    return Array(s1).sorted()",
  "  var l3 = [Int]()\n  var i = 0\n  var j = 0\n  while i < l1.count && j < l2.count\
    \ {\n    if l1[i] == l2[j] {\n      l3.append(l1[i])\n      i += 1\n      j +=\
    \ 1\n    } else if l1[i] < l2[j] {\n      i += 1\n    } else {\n      j += 1\n\
    \    }\n  }\n  return l3", "    let set1 = Set(l1)\n    let set2 = Set(l2)\n \
    \   return Array(set1.intersection(set2)).sorted()", "\tlet unique = uniqueItems(l1:\
    \ l1, l2: l2)\n\treturn unique.filter { l1.contains($0) && l2.contains($0) }",
  '    return l1.filter { l2.contains($0) }.sorted()', "    let set1 = Set(l1)\n \
    \   let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()", " \
    \   let s1 = Set(l1)\n    let s2 = Set(l2)\n    return Array(s1.intersection(s2)).sorted()",
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    let intersec = set1.intersection(set2)\n\
    \    return Array(intersec).sorted()", "    var l = [Int]()\n    for i in l1 {\n\
    \        if l2.contains(i) {\n            l.append(i)\n        }\n    }\n    return\
    \ l.sorted()", "    var result = [Int]()\n    for i in l1 {\n        for j in\
    \ l2 {\n            if i == j {\n                result.append(i)\n          \
    \  }\n        }\n    }\n    return Array(Set(result)).sorted()", '    return l1.filter
    { l2.contains($0) }.sorted { $0 < $1 }', "    var s = Set(l1)\n    s.formIntersection(l2)\n\
    \    return Array(s).sorted()", '    return []', "    var result: [Int] = []\n\
    \    let intersection = Set(l1).intersection(Set(l2))\n    if intersection.count\
    \ > 0 {\n        result = Array(intersection).sorted()\n    }\n    return result",
  "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  '    return Array(Set(l1).intersection(Set(l2)))', "    var result = [Int]()\n \
    \   for i in l1 {\n        for j in l2 {\n            if i == j {\n          \
    \      result.append(i)\n            }\n        }\n    }\n    return result.sorted()",
  "    var res: [Int] = []\n    let set1 = Set(l1)\n    let set2 = Set(l2)\n    set1.forEach({\n\
    \        if set2.contains($0) {\n            res.append($0)\n        }\n    })\n\
    \    return res.sorted()", '    return Array(Set(l1).intersection(Set(l2)))',
  '    return unique(items: intersect(l1: l1, l2: l2))', "    var set1 = Set(l1)\n\
    \    var set2 = Set(l2)\n    set1.formIntersection(set2)\n    return Array(set1).sorted()",
  '    return Array(Set(l1).intersection(Set(l2))).sorted()', "  // TODO\n  return\
    \ []", "    let set1 = Set(l1)\n    let set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()",
  "\tlet sorted1 = l1.sorted()\n\tlet sorted2 = l2.sorted()\n\tvar i = 0\n\tvar j\
    \ = 0\n\tvar res = [Int]()\n\twhile i < sorted1.count && j < sorted2.count {\n\
    \t\tif sorted1[i] < sorted2[j] {\n\t\t\ti += 1\n\t\t} else if sorted1[i] > sorted2[j]\
    \ {\n\t\t\tj += 1\n\t\t} else {\n\t\t\tres.append(sorted1[i])\n\t\t\ti += 1\n\t\
    \t\tj += 1\n\t\t}\n\t}\n\treturn res", "    var set1 = Set(l1)\n    var set2 =\
    \ Set(l2)\n    set1.formIntersection(set2)\n    return set1.sorted()", "    var\
    \ s = Set(l1)\n    var c = Set(l2)\n    s.formIntersection(c)\n    return Array(s).sorted()",
  "    var l: [Int] = []\n    for i in l1 {\n        if l2.contains(i) {\n       \
    \     l.append(i)\n        }\n    }\n    return l.sorted()", '    return Array(Set(l1).intersection(Set(l2))).sorted()',
  '  return Array(Set(l1).intersection(Set(l2)))', "    let s1 = Set(l1)\n    let\
    \ s2 = Set(l2)\n    let common = s1.intersection(s2)\n    return Array(common).sorted()",
  "    var l = [Int]()\n    l1.forEach {\n        l2.forEach {\n            if $0\
    \ == $1 {\n                l.append($0)\n            }\n        }\n    }\n   \
    \ return l.sorted()", "    // YOUR CODE HERE\n    let set1 = Set(l1)\n    let\
    \ set2 = Set(l2)\n    return Array(set1.intersection(set2)).sorted()", "    var\
    \ l3 = [Int]()\n    for a in l1 {\n        for b in l2 {\n            if a ==\
    \ b {\n                l3.append(a)\n            }\n        }\n    }\n    return\
    \ l3.sorted()", '    return Array(Set(l1).intersection(Set(l2)))', "    let uniqueSet1\
    \ = Set(l1)\n    let uniqueSet2 = Set(l2)\n    return Array(uniqueSet1.intersection(uniqueSet2)).sorted()",
  "    var result: [Int] = []\n    for item in l1 {\n        if l2.contains(item)\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()",
  '    return Set(l1).intersection(Set(l2)).sorted()', "  let l1_set = Set(l1)\n \
    \ let l2_set = Set(l2)\n  let intersection = l1_set.intersection(l2_set)\n  return\
    \ Array(intersection).sorted()", '    return Array(Set(l1).intersection(Set(l2))).sorted()',
  '    return l1.filter { l2.contains($0) }.sorted { $0 < $1 }', '    return l1.filter
    { l2.contains($0) }.distinct()', '    return Set(l1).intersection(Set(l2)).sorted()',
  "\treturn Array(Set(l1).intersection(Set(l2)))", "    var result: [Int] = []\n \
    \   for i in l1 {\n        for j in l2 {\n            if i == j {\n          \
    \      result.append(i)\n            }\n        }\n    }\n    return result.sorted()",
  "    let result = l1.filter({ l2.contains($0) })\n    return result.sorted(by: <)",
  "\tvar result: [Int] = []\n\tfor i in l1 {\n\t\tif l2.contains(i) {\n\t\t\tresult.append(i)\n\
    \t\t}\n\t}\n\treturn Array(Set(result)).sorted()", '    return [Int](Set(l1).intersection(Set(l2)))',
  '    return Array(Set(l1).intersection(Set(l2)))', "    var l1 = l1\n    var l2\
    \ = l2\n    l1.sort()\n    l2.sort()\n    var l3 = [Int]()\n    var i = 0\n  \
    \  var j = 0\n    while i < l1.count && j < l2.count {\n        if l1[i] == l2[j]\
    \ {\n            l3.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      } else if l1[i] < l2[j] {\n            i += 1\n        } else {\n     \
    \       j += 1\n        }\n    }\n    return l3", '    return l1.filter({ l2.contains($0)
    }).sorted()', '    return Array(Set(l1).intersection(Set(l2))).sorted()', "  \
    \  var both = [Int]()\n    let s1 = l1.sorted()\n    let s2 = l2.sorted()\n  \
    \  var i = 0\n    var j = 0\n    while i < s1.count && j < s2.count {\n      \
    \  if s1[i] < s2[j] {\n            i += 1\n        } else if s1[i] > s2[j] {\n\
    \            j += 1\n        } else {\n            both.append(s1[i])\n      \
    \      i += 1\n            j += 1\n        }\n    }\n    return both", "    var\
    \ result: [Int] = []\n    for item in l1 {\n        if l2.contains(item) {\n \
    \           result.append(item)\n        }\n    }\n    return Set(result).sorted()",
  '    return Array(Set(l1).intersection(Set(l2))).sorted()', "    let unique = Array(Set(l1\
    \ + l2))\n    return unique.filter({ contains(l1, $0) && contains(l2, $0) })",
  "    let hashTable: [Int: Int] = l1.reduce(into: [:]) { (dict, int) in\n       \
    \ dict[int, default: 0] += 1\n    }\n    return l2.filter { hashTable[$0] != nil\
    \ }", "    var r = [Int]()\n    for e in l1 {\n        if l2.contains(e) {\n \
    \           r.append(e)\n        }\n    }\n    r.sort()\n    r = Array(Set(r))\n\
    \    return r", "    var result: [Int] = []\n    var index1 = 0\n    var index2\
    \ = 0\n    while (index1 < l1.count && index2 < l2.count) {\n        if (l1[index1]\
    \ == l2[index2]) {\n            if (!result.contains(l1[index1])) {\n        \
    \        result.append(l1[index1])\n            }\n            index1 += 1\n \
    \           index2 += 1\n        } else if (l1[index1] < l2[index2]) {\n     \
    \       index1 += 1\n        } else {\n            index2 += 1\n        }\n  \
    \  }\n    return result", "    var commonList = [Int]()\n    let set1 = Set(l1)\n\
    \    let set2 = Set(l2)\n    for item in set1 {\n        if set2.contains(item)\
    \ {\n            commonList.append(item)\n        }\n    }\n    return commonList.sorted()",
  "    // TODO: Write some code to get the expected output!\n    return []", '  return
    Array(Set(l1).intersection(Set(l2))).sorted()', "    let set = Set(l1)\n    let\
    \ set2 = Set(l2)\n    let union = set.intersection(set2)\n    return Array(union).sorted()",
  "    var res: [Int] = []\n    var l2c = l2\n    for i in l1 {\n        if let index\
    \ = l2c.firstIndex(of: i) {\n            res.append(i)\n            l2c.remove(at:\
    \ index)\n        }\n    }\n    return res.sorted()", "    let set1 = Set(l1)\n\
    \    let set2 = Set(l2)\n    let inter = set1.intersection(set2)\n    let sorted\
    \ = inter.sorted()\n    return sorted", "    let l1 = Set(l1)\n    let l2 = Set(l2)\n\
    \    let intersection = l1.intersection(l2)\n    return Array(intersection).sorted()",
  "    let l1Set = Set(l1)\n    let l2Set = Set(l2)\n    let l3Set = l1Set.intersection(l2Set)\n\
    \    return Array(l3Set).sorted()", "    let unique_l1 = unique(array: l1)\n \
    \   let unique_l2 = unique(array: l2)\n    var result: [Int] = []\n    for i in\
    \ unique_l1 {\n        for j in unique_l2 {\n            if i == j {\n       \
    \         result.append(i)\n            }\n        }\n    }\n    return result",
  "    let result = Set(l1).intersection(Set(l2))\n    return Array(result).sorted()"]
stop_tokens:
- "\n}"
