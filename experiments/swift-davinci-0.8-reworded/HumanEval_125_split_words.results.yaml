language: swift
name: HumanEval_125_split_words
results:
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Complete this method\n    return .failure(0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp4eb5qcls/tmp4eb5qcls.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afeb1e8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afeb1b85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afeb1b85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afeb1b847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4eb5qcls                        0x0000556515af184c <unavailable> + 6220

    5    libc.so.6                          0x00002afeb207a460 __libc_start_main +
    245

    6    tmp4eb5qcls                        0x0000556515af1389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map\
    \ { String($0) })\n    }\n    let result = txt.enumerated().filter { idx, char\
    \ in\n        char.isLowercase && idx % 2 == 0\n    }.count\n    return .failure(result)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp8wx73_8b/tmp8wx73_8b.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca59771c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca59468b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca59468988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca594677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wx73_8b                        0x00005624dc42456b <unavailable> + 9579

    5    libc.so.6                          0x00002aca5995d460 __libc_start_main +
    245

    6    tmp8wx73_8b                        0x00005624dc423919 <unavailable> + 6425

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter { $0.isLetter }.reduce(0) { $1.unicodeScalars.first!.value\
    \ - ord(\"a\") % 2 == 1 ? $0 + 1 : $0 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp8xk9tjr_.swift:20:110: error: cannot find 'ord' in scope\n    \
    \    return .failure(txt.lowercased().filter { $0.isLetter }.reduce(0) { $1.unicodeScalars.first!.value\
    \ - ord(\"a\") % 2 == 1 ? $0 + 1 : $0 })\n                                   \
    \                                                                          ^~~\n"
  stdout: ''
  timestamp: 1660011876
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map(String.init))\n    } else {\n        let\
    \ words = txt.split(separator: \",\")\n        if words.count > 1 {\n        \
    \    return .success(words.map(String.init))\n        } else {\n            let\
    \ lowerCaseLetters = txt.filter { $0.isLowercase }\n            return .failure(Int(lowerCaseLetters.count\
    \ % 2))\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpzq3_gdnj/tmpzq3_gdnj.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b567082bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5670522b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5670522988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56705217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzq3_gdnj                        0x000055646c4f14a3 <unavailable> + 9379

    5    libc.so.6                          0x00002b5670a17460 __libc_start_main +
    245

    6    tmpzq3_gdnj                        0x000055646c4f0989 <unavailable> + 6537

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.reduce(0) { $0 + ($1.unicodeScalars.first!.value\
    \ - 97 + 1) % 2 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp951fsjmd.swift:20:16: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        return .failure(txt.filter { $0.isLowercase }.reduce(0)\
    \ { $0 + ($1.unicodeScalars.first!.value - 97 + 1) % 2 })\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011984
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.lowercased().filter{ $0.isLetter }.map{\
    \ $0.asciiValue! - 97 }.filter{ $0 % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpp3f2kbhm/tmpp3f2kbhm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b635157cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6351273b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6351273988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63512727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3f2kbhm                        0x0000559193f5ecbe <unavailable> + 7358

    5    libc.so.6                          0x00002b6351768460 __libc_start_main +
    245

    6    tmpp3f2kbhm                        0x0000559193f5e649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    } else {\n        let words = txt.components(separatedBy:\
    \ \",\")\n        if words.count > 1 {\n            return .success(words)\n \
    \       } else {\n            var count = 0\n            for char in txt {\n \
    \               if let value = Int(String(char).lowercased()) {\n            \
    \        if value % 2 == 1 {\n                        count += 1\n           \
    \         }\n                }\n            }\n            return .failure(count)\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpe_p6070h.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpe_p6070h.swift:19:25: error: value of type 'String'\
    \ has no member 'components'\n        let words = txt.components(separatedBy:\
    \ \",\")\n                    ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011876
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let word = txt.components(separatedBy: .whitespaces)\n    if !word.isEmpty\
    \ {\n        return .success(word)\n    } else {\n        let word = txt.components(separatedBy:\
    \ \",\")\n        if !word.isEmpty {\n            return .success(word)\n    \
    \    } else {\n            let ords = txt.map { String($0).unicodeScalars.first?.value\
    \ }\n            let odds = ords.filter { ($0! % 2) == 1 }\n            return\
    \ .failure(odds.count)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpxkz3ns1s.swift:15:20: error: value of type 'String' has no member\
    \ 'components'\n    let word = txt.components(separatedBy: .whitespaces)\n   \
    \            ~~~ ^~~~~~~~~~\n/tmp/tmpxkz3ns1s.swift:15:45: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n    let word = txt.components(separatedBy:\
    \ .whitespaces)\n                                           ~^~~~~~~~~~~\n/tmp/tmpxkz3ns1s.swift:19:24:\
    \ error: value of type 'String' has no member 'components'\n        let word =\
    \ txt.components(separatedBy: \",\")\n                   ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011876
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter{$0.isLowercase}.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpy2jzrjul/tmpy2jzrjul.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefc9aacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefc97a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefc97a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefc97a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy2jzrjul                        0x000056395a4fc343 <unavailable> + 9027

    5    libc.so.6                          0x00002aefc9c98460 __libc_start_main +
    245

    6    tmpy2jzrjul                        0x000056395a4fb829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpmz3getjb/tmpmz3getjb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98ca8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98ca5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98ca5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98ca5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmz3getjb                        0x000055a337e4e84c <unavailable> + 6220

    5    libc.so.6                          0x00002b98caaa0460 __libc_start_main +
    245

    6    tmpmz3getjb                        0x000055a337e4e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: '/tmp/tmpwhtfihq_.swift:16:1: error: missing return in global function expected
    to return ''Result<[String], Int>''

    }

    ^

    '
  stdout: ''
  timestamp: 1660011876
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let trimmed = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let spaceSeparated = trimmed.split(separator: \" \")\n    if spaceSeparated.count\
    \ > 1 {\n        return .success(spaceSeparated.map(String.init))\n    } else\
    \ {\n        let commaSeparated = trimmed.split(separator: \",\")\n        if\
    \ commaSeparated.count > 1 {\n            return .success(commaSeparated.map(String.init))\n\
    \        } else {\n            var count = 0\n            for (idx, letter) in\
    \ trimmed.enumerated() {\n                if \"a\"...\"z\" ~= letter {\n     \
    \               if idx % 2 == 0 {\n                        count += 1\n      \
    \              }\n                }\n            }\n            return .failure(count)\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6v97f_3d.swift:15:23: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let trimmed = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \                  ~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp6v97f_3d.swift:15:47: error:\
    \ cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    let trimmed = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n     \
    \                                        ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011876
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpveiv_crd/tmpveiv_crd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0032a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveiv_crd                        0x00005577e6fc884c <unavailable> + 6220

    5    libc.so.6                          0x00002b0032f0e460 __libc_start_main +
    245

    6    tmpveiv_crd                        0x00005577e6fc8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let stringArray = txt.components(separatedBy: \" \")\n    if stringArray.count\
    \ > 1 {\n        return .success(stringArray)\n    } else {\n        let stringArray\
    \ = txt.components(separatedBy: \",\")\n        if stringArray.count > 1 {\n \
    \           return .success(stringArray)\n        } else {\n            return\
    \ .failure(txt.lowercased().compactMap {$0.asciiValue}.filter {$0 % 2 == 1}.count)\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpjfqybtx9.swift:15:27: error: value of type 'String' has no member\
    \ 'components'\n    let stringArray = txt.components(separatedBy: \" \")\n   \
    \                   ~~~ ^~~~~~~~~~\n/tmp/tmpjfqybtx9.swift:19:31: error: value\
    \ of type 'String' has no member 'components'\n        let stringArray = txt.components(separatedBy:\
    \ \",\")\n                          ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011876
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpny2qak6m/tmpny2qak6m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aa09fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aa06f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aa06f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aa06f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny2qak6m                        0x0000560d60fb684c <unavailable> + 6220

    5    libc.so.6                          0x00002b1aa0be8460 __libc_start_main +
    245

    6    tmpny2qak6m                        0x0000560d60fb6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var odd_chars = 0\n        for (i, c) in txt.lowercased().enumerated() {\n\
    \            if i % 2 == 0 && c.isLetter {\n                odd_chars += 1\n \
    \           }\n        }\n        return .failure(odd_chars)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpa_5j_ygz/tmpa_5j_ygz.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c01c9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c01991b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c01991988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c019907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_5j_ygz                        0x000055c328f1b68b <unavailable> + 9867

    5    libc.so.6                          0x00002b6c01e86460 __libc_start_main +
    245

    6    tmpa_5j_ygz                        0x000055c328f1aa39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your implementation goes here\n    return .failure(0)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp_l73n4gg/tmp_l73n4gg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c2b428c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c2b11fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c2b11f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c2b11e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_l73n4gg                        0x00005643985be84c <unavailable> + 6220

    5    libc.so.6                          0x00002b4c2b614460 __libc_start_main +
    245

    6    tmp_l73n4gg                        0x00005643985be389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let word = txt.split(separator: \" \").first {\n        return\
    \ .success([String(word)])\n    } else if let word = txt.split(separator: \",\"\
    ).first {\n        return .success([String(word)])\n    } else {\n        return\
    \ .failure(txt.filter { Character(\"a\").asciiValue!...Character(\"z\").asciiValue!\
    \ ~= $0.asciiValue! }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpx2kkxgzj/tmpx2kkxgzj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32db42ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32db125b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32db125988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32db1247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2kkxgzj                        0x000055b84cbb7dbc <unavailable> + 7612

    5    libc.so.6                          0x00002b32db61a460 __libc_start_main +
    245

    6    tmpx2kkxgzj                        0x000055b84cbb78f9 <unavailable> + 6393

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(.random(in: .zero...25))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpdf97ggfj/tmpdf97ggfj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b9395cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b93653b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b93653988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b936527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdf97ggfj                        0x0000560004581adc <unavailable> + 6876

    5    libc.so.6                          0x00002b2b93b48460 __libc_start_main +
    245

    6    tmpdf97ggfj                        0x0000560004581619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: implement\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpvjsc5bjb/tmpvjsc5bjb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd54a30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd54727b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd54727988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd547267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjsc5bjb                        0x000055767cfe484c <unavailable> + 6220

    5    libc.so.6                          0x00002afd54c1c460 __libc_start_main +
    245

    6    tmpvjsc5bjb                        0x000055767cfe4389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpmz3getjb/tmpmz3getjb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98ca8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98ca5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98ca5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98ca5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmz3getjb                        0x000055a337e4e84c <unavailable> + 6220

    5    libc.so.6                          0x00002b98caaa0460 __libc_start_main +
    245

    6    tmpmz3getjb                        0x000055a337e4e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    fatalError(\"not implemented\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpt1c2fe_j/tmpt1c2fe_j.swift:15: Fatal error: not implemented

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d8174fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d81446b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d81446988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d814457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1c2fe_j                        0x00005584eaa73328 <unavailable> + 9000

    5    tmpt1c2fe_j                        0x00005584eaa72689 <unavailable> + 5769

    6    libc.so.6                          0x00002b1d8193b460 __libc_start_main +
    245

    7    tmpt1c2fe_j                        0x00005584eaa72389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    func task1(txt: String) -> Result<[String], Int> {\n        if let\
    \ spaceIndex = txt.firstIndex(of: \" \") {\n            return .success([String(txt[..<spaceIndex]),\
    \ String(txt[spaceIndex...])])\n        }\n        return .failure(1)\n    }\n\
    \    \n    func task2(txt: String) -> Result<[String], Int> {\n        if let\
    \ commaIndex = txt.firstIndex(of: \",\") {\n            return .success([String(txt[..<commaIndex]),\
    \ String(txt[commaIndex...])])\n        }\n        return .failure(2)\n    }\n\
    \    \n    func task3(txt: String) -> Result<[String], Int> {\n        var count:\
    \ Int = 0\n        var alphabet: [String] = []\n        for char in txt {\n  \
    \          alphabet.append(String(char))\n        }\n        for char in alphabet\
    \ {\n            if char == \"a\" || char == \"c\" || char == \"e\" || char ==\
    \ \"g\" || char == \"i\" || char == \"k\" || char == \"m\" || char == \"o\" ||\
    \ char == \"q\" || char == \"s\" || char == \"u\" || char == \"w\" || char ==\
    \ \"y\" {\n                count += 1\n            }\n        }\n        return\
    \ .failure(count)\n    }\n    \n    return task1(txt: txt).flatMap { _ in task2(txt:\
    \ txt) }.flatMap { _ in task3(txt: txt) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpauj139mk/tmpauj139mk.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b648c80bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b648c502b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b648c502988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b648c5017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpauj139mk                        0x0000559fabbce07c <unavailable> + 8316

    5    libc.so.6                          0x00002b648c9f7460 __libc_start_main +
    245

    6    tmpauj139mk                        0x0000559fabbcdbb9 <unavailable> + 7097

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let numbers\
    \ = txt.split(separator: \",\")\n    if numbers.count > 1 {\n        return .success(numbers.map\
    \ { String($0) })\n    }\n    return .failure(txt.compactMap { $0.isLowercase\
    \ ? Int($0.asciiValue!) : nil }.filter { $0 % 2 == 1 }.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpa2p1xltv/tmpa2p1xltv.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e81433c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e8112ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e8112a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e811297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2p1xltv                        0x000055754e6f375b <unavailable> + 10075

    5    libc.so.6                          0x00002b6e8161f460 __libc_start_main +
    245

    6    tmpa2p1xltv                        0x000055754e6f2b09 <unavailable> + 6921

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your code here\n    return .failure(NotImplemented)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmppcp20dv0.swift:16:21: error: cannot find 'NotImplemented' in scope\n\
    \    return .failure(NotImplemented)\n                    ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let commaWords\
    \ = txt.split(separator: \",\")\n    if commaWords.count > 1 {\n        return\
    \ .success(commaWords.map { String($0) })\n    }\n    return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 1 }.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpml0dwq26/tmpml0dwq26.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b159bd12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b159ba09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b159ba09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b159ba087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpml0dwq26                        0x0000556649f71793 <unavailable> + 10131

    5    libc.so.6                          0x00002b159befe460 __libc_start_main +
    245

    6    tmpml0dwq26                        0x0000556649f70a09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Write your code here\n    if txt.contains(\" \") {\n        return\
    \ .success(txt.components(separatedBy: \" \"))\n    } else if txt.contains(\"\
    ,\") {\n        return .success(txt.components(separatedBy: \",\"))\n    } else\
    \ {\n        var count = 0\n        for i in txt.lowercased() {\n            if\
    \ Int(i.asciiValue!) % 2 == 1 {\n                count += 1\n            }\n \
    \       }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpflvvpeir.swift:17:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpflvvpeir.swift:19:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().enumerated().filter{ $0.offset % 2 == 0 }.map\
    \ { $0.element }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmphj8qc5mi/tmphj8qc5mi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d608ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d605e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d605e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d605e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphj8qc5mi                        0x00005596f261662b <unavailable> + 9771

    5    libc.so.6                          0x00002b7d60ad7460 __libc_start_main +
    245

    6    tmphj8qc5mi                        0x00005596f26159d9 <unavailable> + 6617

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your implementation here...\n    return .failure(1)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp9ufcn2xa/tmp9ufcn2xa.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab24326dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab242f64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab242f64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab242f637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ufcn2xa                        0x000055e57c91c84c <unavailable> + 6220

    5    libc.so.6                          0x00002ab243459460 __libc_start_main +
    245

    6    tmp9ufcn2xa                        0x000055e57c91c389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var result = 0\n        for (index, char) in txt.lowercased().enumerated()\
    \ {\n            if index % 2 == 0 {\n                result += Int(char.asciiValue!)\
    \ - Int(UnicodeScalar(\"a\").value)\n            }\n        }\n        return\
    \ .failure(result)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpq9gwzet4/tmpq9gwzet4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7467bddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74678d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74678d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74678d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq9gwzet4                        0x0000557c39d847c3 <unavailable> + 10179

    5    libc.so.6                          0x00002b7467dc9460 __libc_start_main +
    245

    6    tmpq9gwzet4                        0x0000557c39d83ca9 <unavailable> + 7337

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n  if txt.contains(\" \") {\n    return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n  } else if txt.contains(\",\") {\n    return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n  } else {\n    return .failure(txt.filter { (char)\
    \ -> Bool in\n      ord(char) % 2 == 1\n    }.count)\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0_chha1o.swift:21:7: error: cannot find 'ord' in scope\n      ord(char)\
    \ % 2 == 1\n      ^~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        let words = txt.split(separator:\
    \ \" \")\n        var result = [String]()\n        for word in words {\n     \
    \       result.append(String(word))\n        }\n        return .success(result)\n\
    \    } else if txt.contains(\",\") {\n        let words = txt.split(separator:\
    \ \",\")\n        var result = [String]()\n        for word in words {\n     \
    \       result.append(String(word))\n        }\n        return .success(result)\n\
    \    } else {\n        var count = 0\n        for char in txt {\n            if\
    \ Int(char.asciiValue!) % 2 == 1 {\n                count += 1\n            }\n\
    \        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpqy9vnjzv/tmpqy9vnjzv.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07c0251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07bff48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07bff48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07bff477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqy9vnjzv                        0x0000562dea8f67cb <unavailable> + 10187

    5    libc.so.6                          0x00002b07c043d460 __libc_start_main +
    245

    6    tmpqy9vnjzv                        0x0000562dea8f5b79 <unavailable> + 7033

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpmz3getjb/tmpmz3getjb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98ca8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98ca5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98ca5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98ca5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmz3getjb                        0x000055a337e4e84c <unavailable> + 6220

    5    libc.so.6                          0x00002b98caaa0460 __libc_start_main +
    245

    6    tmpmz3getjb                        0x000055a337e4e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map{ String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map{ String($0) })\n    } else {\n    \
    \    var count = 0\n        let lowercaseString = txt.lowercased()\n        for\
    \ (index, element) in lowercaseString.enumerated() {\n            let val = element.asciiValue!\
    \ - 97\n            if val % 2 == 1 && index % 2 == 1 {\n                count\
    \ += 1\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpjp1x2qvq/tmpjp1x2qvq.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba21286fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba212566b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba212566988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2125657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjp1x2qvq                        0x0000562ce216c68b <unavailable> + 9867

    5    libc.so.6                          0x00002ba212a5b460 __libc_start_main +
    245

    6    tmpjp1x2qvq                        0x0000562ce216ba39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    do {\n        return .success(try txt.split(separator: \" \").map(String.init))\n\
    \    } catch {\n        do {\n            return .success(try txt.split(separator:\
    \ \",\").map(String.init))\n        } catch {\n            let count = txt.lowercased().filter\
    \ { \"abcdefghijklmnopqrstuvwxyz\".contains($0) }.reduce(0) { $1.asciiValue! %\
    \ 2 == 1 ? $0 + 1 : $0 }\n            return .failure(count)\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpb8zok6it/tmpb8zok6it.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad27c483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad27c17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad27c17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad27c1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8zok6it                        0x0000556ce479ecbe <unavailable> + 7358

    5    libc.so.6                          0x00002ad27c66f460 __libc_start_main +
    245

    6    tmpb8zok6it                        0x0000556ce479e649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    fatalError(\"Not implemented\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpn8oet6ec/tmpn8oet6ec.swift:15: Fatal error: Not implemented

    Current stack trace:

    0    libswiftCore.so                    0x00002b282b15ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b282ae55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b282ae55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b282ae547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8oet6ec                        0x000055c923729328 <unavailable> + 9000

    5    tmpn8oet6ec                        0x000055c923728689 <unavailable> + 5769

    6    libc.so.6                          0x00002b282b34a460 __libc_start_main +
    245

    7    tmpn8oet6ec                        0x000055c923728389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.rangeOfCharacter(from: .whitespaces) != nil {\n        return\
    \ .success(txt.components(separatedBy: .whitespaces))\n    } else if txt.rangeOfCharacter(from:\
    \ \",\") != nil {\n        return .success(txt.components(separatedBy: \",\"))\n\
    \    } else {\n        return .failure(txt.lowercased().filter({ (char) -> Bool\
    \ in\n            return char >= \"a\" && char <= \"z\" && (char.utf8.first! -\
    \ 97) % 2 == 1\n        }).count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0xgv88ri.swift:15:12: error: value of type 'String' has no member\
    \ 'rangeOfCharacter'\n    if txt.rangeOfCharacter(from: .whitespaces) != nil {\n\
    \       ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp0xgv88ri.swift:15:36: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n    if txt.rangeOfCharacter(from:\
    \ .whitespaces) != nil {\n                                  ~^~~~~~~~~~~\n/tmp/tmp0xgv88ri.swift:16:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ .whitespaces))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmp0xgv88ri.swift:16:54:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \       return .success(txt.components(separatedBy: .whitespaces))\n         \
    \                                           ~^~~~~~~~~~~\n/tmp/tmp0xgv88ri.swift:17:19:\
    \ error: value of type 'String' has no member 'rangeOfCharacter'\n    } else if\
    \ txt.rangeOfCharacter(from: \",\") != nil {\n              ~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp0xgv88ri.swift:18:29: error: value of type 'String' has no member 'components'\n\
    \        return .success(txt.components(separatedBy: \",\"))\n               \
    \         ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your code here!\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzm9okttx/tmpzm9okttx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec1b8dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec1b5d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec1b5d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec1b5d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzm9okttx                        0x000055f44290a84c <unavailable> + 6220

    5    libc.so.6                          0x00002aec1bacb460 __libc_start_main +
    245

    6    tmpzm9okttx                        0x000055f44290a389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        return .failure(txt.filter { Int($0.asciiValue!) < Int(Character(\"\
    a\").asciiValue!) }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpn4lan9ct/tmpn4lan9ct.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17dcee8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17dcbdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17dcbdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17dcbde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn4lan9ct                        0x000055a1a881ccbe <unavailable> + 7358

    5    libc.so.6                          0x00002b17dd0d4460 __libc_start_main +
    245

    6    tmpn4lan9ct                        0x000055a1a881c649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Write some code to solve this challenge...\n    return\
    \ .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpjjx4mt4r/tmpjjx4mt4r.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a809f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a806ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a806ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a806eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjx4mt4r                        0x000055d72b65e84c <unavailable> + 6220

    5    libc.so.6                          0x00002b6a80be1460 __libc_start_main +
    245

    6    tmpjjx4mt4r                        0x000055d72b65e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your code here\n    if txt.contains(\" \") {\n        return\
    \ .success(txt.split(separator: \" \").map { String($0) })\n    } else if txt.contains(\"\
    ,\") {\n        return .success(txt.split(separator: \",\").map { String($0) })\n\
    \    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp6b5jh2o_/tmp6b5jh2o_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f19cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f199d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f199d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f199d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6b5jh2o_                        0x000055da78aae343 <unavailable> + 9027

    5    libc.so.6                          0x00002b3f19ec8460 __libc_start_main +
    245

    6    tmp6b5jh2o_                        0x000055da78aad829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().compactMap { $0.asciiValue }.filter { $0\
    \ % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp3ohqy0zh/tmp3ohqy0zh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add7e313c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add7e00ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add7e00a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add7e0097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ohqy0zh                        0x000055fd17f9f5fb <unavailable> + 9723

    5    libc.so.6                          0x00002add7e4ff460 __libc_start_main +
    245

    6    tmp3ohqy0zh                        0x000055fd17f9e9a9 <unavailable> + 6569

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map{String($0)})\n    } else {\n      \
    \  var count = 0\n        for (idx, char) in txt.enumerated() {\n            if\
    \ idx % 2 == 0 {\n                if !char.isLowercase {\n                   \
    \ count += 1\n                }\n            } else {\n                if char.isLowercase\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmptjx3e863.swift:15:12: error: cannot convert return expression of\
    \ type 'String' to return type 'Result<[String], Int>'\n    return \"\"\n    \
    \       ^~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me!\n    let array = txt.components(separatedBy:\
    \ \" \")\n    if (array.count > 1) {\n        return .success(array)\n    }\n\
    \    let array2 = txt.components(separatedBy: \",\")\n    if (array2.count > 1)\
    \ {\n        return .success(array2)\n    }\n    let array3 = txt.lowercased().filter\
    \ { (letter) -> Bool in\n        let ord = Int(letter.asciiValue! - \"a\".asciiValue!)\n\
    \        return ord % 2 == 1\n    }\n    return .failure(array3.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpk2q42326.swift:16:21: error: value of type 'String' has no member\
    \ 'components'\n    let array = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpk2q42326.swift:20:22: error: value of type 'String'\
    \ has no member 'components'\n    let array2 = txt.components(separatedBy: \"\
    ,\")\n                 ~~~ ^~~~~~~~~~\n/tmp/tmpk2q42326.swift:25:48: error: value\
    \ of type 'String' has no member 'asciiValue'\n        let ord = Int(letter.asciiValue!\
    \ - \"a\".asciiValue!)\n                                           ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let result = split_on_whitespace(txt: txt) {\n        return\
    \ .success(result)\n    } else if let result = split_on_commas(txt: txt) {\n \
    \       return .success(result)\n    } else {\n        return .failure(count_odd_order_letters(txt:\
    \ txt))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp4me3_71x.swift:15:21: error: cannot find 'split_on_whitespace'\
    \ in scope\n    if let result = split_on_whitespace(txt: txt) {\n            \
    \        ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4me3_71x.swift:17:28: error: cannot find\
    \ 'split_on_commas' in scope\n    } else if let result = split_on_commas(txt:\
    \ txt) {\n                           ^~~~~~~~~~~~~~~\n/tmp/tmp4me3_71x.swift:20:25:\
    \ error: cannot find 'count_odd_order_letters' in scope\n        return .failure(count_odd_order_letters(txt:\
    \ txt))\n                        ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let whitespace = txt.firstIndex(of: \" \") {\n        let words\
    \ = txt.split(separator: \" \")\n        let result = words.map { String($0) }\n\
    \        return .success(result)\n    } else if let comma = txt.firstIndex(of:\
    \ \",\") {\n        let words = txt.split(separator: \",\")\n        let result\
    \ = words.map { String($0) }\n        return .success(result)\n    } else {\n\
    \        var count = 0\n        for char in txt {\n            if char.isLowercase\
    \ && (char.asciiValue! - ord(\"a\")) % 2 == 1 {\n                count += 1\n\
    \            }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpeijwnc1_.swift:26:56: error: cannot find 'ord' in scope\n     \
    \       if char.isLowercase && (char.asciiValue! - ord(\"a\")) % 2 == 1 {\n  \
    \                                                     ^~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { $0.isLowercase }.enumerated().filter { $0.offset\
    \ % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpiq7jl7v9/tmpiq7jl7v9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77924fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77921f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77921f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77921f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiq7jl7v9                        0x0000561c1288363b <unavailable> + 9787

    5    libc.so.6                          0x00002b77926e9460 __libc_start_main +
    245

    6    tmpiq7jl7v9                        0x0000561c128829e9 <unavailable> + 6633

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter{ $0.unicodeScalars.first!.value %\
    \ 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp614w6ay5/tmp614w6ay5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1802a7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1802775b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1802775988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18027747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp614w6ay5                        0x0000562a890666db <unavailable> + 9947

    5    libc.so.6                          0x00002b1802c6a460 __libc_start_main +
    245

    6    tmp614w6ay5                        0x0000562a89065a89 <unavailable> + 6793

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let splitText = txt.split(separator: \" \").first {\n       \
    \ return .success([\"\\(splitText)\"])\n    } else if let splitText = txt.split(separator:\
    \ \",\").first {\n        return .success([\"\\(splitText)\"])\n    } else {\n\
    \        return .failure(txt.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmptwtrvavt/tmptwtrvavt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dea019c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8de9d10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8de9d10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8de9d0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptwtrvavt                        0x0000556eaf377dfc <unavailable> + 7676

    5    libc.so.6                          0x00002b8dea205460 __libc_start_main +
    245

    6    tmptwtrvavt                        0x0000556eaf377939 <unavailable> + 6457

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpmz3getjb/tmpmz3getjb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98ca8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98ca5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98ca5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98ca5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmz3getjb                        0x000055a337e4e84c <unavailable> + 6220

    5    libc.so.6                          0x00002b98caaa0460 __libc_start_main +
    245

    6    tmpmz3getjb                        0x000055a337e4e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let comma = CharacterSet(charactersIn: \",\")\n    if txt.rangeOfCharacter(from:\
    \ comma) != nil {\n        return .success(txt.components(separatedBy: comma))\n\
    \    } else {\n        let alphabet = CharacterSet(charactersIn: \"abcdefghijklmnopqrstuvwxyz\"\
    )\n        if txt.rangeOfCharacter(from: alphabet) != nil {\n            let odd_position\
    \ = { $0.unicodeScalars.reduce(0) {\n                $1.value % 2 == 1 ? $0 +\
    \ 1 : $0\n            } }\n            return .failure(odd_position(txt))\n  \
    \      } else {\n            return .success(txt.components(separatedBy: .whitespaces))\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpw8qzkfdg.swift:15:17: error: cannot find 'CharacterSet' in scope\n\
    \    let comma = CharacterSet(charactersIn: \",\")\n                ^~~~~~~~~~~~\n\
    /tmp/tmpw8qzkfdg.swift:16:12: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \    if txt.rangeOfCharacter(from: comma) != nil {\n       ~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpw8qzkfdg.swift:17:29: error: value of type 'String' has no member 'components'\n\
    \        return .success(txt.components(separatedBy: comma))\n               \
    \         ~~~ ^~~~~~~~~~\n/tmp/tmpw8qzkfdg.swift:19:24: error: cannot find 'CharacterSet'\
    \ in scope\n        let alphabet = CharacterSet(charactersIn: \"abcdefghijklmnopqrstuvwxyz\"\
    )\n                       ^~~~~~~~~~~~\n/tmp/tmpw8qzkfdg.swift:20:16: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n        if txt.rangeOfCharacter(from:\
    \ alphabet) != nil {\n           ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpw8qzkfdg.swift:21:32:\
    \ error: unable to infer type of a closure parameter '$0' in the current context\n\
    \            let odd_position = { $0.unicodeScalars.reduce(0) {\n            \
    \                   ^\n/tmp/tmpw8qzkfdg.swift:26:33: error: value of type 'String'\
    \ has no member 'components'\n            return .success(txt.components(separatedBy:\
    \ .whitespaces))\n                            ~~~ ^~~~~~~~~~\n/tmp/tmpw8qzkfdg.swift:26:58:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \           return .success(txt.components(separatedBy: .whitespaces))\n     \
    \                                                   ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011881
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for letter in txt {\n            if (letter.asciiValue!\
    \ - Character(\"a\").asciiValue!) % 2 == 1 {\n                count += 1\n   \
    \         }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        let result = txt.split(separator:\
    \ \" \")\n        var arr = [String]()\n        for elem in result {\n       \
    \     arr.append(String(elem))\n        }\n        return .success(arr)\n    }\
    \ else if txt.contains(\",\") {\n        let result = txt.split(separator: \"\
    ,\")\n        var arr = [String]()\n        for elem in result {\n           \
    \ arr.append(String(elem))\n        }\n        return .success(arr)\n    } else\
    \ {\n        var count = 0\n        for elem in txt {\n            let elemInt\
    \ = Int(elem.asciiValue! - 97)\n            if elemInt % 2 == 1 {\n          \
    \      count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpveiv_crd/tmpveiv_crd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0032a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveiv_crd                        0x00005577e6fc884c <unavailable> + 6220

    5    libc.so.6                          0x00002b0032f0e460 __libc_start_main +
    245

    6    tmpveiv_crd                        0x00005577e6fc8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // YOUR CODE HERE\n    let n = txt.lowercased().filter{$0.isLetter}.filter{Int(UnicodeScalar(String($0))!.value)-97%2\
    \ != 0}.count\n    if txt.contains(\" \"){\n        return .success(txt.split(separator:\
    \ \" \").map{String($0)})\n    }else if txt.contains(\",\"){\n        return .success(txt.split(separator:\
    \ \",\").map{String($0)})\n    }else{\n        return .failure(n)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpk7w13k7h/tmpk7w13k7h.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b726ff4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b726fc41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b726fc41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b726fc407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7w13k7h                        0x000055ac91a906c3 <unavailable> + 9923

    5    libc.so.6                          0x00002b7270136460 __libc_start_main +
    245

    6    tmpk7w13k7h                        0x000055ac91a8fba9 <unavailable> + 7081

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var count = 0\n        for c in txt {\n            let c_int = Int(c.asciiValue!)\n\
    \            if c_int % 2 == 1 {\n                count += 1\n            }\n\
    \        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmppuu6l23b/tmppuu6l23b.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91505a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b915029db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b915029d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b915029c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppuu6l23b                        0x000055be1816665b <unavailable> + 9819

    5    libc.so.6                          0x00002b9150792460 __libc_start_main +
    245

    6    tmppuu6l23b                        0x000055be18165a09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let result = Result<[String], Int> {\n        if let result = txt.split(separator:\
    \ \" \").map(String.init) as? [String] {\n            return result\n        }\
    \ else if let result = txt.split(separator: \",\").map(String.init) as? [String]\
    \ {\n            return result\n        } else {\n            throw count_odd_chars(str:\
    \ txt)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpgq62o4og.swift:21:19: error: cannot find 'count_odd_chars' in scope\n\
    \            throw count_odd_chars(str: txt)\n                  ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let result = txt.split(separator: \" \")\n    if result.count >\
    \ 1 {\n        return .success(result.map { String($0) })\n    }\n    let result2\
    \ = txt.split(separator: \",\")\n    if result2.count > 1 {\n        return .success(result2.map\
    \ { String($0) })\n    }\n    var count = 0\n    for i in 0..<txt.count {\n  \
    \      if txt[txt.index(txt.startIndex, offsetBy: i)].isLowercase {\n        \
    \    if i % 2 == 1 {\n                count += 1\n            }\n        }\n \
    \   }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let list = txt.components(separatedBy:\
    \ \",\")\n    if list.count > 1 {\n        return .success(list)\n    }\n    let\
    \ odds = txt.filter({ (x) -> Bool in\n        Int(x.asciiValue!) % 2 == 1\n  \
    \  })\n    return .failure(odds.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpq8d2irwu.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmpq8d2irwu.swift:19:20: error: value of type 'String'\
    \ has no member 'components'\n    let list = txt.components(separatedBy: \",\"\
    )\n               ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if !words.isEmpty {\n\
    \        return .success(words.map{String($0)})\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if !words2.isEmpty {\n        return .success(words2.map{String($0)})\n\
    \    }\n    let count = txt.lowercased().filter { (char) -> Bool in\n        guard\
    \ let idx = \"abcdefghijklmnopqrstuvwxyz\".firstIndex(of: char) else { return\
    \ false }\n        return \"abcdefghijklmnopqrstuvwxyz\".distance(from: \"abcdefghijklmnopqrstuvwxyz\"\
    .startIndex, to: idx) % 2 == 0\n    }.count\n    return .failure(count)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpczymz1fq/tmpczymz1fq.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab894098c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab893d8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab893d8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab893d8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpczymz1fq                        0x0000556be331401e <unavailable> + 8222

    5    libc.so.6                          0x00002ab894284460 __libc_start_main +
    245

    6    tmpczymz1fq                        0x0000556be33139a9 <unavailable> + 6569

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let array = txt.split(separator: \" \")\n    if array.count > 1\
    \ {\n        return .success(array.map{String($0)})\n    } else {\n        let\
    \ array = txt.split(separator: \",\")\n        if array.count > 1 {\n        \
    \    return .success(array.map{String($0)})\n        } else {\n            let\
    \ lowercase = txt.lowercased()\n            let array = Array(lowercase)\n   \
    \         var count = 0\n            for i in 0...array.count - 1 {\n        \
    \        if i % 2 == 1 {\n                    count += 1\n                }\n\
    \            }\n            return .failure(count)\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzhfyygt8/tmpzhfyygt8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a67decc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a67ae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a67ae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a67ae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhfyygt8                        0x0000558d59caf713 <unavailable> + 10003

    5    libc.so.6                          0x00002b9a67fd8460 __libc_start_main +
    245

    6    tmpzhfyygt8                        0x0000558d59cae989 <unavailable> + 6537

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let index = txt.firstIndex(of: \" \") {\n        let first =\
    \ String(txt[..<index])\n        let second = String(txt[index...])\n        return\
    \ .success([first, second])\n    } else if let index = txt.firstIndex(of: \",\"\
    ) {\n        let first = String(txt[..<index])\n        let second = String(txt[index...])\n\
    \        return .success([first, second])\n    } else {\n        let odd_letters\
    \ = txt.filter { (x) -> Bool in\n            x.isLowercase && x.unicodeScalars.first!.value\
    \ % 2 == 1\n        }\n        return .failure(odd_letters.count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpboxpxw9e/tmpboxpxw9e.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2953fcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2953cc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2953cc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2953cc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpboxpxw9e                        0x0000555754f12fbc <unavailable> + 8124

    5    libc.so.6                          0x00002b29541b6460 __libc_start_main +
    245

    6    tmpboxpxw9e                        0x0000555754f12af9 <unavailable> + 6905

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Your code here\n    if txt.range(of: \" \") != nil {\n\
    \        return .success(txt.components(separatedBy: \" \"))\n    } else if txt.range(of:\
    \ \",\") != nil {\n        return .success(txt.components(separatedBy: \",\"))\n\
    \    } else {\n        var cnt = 0\n        for (i, c) in txt.lowercased().enumerated()\
    \ {\n            if ord(char: c) % 2 == 1 {\n                cnt += 1\n      \
    \      }\n        }\n        return .failure(cnt)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpz1pzlj63.swift:16:12: error: value of type 'String' has no member\
    \ 'range'\n    if txt.range(of: \" \") != nil {\n       ~~~ ^~~~~\n/tmp/tmpz1pzlj63.swift:17:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpz1pzlj63.swift:18:19:\
    \ error: value of type 'String' has no member 'range'\n    } else if txt.range(of:\
    \ \",\") != nil {\n              ~~~ ^~~~~\n/tmp/tmpz1pzlj63.swift:19:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpz1pzlj63.swift:23:16:\
    \ error: cannot find 'ord' in scope\n            if ord(char: c) % 2 == 1 {\n\
    \               ^~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { \"abcdefghijklmnopqrstuvwxyz\".contains($0)\
    \ }.filter { $0.unicodeScalars.first!.value & 1 == 1 }.count)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpjml4d8bb/tmpjml4d8bb.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ad0481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ad0178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ad0178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ad01777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjml4d8bb                        0x0000562f58d1968b <unavailable> + 9867

    5    libc.so.6                          0x00002b4ad066d460 __libc_start_main +
    245

    6    tmpjml4d8bb                        0x0000562f58d18a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let firstSpace = txt.firstIndex(of: \" \") {\n        return\
    \ Result.success(txt.split(separator: \" \").map { String($0) })\n    } else if\
    \ let firstComma = txt.firstIndex(of: \",\") {\n        return Result.success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        return Result.failure(txt.lowercased().filter\
    \ { $0 >= \"a\" && $0 <= \"z\" }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpagsscbzs/tmpagsscbzs.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bd85dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bd82d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bd82d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bd82d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpagsscbzs                        0x00005577fb8e04c3 <unavailable> + 9411

    5    libc.so.6                          0x00002b5bd87c8460 __libc_start_main +
    245

    6    tmpagsscbzs                        0x00005577fb8df9a9 <unavailable> + 6569

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n  if txt.contains(\" \") {\n    return .success(txt.split(separator:\
    \ \" \").map(String.init))\n  } else if txt.contains(\",\") {\n    return .success(txt.split(separator:\
    \ \",\").map(String.init))\n  } else {\n    return .failure(txt.filter { $0.isLowercase\
    \ }.count)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpzcujr6_z/tmpzcujr6_z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e593a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e59099b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e59099988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e590987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcujr6_z                        0x0000555c902cd343 <unavailable> + 9027

    5    libc.so.6                          0x00002b2e5958e460 __libc_start_main +
    245

    6    tmpzcujr6_z                        0x0000555c902cc829 <unavailable> + 6185

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var odd_letter_count = 0\n        for char in txt {\n            let char_num\
    \ = char.asciiValue! - \"a\".asciiValue!\n            if (char_num % 2 == 1) {\n\
    \                odd_letter_count += 1\n            }\n        }\n        return\
    \ .failure(odd_letter_count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpkgl6v5jx.swift:22:51: error: value of type 'String' has no member\
    \ 'asciiValue'\n            let char_num = char.asciiValue! - \"a\".asciiValue!\n\
    \                                              ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words: [String]\n    if txt.contains(\" \") {\n        words\
    \ = txt.split(separator: \" \").map { String($0) }\n    } else if txt.contains(\"\
    ,\") {\n        words = txt.split(separator: \",\").map { String($0) }\n    }\
    \ else {\n        var count = 0\n        for i in txt.lowercased() {\n       \
    \     let value = Int(i.asciiValue!) - 97\n            if value % 2 == 1 {\n \
    \               count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n    return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpew2vjo0v/tmpew2vjo0v.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb94c0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb94901b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb94901988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb949007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpew2vjo0v                        0x0000562e015a17f3 <unavailable> + 10227

    5    libc.so.6                          0x00002abb94df6460 __libc_start_main +
    245

    6    tmpew2vjo0v                        0x0000562e015a0a69 <unavailable> + 6761

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n  if txt.contains(\" \") {\n    return .success(txt.split(separator:\
    \ \" \").map {String($0)})\n  } else if txt.contains(\",\") {\n    return .success(txt.split(separator:\
    \ \",\").map {String($0)})\n  } else {\n    return .failure(txt.reduce(0) { $0\
    \ + (($1.asciiValue! - Int(UnicodeScalar(\"a\").value)) % 2) })\n  }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpjjakui2i.swift:20:57: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n    return .failure(txt.reduce(0) { $0 + (($1.asciiValue!\
    \ - Int(UnicodeScalar(\"a\").value)) % 2) })\n                               \
    \                         ^\n                                           Int( \
    \         )\n"
  stdout: ''
  timestamp: 1660011885
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: '/tmp/tmpwhtfihq_.swift:16:1: error: missing return in global function expected
    to return ''Result<[String], Int>''

    }

    ^

    '
  stdout: ''
  timestamp: 1660011876
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let firstChar = txt.first {\n        if firstChar.isWhitespace\
    \ {\n            return .success(txt.split(separator: \" \").map { String($0)\
    \ })\n        } else if firstChar == \",\" {\n            return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n        } else {\n            return .failure(Int(firstChar.asciiValue!)\
    \ % 2)\n        }\n    } else {\n        return .failure(0)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpikm7to59/tmpikm7to59.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cc2f2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cc2c22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cc2c22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cc2c217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpikm7to59                        0x0000555bfee9be7c <unavailable> + 7804

    5    libc.so.6                          0x00002b1cc3117460 __libc_start_main +
    245

    6    tmpikm7to59                        0x0000555bfee9b9b9 <unavailable> + 6585

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map{ String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map{ String($0) })\n    } else {\n    \
    \    return .failure(txt.filter{ $0.isLowercase }.reduce(0) { result, char in\n\
    \            let i = char.unicodeScalars.first!.value - UnicodeScalar(\"a\").value\n\
    \            return result + (i % 2 == 0 ? 0 : 1)\n        })\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        let splitText = txt.split(separator:\
    \ \" \")\n        return .success(splitText.map { String($0) })\n    } else if\
    \ txt.contains(\",\") {\n        let splitText = txt.split(separator: \",\")\n\
    \        return .success(splitText.map { String($0) })\n    } else {\n       \
    \ let count = txt.reduce(0) {\n            if ord($1) % 2 == 0 {\n           \
    \     return $0\n            } else {\n                return $0 + 1\n       \
    \     }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpodcnjocs.swift:23:16: error: cannot find 'ord' in scope\n     \
    \       if ord($1) % 2 == 0 {\n               ^~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n  var components: [String]\n  if let index = txt.firstIndex(of: \" \"\
    ) {\n    components = txt.split(separator: \" \").map(String.init)\n  } else if\
    \ let index = txt.firstIndex(of: \",\") {\n    components = txt.split(separator:\
    \ \",\").map(String.init)\n  } else {\n    return .failure(txt.filter { \"abcdefghijklmnopqrstuvwxyz\"\
    .contains($0) }.count)\n  }\n  return .success(components)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpqccqnohe/tmpqccqnohe.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4514ca2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4514999b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4514999988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45149987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqccqnohe                        0x0000560e1ac9d363 <unavailable> + 9059

    5    libc.so.6                          0x00002b4514e8e460 __libc_start_main +
    245

    6    tmpqccqnohe                        0x0000560e1ac9c849 <unavailable> + 6217

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // To be implemented\n    if txt.contains(\" \") {\n        let\
    \ txtArr = txt.components(separatedBy: \" \")\n        return .success(txtArr)\n\
    \    }\n    else if txt.contains(\",\") {\n        let txtArr = txt.components(separatedBy:\
    \ \",\")\n        return .success(txtArr)\n    }\n    else {\n        var arr\
    \ = [Int]()\n        for c in txt {\n            let cInt = Int(c.asciiValue!)\n\
    \            if (cInt >= 97 && cInt <= 122) {\n                arr.append(cInt\
    \ - 97)\n            }\n        }\n        let arrOdd = arr.filter { $0 % 2 !=\
    \ 0 }\n        return .failure(arrOdd.count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpv42od_xt.swift:17:26: error: value of type 'String' has no member\
    \ 'components'\n        let txtArr = txt.components(separatedBy: \" \")\n    \
    \                 ~~~ ^~~~~~~~~~\n/tmp/tmpv42od_xt.swift:21:26: error: value of\
    \ type 'String' has no member 'components'\n        let txtArr = txt.components(separatedBy:\
    \ \",\")\n                     ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map{ String($0) })\n    }\n    let words2 =\
    \ txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map{\
    \ String($0) })\n    }\n    var cnt = 0\n    for i in 0..<txt.count {\n      \
    \  let c = txt[txt.index(txt.startIndex, offsetBy: i)]\n        if c >= \"a\"\
    \ && c <= \"z\" && (i % 2 == 1) {\n            cnt += 1\n        }\n    }\n  \
    \  return .failure(cnt)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.rangeOfCharacter(from: .whitespaces) != nil {\n        let\
    \ splitted = txt.components(separatedBy: .whitespaces)\n        return .success(splitted)\n\
    \    } else if txt.rangeOfCharacter(from: .init(charactersIn: \",\")) != nil {\n\
    \        let splitted = txt.components(separatedBy: \",\")\n        return .success(splitted)\n\
    \    } else {\n        var count = 0\n        let lowerLetters = Array(txt.lowercased())\n\
    \        let range = lowerLetters.startIndex..<lowerLetters.endIndex\n       \
    \ for (i, element) in lowerLetters.enumerated() {\n            if range.contains(i)\
    \ && i%2 != 0 && element.isLetter {\n                count += 1\n            }\n\
    \        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpjkrf06jj.swift:15:12: error: value of type 'String' has no member\
    \ 'rangeOfCharacter'\n    if txt.rangeOfCharacter(from: .whitespaces) != nil {\n\
    \       ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpjkrf06jj.swift:15:36: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n    if txt.rangeOfCharacter(from:\
    \ .whitespaces) != nil {\n                                  ~^~~~~~~~~~~\n/tmp/tmpjkrf06jj.swift:16:28:\
    \ error: value of type 'String' has no member 'components'\n        let splitted\
    \ = txt.components(separatedBy: .whitespaces)\n                       ~~~ ^~~~~~~~~~\n\
    /tmp/tmpjkrf06jj.swift:16:53: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n        let splitted = txt.components(separatedBy:\
    \ .whitespaces)\n                                                   ~^~~~~~~~~~~\n\
    /tmp/tmpjkrf06jj.swift:18:19: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \    } else if txt.rangeOfCharacter(from: .init(charactersIn: \",\")) != nil {\n\
    \              ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpjkrf06jj.swift:18:43: error: cannot\
    \ infer contextual base in reference to member 'init'\n    } else if txt.rangeOfCharacter(from:\
    \ .init(charactersIn: \",\")) != nil {\n                                     \
    \    ~^~~~\n/tmp/tmpjkrf06jj.swift:19:28: error: value of type 'String' has no\
    \ member 'components'\n        let splitted = txt.components(separatedBy: \",\"\
    )\n                       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpny2qak6m/tmpny2qak6m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aa09fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aa06f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aa06f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aa06f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny2qak6m                        0x0000560d60fb684c <unavailable> + 6220

    5    libc.so.6                          0x00002b1aa0be8460 __libc_start_main +
    245

    6    tmpny2qak6m                        0x0000560d60fb6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(zip(txt.lowercased(), 1...).filter { $0.0.asciiValue! < 26\
    \ && $0.1 % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp30_m54o4/tmp30_m54o4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b277482ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2774521b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2774521988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27745207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp30_m54o4                        0x000055c5cbf23523 <unavailable> + 9507

    5    libc.so.6                          0x00002b2774a16460 __libc_start_main +
    245

    6    tmp30_m54o4                        0x000055c5cbf22a09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return Result {\n        guard let firstWhitespace = txt.firstIndex(of:\
    \ \" \") else {\n            if let firstComma = txt.firstIndex(of: \",\") {\n\
    \                let strs = txt.split(separator: \",\")\n                return\
    \ strs.map { String($0) }\n            } else {\n                return txt.reduce(0)\
    \ { (res, char) in\n                    res + ((char.lowercased().unicodeScalars.first!.value\
    \ - ord(\"a\")) % 2 == 0 ? 0 : 1)\n                }\n            }\n        }\n\
    \        let strs = txt.split(separator: \" \")\n        return strs.map { String($0)\
    \ }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpemb_s4b1.swift:22:77: error: cannot find 'ord' in scope\n     \
    \               res + ((char.lowercased().unicodeScalars.first!.value - ord(\"\
    a\")) % 2 == 0 ? 0 : 1)\n                                                    \
    \                        ^~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let str = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    var ret = [String]()\n    var arr = [Character]()\n    var cnt = 0\n    for\
    \ i in str {\n        if i.isWhitespace || i == \",\" {\n            if arr.count\
    \ != 0 {\n                ret.append(String(arr))\n                arr.removeAll()\n\
    \            }\n        } else {\n            arr.append(i)\n            if i.isLowercase\
    \ {\n                cnt += Int(i.asciiValue!) - Int(UnicodeScalar(\"a\").value)\n\
    \            }\n        }\n    }\n    if arr.count != 0 {\n        ret.append(String(arr))\n\
    \    }\n    if str.count > 0 && ret.count == 0 {\n        return .failure(cnt)\n\
    \    }\n    return .success(ret)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5bbunifm.swift:15:19: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let str = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \              ~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp5bbunifm.swift:15:43: error: cannot\
    \ infer contextual base in reference to member 'whitespacesAndNewlines'\n    let\
    \ str = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n                \
    \                         ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    func split_string(txt: String, by: Character) -> [String] {\n  \
    \      var result: [String] = []\n        var substring: String = \"\"\n     \
    \   for char in txt {\n            if char == by {\n                result.append(substring)\n\
    \                substring = \"\"\n            } else {\n                substring.append(char)\n\
    \            }\n        }\n        result.append(substring)\n        return result\n\
    \    }\n    \n    let words = split_string(txt: txt, by: \" \")\n    if words.count\
    \ == 1 {\n        let letters = words[0].compactMap({ $0.asciiValue })\n     \
    \   let odd_letters = letters.filter({ $0 % 2 == 1 })\n        return .failure(odd_letters.count)\n\
    \    }\n    return .success(words)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpbzhi3aw5/tmpbzhi3aw5.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09a1917c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09a160eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09a160e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09a160d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzhi3aw5                        0x0000557ae4414fae <unavailable> + 8110

    5    libc.so.6                          0x00002b09a1b03460 __libc_start_main +
    245

    6    tmpbzhi3aw5                        0x0000557ae4414939 <unavailable> + 6457

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n  let splitOnWhitespace = txt.split(separator: \" \")\n  if splitOnWhitespace.count\
    \ > 1 {\n    return .success(splitOnWhitespace.map{String($0)})\n  }\n  let splitOnComma\
    \ = txt.split(separator: \",\")\n  if splitOnComma.count > 1 {\n    return .success(splitOnComma.map{String($0)})\n\
    \  }\n  let odds = txt.filter{(UnicodeScalar(String($0))!.value - 97) % 2 == 1}.count\n\
    \  return .failure(odds)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    fatalError(\"TODO\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpm6idphbf/tmpm6idphbf.swift:15: Fatal error: TODO

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e04737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e0442eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e0442e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e0442d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6idphbf                        0x000055c1b186a328 <unavailable> + 9000

    5    tmpm6idphbf                        0x000055c1b1869689 <unavailable> + 5769

    6    libc.so.6                          0x00002b1e04923460 __libc_start_main +
    245

    7    tmpm6idphbf                        0x000055c1b1869389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map{String($0)})\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map{String($0)})\n    } else {\n      \
    \  return .failure(txt.map{ $0.asciiValue! }.filter{ $0 % 2 == 1 }.count)\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpwrdol7u_/tmpwrdol7u_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0091cf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00919ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00919eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00919ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwrdol7u_                        0x000055ef2f0485cb <unavailable> + 9675

    5    libc.so.6                          0x00002b0091ee0460 __libc_start_main +
    245

    6    tmpwrdol7u_                        0x000055ef2f047979 <unavailable> + 6521

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    fatalError(\"Not implemented\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpn8oet6ec/tmpn8oet6ec.swift:15: Fatal error: Not implemented

    Current stack trace:

    0    libswiftCore.so                    0x00002b282b15ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b282ae55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b282ae55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b282ae547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8oet6ec                        0x000055c923729328 <unavailable> + 9000

    5    tmpn8oet6ec                        0x000055c923728689 <unavailable> + 5769

    6    libc.so.6                          0x00002b282b34a460 __libc_start_main +
    245

    7    tmpn8oet6ec                        0x000055c923728389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 0
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0 >= \"a\" && $0 <= \"z\" }.map { $0.unicodeScalars.first!.value\
    \ - \"a\".unicodeScalars.first!.value }.filter { $0 % 2 == 1 }.count)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().enumerated().filter({ $0.offset % 2 == 0\
    \ }).filter({ ord($0.element) % 2 == 1 }).count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpedf21iic.swift:20:95: error: cannot find 'ord' in scope\n     \
    \   return .failure(txt.lowercased().enumerated().filter({ $0.offset % 2 == 0\
    \ }).filter({ ord($0.element) % 2 == 1 }).count)\n                           \
    \                                                                   ^~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    fatalError(\"TODO\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpm6idphbf/tmpm6idphbf.swift:15: Fatal error: TODO

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e04737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e0442eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e0442e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e0442d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6idphbf                        0x000055c1b186a328 <unavailable> + 9000

    5    tmpm6idphbf                        0x000055c1b1869689 <unavailable> + 5769

    6    libc.so.6                          0x00002b1e04923460 __libc_start_main +
    245

    7    tmpm6idphbf                        0x000055c1b1869389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let index = txt.range(of: \" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if let index = txt.range(of: \",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var cnt = 0\n        let str = txt.lowercased()\n\
    \        for char in str {\n            if ord(char) % 2 == 1 {\n            \
    \    cnt += 1\n            }\n        }\n        return .failure(cnt)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpz9ukud_k.swift:15:24: error: value of type 'String' has no member\
    \ 'range'\n    if let index = txt.range(of: \" \") {\n                   ~~~ ^~~~~\n\
    /tmp/tmpz9ukud_k.swift:16:29: error: value of type 'String' has no member 'components'\n\
    \        return .success(txt.components(separatedBy: \" \"))\n               \
    \         ~~~ ^~~~~~~~~~\n/tmp/tmpz9ukud_k.swift:17:31: error: value of type 'String'\
    \ has no member 'range'\n    } else if let index = txt.range(of: \",\") {\n  \
    \                        ~~~ ^~~~~\n/tmp/tmpz9ukud_k.swift:18:29: error: value\
    \ of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpz9ukud_k.swift:23:16:\
    \ error: cannot find 'ord' in scope\n            if ord(char) % 2 == 1 {\n   \
    \            ^~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.reduce(0) { (sum, c) in\n            return sum + ((c.unicodeScalars.first!.value\
    \ - ord(\"a\")) % 2 == 0 ? 0 : 1)\n        })\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpdpedlpx8.swift:21:60: error: cannot find 'ord' in scope\n     \
    \       return sum + ((c.unicodeScalars.first!.value - ord(\"a\")) % 2 == 0 ?\
    \ 0 : 1)\n                                                           ^~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let arr = txt.components(separatedBy: \" \")\n    if arr.count >\
    \ 1 {\n        return .success(arr)\n    }\n    let arr1 = txt.components(separatedBy:\
    \ \",\")\n    if arr1.count > 1 {\n        return .success(arr1)\n    }\n    let\
    \ numbers = txt.compactMap { $0.wholeNumberValue }\n    let sum = numbers.reduce(0,\
    \ +)\n    return .failure(sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpfuzor6rn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let arr = txt.components(separatedBy: \" \")\n           \
    \   ~~~ ^~~~~~~~~~\n/tmp/tmpfuzor6rn.swift:19:20: error: value of type 'String'\
    \ has no member 'components'\n    let arr1 = txt.components(separatedBy: \",\"\
    )\n               ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let _ = txt.range(of: \" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if let _ = txt.range(of: \",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var cnt = 0\n        for ch in txt {\n      \
    \      if (ch >= \"a\" && ch <= \"z\") {\n                if (Int(ch.asciiValue!)\
    \ % 2 == 1) {\n                    cnt += 1\n                }\n            }\n\
    \        }\n        return .failure(cnt)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5gur_lle.swift:15:20: error: value of type 'String' has no member\
    \ 'range'\n    if let _ = txt.range(of: \" \") {\n               ~~~ ^~~~~\n/tmp/tmp5gur_lle.swift:16:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmp5gur_lle.swift:17:27:\
    \ error: value of type 'String' has no member 'range'\n    } else if let _ = txt.range(of:\
    \ \",\") {\n                      ~~~ ^~~~~\n/tmp/tmp5gur_lle.swift:18:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    fatalError(\"todo!\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp11pei5vy/tmp11pei5vy.swift:15: Fatal error: todo!

    Current stack trace:

    0    libswiftCore.so                    0x00002b65ed901c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65ed5f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65ed5f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65ed5f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11pei5vy                        0x000055965e78d328 <unavailable> + 9000

    5    tmp11pei5vy                        0x000055965e78c689 <unavailable> + 5769

    6    libc.so.6                          0x00002b65edaed460 __libc_start_main +
    245

    7    tmp11pei5vy                        0x000055965e78c389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let x = txt.split(separator: \" \").first, let y = txt.split(separator:\
    \ \" \").last {\n        return .success([String(x), String(y)])\n    } else if\
    \ let x = txt.split(separator: \",\").first, let y = txt.split(separator: \",\"\
    ).last {\n        return .success([String(x), String(y)])\n    } else {\n    \
    \    var characters = Array(txt)\n        var odd = 0\n        for i in 0..<characters.count\
    \ {\n            let current = characters[i]\n            if current.lowercased()\
    \ == current {\n                if let ascii = current.asciiValue {\n        \
    \            if ascii % 2 == 1 {\n                        odd += 1\n         \
    \           }\n                }\n            }\n        }\n        return .failure(odd)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp50iyjsqo.swift:24:37: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'String.Element' (aka 'Character')\n      \
    \      if current.lowercased() == current {\n               ~~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~~\n/tmp/tmp50iyjsqo.swift:24:37: note: overloads for '==' exist with\
    \ these partially matching parameter lists: (Character, Character), (String, String)\n\
    \            if current.lowercased() == current {\n                          \
    \          ^\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var count = 0\n\
    \    for i in txt {\n        if let index = alphabet.firstIndex(of: i) {\n   \
    \         count += 1\n            alphabet.remove(at: index)\n        }\n    }\n\
    \    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpqfy2b4f8.swift:24:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpqfy2b4f8.swift:26:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // your code here\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpahl4oxec/tmpahl4oxec.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae616ae2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6167d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6167d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6167d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahl4oxec                        0x000056293da6484c <unavailable> + 6220

    5    libc.so.6                          0x00002ae616cce460 __libc_start_main +
    245

    6    tmpahl4oxec                        0x000056293da64389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.filter { $0.isLowercase }.count % 2)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzp7irgdq/tmpzp7irgdq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ddff8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ddfc84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ddfc84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ddfc837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzp7irgdq                        0x000055c1be1d03e3 <unavailable> + 9187

    5    libc.so.6                          0x00002b3de0179460 __libc_start_main +
    245

    6    tmpzp7irgdq                        0x000055c1be1cf8c9 <unavailable> + 6345

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var count = 0\n        for c in txt {\n            count += Int(c.asciiValue!)\
    \ % 2\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpoagj8_uy/tmpoagj8_uy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54155b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54152adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54152ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54152ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoagj8_uy                        0x0000555fa44d465b <unavailable> + 9819

    5    libc.so.6                          0x00002b54157a2460 __libc_start_main +
    245

    6    tmpoagj8_uy                        0x0000555fa44d3a09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your code here\n    if txt.contains(\" \") {\n        return\
    \ .success(txt.split(separator: \" \").map { String($0) })\n    } else if txt.contains(\"\
    ,\") {\n        return .success(txt.split(separator: \",\").map { String($0) })\n\
    \    } else {\n        var count = 0\n        for i in txt.lowercased() {\n  \
    \          if Int(i.asciiValue!) % 2 == 1 {\n                count += 1\n    \
    \        }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpopbd5za0/tmpopbd5za0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affbb412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affbb109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affbb109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affbb1087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopbd5za0                        0x000055c51afa46bb <unavailable> + 9915

    5    libc.so.6                          0x00002affbb5fe460 __libc_start_main +
    245

    6    tmpopbd5za0                        0x000055c51afa3a69 <unavailable> + 6761

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpmz3getjb/tmpmz3getjb.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98ca8b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98ca5abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98ca5ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98ca5aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmz3getjb                        0x000055a337e4e84c <unavailable> + 6220

    5    libc.so.6                          0x00002b98caaa0460 __libc_start_main +
    245

    6    tmpmz3getjb                        0x000055a337e4e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.rangeOfCharacter(from: .whitespaces) != nil {\n        return\
    \ .success(txt.components(separatedBy: .whitespaces))\n    } else if txt.rangeOfCharacter(from:\
    \ \",\") != nil {\n        return .success(txt.components(separatedBy: \",\"))\n\
    \    } else {\n        var count = 0\n        for char in txt {\n            if\
    \ let ord = UnicodeScalar(String(char))?.value {\n                if Int(ord)\
    \ % 2 == 1 {\n                    count += 1\n                }\n            }\n\
    \        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6yw7hcsz.swift:15:12: error: value of type 'String' has no member\
    \ 'rangeOfCharacter'\n    if txt.rangeOfCharacter(from: .whitespaces) != nil {\n\
    \       ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp6yw7hcsz.swift:15:36: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n    if txt.rangeOfCharacter(from:\
    \ .whitespaces) != nil {\n                                  ~^~~~~~~~~~~\n/tmp/tmp6yw7hcsz.swift:16:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ .whitespaces))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmp6yw7hcsz.swift:16:54:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \       return .success(txt.components(separatedBy: .whitespaces))\n         \
    \                                           ~^~~~~~~~~~~\n/tmp/tmp6yw7hcsz.swift:17:19:\
    \ error: value of type 'String' has no member 'rangeOfCharacter'\n    } else if\
    \ txt.rangeOfCharacter(from: \",\") != nil {\n              ~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp6yw7hcsz.swift:18:29: error: value of type 'String' has no member 'components'\n\
    \        return .success(txt.components(separatedBy: \",\"))\n               \
    \         ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Your solution here\n    return .failure(0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpna7l0wlg/tmpna7l0wlg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3ca6cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3ca3c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3ca3c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3ca3c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpna7l0wlg                        0x0000559994fd084c <unavailable> + 6220

    5    libc.so.6                          0x00002ab3ca8b9460 __libc_start_main +
    245

    6    tmpna7l0wlg                        0x0000559994fd0389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().filter{$0.isLetter}.filter{$0.asciiValue!\
    \ % 2 == 1}.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpiuf_rb0v/tmpiuf_rb0v.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d64befc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d648e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d648e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d648e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuf_rb0v                        0x00005629b121d5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b2d64ddb460 __libc_start_main +
    245

    6    tmpiuf_rb0v                        0x00005629b121c969 <unavailable> + 6505

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let whitespace = \" \"\n    let comma = \",\"\n    let successList\
    \ = txt.split(separator: Character(whitespace)).map(String.init)\n    if successList.count\
    \ > 1 {\n        return .success(successList)\n    }\n    let commaList = txt.split(separator:\
    \ Character(comma)).map(String.init)\n    if commaList.count > 1 {\n        return\
    \ .success(commaList)\n    }\n    var oddOrder = 0\n    txt.lowercased().map {\n\
    \        if \"a\"...\"z\" ~= $0 {\n            if ($0.asciiValue! - \"a\".asciiValue!)\
    \ % 2 == 1 {\n                oddOrder += 1\n            }\n        }\n    }\n\
    \    return .failure(oddOrder)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpwmfyavtz.swift:28:38: error: value of type 'String' has no member\
    \ 'asciiValue'\n            if ($0.asciiValue! - \"a\".asciiValue!) % 2 == 1 {\n\
    \                                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let split = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(split)\n    } else if let split = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(split)\n   \
    \ } else {\n        return .failure(txt.filter({ $0.isLowercase }).count % 2)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp5hsoulbe/tmp5hsoulbe.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5819873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b581956ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b581956a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58195697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hsoulbe                        0x00005566f367acbe <unavailable> + 7358

    5    libc.so.6                          0x00002b5819a5f460 __libc_start_main +
    245

    6    tmp5hsoulbe                        0x00005566f367a649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var count = 0\n        for (index, character) in txt.enumerated() {\n  \
    \          if index % 2 == 0 && character >= \"a\" && character <= \"z\" {\n \
    \               count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp9ehe2327/tmp9ehe2327.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a8cc5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a8c952b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a8c952988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a8c9517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ehe2327                        0x00005603fdedd6fb <unavailable> + 9979

    5    libc.so.6                          0x00002b0a8ce47460 __libc_start_main +
    245

    6    tmp9ehe2327                        0x00005603fdedcaa9 <unavailable> + 6825

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your code here\n    return Result<[String], Int>(catching: {\
    \ () -> ([String], Int) in\n        if txt.range(of: \" \") != nil {\n       \
    \     let result = txt.split(separator: \" \")\n            return (result.map\
    \ { String($0) }, 0)\n        } else if txt.range(of: \",\") != nil {\n      \
    \      let result = txt.split(separator: \",\")\n            return (result.map\
    \ { String($0) }, 0)\n        } else {\n            var count = 0\n          \
    \  for ch in txt {\n                if (ch >= \"a\" && ch <= \"z\") {\n      \
    \              let val = ch.asciiValue! - 97\n                    if (val % 2\
    \ == 1) {\n                        count += 1\n                    }\n       \
    \         }\n            }\n            return ([], count)\n        }\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpnsfknuv_.swift:16:12: error: referencing initializer 'init(catching:)'\
    \ on 'Result' requires the types 'Int' and 'any Error' be equivalent\n    return\
    \ Result<[String], Int>(catching: { () -> ([String], Int) in\n           ^\nSwift.Result:1:11:\
    \ note: where 'Failure' = 'Int'\nextension Result where Failure == Error {\n \
    \         ^\n/tmp/tmpnsfknuv_.swift:16:52: error: declared closure result '([String],\
    \ Int)' is incompatible with contextual type '[String]'\n    return Result<[String],\
    \ Int>(catching: { () -> ([String], Int) in\n                                \
    \                   ^~~~~~~~~~~~~~~\n                                        \
    \           [String]\n/tmp/tmpnsfknuv_.swift:17:16: error: value of type 'String'\
    \ has no member 'range'\n        if txt.range(of: \" \") != nil {\n          \
    \ ~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your code here...\n    var splitWords = [String]()\n    var lowerCaseLetters\
    \ = \"\"\n    for i in txt {\n        if i.isLetter {\n            lowerCaseLetters\
    \ += String(i).lowercased()\n        }\n    }\n    if !lowerCaseLetters.isEmpty\
    \ {\n        var oddCounter = 0\n        for i in 0..<lowerCaseLetters.count {\n\
    \            let ch = lowerCaseLetters[lowerCaseLetters.index(lowerCaseLetters.startIndex,\
    \ offsetBy: i)]\n            let order = Int(ch.asciiValue!) - Int(Character(\"\
    a\").asciiValue!)\n            if order % 2 == 1 {\n                oddCounter\
    \ += 1\n            }\n        }\n        return .failure(oddCounter)\n    }\n\
    \    if txt.contains(\" \") {\n        splitWords = txt.components(separatedBy:\
    \ \" \")\n    } else if txt.contains(\",\") {\n        splitWords = txt.components(separatedBy:\
    \ \",\")\n    }\n    return .success(splitWords)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzq_bvtf0.swift:35:26: error: value of type 'String' has no member\
    \ 'components'\n        splitWords = txt.components(separatedBy: \" \")\n    \
    \                 ~~~ ^~~~~~~~~~\n/tmp/tmpzq_bvtf0.swift:37:26: error: value of\
    \ type 'String' has no member 'components'\n        splitWords = txt.components(separatedBy:\
    \ \",\")\n                     ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpny2qak6m/tmpny2qak6m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aa09fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aa06f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aa06f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aa06f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny2qak6m                        0x0000560d60fb684c <unavailable> + 6220

    5    libc.so.6                          0x00002b1aa0be8460 __libc_start_main +
    245

    6    tmpny2qak6m                        0x0000560d60fb6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.filter { \"abcdefghijklmnopqrstuvwxyz\".contains($0)\
    \ }.count % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp7xejtu1a/tmp7xejtu1a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba40210cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba401e03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba401e03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba401e027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xejtu1a                        0x0000564740ff2383 <unavailable> + 9091

    5    libc.so.6                          0x00002ba4022f8460 __libc_start_main +
    245

    6    tmp7xejtu1a                        0x0000564740ff1869 <unavailable> + 6249

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.lowercased().enumerated().filter { $0.offset % 2 == 0\
    \ }.map { $0.element }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpkierbe5h/tmpkierbe5h.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ec1e34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ec1b2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ec1b2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ec1b2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkierbe5h                        0x00005565dce3662b <unavailable> + 9771

    5    libc.so.6                          0x00002b1ec2020460 __libc_start_main +
    245

    6    tmpkierbe5h                        0x00005565dce359d9 <unavailable> + 6617

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n  let result = txt.components(separatedBy: CharacterSet.whitespaces)\n\
    \  if result.count > 1 {\n    return .success(result)\n  }\n  let result2 = txt.components(separatedBy:\
    \ \",\")\n  if result2.count > 1 {\n    return .success(result2)\n  }\n  var count\
    \ = 0\n  for char in txt {\n    if (Int(char.asciiValue!) - 97) % 2 == 1 {\n \
    \     count += 1\n    }\n  }\n  return .failure(count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpmnzcyu35.swift:15:44: error: cannot find 'CharacterSet' in scope\n\
    \  let result = txt.components(separatedBy: CharacterSet.whitespaces)\n      \
    \                                     ^~~~~~~~~~~~\n/tmp/tmpmnzcyu35.swift:15:20:\
    \ error: value of type 'String' has no member 'components'\n  let result = txt.components(separatedBy:\
    \ CharacterSet.whitespaces)\n               ~~~ ^~~~~~~~~~\n/tmp/tmpmnzcyu35.swift:19:21:\
    \ error: value of type 'String' has no member 'components'\n  let result2 = txt.components(separatedBy:\
    \ \",\")\n                ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter {\n            Character(\"a\").asciiValue!\
    \ + txt.lowercased().firstIndex(of: $0)! & 1 == 1\n        }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpsv1hou2r.swift:21:77: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'UInt8'\n            Character(\"a\").asciiValue!\
    \ + txt.lowercased().firstIndex(of: $0)! & 1 == 1\n                          \
    \                                                  ^\n"
  stdout: ''
  timestamp: 1660011880
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    fatalError(\"Not implemented\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpn8oet6ec/tmpn8oet6ec.swift:15: Fatal error: Not implemented

    Current stack trace:

    0    libswiftCore.so                    0x00002b282b15ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b282ae55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b282ae55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b282ae547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8oet6ec                        0x000055c923729328 <unavailable> + 9000

    5    tmpn8oet6ec                        0x000055c923728689 <unavailable> + 5769

    6    libc.so.6                          0x00002b282b34a460 __libc_start_main +
    245

    7    tmpn8oet6ec                        0x000055c923728389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: write your code here\n    return .failure(0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp3biz1wvo/tmp3biz1wvo.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9cb30fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9cb006b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9cb006988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9cb0057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3biz1wvo                        0x000055556254284c <unavailable> + 6220

    5    libc.so.6                          0x00002ad9cb4fb460 __libc_start_main +
    245

    6    tmp3biz1wvo                        0x0000555562542389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: .whitespaces)\n    if words.count\
    \ == 1 {\n        let byCommas = words[0].components(separatedBy: \",\")\n   \
    \     if byCommas.count == 1 {\n            var count = 0\n            for c in\
    \ byCommas[0] {\n                if let num = UInt8(String(c).utf8) {\n      \
    \              if num % 2 == 1 {\n                        count += 1\n       \
    \             }\n                }\n            }\n            return .failure(count)\n\
    \        } else {\n            return .success(byCommas)\n        }\n    } else\
    \ {\n        return .success(words)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp25tpp49i.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: .whitespaces)\n  \
    \              ~~~ ^~~~~~~~~~\n/tmp/tmp25tpp49i.swift:15:46: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n    let words = txt.components(separatedBy:\
    \ .whitespaces)\n                                            ~^~~~~~~~~~~\n/tmp/tmp25tpp49i.swift:21:30:\
    \ error: initializer 'init(_:radix:)' requires that 'String.UTF8View' conform\
    \ to 'StringProtocol'\n                if let num = UInt8(String(c).utf8) {\n\
    \                             ^\nSwift.FixedWidthInteger:2:23: note: where 'S'\
    \ = 'String.UTF8View'\n    @inlinable public init?<S>(_ text: S, radix: Int =\
    \ 10) where S : StringProtocol\n                      ^\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().enumerated().filter({ $0.1.isLetter &&\
    \ $0.0 % 2 == 0 }).count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpg7mgqkcr/tmpg7mgqkcr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f892bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f88fb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f88fb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f88fb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7mgqkcr                        0x0000556df79285eb <unavailable> + 9707

    5    libc.so.6                          0x00002b3f894a8460 __libc_start_main +
    245

    6    tmpg7mgqkcr                        0x0000556df7927999 <unavailable> + 6553

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        var count = 0\n        for c in txt {\n            if c >=\
    \ \"a\" && c <= \"z\" && c.asciiValue! % 2 == 1 {\n                count += 1\n\
    \            }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpvpdh99vz/tmpvpdh99vz.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28dcf20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28dcc17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28dcc17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28dcc167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvpdh99vz                        0x000055732b781cbe <unavailable> + 7358

    5    libc.so.6                          0x00002b28dd10c460 __libc_start_main +
    245

    6    tmpvpdh99vz                        0x000055732b781649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(Int(txt.lowercased().filter { \"abcdefghijklmnopqrstuvwxyz\"\
    .contains($0) && !$0.isMultiple(of: 2) }.count))\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp3trjmv0j.swift:20:104: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isMultiple'\n        return .failure(Int(txt.lowercased().filter\
    \ { \"abcdefghijklmnopqrstuvwxyz\".contains($0) && !$0.isMultiple(of: 2) }.count))\n\
    \                                                                            \
    \                        ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpveiv_crd/tmpveiv_crd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0032a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveiv_crd                        0x00005577e6fc884c <unavailable> + 6220

    5    libc.so.6                          0x00002b0032f0e460 __libc_start_main +
    245

    6    tmpveiv_crd                        0x00005577e6fc8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.rangeOfCharacter(from: .whitespaces) != nil {\n        return\
    \ .success(txt.components(separatedBy: .whitespaces))\n    } else if txt.rangeOfCharacter(from:\
    \ \",\") != nil {\n        return .success(txt.components(separatedBy: \",\"))\n\
    \    } else {\n        var count = 0\n        for char in txt {\n            if\
    \ let i = \"abcdefghijklmnopqrstuvwxyz\".index(of: char), i % 2 == 1 {\n     \
    \           count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6odjhq6x.swift:15:12: error: value of type 'String' has no member\
    \ 'rangeOfCharacter'\n    if txt.rangeOfCharacter(from: .whitespaces) != nil {\n\
    \       ~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp6odjhq6x.swift:15:36: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n    if txt.rangeOfCharacter(from:\
    \ .whitespaces) != nil {\n                                  ~^~~~~~~~~~~\n/tmp/tmp6odjhq6x.swift:16:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ .whitespaces))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmp6odjhq6x.swift:16:54:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \       return .success(txt.components(separatedBy: .whitespaces))\n         \
    \                                           ~^~~~~~~~~~~\n/tmp/tmp6odjhq6x.swift:17:19:\
    \ error: value of type 'String' has no member 'rangeOfCharacter'\n    } else if\
    \ txt.rangeOfCharacter(from: \",\") != nil {\n              ~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp6odjhq6x.swift:18:29: error: value of type 'String' has no member 'components'\n\
    \        return .success(txt.components(separatedBy: \",\"))\n               \
    \         ~~~ ^~~~~~~~~~\n/tmp/tmp6odjhq6x.swift:22:53: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n            if let i = \"abcdefghijklmnopqrstuvwxyz\"\
    .index(of: char), i % 2 == 1 {\n                                             \
    \       ^\n/tmp/tmp6odjhq6x.swift:22:53: note: use 'firstIndex(of:)' instead\n\
    \            if let i = \"abcdefghijklmnopqrstuvwxyz\".index(of: char), i % 2\
    \ == 1 {\n                                                    ^~~~~\n        \
    \                                            firstIndex\n/tmp/tmp6odjhq6x.swift:22:70:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            if let i = \"abcdefghijklmnopqrstuvwxyz\".index(of: char),\
    \ i % 2 == 1 {\n                                                             \
    \        ^\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let characters = Array(txt.lowercased())\n    let length = characters.count\n\
    \    var counter = 0\n    var i = 0\n    var split = \"\"\n    var result = [String]()\n\
    \    while i < length {\n        if characters[i] == \" \" {\n            result.append(split)\n\
    \            split = \"\"\n        } else if characters[i] == \",\" {\n      \
    \      result.append(split)\n            split = \"\"\n        } else if i ==\
    \ length - 1 {\n            split += String(characters[i])\n            result.append(split)\n\
    \        } else {\n            split += String(characters[i])\n        }\n   \
    \     if (i + 1) % 2 == 0 {\n            counter += 1\n        }\n        i +=\
    \ 1\n    }\n    if result.count == 0 {\n        return .failure(counter)\n   \
    \ } else {\n        return .success(result)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp25fp7lkc/tmp25fp7lkc.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0730b2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0730822b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0730822988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07308217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp25fp7lkc                        0x0000560a2411cd6c <unavailable> + 7532

    5    libc.so.6                          0x00002b0730d17460 __libc_start_main +
    245

    6    tmp25fp7lkc                        0x0000560a2411c8a9 <unavailable> + 6313

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let split_on_whitespace = txt.split(separator: \" \")\n    let is_empty\
    \ = split_on_whitespace.count == 1 && split_on_whitespace[0].isEmpty\n    if split_on_whitespace.count\
    \ > 1 || is_empty {\n        return .success(split_on_whitespace.map(String.init))\n\
    \    }\n    let split_on_comma = txt.split(separator: \",\")\n    if split_on_comma.count\
    \ > 1 {\n        return .success(split_on_comma.map(String.init))\n    }\n   \
    \ var result = 0\n    for (i, char) in txt.lowercased().enumerated() {\n     \
    \   if i % 2 == 0 {\n            result += Int(char.asciiValue! - Character(\"\
    a\").asciiValue!)\n        }\n    }\n    return .failure(result)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6yztga97/tmp6yztga97.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc21302c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc20ff9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc20ff9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc20ff87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6yztga97                        0x000055b0d0942783 <unavailable> + 10115

    5    libc.so.6                          0x00002abc214ee460 __libc_start_main +
    245

    6    tmp6yztga97                        0x000055b0d0941c69 <unavailable> + 7273

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpveiv_crd/tmpveiv_crd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0032a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveiv_crd                        0x00005577e6fc884c <unavailable> + 6220

    5    libc.so.6                          0x00002b0032f0e460 __libc_start_main +
    245

    6    tmpveiv_crd                        0x00005577e6fc8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   return .failure(txt.reduce(0) { (res, c) in\n            return res + ((c.asciiValue!\
    \ - 97) % 2)\n        })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpd711yejx.swift:21:40: error: cannot convert value of type 'UInt8'\
    \ to expected argument type 'Int'\n            return res + ((c.asciiValue! -\
    \ 97) % 2)\n                                       ^\n                       \
    \    Int(         )\n"
  stdout: ''
  timestamp: 1660011880
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init), !words.isEmpty\
    \ {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init), !words.isEmpty {\n        return .success(words)\n\
    \    } else {\n        let odd = txt.filter { \"a\" <= $0 && $0 <= \"z\" }.filter\
    \ { $0.unicodeScalars.first!.value % 2 == 1 }\n        return .failure(odd.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpzlu3m34k.swift:17:15: error: initializer for conditional binding\
    \ must have Optional type, not '[String]'\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init), !words.isEmpty {\n              ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzlu3m34k.swift:15:8: error: initializer for conditional binding must have\
    \ Optional type, not '[String]'\n    if let words = txt.split(separator: \" \"\
    ).map(String.init), !words.isEmpty {\n       ^           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // Your code here!\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzm9okttx/tmpzm9okttx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec1b8dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec1b5d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec1b5d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec1b5d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzm9okttx                        0x000055f44290a84c <unavailable> + 6220

    5    libc.so.6                          0x00002aec1bacb460 __libc_start_main +
    245

    6    tmpzm9okttx                        0x000055f44290a389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if !txt.contains(\" \") {\n        if !txt.contains(\",\") {\n \
    \           //\n            // TODO\n            //\n            return .failure(txt.count)\n\
    \        } else {\n            let splitComma = txt.split(separator: \",\")\n\
    \            var splitCommaInString = [String]()\n            for item in splitComma\
    \ {\n                splitCommaInString.append(String(item))\n            }\n\
    \            return .success(splitCommaInString)\n        }\n    } else {\n  \
    \      let splitWhitespace = txt.split(separator: \" \")\n        var splitWhitespaceInString\
    \ = [String]()\n        for item in splitWhitespace {\n            splitWhitespaceInString.append(String(item))\n\
    \        }\n        return .success(splitWhitespaceInString)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp6nokibx3/tmp6nokibx3.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20a94b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20a91b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20a91b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20a91af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6nokibx3                        0x00005580ef5fd3c3 <unavailable> + 9155

    5    libc.so.6                          0x00002b20a96a5460 __libc_start_main +
    245

    6    tmp6nokibx3                        0x00005580ef5fc8a9 <unavailable> + 6313

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // your code here\n    if let index = txt.firstIndex(of: \" \")\
    \ {\n        return .success([String(txt[..<index]), String(txt[index...])])\n\
    \    } else if let index = txt.firstIndex(of: \",\") {\n        return .success([String(txt[..<index]),\
    \ String(txt[index...])])\n    } else {\n        var count = 0\n        let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        for (index, _) in alphabet.enumerated()\
    \ {\n            if index % 2 == 1 {\n                count += txt.filter{ $0\
    \ == alphabet[index] }.count\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp8sts0r8y.swift:25:44: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                count\
    \ += txt.filter{ $0 == alphabet[index] }.count\n                             \
    \              ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    \n    func count_odd_letters(text: String) -> Int {\n        return\
    \ text.reduce(0) { (total, c) in\n            let int = c.asciiValue! - 97\n \
    \           return total + (int % 2 == 0 ? 0 : 1)\n        }\n    }\n    \n  \
    \  var splitStrings = txt.split(separator: \" \")\n    if splitStrings.count >\
    \ 1 {\n        return .success(splitStrings.map{String($0)})\n    }\n    \n  \
    \  splitStrings = txt.split(separator: \",\")\n    if splitStrings.count > 1 {\n\
    \        return .success(splitStrings.map{String($0)})\n    }\n    \n    return\
    \ .failure(count_odd_letters(text: txt))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpwa7j7n6v/tmpwa7j7n6v.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a86909c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a86600b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a86600988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a865ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwa7j7n6v                        0x000056185ba3084c <unavailable> + 6220

    5    libc.so.6                          0x00002b6a86af5460 __libc_start_main +
    245

    6    tmpwa7j7n6v                        0x000056185ba30389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    let chars = txt.split(separator:\
    \ \",\")\n    let letters = txt.compactMap({ $0.isLowercase ? $0 : nil })\n  \
    \  if words.count > 1 {\n        return .success(words.map({ String($0) }))\n\
    \    } else if chars.count > 1 {\n        return .success(chars.map({ String($0)\
    \ }))\n    } else {\n        return .failure(letters.enumerated().reduce(0, {\
    \ $1.offset % 2 == 0 ? $0 + 1 : $0 }))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpbvzwhzn1/tmpbvzwhzn1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b609f39cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b609f093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b609f093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b609f0927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvzwhzn1                        0x00005648804f761b <unavailable> + 9755

    5    libc.so.6                          0x00002b609f588460 __libc_start_main +
    245

    6    tmpbvzwhzn1                        0x00005648804f69c9 <unavailable> + 6601

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    guard let first = txt.first else { return .failure(0) }\n    if\
    \ first.isLetter {\n        if txt.reduce(0, { $0 + ($1.isLetter && $1.lowercased()\
    \ == $1 ? 1 : 0) }) % 2 == 1 {\n            return .failure(txt.count)\n     \
    \   }\n    }\n    return .success(txt.split(separator: \" \").map { String($0)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpuwbde4f1.swift:17:65: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'String.Element' (aka 'Character')\n      \
    \  if txt.reduce(0, { $0 + ($1.isLetter && $1.lowercased() == $1 ? 1 : 0) }) %\
    \ 2 == 1 {\n                                                ~~~~~~~~~~~~~~~ ^\
    \  ~~\n/tmp/tmpuwbde4f1.swift:17:65: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Character, Character), (String, String)\n\
    \        if txt.reduce(0, { $0 + ($1.isLetter && $1.lowercased() == $1 ? 1 : 0)\
    \ }) % 2 == 1 {\n                                                            \
    \    ^\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpny2qak6m/tmpny2qak6m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aa09fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aa06f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aa06f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aa06f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny2qak6m                        0x0000560d60fb684c <unavailable> + 6220

    5    libc.so.6                          0x00002b1aa0be8460 __libc_start_main +
    245

    6    tmpny2qak6m                        0x0000560d60fb6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // YOUR CODE HERE\n    if let _ = txt.range(of: \" \") {\n     \
    \   return .success(txt.components(separatedBy: \" \"))\n    } else if let _ =\
    \ txt.range(of: \",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for c in txt {\n     \
    \       let i = Int(c.asciiValue!) - Int(UnicodeScalar(\"a\").value)\n       \
    \     if i % 2 == 1 {\n                count += 1\n            }\n        }\n\
    \        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmprj65z18d.swift:16:20: error: value of type 'String' has no member\
    \ 'range'\n    if let _ = txt.range(of: \" \") {\n               ~~~ ^~~~~\n/tmp/tmprj65z18d.swift:17:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmprj65z18d.swift:18:27:\
    \ error: value of type 'String' has no member 'range'\n    } else if let _ = txt.range(of:\
    \ \",\") {\n                      ~~~ ^~~~~\n/tmp/tmprj65z18d.swift:19:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n  return txt.split(separator: \" \").count > 1\n    ? Result.success(txt.split(separator:\
    \ \" \").map { String($0) })\n    : txt.split(separator: \",\").count > 1\n  \
    \    ? Result.success(txt.split(separator: \",\").map { String($0) })\n      :\
    \ Result.failure(txt.filter { $0.isLowercase }.count % 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpxzcyluwu/tmpxzcyluwu.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1471c2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1471922b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1471922988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14719217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxzcyluwu                        0x000055c43d0a5373 <unavailable> + 9075

    5    libc.so.6                          0x00002b1471e17460 __libc_start_main +
    245

    6    tmpxzcyluwu                        0x000055c43d0a4859 <unavailable> + 6233

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement\n    return .failure(1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpwa7j7n6v/tmpwa7j7n6v.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a86909c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a86600b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a86600988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a865ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwa7j7n6v                        0x000056185ba3084c <unavailable> + 6220

    5    libc.so.6                          0x00002b6a86af5460 __libc_start_main +
    245

    6    tmpwa7j7n6v                        0x000056185ba30389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var lowerCase = 0\n        for char in txt {\n            if let asciiValue\
    \ = char.asciiValue, asciiValue > 96, asciiValue < 123 {\n                lowerCase\
    \ += 1\n            }\n        }\n        return .failure(lowerCase)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp810e_qo6/tmp810e_qo6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae3313c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae300ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae300a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae30097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp810e_qo6                        0x000055918e1a3313 <unavailable> + 8979

    5    libc.so.6                          0x00002aaae34ff460 __libc_start_main +
    245

    6    tmp810e_qo6                        0x000055918e1a27f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let whitespace = txt.range(of: \" \") {\n        let word1 =\
    \ txt[..<whitespace.lowerBound]\n        let word2 = txt[whitespace.upperBound...]\n\
    \        return .success([String(word1), String(word2)])\n    } else if let comma\
    \ = txt.range(of: \",\") {\n        let word1 = txt[..<comma.lowerBound]\n   \
    \     let word2 = txt[comma.upperBound...]\n        return .success([String(word1),\
    \ String(word2)])\n    } else {\n        var count = 0\n        for letter in\
    \ txt {\n            if Int(letter.asciiValue! - \"a\".asciiValue!) % 2 == 1 {\n\
    \                count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpx3hnwbl2.swift:15:29: error: value of type 'String' has no member\
    \ 'range'\n    if let whitespace = txt.range(of: \" \") {\n                  \
    \      ~~~ ^~~~~\n/tmp/tmpx3hnwbl2.swift:19:31: error: value of type 'String'\
    \ has no member 'range'\n    } else if let comma = txt.range(of: \",\") {\n  \
    \                        ~~~ ^~~~~\n/tmp/tmpx3hnwbl2.swift:26:45: error: value\
    \ of type 'String' has no member 'asciiValue'\n            if Int(letter.asciiValue!\
    \ - \"a\".asciiValue!) % 2 == 1 {\n                                        ~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let idx: Int\n    if txt.contains(\" \") {\n        idx = txt.index(of:\
    \ \" \")!.encodedOffset\n    } else if txt.contains(\",\") {\n        idx = txt.index(of:\
    \ \",\")!.encodedOffset\n    } else {\n        let t = txt.lowercased()\n    \
    \    idx = t.filter({$0.isLetter}).reduce(0) {$0 + ($1.asciiValue! - Int(Character(\"\
    a\").asciiValue!) + 1) % 2}\n    }\n    return Result<[String], Int>(catching:\
    \ {\n        let spl = txt.prefix(idx).split(separator: \",\").map(String.init)\n\
    \        if txt.count > idx {\n            return [spl, txt.suffix(txt.count -\
    \ idx).split(separator: \",\").map(String.init)].joined()\n        } else {\n\
    \            return spl\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp69jykezt.swift:17:19: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        idx = txt.index(of: \" \")!.encodedOffset\n  \
    \                ^\n/tmp/tmp69jykezt.swift:17:19: note: use 'firstIndex(of:)'\
    \ instead\n        idx = txt.index(of: \" \")!.encodedOffset\n               \
    \   ^~~~~\n                  firstIndex\n/tmp/tmp69jykezt.swift:17:35: warning:\
    \ 'encodedOffset' is deprecated: encodedOffset has been deprecated as most common\
    \ usage is incorrect. Use utf16Offset(in:) to achieve the same behavior.\n   \
    \     idx = txt.index(of: \" \")!.encodedOffset\n                            \
    \      ^\n/tmp/tmp69jykezt.swift:19:19: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        idx = txt.index(of: \",\")!.encodedOffset\n  \
    \                ^\n/tmp/tmp69jykezt.swift:19:19: note: use 'firstIndex(of:)'\
    \ instead\n        idx = txt.index(of: \",\")!.encodedOffset\n               \
    \   ^~~~~\n                  firstIndex\n/tmp/tmp69jykezt.swift:19:35: warning:\
    \ 'encodedOffset' is deprecated: encodedOffset has been deprecated as most common\
    \ usage is incorrect. Use utf16Offset(in:) to achieve the same behavior.\n   \
    \     idx = txt.index(of: \",\")!.encodedOffset\n                            \
    \      ^\n/tmp/tmp69jykezt.swift:22:9: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        idx = t.filter({$0.isLetter}).reduce(0) {$0 + ($1.asciiValue!\
    \ - Int(Character(\"a\").asciiValue!) + 1) % 2}\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp69jykezt.swift:24:12: error: referencing initializer 'init(catching:)'\
    \ on 'Result' requires the types 'Int' and 'any Error' be equivalent\n    return\
    \ Result<[String], Int>(catching: {\n           ^\nSwift.Result:1:11: note: where\
    \ 'Failure' = 'Int'\nextension Result where Failure == Error {\n          ^\n\
    /tmp/tmp69jykezt.swift:27:94: error: cannot convert return expression of type\
    \ 'FlattenSequence<[[String]]>' to return type '[String]'"
  stdout: ''
  timestamp: 1660011925
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    ///\n    ///\n    ///\n    let len = txt.count\n    if len == 0\
    \ {\n        return .failure(0)\n    }\n    var count = 0\n    var txts = \"\"\
    \n    for i in txt.indices {\n        if txt[i] == \" \" {\n            txts.append(\"\
    ,\")\n        } else if txt[i] == \",\" {\n            txts.append(\",\")\n  \
    \      } else {\n            if Int((txt[i].asciiValue ?? 0) - 97) % 2 == 1 {\n\
    \                count += 1\n            }\n            txts.append(txt[i])\n\
    \        }\n    }\n    return .success(txts.split(separator: \",\").map { String($0)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let parts = txt.split(separator: \" \")\n    return parts.count\
    \ == 1 ?\n        txt.split(separator: \",\").count == 1 ?\n            Result<[String],\
    \ Int>.failure(lower_case_letters_with_odd_order(txt: txt)) :\n            Result<[String],\
    \ Int>.success(txt.split(separator: \",\").map(String.init)) :\n        Result<[String],\
    \ Int>.success(parts.map(String.init))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmphab8wvpy.swift:18:43: error: cannot find 'lower_case_letters_with_odd_order'\
    \ in scope\n            Result<[String], Int>.failure(lower_case_letters_with_odd_order(txt:\
    \ txt)) :\n                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.count { $0.isLowercase })\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpmzkns5dq.swift:20:29: error: cannot call value of non-function\
    \ type 'Int'\n        return .failure(txt.count { $0.isLowercase })\n        \
    \                    ^\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me!\n    var ret = [String]()\n    var err =\
    \ 0\n    let whitespace = CharacterSet.whitespaces\n    let comma = CharacterSet(charactersIn:\
    \ \",\")\n    if txt.rangeOfCharacter(from: whitespace) != nil {\n        ret\
    \ = txt.components(separatedBy: whitespace)\n    } else if txt.rangeOfCharacter(from:\
    \ comma) != nil {\n        ret = txt.components(separatedBy: comma)\n    } else\
    \ {\n        for i in 0..<txt.count {\n            if txt[txt.index(txt.startIndex,\
    \ offsetBy: i)].isLowercase {\n                if i % 2 == 1 {\n             \
    \       err += 1\n                }\n            }\n        }\n    }\n    if err\
    \ == 0 {\n        return .success(ret)\n    } else {\n        return .failure(err)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpa8or74xr.swift:18:22: error: cannot find 'CharacterSet' in scope\n\
    \    let whitespace = CharacterSet.whitespaces\n                     ^~~~~~~~~~~~\n\
    /tmp/tmpa8or74xr.swift:19:17: error: cannot find 'CharacterSet' in scope\n   \
    \ let comma = CharacterSet(charactersIn: \",\")\n                ^~~~~~~~~~~~\n\
    /tmp/tmpa8or74xr.swift:20:12: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \    if txt.rangeOfCharacter(from: whitespace) != nil {\n       ~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpa8or74xr.swift:21:19: error: value of type 'String' has no member 'components'\n\
    \        ret = txt.components(separatedBy: whitespace)\n              ~~~ ^~~~~~~~~~\n\
    /tmp/tmpa8or74xr.swift:22:19: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \    } else if txt.rangeOfCharacter(from: comma) != nil {\n              ~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpa8or74xr.swift:23:19: error: value of type 'String' has no member 'components'\n\
    \        ret = txt.components(separatedBy: comma)\n              ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Implement me!\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpa4gv5j7m/tmpa4gv5j7m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab95ea21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab95e718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab95e718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab95e7177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4gv5j7m                        0x000055e7a38a284c <unavailable> + 6220

    5    libc.so.6                          0x00002ab95ec0d460 __libc_start_main +
    245

    6    tmpa4gv5j7m                        0x000055e7a38a2389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(42)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpususwh4p/tmpususwh4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b6a50c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b6747b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b6747988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b67467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpususwh4p                        0x000055763e32884c <unavailable> + 6220

    5    libc.so.6                          0x00002b36b6c3c460 __libc_start_main +
    245

    6    tmpususwh4p                        0x000055763e328389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n  // TODO: your code goes here\n  let l = txt.count\n  let t = txt.replacingOccurrences(of:\
    \ \" \", with: \",\")\n  let splited = t.split(separator: \",\")\n  var oddCount\
    \ = 0\n  for c in splited{\n    var v = [Int]()\n    for i in c{\n      v.append(Int(i.asciiValue!))\n\
    \    }\n    if v.count == 1{\n      if (v[0] - 97) % 2 == 1{\n        oddCount\
    \ += 1\n      }\n    }\n  }\n  if oddCount > 0{\n    return .failure(oddCount)\n\
    \  }\n  return .success(splited.map {String($0)})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpi683ixwd.swift:17:15: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n  let t = txt.replacingOccurrences(of: \" \", with:\
    \ \",\")\n          ~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        let arrayOfWords = txt.components(separatedBy:\
    \ \" \")\n        return .success(arrayOfWords)\n    } else if txt.contains(\"\
    ,\") {\n        let arrayOfWords = txt.components(separatedBy: \",\")\n      \
    \  return .success(arrayOfWords)\n    } else {\n        var counter = 0\n    \
    \    for letter in txt {\n            if letter.isLowercase {\n              \
    \  if counter % 2 == 0 {\n                    counter += 1\n                }\n\
    \            }\n        }\n        return .failure(counter)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpj68ij7b8.swift:16:32: error: value of type 'String' has no member\
    \ 'components'\n        let arrayOfWords = txt.components(separatedBy: \" \")\n\
    \                           ~~~ ^~~~~~~~~~\n/tmp/tmpj68ij7b8.swift:19:32: error:\
    \ value of type 'String' has no member 'components'\n        let arrayOfWords\
    \ = txt.components(separatedBy: \",\")\n                           ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var sum = 0\n        for char in txt {\n            let index = Int(char.asciiValue!\
    \ - 97)\n            if index % 2 == 1 {\n                sum += 1\n         \
    \   }\n        }\n        return .failure(sum)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { \"\\($0)\" })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { \"\\($0)\" })\n    } else {\n   \
    \     return .failure(txt.lowercased().enumerated().filter { $0.offset % 2 ==\
    \ 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmps62qt9gw/tmps62qt9gw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7ce644c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ce33bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ce33b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ce33a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps62qt9gw                        0x000055f5cdee9983 <unavailable> + 10627

    5    libc.so.6                          0x00002ae7ce830460 __libc_start_main +
    245

    6    tmps62qt9gw                        0x000055f5cdee8bf9 <unavailable> + 7161

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map(String.init))\n    } else {\n     \
    \   var count = 0\n        for letter in txt {\n            if (letter.lowercased()\
    \ == letter) && Int(letter.asciiValue!) % 2 == 1 {\n                count += 1\n\
    \            }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5hfzvmsi.swift:22:37: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'Character'\n            if (letter.lowercased()\
    \ == letter) && Int(letter.asciiValue!) % 2 == 1 {\n                ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~\n/tmp/tmp5hfzvmsi.swift:22:37: note: overloads for '==' exist with\
    \ these partially matching parameter lists: (Character, Character), (String, String)\n\
    \            if (letter.lowercased() == letter) && Int(letter.asciiValue!) % 2\
    \ == 1 {\n                                    ^\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // TODO: Complete this function\n    let split_text = txt.split(separator:\
    \ \" \")\n    if !split_text.isEmpty {\n        return .success(split_text.map\
    \ {String($0)})\n    }\n    let split_comma = txt.split(separator: \",\")\n  \
    \  if !split_comma.isEmpty {\n        return .success(split_comma.map {String($0)})\n\
    \    }\n    let number = txt.lowercased().filter { ord($0) % 2 == 0}.count\n \
    \   return .failure(number)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpz7q1pwt6.swift:24:44: error: cannot find 'ord' in scope\n    let\
    \ number = txt.lowercased().filter { ord($0) % 2 == 0}.count\n               \
    \                            ^~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let txt = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    if let first = txt.first {\n        if first.isWhitespace {\n           \
    \ return split_words(txt: txt.dropFirst())\n        } else if first.isLetter {\n\
    \            let a = UnicodeScalar(\"a\")!\n            let z = UnicodeScalar(\"\
    z\")!\n            let lowercase = first.unicodeScalars.filter { $0 >= a && $0\
    \ <= z }\n            if lowercase.count == 1 {\n                let index = Int(lowercase.first!.value\
    \ - a.value)\n                if index % 2 == 1 {\n                    return\
    \ .failure(index)\n                }\n            }\n        }\n    }\n    return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpiil1g2ud.swift:15:19: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let txt = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \              ~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpiil1g2ud.swift:15:43: error: cannot\
    \ infer contextual base in reference to member 'whitespacesAndNewlines'\n    let\
    \ txt = txt.trimmingCharacters(in: .whitespacesAndNewlines)\n                \
    \                         ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiil1g2ud.swift:20:39:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            let a = UnicodeScalar(\"a\")!\n                    ~~~~~~~~~~~~~~~~~~^\n\
    \                                      \n/tmp/tmpiil1g2ud.swift:21:39: error:\
    \ cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \            let z = UnicodeScalar(\"z\")!\n                    ~~~~~~~~~~~~~~~~~~^\n\
    \                                      \n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    var numOfOddLetters = 0\n    for (index, letter) in txt.enumerated()\
    \ {\n        if index % 2 == 0 {\n            if letter.isLowercase {\n      \
    \          numOfOddLetters += 1\n            }\n        }\n    }\n    if txt.range(of:\
    \ \" \") != nil {\n        return .success(txt.components(separatedBy: \" \"))\n\
    \    } else if txt.range(of: \",\") != nil {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(numOfOddLetters)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpt874k3vp.swift:23:12: error: value of type 'String' has no member\
    \ 'range'\n    if txt.range(of: \" \") != nil {\n       ~~~ ^~~~~\n/tmp/tmpt874k3vp.swift:24:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpt874k3vp.swift:25:19:\
    \ error: value of type 'String' has no member 'range'\n    } else if txt.range(of:\
    \ \",\") != nil {\n              ~~~ ^~~~~\n/tmp/tmpt874k3vp.swift:26:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map { String($0) })\n    }\n    let values\
    \ = txt.split(separator: \",\")\n    if values.count > 1 {\n        return .success(values.map\
    \ { String($0) })\n    }\n    let oddAlphabet: [Int] = [1, 3, 5, 7, 9, 11, 15,\
    \ 17, 19, 21, 23, 25]\n    let count = txt.filter { oddAlphabet.contains(Int(UnicodeScalar($0.lowercased()).value))\
    \ }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpaaxpikkh.swift:24:84: error: value of optional type 'UnicodeScalar?'\
    \ (aka 'Optional<Unicode.Scalar>') must be unwrapped to refer to member 'value'\
    \ of wrapped base type 'UnicodeScalar' (aka 'Unicode.Scalar')\n    let count =\
    \ txt.filter { oddAlphabet.contains(Int(UnicodeScalar($0.lowercased()).value))\
    \ }.count\n                                                                  \
    \                 ^\n/tmp/tmpaaxpikkh.swift:24:84: note: chain the optional using\
    \ '?' to access member 'value' only for non-'nil' base values\n    let count =\
    \ txt.filter { oddAlphabet.contains(Int(UnicodeScalar($0.lowercased()).value))\
    \ }.count\n                                                                  \
    \                 ^\n                                                        \
    \                            ?\n/tmp/tmpaaxpikkh.swift:24:84: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    let count\
    \ = txt.filter { oddAlphabet.contains(Int(UnicodeScalar($0.lowercased()).value))\
    \ }.count\n                                                                  \
    \                 ^\n                                                        \
    \                            !\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpveiv_crd/tmpveiv_crd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0032a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveiv_crd                        0x00005577e6fc884c <unavailable> + 6220

    5    libc.so.6                          0x00002b0032f0e460 __libc_start_main +
    245

    6    tmpveiv_crd                        0x00005577e6fc8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    var r = [String]()\n    let s = txt.split(separator: \" \")\n  \
    \  let c = txt.split(separator: \",\")\n    var num = 0\n    for l in txt {\n\
    \        if String(l).lowercased() == String(l) {\n            num += 1\n    \
    \    }\n    }\n    if !s.isEmpty {\n        for i in s {\n            r.append(String(i))\n\
    \        }\n        return .success(r)\n    } else if !c.isEmpty {\n        for\
    \ i in c {\n            r.append(String(i))\n        }\n        return .success(r)\n\
    \    } else {\n        return .failure(num)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpr4hzsoi8/tmpr4hzsoi8.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af714c28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af71491fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af71491f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af71491e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4hzsoi8                        0x00005612ee1d302e <unavailable> + 8238

    5    libc.so.6                          0x00002af714e14460 __libc_start_main +
    245

    6    tmpr4hzsoi8                        0x00005612ee1d29b9 <unavailable> + 6585

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var result = 0\n        for (i, c) in txt.lowercased().enumerated() {\n\
    \            if (c.asciiValue! % 2) == 1 {\n                result += i\n    \
    \        }\n        }\n        return .failure(result)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpuarv5r0z/tmpuarv5r0z.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b295fe70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b295fb67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b295fb67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b295fb667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuarv5r0z                        0x000055874ed78553 <unavailable> + 9555

    5    libc.so.6                          0x00002b296005c460 __libc_start_main +
    245

    6    tmpuarv5r0z                        0x000055874ed77a39 <unavailable> + 6713

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpveiv_crd/tmpveiv_crd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0032a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveiv_crd                        0x00005577e6fc884c <unavailable> + 6220

    5    libc.so.6                          0x00002b0032f0e460 __libc_start_main +
    245

    6    tmpveiv_crd                        0x00005577e6fc8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(Int())\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpfzobjqsj/tmpfzobjqsj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7036bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70368a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70368a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70368a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfzobjqsj                        0x000055e09a0ff84c <unavailable> + 6220

    5    libc.so.6                          0x00002b7036d9c460 __libc_start_main +
    245

    6    tmpfzobjqsj                        0x000055e09a0ff389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words)\n    }\n    let words2 = txt.components(separatedBy:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2)\n    }\n\
    \    var count = 0\n    for (i, c) in txt.enumerated() {\n        if i % 2 ==\
    \ 0 && c.isLowercase {\n            count += 1\n        }\n    }\n    return .failure(count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp8uqfy262.swift:15:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n/tmp/tmp8uqfy262.swift:19:22: error: value of type 'String'\
    \ has no member 'components'\n    let words2 = txt.components(separatedBy: \"\
    ,\")\n                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if !words.isEmpty {\n\
    \        return .success(words.map { String($0) })\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if !words2.isEmpty {\n        return .success(words2.map { String($0)\
    \ })\n    }\n    let n = txt.filter { ($0.asciiValue! - 97) % 2 == 0 }.count\n\
    \    return .failure(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp_4qwa1_a/tmp_4qwa1_a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d58dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d58aa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d58aa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d58aa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_4qwa1_a                        0x0000562c23aaeeee <unavailable> + 7918

    5    libc.so.6                          0x00002b1d58f98460 __libc_start_main +
    245

    6    tmp_4qwa1_a                        0x0000562c23aae879 <unavailable> + 6265

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    do {\n        if txt.contains(\" \") {\n            return .success(txt.split(separator:\
    \ \" \").map(String.init))\n        } else if txt.contains(\",\") {\n        \
    \    return .success(txt.split(separator: \",\").map(String.init))\n        }\
    \ else {\n            var count = 0\n            for c in txt {\n            \
    \    if let v = c.asciiValue, v % 2 == 1 {\n                    count += 1\n \
    \               }\n            }\n            return .failure(count)\n       \
    \ }\n    } catch {\n        return .failure(txt.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpx7hdio0l/tmpx7hdio0l.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5934287c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5933f7eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5933f7e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5933f7d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7hdio0l                        0x000055eb9d86644b <unavailable> + 9291

    5    libc.so.6                          0x00002b5934473460 __libc_start_main +
    245

    6    tmpx7hdio0l                        0x000055eb9d8657f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpny2qak6m/tmpny2qak6m.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aa09fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aa06f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aa06f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aa06f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny2qak6m                        0x0000560d60fb684c <unavailable> + 6220

    5    libc.so.6                          0x00002b1aa0be8460 __libc_start_main +
    245

    6    tmpny2qak6m                        0x0000560d60fb6389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.components(separatedBy: CharacterSet.whitespaces)\n\
    \    if words.count > 1 {\n        return .success(words)\n    }\n    let words2\
    \ = txt.components(separatedBy: \",\")\n    if words2.count > 1 {\n        return\
    \ .success(words2)\n    }\n    let count = txt.filter{ $0 >= \"a\" && $0 <= \"\
    z\" && $0.asciiValue! % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpio69sr1o.swift:15:45: error: cannot find 'CharacterSet' in scope\n\
    \    let words = txt.components(separatedBy: CharacterSet.whitespaces)\n     \
    \                                       ^~~~~~~~~~~~\n/tmp/tmpio69sr1o.swift:15:21:\
    \ error: value of type 'String' has no member 'components'\n    let words = txt.components(separatedBy:\
    \ CharacterSet.whitespaces)\n                ~~~ ^~~~~~~~~~\n/tmp/tmpio69sr1o.swift:19:22:\
    \ error: value of type 'String' has no member 'components'\n    let words2 = txt.components(separatedBy:\
    \ \",\")\n                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011878
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpveiv_crd/tmpveiv_crd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0032a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveiv_crd                        0x00005577e6fc884c <unavailable> + 6220

    5    libc.so.6                          0x00002b0032f0e460 __libc_start_main +
    245

    6    tmpveiv_crd                        0x00005577e6fc8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        var count = 0\n        for c in txt {\n            if c.isLetter\
    \ && c.lowercased() == String(c) {\n                let idx = c.asciiValue! -\
    \ 97\n                if idx % 2 == 1 {\n                    count += 1\n    \
    \            }\n            }\n        }\n        return .failure(count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpoi0kv2ti/tmpoi0kv2ti.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45b9b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45b985ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45b985a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45b98597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoi0kv2ti                        0x000056081cc52cbe <unavailable> + 7358

    5    libc.so.6                          0x00002b45b9d4f460 __libc_start_main +
    245

    6    tmpoi0kv2ti                        0x000056081cc52649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpveiv_crd/tmpveiv_crd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0032a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveiv_crd                        0x00005577e6fc884c <unavailable> + 6220

    5    libc.so.6                          0x00002b0032f0e460 __libc_start_main +
    245

    6    tmpveiv_crd                        0x00005577e6fc8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     var n = 0\n        for i in 0..<txt.count {\n            let char = txt[txt.index(txt.startIndex,\
    \ offsetBy: i)]\n            let ord = Int(char.asciiValue!) - 97\n          \
    \  if ord % 2 == 0 {\n                n += 1\n            }\n        }\n     \
    \   return .failure(n)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpn_xm6_eu/tmpn_xm6_eu.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98f421c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98f118b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98f118988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98f1177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn_xm6_eu                        0x000055b27170480b <unavailable> + 10251

    5    libc.so.6                          0x00002ba98f60d460 __libc_start_main +
    245

    6    tmpn_xm6_eu                        0x000055b271703bb9 <unavailable> + 7097

    '
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    do {\n        return .success(try txt.split(separator: \" \").map\
    \ { String($0) })\n    } catch {\n        do {\n            return .success(try\
    \ txt.split(separator: \",\").map { String($0) })\n        } catch {\n       \
    \     return .failure(txt.filter { $0.isLowercase }.count % 2)\n        }\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpqd27j8ao/tmpqd27j8ao.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a0b76cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a0b463b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a0b463988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a0b4627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqd27j8ao                        0x00005635fabc4cbe <unavailable> + 7358

    5    libc.so.6                          0x00002b3a0b958460 __libc_start_main +
    245

    6    tmpqd27j8ao                        0x00005635fabc4649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // your code here\n    return .failure(0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpahl4oxec/tmpahl4oxec.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae616ae2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6167d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6167d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6167d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahl4oxec                        0x000056293da6484c <unavailable> + 6220

    5    libc.so.6                          0x00002ae616cce460 __libc_start_main +
    245

    6    tmpahl4oxec                        0x000056293da64389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011878
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    } else {\n   \
    \     return .failure(txt.lowercased().filter { \"abcdefghijklmnopqrstuvwxyz\"\
    .firstIndex(of: $0)! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpp70avfki.swift:20:98: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n        return .failure(txt.lowercased().filter\
    \ { \"abcdefghijklmnopqrstuvwxyz\".firstIndex(of: $0)! % 2 == 1 }.count)\n   \
    \                                                                            \
    \                  ^\n"
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let str_result = txt.split(separator: \" \")\n    if str_result.count\
    \ != 1 {\n        return .success(str_result.map { String($0) })\n    }\n    let\
    \ comma_result = txt.split(separator: \",\")\n    if comma_result.count != 1 {\n\
    \        return .success(comma_result.map { String($0) })\n    }\n    var count\
    \ = 0\n    txt.forEach {\n        if $0.lowercased() == String($0) && \"a\"...\"\
    z\" ~= $0 {\n            count += 1\n        }\n    }\n    return .failure(count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp7g6ww2l3/tmp7g6ww2l3.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b955c3cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b955c0c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b955c0c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b955c0c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7g6ww2l3                        0x000055c276af14b3 <unavailable> + 9395

    5    libc.so.6                          0x00002b955c5bb460 __libc_start_main +
    245

    6    tmp7g6ww2l3                        0x000055c276af0999 <unavailable> + 6553

    '
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let words = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(words)\n    } else if let words = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(words)\n   \
    \ } else {\n        var count = 0\n        txt.map {\n            if ($0.asciiValue!\
    \ - 97) % 2 == 1 {\n                count += 1\n            }\n        }\n   \
    \     return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpte5e8pfe/tmpte5e8pfe.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90d0c10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90d0907b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90d0907988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90d09067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpte5e8pfe                        0x000055a7601cecbe <unavailable> + 7358

    5    libc.so.6                          0x00002b90d0dfc460 __libc_start_main +
    245

    6    tmpte5e8pfe                        0x000055a7601ce649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    guard let words = txt.split(separator: \" \").first(where: { $0.contains(\"\
    \ \") }) else {\n        let commaWords = txt.split(separator: \",\")\n      \
    \  guard commaWords.count > 1 else {\n            let count = txt.filter { \"\
    abcdefghijklmnopqrstuvwxyz\".contains($0) }.count\n            return count %\
    \ 2 == 0 ? .success([txt]) : .failure(count)\n        }\n        return .success(commaWords.map\
    \ { String($0) })\n    }\n    return .success(words.map { String($0) })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp251xg7bs/tmp251xg7bs.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b299bc10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b299b907b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b299b907988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b299b9067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp251xg7bs                        0x00005597b2461e9c <unavailable> + 7836

    5    libc.so.6                          0x00002b299bdfc460 __libc_start_main +
    245

    6    tmp251xg7bs                        0x00005597b24619d9 <unavailable> + 6617

    '
  stdout: ''
  timestamp: 1660011879
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if txt.contains(\" \") {\n        return .success(txt.split(separator:\
    \ \" \").map{ String($0) })\n    } else if txt.contains(\",\") {\n        return\
    \ .success(txt.split(separator: \",\").map{ String($0) })\n    } else {\n    \
    \    var count = 0\n        for letter in txt {\n            if let idx = \"abcdefghijklmnopqrstuvwxyz\"\
    .firstIndex(of: letter) {\n                if idx % 2 == 0 {\n               \
    \     count += 1\n                }\n            }\n        }\n        return\
    \ .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpe_04asom.swift:23:20: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                if idx % 2 == 0 {\n       \
    \            ^\n"
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let res = txt.split(separator: \" \").map(String.init) as? [String]\
    \ {\n        return .success(res)\n    } else if let res = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(res)\n    }\
    \ else {\n        return .failure(txt.lowercased().filter { $0.asciiValue! % 2\
    \ == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp832joxn_/tmp832joxn_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e49e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e46d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e46d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e46d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp832joxn_                        0x00005602c2e8ecbe <unavailable> + 7358

    5    libc.so.6                          0x00002b36e4bcd460 __libc_start_main +
    245

    6    tmp832joxn_                        0x00005602c2e8e649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660011879
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let components = txt.components(separatedBy: \" \")\n    if components.count\
    \ > 1 {\n        return .success(components)\n    }\n    else {\n        let comp\
    \ = txt.components(separatedBy: \",\")\n        if comp.count > 1 {\n        \
    \    return .success(comp)\n        }\n        else {\n            let lower =\
    \ txt.filter{ $0.isLowercase }\n            let odd = lower.filter{ $0.unicodeScalars.first!.value\
    \ % 2 == 1 }\n            return .failure(odd.count)\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp4f_upl2c.swift:15:26: error: value of type 'String' has no member\
    \ 'components'\n    let components = txt.components(separatedBy: \" \")\n    \
    \                 ~~~ ^~~~~~~~~~\n/tmp/tmp4f_upl2c.swift:20:24: error: value of\
    \ type 'String' has no member 'components'\n        let comp = txt.components(separatedBy:\
    \ \",\")\n                   ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(999)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpi4j_b748/tmpi4j_b748.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b0c101c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b0bdf8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b0bdf8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0bdf77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4j_b748                        0x0000556c3862484c <unavailable> + 6220

    5    libc.so.6                          0x00002b1b0c2ed460 __libc_start_main +
    245

    6    tmpi4j_b748                        0x0000556c38624389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpveiv_crd/tmpveiv_crd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032d22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032a19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032a19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0032a187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpveiv_crd                        0x00005577e6fc884c <unavailable> + 6220

    5    libc.so.6                          0x00002b0032f0e460 __libc_start_main +
    245

    6    tmpveiv_crd                        0x00005577e6fc8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660011877
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let result = txt.split(separator: \" \").map(String.init) as?\
    \ [String] {\n        return .success(result)\n    } else if let result = txt.split(separator:\
    \ \",\").map(String.init) as? [String] {\n        return .success(result)\n  \
    \  } else {\n        return .failure(odd_lowercase_letters(txt: txt))\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpggj32wot.swift:20:25: error: cannot find 'odd_lowercase_letters'\
    \ in scope\n        return .failure(odd_lowercase_letters(txt: txt))\n       \
    \                 ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let firstWhitespace = txt.firstIndex(of: \" \") {\n        return\
    \ .success(txt.split(separator: \" \").map{ String($0) })\n    } else if let firstComma\
    \ = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map{ String($0) })\n    } else {\n        return .failure(txt.lowercased().enumerated().filter{\
    \ $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp53msbkh_/tmp53msbkh_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d53231c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d52f28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d52f28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d52f277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53msbkh_                        0x000055c6b21e55ab <unavailable> + 9643

    5    libc.so.6                          0x00002b7d5341d460 __libc_start_main +
    245

    6    tmp53msbkh_                        0x000055c6b21e4959 <unavailable> + 6489

    '
  stdout: ''
  timestamp: 1660011879
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let is_odd = { $0 % 2 == 1 }\n    let count_odd = txt.count(where:\
    \ is_odd)\n    if count_odd > 0 {\n        return .failure(count_odd)\n    }\n\
    \    if txt.contains(\",\") {\n        return .success(txt.split(separator: \"\
    ,\").map(String.init))\n    }\n    return .success(txt.split(separator: \" \"\
    ).map(String.init))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1sp25f83.swift:16:25: error: cannot call value of non-function\
    \ type 'Int'\n    let count_odd = txt.count(where: is_odd)\n                 \
    \       ^\n"
  stdout: ''
  timestamp: 1660011879
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if let whitespaceIndex = txt.range(of: \" \")?.lowerBound {\n  \
    \      let arr = txt.split(separator: \" \")\n        return .success(arr.map{String($0)})\n\
    \    } else if let whitespaceIndex = txt.range(of: \",\")?.lowerBound {\n    \
    \    let arr = txt.split(separator: \",\")\n        return .success(arr.map{String($0)})\n\
    \    } else {\n        var count = 0\n        let txt = txt.lowercased()\n   \
    \     for char in txt {\n            let index = Int(char.asciiValue!) - Int(Character(\"\
    a\").asciiValue!)\n            if index % 2 == 1 {\n                count += 1\n\
    \            }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp8d18vh4n.swift:15:34: error: value of type 'String' has no member\
    \ 'range'\n    if let whitespaceIndex = txt.range(of: \" \")?.lowerBound {\n \
    \                            ~~~ ^~~~~\n/tmp/tmp8d18vh4n.swift:18:41: error: value\
    \ of type 'String' has no member 'range'\n    } else if let whitespaceIndex =\
    \ txt.range(of: \",\")?.lowerBound {\n                                    ~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660011879
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    return (try? txt.split(separator: \" \").map(String.init))\n   \
    \         .map(Result.success)\n            ?? (try? txt.split(separator: \",\"\
    ).map(String.init))\n            .map(Result.success)\n            ?? .failure(txt.lowercased().enumerated().compactMap\
    \ { (x, y) in\n            x % 2 == 0 ? y : nil\n        }.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmp0_h5q5am/tmp0_h5q5am.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a8b64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a885bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a885b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a885a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_h5q5am                        0x000055c7c000d08e <unavailable> + 8334

    5    libc.so.6                          0x00002af5a8d50460 __libc_start_main +
    245

    6    tmp0_h5q5am                        0x000055c7c000ca19 <unavailable> + 6681

    '
  stdout: ''
  timestamp: 1660011884
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    let words = txt.split(separator: \" \")\n    if words.count > 1\
    \ {\n        return .success(words.map{String($0)})\n    }\n    let words2 = txt.split(separator:\
    \ \",\")\n    if words2.count > 1 {\n        return .success(words2.map{String($0)})\n\
    \    }\n    let oddLetters = txt.filter{Int(UnicodeScalar(UInt8($0.lowercased().unicodeScalars.first!.value)))!\
    \ % 2 == 1}\n    return .failure(oddLetters.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpl0ss8noh.swift:23:33: error: initializer 'init(_:radix:)' requires\
    \ that 'UnicodeScalar' (aka 'Unicode.Scalar') conform to 'StringProtocol'\n  \
    \  let oddLetters = txt.filter{Int(UnicodeScalar(UInt8($0.lowercased().unicodeScalars.first!.value)))!\
    \ % 2 == 1}\n                                ^\nSwift.FixedWidthInteger:2:23:\
    \ note: where 'S' = 'UnicodeScalar' (aka 'Unicode.Scalar')\n    @inlinable public\
    \ init?<S>(_ text: S, radix: Int = 10) where S : StringProtocol\n            \
    \          ^\n"
  stdout: ''
  timestamp: 1660011879
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    switch \"\\n\" {\n    case String(txt.filter({ CharacterSet.whitespaces.contains($0.unicodeScalars.first!)\
    \ })):\n        return .failure(1)\n    case String(txt.filter({ CharacterSet.punctuationCharacters.contains($0.unicodeScalars.first!)\
    \ })):\n        return .failure(2)\n    default:\n        return .success(txt.components(separatedBy:\
    \ CharacterSet.whitespaces))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9gb61ise.swift:16:30: error: cannot find 'CharacterSet' in scope\n\
    \    case String(txt.filter({ CharacterSet.whitespaces.contains($0.unicodeScalars.first!)\
    \ })):\n                             ^~~~~~~~~~~~\n/tmp/tmp9gb61ise.swift:18:30:\
    \ error: cannot find 'CharacterSet' in scope\n    case String(txt.filter({ CharacterSet.punctuationCharacters.contains($0.unicodeScalars.first!)\
    \ })):\n                             ^~~~~~~~~~~~\n/tmp/tmp9gb61ise.swift:21:53:\
    \ error: cannot find 'CharacterSet' in scope\n        return .success(txt.components(separatedBy:\
    \ CharacterSet.whitespaces))\n                                               \
    \     ^~~~~~~~~~~~\n/tmp/tmp9gb61ise.swift:21:29: error: value of type 'String'\
    \ has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ CharacterSet.whitespaces))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011879
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    if !txt.contains(\" \") {\n        return split_words(txt: txt.replacingOccurrences(of:\
    \ \",\", with: \" \"))\n    }\n    let words = txt.split(separator: \" \")\n \
    \   return .success(words.map(String.init))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpji6spsbb.swift:16:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        return split_words(txt: txt.replacingOccurrences(of:\
    \ \",\", with: \" \"))\n                                ~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011879
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\n/// should split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\n/// alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"\
    Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt:\
    \ \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String],\
    \ Int> {\n    // If there is whitespace\n    if txt.range(of: \" \") != nil {\n\
    \        // Split by whitespace and return words as success\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    }\n    // If there is no whitespace\n    else {\n        // If\
    \ there is commas\n        if txt.range(of: \",\") != nil {\n            // Split\
    \ by commas and return words as success\n            return .success(txt.components(separatedBy:\
    \ \",\"))\n        }\n        // If there is no commas\n        else {\n     \
    \       // Set result to 0\n            var result = 0\n            // Loop through\
    \ each character in txt\n            for char in txt {\n                // If\
    \ character is lower case letter\n                if char.isLowercase {\n    \
    \                // If character is odd in alphabet\n                    if char.asciiValue!\
    \ % 2 == 1 {\n                        // Increase result by 1\n              \
    \          result += 1\n                    }\n                }\n           \
    \ }\n            // Return result as failure\n            return .failure(result)\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp0a3gku1x.swift:16:12: error: value of type 'String' has no member\
    \ 'range'\n    if txt.range(of: \" \") != nil {\n       ~~~ ^~~~~\n/tmp/tmp0a3gku1x.swift:18:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmp0a3gku1x.swift:23:16:\
    \ error: value of type 'String' has no member 'range'\n        if txt.range(of:\
    \ \",\") != nil {\n           ~~~ ^~~~~\n/tmp/tmp0a3gku1x.swift:25:33: error:\
    \ value of type 'String' has no member 'components'\n            return .success(txt.components(separatedBy:\
    \ \",\"))\n                            ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660011879
