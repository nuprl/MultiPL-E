name: HumanEval_124_valid_date
language: swift
prompt: "\n/// You have to write a function which validates a given date string and\n\
  /// returns true if the date is valid otherwise false.\n/// The date is valid if\
  \ all of the following rules are satisfied:\n/// 1. The date string is not empty.\n\
  /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  /// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date\
  \ should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n\
  /// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date:\
  \ \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n\
  /// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\n\
  assert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\"\
  ) == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date:\
  \ \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\n\
  assert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\"\
  ) == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date:\
  \ \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\n\
  assert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\"\
  ) == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date:\
  \ \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)"
completions: ['    return false', "    guard date.isEmpty == false else { return false\
    \ }\n    guard date.contains(\"-\") else { return false }\n    let dateString\
    \ = date.split(separator: \"-\")\n    guard dateString.count == 3 else { return\
    \ false }\n    guard let year = Int(dateString[2]), year > 0 else { return false\
    \ }\n    guard let month = Int(dateString[0]), month > 0, month < 13 else { return\
    \ false }\n    guard let day = Int(dateString[1]), day > 0, day < 32 else { return\
    \ false }\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        return\
    \ day < 32\n    case 4, 6, 9, 11:\n        return day < 31\n    case 2:\n    \
    \    if year % 4 == 0 {\n            return day < 30\n        } else {\n     \
    \       return day < 29\n        }\n    default:\n        return false\n    }",
  "    \n    var months = [1, 3, 5, 7, 8, 10, 12]\n    var months2 = [4, 6, 9, 11]\n\
    \    var dateArray = date.split(separator: \"-\")\n    var monthArray = Array(dateArray[0])\n\
    \    var dayArray = Array(dateArray[1])\n    var yearArray = Array(dateArray[2])\n\
    \    \n    if date.isEmpty == true {\n        return false\n    }\n    \n    if\
    \ Int(String(monthArray))! > 12 {\n        return false\n    }\n    \n    if months.contains(Int(String(monthArray))!)\
    \ {\n        if Int(String(dayArray))! > 31 {\n            return false\n    \
    \    }\n    }\n    \n    if months2.contains(Int(String(monthArray))!) {\n   \
    \     if Int(String(dayArray))! > 30 {\n            return false\n        }\n\
    \    }\n    \n    if Int(String(monthArray))! == 2 {\n        if Int(String(dayArray))!\
    \ > 29 {\n            return false\n        }\n    }\n    \n    return true",
  "    let components = date.components(separatedBy: \"-\")\n    guard components.count\
    \ == 3 else { return false }\n    guard let month = Int(components[0]), let day\
    \ = Int(components[1]), let year = Int(components[2]) else { return false }\n\
    \    if month < 1 || month > 12 { return false }\n    if day < 1 || day > 31 {\
    \ return false }\n    if year < 1 { return false }\n    return true", "    let\
    \ reg = \"[0-9]{2}-[0-9]{2}-[0-9]{4}\"\n    let d = date.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    if !NSPredicate(format: \"SELF MATCHES %@\", reg).evaluate(with:\
    \ d) {\n        return false\n    }\n    let ds = d.split(separator: \"-\")\n\
    \    let months = [1, 3, 5, 7, 8, 10, 12]\n    let month = Int(ds[0])!\n    let\
    \ day = Int(ds[1])!\n    if month < 1 || month > 12 {\n        return false\n\
    \    }\n    if months.contains(month) {\n        if day < 1 || day > 31 {\n  \
    \          return false\n        }\n    } else if month == 2 {\n        if day\
    \ < 1 || day > 29 {\n            return false\n        }\n    } else {\n     \
    \   if day < 1 || day > 30 {\n            return false\n        }\n    }\n   \
    \ return true", "    guard date.count != 0 else { return false }\n    guard date.count\
    \ == 10 else { return false }\n    let splitted = date.split(separator: \"-\"\
    )\n    guard splitted.count == 3 else { return false }\n    guard let day = Int(splitted[1]),\
    \ let month = Int(splitted[0]), let year = Int(splitted[2]) else { return false\
    \ }\n    guard 0 < day && day <= 31 else { return false }\n    guard 0 < month\
    \ && month <= 12 else { return false }\n    guard 1000 < year && year <= 3000\
    \ else { return false }\n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier:\
    \ \"en_US_POSIX\")\n    if let _ = dateFormatter.date(from: date) {\n        return\
    \ true\n    }\n    return false", "    \n    let arr = date.split(separator: \"\
    -\")\n    guard arr.count == 3 else {\n        return false\n    }\n    \n   \
    \ let months = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\"\
    , \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"]\n    let numOfMonths = [\"31\"\
    , \"28\", \"31\", \"30\", \"31\", \"30\", \"31\", \"31\", \"30\", \"31\", \"30\"\
    , \"31\"]\n    \n    let monthIndex = months.firstIndex(of: arr[0].lowercased())\n\
    \    guard monthIndex != nil else {\n        return false\n    }\n    \n    let\
    \ days = numOfMonths[monthIndex!]\n    guard arr[1] <= days else {\n        return\
    \ false\n    }\n    \n    guard arr[2].count == 4 else {\n        return false\n\
    \    }\n    \n    return true", "    if date.count != 10 {\n        return false\n\
    \    }\n    let d = date.split(separator: \"-\")\n    guard d.count == 3 else\
    \ {\n        return false\n    }\n    guard let year = Int(d[2]), let month =\
    \ Int(d[0]), let day = Int(d[1]) else {\n        return false\n    }\n    if year\
    \ < 1 || year > 9999 {\n        return false\n    }\n    if month < 1 || month\
    \ > 12 {\n        return false\n    }\n    switch month {\n    case 1, 3, 5, 7,\
    \ 8, 10, 12:\n        if day < 1 || day > 31 {\n            return false\n   \
    \     }\n    case 4, 6, 9, 11:\n        if day < 1 || day > 30 {\n           \
    \ return false\n        }\n    case 2:\n        if year % 4 == 0 {\n         \
    \   if day < 1 || day > 29 {\n                return false\n            }\n  \
    \      } else {\n            if day < 1 || day > 28 {\n                return\
    \ false\n            }\n        }\n    default:\n        return false\n    }\n\
    \    return true", '    return false', "    let months = [\"Jan\": 1, \"Feb\"\
    : 2, \"Mar\": 3, \"Apr\": 4, \"May\": 5, \"Jun\": 6, \"Jul\": 7, \"Aug\": 8, \"\
    Sep\": 9, \"Oct\": 10, \"Nov\": 11, \"Dec\": 12]\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from:\
    \ date)\n    if let dateString = dateString {\n        let day = Calendar.current.component(.day,\
    \ from: dateString)\n        let month = Calendar.current.component(.month, from:\
    \ dateString)\n        if day > 0 && day < 32 && months[dateFormatter.monthSymbols[month-1]]\
    \ == month {\n            return true\n        }\n    }\n    return false", " \
    \   let year = Int(date.components(separatedBy: \"-\")[2])!\n    let month = Int(date.components(separatedBy:\
    \ \"-\")[0])!\n    let day = Int(date.components(separatedBy: \"-\")[1])!\n  \
    \  var days_in_month = 0\n    if month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12 {\n        days_in_month =\
    \ 31\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        days_in_month = 30\n    } else if month == 2 {\n        if year % 4 ==\
    \ 0 {\n            days_in_month = 29\n        } else {\n            days_in_month\
    \ = 28\n        }\n    }\n    return month > 0 && month < 13 && day > 0 && day\
    \ <= days_in_month", "    let regex = try! NSRegularExpression(pattern: \"\\\\\
    d{2}-\\\\d{2}-\\\\d{4}\")\n    let matches = regex.matches(in: date, range: NSRange(location:\
    \ 0, length: date.count))\n    if matches.count == 0 {\n        return false\n\
    \    }\n\n    let components = date.components(separatedBy: \"-\")\n    let year\
    \ = Int(components[2])!\n    let month = Int(components[0])!\n    let day = Int(components[1])!\n\
    \n    if year < 1 || month < 1 || month > 12 || day < 1 {\n        return false\n\
    \    }\n\n    if [1, 3, 5, 7, 8, 10, 12].contains(month) && day > 31 {\n     \
    \   return false\n    }\n\n    if [4, 6, 9, 11].contains(month) && day > 30 {\n\
    \        return false\n    }\n\n    if month == 2 && day > 29 {\n        return\
    \ false\n    }\n\n    return true", "    // validate the date string is not empty\n\
    \    if date.isEmpty {\n        return false\n    }\n    \n    // break the string\
    \ by using \"-\"\n    let components = date.components(separatedBy: \"-\")\n \
    \   \n    // the components array should have exactly 3 elements\n    if components.count\
    \ != 3 {\n        return false\n    }\n    \n    // the components array contains\
    \ 3 elements: month, day, year\n    let month = components[0]\n    let day = components[1]\n\
    \    let year = components[2]\n    \n    // validate the month\n    if let _ =\
    \ Int(month) {\n        // validate the day\n        if let d = Int(day) {\n \
    \           // validate the year\n            if let _ = Int(year) {\n       \
    \         // check the number of days for each month\n                // 31 days\
    \ for months 1,3,5,7,8,10,12\n                if month == \"1\" || month == \"\
    3\" || month == \"5\" || month == \"7\" || month == \"8\" || month == \"10\" ||\
    \ month == \"12\" {\n                    if d < 1 || d > 31 {\n              \
    \          return false\n                    }\n                }\n          \
    \      // 30 days for months 4,6,9,11\n                else if month == \"4\"\
    \ || month == \"6\" || month == \"9\" || month == \"11\" {\n                 \
    \   if d < 1 || d > 30 {\n                        return false\n             \
    \       }\n                }\n                // 29 days for month 2\n       \
    \         else if month == \"2\" {\n                    if d < 1 || d > 29 {\n\
    \                        return false\n                    }\n               \
    \ }\n                // other months are not accepted\n                else {\n\
    \                    return false\n                }\n            }\n        \
    \    else {\n                return false\n            }\n        }\n        else\
    \ {\n            return false\n        }\n    }\n    else {\n        return false\n\
    \    }\n    \n    return true", "    let components = date.components(separatedBy:\
    \ \"-\")\n    guard components.count == 3 else { return false }\n    guard let\
    \ year = Int(components[2]), let month = Int(components[0]), let day = Int(components[1])\
    \ else { return false }\n    if year < 2020 || year > 2040 { return false }\n\
    \    if month < 1 || month > 12 { return false }\n    switch month {\n    case\
    \ 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day > 31 { return false }\n  \
    \  case 4, 6, 9, 11:\n        if day < 1 || day > 30 { return false }\n    case\
    \ 2:\n        if year % 4 == 0 {\n            if day < 1 || day > 29 { return\
    \ false }\n        } else {\n            if day < 1 || day > 28 { return false\
    \ }\n        }\n    default:\n        return false\n    }\n    return true", " \
    \   let months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"\
    june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"\
    ]\n    let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  \
    \  let dateComponents = date.split(separator: \"-\")\n    let month = Int(dateComponents[0])!\n\
    \    let day = Int(dateComponents[1])!\n    if date.count == 0 {\n        return\
    \ false\n    }\n    if dateComponents.count != 3 {\n        return false\n   \
    \ }\n    if !(day > 0 && day <= daysInMonth[month - 1]) {\n        return false\n\
    \    }\n    if !(month > 0 && month <= 12) {\n        return false\n    }\n  \
    \  return true", '    return false', "    guard !date.isEmpty else { return false\
    \ }\n    let monthArray = [\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\"]\n\
    \    let monthArray2 = [\"4\", \"6\", \"9\", \"11\"]\n    let monthArray3 = [\"\
    2\"]\n    let monthArrayAll = monthArray + monthArray2 + monthArray3\n    guard\
    \ date.count >= 10 else { return false }\n    guard date.hasPrefix(\"-\") == false\
    \ && date.hasSuffix(\"-\") == false else { return false }\n    let dateArray =\
    \ date.components(separatedBy: \"-\")\n    guard dateArray.count == 3 else { return\
    \ false }\n    guard monthArrayAll.contains(dateArray[0]) else { return false\
    \ }\n    guard dateArray[1].count == 2 else { return false }\n    guard dateArray[2].count\
    \ == 4 else { return false }\n    guard Int(dateArray[2])! >= 2020 else { return\
    \ false }\n    guard Int(dateArray[1])! > 0 else { return false }\n    if monthArray.contains(dateArray[0])\
    \ {\n        guard Int(dateArray[1])! <= 31 else { return false }\n    } else\
    \ if monthArray2.contains(dateArray[0]) {\n        guard Int(dateArray[1])! <=\
    \ 30 else { return false }\n    } else if monthArray3.contains(dateArray[0]) {\n\
    \        guard Int(dateArray[1])! <= 29 else { return false }\n    }\n    return\
    \ true", "    let components = date.components(separatedBy: \"-\")\n    if components.count\
    \ != 3 {\n        return false\n    }\n    let years = Int(components[2]) ?? 0\n\
    \    let months = Int(components[0]) ?? 0\n    let days = Int(components[1]) ??\
    \ 0\n    if years < 1900 || years > 2999 {\n        return false\n    }\n    if\
    \ months < 1 || months > 12 {\n        return false\n    }\n    if (months ==\
    \ 1 || months == 3 || months == 5 || months == 7 || months == 8 || months == 10\
    \ || months == 12) && (days < 1 || days > 31) {\n        return false\n    }\n\
    \    if (months == 4 || months == 6 || months == 9 || months == 11) && (days <\
    \ 1 || days > 30) {\n        return false\n    }\n    if months == 2 && days >\
    \ 29 {\n        return false\n    }\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale\
    \ = Locale(identifier: \"en_US_POSIX\") // set locale to reliable US_POSIX\n \
    \   let date1 = dateFormatter.date(from: date)\n    if let date = date1 {\n  \
    \      //let calendar = Calendar.current\n        //calendar.component(.day, from:\
    \ date)\n        return true\n    }\n    return false", "    let regex = try!\
    \ NSRegularExpression(pattern: \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    )\n    let match = regex.firstMatch(in: date, range: NSRange(date.startIndex...,\
    \ in: date))\n    return match != nil", "    let months = [1, 3, 5, 7, 8, 10,\
    \ 12]\n    let months2 = [4, 6, 9, 11]\n    let formatter = DateFormatter()\n\
    \    formatter.dateFormat = \"MM-dd-yyyy\"\n    let parsedDate = formatter.date(from:\
    \ date)\n    if parsedDate == nil {\n        return false\n    }\n    let dateComponents\
    \ = Calendar.current.dateComponents([.month, .day, .year], from: parsedDate!)\n\
    \    let month = dateComponents.month!\n    let day = dateComponents.day!\n  \
    \  let year = dateComponents.year!\n    if day < 1 || year < 1 {\n        return\
    \ false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n\
    \    if month == 2 {\n        if day > 29 {\n            return false\n      \
    \  }\n    }\n    if months.contains(month) {\n        if day > 31 {\n        \
    \    return false\n        }\n    }\n    if months2.contains(month) {\n      \
    \  if day > 30 {\n            return false\n        }\n    }\n    return true",
  "    // write your code here\n    return true", "    let monthsOfYear = [1, 3, 5,\
    \ 7, 8, 10, 12]\n    let dateArr = date.components(separatedBy: \"-\")\n    if\
    \ dateArr.count != 3 {\n        return false\n    }\n    let month = Int(dateArr[0])\
    \ ?? 0\n    let day = Int(dateArr[1]) ?? 0\n    let year = Int(dateArr[2]) ??\
    \ 0\n    if year < 1 {\n        return false\n    }\n    if month < 1 || month\
    \ > 12 {\n        return false\n    }\n    if day < 1 {\n        return false\n\
    \    }\n    if monthsOfYear.contains(month) {\n        if day > 31 {\n       \
    \     return false\n        }\n    } else if month == 2 {\n        if day > 29\
    \ {\n            return false\n        }\n    } else {\n        if day > 30 {\n\
    \            return false\n        }\n    }\n    return true", "    let months\
    \ = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"\
    10\", \"11\", \"12\"]\n    let days30 = [\"04\", \"06\", \"09\", \"11\"]\n   \
    \ let days31 = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n    let\
    \ days31_30 = days30 + days31\n    let days31_30_1 = days31_30 + [\"02\"]\n  \
    \  let date_format = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    guard date.range(of:\
    \ date_format, options: .regularExpression) != nil else {\n        return false\n\
    \    }\n    let components = date.components(separatedBy: \"-\")\n    guard components.count\
    \ == 3 else {\n        return false\n    }\n    let month = components[0]\n  \
    \  let day = components[1]\n    let year = components[2]\n    guard months.contains(month)\
    \ else {\n        return false\n    }\n    if Int(year)! % 4 == 0 {\n        guard\
    \ Int(day)! <= 29 else {\n            return false\n        }\n    } else {\n\
    \        guard Int(day)! <= 28 else {\n            return false\n        }\n \
    \   }\n    if days31_30_1.contains(month) {\n        guard Int(day)! <= 31 else\
    \ {\n            return false\n        }\n    } else {\n        guard Int(day)!\
    \ <= 30 else {\n            return false\n        }\n    }\n    return true",
  "    let components = date.components(separatedBy: \"-\")\n    let days = components[1]\n\
    \    let months = components[0]\n    let years = components[2]\n    if components.count\
    \ != 3 {\n        return false\n    }\n    if months.count != 2 || days.count\
    \ != 2 || years.count != 4 {\n        return false\n    }\n    if Int(months)!\
    \ < 1 || Int(months)! > 12 {\n        return false\n    }\n    let month = Int(months)!\n\
    \    let day = Int(days)!\n    if month == 2 {\n        if day < 1 || day > 29\
    \ {\n            return false\n        }\n    } else if month == 1 || month ==\
    \ 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 {\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\
    \ else {\n        if day < 1 || day > 30 {\n            return false\n       \
    \ }\n    }\n    return true", "    var results: [String] = []\n    let date_format\
    \ = \"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})\"\n    let regex =\
    \ try! NSRegularExpression(pattern: date_format, options: [])\n    if regex.firstMatch(in:\
    \ date, options: [], range: NSRange(location: 0, length: date.count)) != nil {\n\
    \        let range = NSRange(location: 0, length: date.utf16.count)\n        regex.enumerateMatches(in:\
    \ date, options: [], range: range) { result, flags, stop in\n            let date\
    \ = (date as NSString).substring(with: result!.range)\n            results.append(date)\n\
    \        }\n    }\n    if results.count == 0 {\n        return false\n    }\n\
    \    let month_index = date.index(date.startIndex, offsetBy: 2)\n    let month\
    \ = date[date.startIndex..<month_index]\n    let date_index = date.index(date.startIndex,\
    \ offsetBy: 5)\n    let days = date[month_index..<date_index]\n    if month ==\
    \ \"02\" {\n        if Int(days)! > 29 {\n            return false\n        }\n\
    \    } else if Int(month)! % 2 == 0 {\n        if Int(days)! > 30 {\n        \
    \    return false\n        }\n    } else {\n        if Int(days)! > 31 {\n   \
    \         return false\n        }\n    }\n    return true", "    if date.count\
    \ < 8 {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    guard let _ = dateFormatter.date(from:\
    \ date) else {\n        return false\n    }\n    return true", '    return true',
  "    if (date.count == 0) {\n        return false\n    }\n    let dateComponents\
    \ = date.components(separatedBy: \"-\")\n    if (dateComponents.count != 3) {\n\
    \        return false\n    }\n    if (dateComponents[2].count != 4) {\n      \
    \  return false\n    }\n    if (Int(dateComponents[0])! > 12 || Int(dateComponents[0])!\
    \ < 1) {\n        return false\n    }\n    if (Int(dateComponents[0])! > 7 &&\
    \ Int(dateComponents[0])! % 2 == 0 && Int(dateComponents[1])! > 30) {\n      \
    \  return false\n    }\n    if (Int(dateComponents[0])! > 7 && Int(dateComponents[0])!\
    \ % 2 != 0 && Int(dateComponents[1])! > 31) {\n        return false\n    }\n \
    \   if (Int(dateComponents[0])! <= 7 && Int(dateComponents[0])! % 2 == 0 && Int(dateComponents[1])!\
    \ > 31) {\n        return false\n    }\n    if (Int(dateComponents[0])! <= 7 &&\
    \ Int(dateComponents[0])! % 2 != 0 && Int(dateComponents[1])! > 30) {\n      \
    \  return false\n    }\n    if (Int(dateComponents[0])! == 2 && Int(dateComponents[1])!\
    \ > 29) {\n        return false\n    }\n    return true", '    return false',
  '    return true', "  // 1. The date string is not empty.\n  guard !date.isEmpty\
    \ else { return false }\n  // 2. The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n  // 3. The months should\
    \ not be less than 1 or higher than 12.\n  // 4. The date should be in the format:\
    \ mm-dd-yyyy\n  let dateFormatter = DateFormatter()\n  dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n  let date = dateFormatter.date(from: date)\n  return date\
    \ != nil", "  guard date.count == 10 else { return false }\n  guard Int(date[0..<2])!\
    \ <= 12 && Int(date[0..<2])! >= 1 else { return false }\n  guard Int(date[3..<5])!\
    \ <= 31 && Int(date[3..<5])! >= 1 else { return false }\n  guard Int(date[6..<10])!\
    \ <= 9999 && Int(date[6..<10])! >= 1 else { return false }\n  guard date[2] ==\
    \ \"-\" && date[5] == \"-\" else { return false }\n  return true", "    let months\
    \ = [31,29,31,30,31,30,31,31,30,31,30,31]\n    let date = date.split(separator:\
    \ \"-\")\n    if date.count != 3 {\n        return false\n    }\n    guard let\
    \ month = Int(date[0]), let day = Int(date[1]), let year = Int(date[2]) else {\n\
    \        return false\n    }\n    if year < 1000 || year > 9999 {\n        return\
    \ false\n    }\n    if month > 12 || month < 1 {\n        return false\n    }\n\
    \    if day > months[month-1] || day < 1 {\n        return false\n    }\n    return\
    \ true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n    let valid = dateFormatter.date(from: date) != nil\n    return valid", " \
    \   // write your code in Swift 3.0 (Linux)\n    if date.isEmpty {\n        return\
    \ false\n    }\n    let dateArr = date.characters.split(separator: \"-\").map(String.init)\n\
    \    if dateArr.count < 3 {\n        return false\n    }\n    var month = Int(dateArr[0])\n\
    \    var day = Int(dateArr[1])\n    var year = Int(dateArr[2])\n    if month ==\
    \ nil || day == nil || year == nil {\n        return false\n    }\n    if month!\
    \ < 1 || month! > 12 {\n        return false\n    }\n    if month! == 2 {\n  \
    \      if day! < 1 || day! > 29 {\n            return false\n        }\n    }\
    \ else if month! == 4 || month! == 6 || month! == 9 || month! == 11 {\n      \
    \  if day! < 1 || day! > 30 {\n            return false\n        }\n    } else\
    \ {\n        if day! < 1 || day! > 31 {\n            return false\n        }\n\
    \    }\n    return true", "    let dateArray = date.components(separatedBy: \"\
    -\")\n    guard dateArray.count == 3 else { return false }\n    guard let day\
    \ = Int(dateArray[1]), let month = Int(dateArray[0]), let year = Int(dateArray[2])\
    \ else { return false }\n    guard day > 0 && month > 0 && year > 0 else { return\
    \ false }\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        guard\
    \ day <= 31 else { return false }\n    case 4, 6, 9, 11:\n        guard day <=\
    \ 30 else { return false }\n    case 2:\n        guard day <= 29 else { return\
    \ false }\n    default:\n        return false\n    }\n    return true", "    var\
    \ valid = true\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation: \"GMT+0:00\"\
    )\n    let date = dateFormatter.date(from: date)\n    let currentYear = Calendar.current.component(.year,\
    \ from: Date())\n    if date == nil || (Calendar.current.component(.year, from:\
    \ date!) != currentYear) {\n        valid = false\n    }\n    return valid", " \
    \   let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    if let _\
    \ = dateFormatter.date(from: date) {\n        return true\n    }\n    return false",
  '    return false', "    let months = [1, 3, 5, 7, 8, 10, 12]\n    let short_months\
    \ = [4, 6, 9, 11]\n    var days = [Int]()\n    var isValid = false\n    if date.isEmpty\
    \ {\n        return isValid\n    }\n    let components = date.components(separatedBy:\
    \ \"/\")\n    guard components.count == 3 else {\n        return isValid\n   \
    \ }\n    guard let month = Int(components[0]), let day = Int(components[1]), let\
    \ year = Int(components[2]) else {\n        return isValid\n    }\n    if short_months.contains(month)\
    \ {\n        days = Array(1...30)\n    } else if months.contains(month) {\n  \
    \      days = Array(1...31)\n    } else if month == 2 {\n        days = Array(1...29)\n\
    \    }\n    isValid = days.contains(day) && (1...12).contains(month) && year >\
    \ 0\n    return isValid", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n    dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)\n    guard let _ =\
    \ dateFormatter.date(from: date) else {\n        return false\n    }\n    return\
    \ true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    if let _ = dateFormatter.date(from: date) {\n        return\
    \ true\n    } else {\n        return false\n    }", "    let date = date.components(separatedBy:\
    \ \"-\")\n    if date.count != 3 {\n        return false\n    }\n    if let month\
    \ = Int(date[0]), let day = Int(date[1]), let year = Int(date[2]) {\n        if\
    \ month < 1 || month > 12 {\n            return false\n        }\n        if day\
    \ < 1 || day > 31 {\n            return false\n        }\n        if month ==\
    \ 2 {\n            if day > 29 {\n                return false\n            }\n\
    \        } else if month == 4 || month == 6 || month == 9 || month == 11 {\n \
    \           if day > 30 {\n                return false\n            }\n     \
    \   }\n        if year < 1 {\n            return false\n        }\n        return\
    \ true\n    }\n    return false", "    let calendar = Calendar.current\n    let\
    \ year = calendar.component(.year, from: Date())\n    var dateComponents = DateComponents()\n\
    \    dateComponents.year = year\n    dateComponents.timeZone = TimeZone(abbreviation:\
    \ \"UTC\")\n    dateComponents.calendar = calendar\n    guard let dateFormat =\
    \ date.split(separator: \"-\").map({ String($0) }) else { return false }\n   \
    \ guard dateFormat.count == 3 else { return false }\n    guard let month = Int(dateFormat[0]),\
    \ let day = Int(dateFormat[1]), let year = Int(dateFormat[2]) else { return false\
    \ }\n    guard month >= 1, month <= 12 else { return false }\n    guard month\
    \ != 2 else {\n        if (year % 4 == 0 && year % 100 != 0) || year % 400 ==\
    \ 0 {\n            guard day >= 1, day <= 29 else { return false }\n        }\
    \ else {\n            guard day >= 1, day <= 28 else { return false }\n      \
    \  }\n        return true\n    }\n    if [1, 3, 5, 7, 8, 10, 12].contains(month)\
    \ {\n        guard day >= 1, day <= 31 else { return false }\n    } else {\n \
    \       guard day >= 1, day <= 30 else { return false }\n    }\n    return true",
  "    if date.contains(\"-\") {\n        let date_arr = date.components(separatedBy:\
    \ \"-\")\n        if date_arr.count == 3 {\n            if date_arr[0].isNumber\
    \ && date_arr[1].isNumber && date_arr[2].isNumber {\n                if let dd\
    \ = Int(date_arr[0]), let mm = Int(date_arr[1]), let yyyy = Int(date_arr[2]) {\n\
    \                    if dd > 0 && dd <= 31 && mm > 0 && mm <= 12 && yyyy > 0 {\n\
    \                        if mm == 2 {\n                            if yyyy % 4\
    \ == 0 {\n                                if dd <= 29 {\n                    \
    \                return true\n                                }\n            \
    \                } else {\n                                if dd <= 28 {\n   \
    \                                 return true\n                              \
    \  }\n                            }\n                        } else if mm % 2\
    \ == 0 {\n                            if mm == 12 {\n                        \
    \        if dd <= 31 {\n                                    return true\n    \
    \                            }\n                            } else {\n       \
    \                         if dd <= 30 {\n                                    return\
    \ true\n                                }\n                            }\n   \
    \                     } else {\n                            if dd <= 31 {\n  \
    \                              return true\n                            }\n  \
    \                      }\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return false", "    let dateComponents = date.components(separatedBy:\
    \ \"-\")\n    if dateComponents.count != 3 {\n        return false\n    }\n  \
    \  if let month = Int(dateComponents[0]), let day = Int(dateComponents[1]), let\
    \ year = Int(dateComponents[2]) {\n        if year >= 0 && year <= 9999 {\n  \
    \          if month >= 1 && month <= 12 {\n                if day >= 1 && day\
    \ <= 31 {\n                    if month == 2 {\n                        if day\
    \ <= 29 {\n                            return true\n                        }\n\
    \                    } else if month == 4 || month == 6 || month == 9 || month\
    \ == 11 {\n                        if day <= 30 {\n                          \
    \  return true\n                        }\n                    } else {\n    \
    \                    return true\n                    }\n                }\n \
    \           }\n        }\n    }\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"mm-dd-yyyy\"\n    if let _ = dateFormatter.date(from:\
    \ date) {\n        return true\n    } else {\n        return false\n    }", " \
    \   let comps = date.components(separatedBy: \"-\")\n    guard comps.count ==\
    \ 3 else { return false }\n    guard let m = Int(comps[0]), m >= 1, m <= 12 else\
    \ { return false }\n    guard let d = Int(comps[1]), d >= 1, d <= 31 else { return\
    \ false }\n    guard let y = Int(comps[2]), y >= 0 else { return false }\n   \
    \ if m == 2 {\n        return d <= 29\n    } else if m == 4 || m == 6 || m ==\
    \ 9 || m == 11 {\n        return d <= 30\n    }\n    return true", "    let formatter\
    \ = DateFormatter()\n    formatter.dateFormat = \"MM-dd-yyyy\"\n    if let _ =\
    \ formatter.date(from: date) {\n        return true\n    }\n    return false",
  "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let _ = dateFormatter.date(from: date) {\n        return true\n    }\
    \ else {\n        return false\n    }", "    if date.isEmpty {\n        return\
    \ false\n    }\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    guard let validDate = dateFormatter.date(from: date) else\
    \ {\n        return false\n    }\n    return date == dateFormatter.string(from:\
    \ validDate)", '    return false', "    let dateRegex = \"\\\\d{2}-\\\\d{2}-\\\
    \\d{4}\"\n    let dateTest = NSPredicate(format: \"SELF MATCHES %@\", dateRegex)\n\
    \    if !dateTest.evaluate(with: date) {\n        return false\n    }\n    var\
    \ dateComponents = date.components(separatedBy: \"-\")\n    guard let month =\
    \ Int(dateComponents[0]),\n        let day = Int(dateComponents[1]),\n       \
    \ let year = Int(dateComponents[2]) else {\n            return false\n    }\n\
    \    if month < 1 || month > 12 {\n        return false\n    }\n    switch month\
    \ {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day < 1 || day > 31 {\n     \
    \       return false\n        }\n    case 4, 6, 9, 11:\n        if day < 1 ||\
    \ day > 30 {\n            return false\n        }\n    case 2:\n        if day\
    \ < 1 || day > 29 {\n            return false\n        }\n    default:\n     \
    \   return false\n    }\n    return true", '    return false', "    // Your code\
    \ here\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n    dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)\n    if let _ = dateFormatter.date(from:\
    \ date) {\n        return true\n    }\n    return false", "    var arr = date.components(separatedBy:\
    \ \"-\")\n    if(date == \"\"){\n        return false\n    }\n    let year = Int(arr[2])!\n\
    \    if(year < 1900 || year > 2100){\n        return false\n    }\n    let month\
    \ = Int(arr[0])!\n    if(month < 1 || month > 12){\n        return false\n   \
    \ }\n    let day = Int(arr[1])!\n    if(day < 1 || day > 31){\n        return\
    \ false\n    }\n    if(month == 2){\n        if(day > 29){\n            return\
    \ false\n        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11){\n        if(day > 30){\n            return false\n        }\n    }\n\
    \    return true", "    \n    if (date.isEmpty) {\n        return false\n    }\n\
    \    \n    let dateParts = date.components(separatedBy: \"-\")\n    \n    if (dateParts.count\
    \ != 3) {\n        return false\n    }\n    \n    guard let day = Int(dateParts[1]),\
    \ let month = Int(dateParts[0]), let year = Int(dateParts[2]) else {\n       \
    \ return false\n    }\n    \n    if (month < 1 || month > 12) {\n        return\
    \ false\n    }\n    \n    if (day < 1) {\n        return false\n    }\n    \n\
    \    if (year < 1900 || year > 2020) {\n        return false\n    }\n    \n  \
    \  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n        if (day > 31) {\n            return false\n\
    \        }\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n        if (day > 30) {\n            return false\n        }\n   \
    \ }\n    \n    if (month == 2) {\n        if (day > 29) {\n            return\
    \ false\n        }\n    }\n    \n    return true", "    let daysInMonths = [\n\
    \        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30,\
    \ 10: 31, 11: 30, 12: 31\n    ]\n    let regex = try! NSRegularExpression(pattern:\
    \ \"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\")\n    let dateComponents = date.components(separatedBy:\
    \ \"-\")\n    let month = Int(dateComponents[0])!\n    let day = Int(dateComponents[1])!\n\
    \    let year = Int(dateComponents[2])!\n    let matches = regex.matches(in: date,\
    \ range: NSRange(location: 0, length: date.count))\n    return matches.count >\
    \ 0 && daysInMonths[month]! >= day && year > 1", "    let months = [\"Jan\", \"\
    Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\"\
    , \"Nov\", \"Dec\"]\n    let dateStringArr = date.split(separator: \"-\")\n  \
    \  let dateFormat = \"dd-MM-yyyy\"\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = dateFormat\n    dateFormatter.locale = Locale(identifier:\
    \ \"en_US_POSIX\")\n    guard let _ = dateFormatter.date(from: date) else {\n\
    \        return false\n    }\n    guard dateStringArr.count == 3 else {\n    \
    \    return false\n    }\n    let dateStr = dateStringArr[0]\n    guard let dateInt\
    \ = Int(dateStr) else {\n        return false\n    }\n    let monthStr = dateStringArr[1]\n\
    \    guard let monthInt = Int(monthStr) else {\n        return false\n    }\n\
    \    let yearStr = dateStringArr[2]\n    guard let yearInt = Int(yearStr) else\
    \ {\n        return false\n    }\n    if (yearInt % 4 == 0 && yearInt % 100 !=\
    \ 0) || yearInt % 400 == 0 {\n        if monthInt == 2 && dateInt > 29 {\n   \
    \         return false\n        }\n    } else {\n        if monthInt == 2 && dateInt\
    \ > 28 {\n            return false\n        }\n    }\n    guard let month = months[safe:\
    \ monthInt - 1] else {\n        return false\n    }\n    switch month {\n    case\
    \ \"Jan\", \"Mar\", \"May\", \"Jul\", \"Aug\", \"Oct\", \"Dec\":\n        if dateInt\
    \ < 1 || dateInt > 31 {\n            return false\n        }\n    case \"Apr\"\
    , \"Jun\", \"Sep\", \"Nov\":\n        if dateInt < 1 || dateInt > 30 {\n     \
    \       return false\n        }\n    case \"Feb\":\n        if dateInt < 1 ||\
    \ dateInt > 29 {\n            return false\n        }\n    default:\n        return\
    \ false\n    }\n    return true", "    let date_regex = Regex(\"^(?:(?:(?:0?[13578]|1[02])(\\\
    \\/|-|\\\\.)31)\\\\1|(?:(?:0?[1,3-9]|1[0-2])(\\\\/|-|\\\\.)(?:29|30)\\\\2))(?:(?:1[6-9]|[2-9]\\\
    \\d)?\\\\d{2})$|^(?:0?2(\\\\/|-|\\\\.)29\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\\\
    \\/|-|\\\\.)(?:0?[1-9]|1\\\\d|2[0-8])\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\"\
    )\n    let month_days = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\
    \    guard date_regex.match(input: date) else { return false }\n    let date_components\
    \ = date.split(separator: \"-\")\n    guard date_components.count == 3 else {\
    \ return false }\n    let month = Int(date_components[0]) ?? 0\n    let day =\
    \ Int(date_components[1]) ?? 0\n    let year = Int(date_components[2]) ?? 0\n\
    \    if year % 4 == 0 && year % 100 != 0 || year % 400 == 0 {\n        month_days[2]\
    \ = 29\n    } else {\n        month_days[2] = 28\n    }\n    return month_days[month]\
    \ >= day", "    guard date.count == 10 else {\n        return false\n    }\n \
    \   let arr = date.split(separator: \"-\")\n    guard arr.count == 3 else {\n\
    \        return false\n    }\n    let months: [Int] = [1, 3, 5, 7, 8, 10, 12]\n\
    \    let days = arr[1].count == 2 ? Int(arr[1])! : 0\n    if days > 31 || days\
    \ < 1 {\n        return false\n    }\n    if months.contains(Int(arr[0])!) {\n\
    \        if days > 31 {\n            return false\n        }\n    } else if Int(arr[0])!\
    \ == 2 {\n        if days > 29 {\n            return false\n        }\n    } else\
    \ {\n        if days > 30 {\n            return false\n        }\n    }\n    return\
    \ true", "    var comps = date.components(separatedBy: \"-\")\n    if comps.count\
    \ != 3 {\n        return false\n    }\n    guard let m = Int(comps[0]),\n    \
    \    let d = Int(comps[1]),\n        let y = Int(comps[2]) else {\n          \
    \  return false\n    }\n    if m < 1 || m > 12 {\n        return false\n    }\n\
    \    if d < 1 || d > 31 {\n        return false\n    }\n    if m == 2 {\n    \
    \    if d > 29 {\n            return false\n        }\n    } else if m % 2 ==\
    \ 0 {\n        if d > 30 {\n            return false\n        }\n    }\n    return\
    \ true", "    let dateArray = date.components(separatedBy: \"-\")\n    if dateArray.count\
    \ != 3 {\n        return false\n    }\n    guard let month = Int(dateArray[0]),\
    \ let day = Int(dateArray[1]), let year = Int(dateArray[2]) else {\n        return\
    \ false\n    }\n    guard (1...12).contains(month) else {\n        return false\n\
    \    }\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        guard (1...31).contains(day)\
    \ else {\n            return false\n        }\n    case 4, 6, 9, 11:\n       \
    \ guard (1...30).contains(day) else {\n            return false\n        }\n \
    \   case 2:\n        if year % 4 == 0 {\n            guard (1...29).contains(day)\
    \ else {\n                return false\n            }\n        } else {\n    \
    \        guard (1...28).contains(day) else {\n                return false\n \
    \           }\n        }\n    default:\n        return false\n    }\n    return\
    \ true", "    let dateParts = date.split(separator: \"-\")\n    let months = [31,28,31,30,31,30,31,31,30,31,30,31]\n\
    \    if dateParts.count == 3 && Int(dateParts[0]) != nil && Int(dateParts[1])\
    \ != nil && Int(dateParts[2]) != nil {\n        if Int(dateParts[0])! > 0 && Int(dateParts[0])!\
    \ <= 12 {\n            if Int(dateParts[1])! > 0 && Int(dateParts[1])! <= months[Int(dateParts[0])!\
    \ - 1] {\n                return true\n            }\n        }\n    }\n    return\
    \ false", "    let pattern = #\"^(([0]?[1-9])|([1][0-2]))-(([0]?[1-9])|([1-2][0-9])|([3][0-1]))-\\\
    d{4}$\"#\n    guard let regex = try? NSRegularExpression(pattern: pattern, options:\
    \ []) else {\n        fatalError(\"Failed to create regular expression from pattern.\"\
    )\n    }\n    let range = NSRange(location: 0, length: date.utf16.count)\n   \
    \ let matches = regex.matches(in: date, options: [], range: range)\n    if matches.count\
    \ == 1 {\n        let dateComponents = date.split(separator: \"-\")\n        let\
    \ month = Int(dateComponents[0])!\n        let day = Int(dateComponents[1])!\n\
    \        let year = Int(dateComponents[2])!\n        switch month {\n        case\
    \ 1, 3, 5, 7, 8, 10, 12:\n            if day >= 1 && day <= 31 {\n           \
    \     return true\n            }\n        case 4, 6, 9, 11:\n            if day\
    \ >= 1 && day <= 30 {\n                return true\n            }\n        case\
    \ 2:\n            if day >= 1 && day <= 29 {\n                return true\n  \
    \          }\n        default:\n            return false\n        }\n    }\n \
    \   return false", "    \n    let dateRegEx = \"^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-((19|20)\\\
    \\d\\\\d)$\"\n    let dateTest = NSPredicate(format:\"SELF MATCHES %@\", dateRegEx)\n\
    \    let isValidDate = dateTest.evaluate(with: date)\n    \n    return isValidDate",
  "    let regex = try! NSRegularExpression(pattern: \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\
    )\n    guard regex.firstMatch(in: date, range: NSRange(date.startIndex..., in:\
    \ date)) != nil else {\n        return false\n    }\n    let components = date.components(separatedBy:\
    \ \"-\")\n    guard components.count == 3 else {\n        return false\n    }\n\
    \    let months = [1, 3, 5, 7, 8, 10, 12]\n    let month = Int(components[0])!\n\
    \    guard month >= 1 && month <= 12 else {\n        return false\n    }\n   \
    \ let day = Int(components[1])!\n    if months.contains(month) {\n        guard\
    \ day >= 1 && day <= 31 else {\n            return false\n        }\n    } else\
    \ if month == 2 {\n        guard day >= 1 && day <= 29 else {\n            return\
    \ false\n        }\n    } else {\n        guard day >= 1 && day <= 30 else {\n\
    \            return false\n        }\n    }\n    return true", "    let regex\
    \ = try! NSRegularExpression(pattern: \"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\")\n    let\
    \ matches = regex.matches(in: date, range: NSRange(location: 0, length: date.count))\n\
    \    if matches.count != 1 {\n        return false\n    }\n    let pattern = \"\
    \\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let tempDate = date.split(separator: \"-\")\n\
    \    let month = Int(tempDate[0]) ?? 0\n    let day = Int(tempDate[1]) ?? 0\n\
    \    let year = Int(tempDate[2]) ?? 0\n    if day < 1 || day > 31 {\n        return\
    \ false\n    }\n    if month < 1 || month > 12 {\n        return false\n    }\n\
    \    return true", "    // (1)\n    if date.isEmpty {\n        return false\n\
    \    }\n    // (2)\n    let yearStr = date.suffix(4)\n    let monthStr = date.prefix(2)\n\
    \    let dayStr = date.prefix(5).suffix(2)\n    if let year = Int(yearStr), let\
    \ month = Int(monthStr), let day = Int(dayStr) {\n        switch month {\n   \
    \     case 1, 3, 5, 7, 8, 10, 12:\n            if day > 31 {\n               \
    \ return false\n            }\n        case 4, 6, 9, 11:\n            if day >\
    \ 30 {\n                return false\n            }\n        case 2:\n       \
    \     // leap year or not\n            if year % 4 == 0 {\n                if\
    \ day > 29 {\n                    return false\n                }\n          \
    \  } else {\n                if day > 28 {\n                    return false\n\
    \                }\n            }\n        default:\n            return false\n\
    \        }\n    } else {\n        return false\n    }\n    // (3)\n    if monthStr.prefix(1)\
    \ == \"0\" {\n        return false\n    }\n    // (4)\n    if !date.contains(\"\
    -\") {\n        return false\n    }\n    return true", "    let formatter = DateFormatter()\n\
    \    formatter.dateFormat = \"MM-dd-yyyy\"\n    if let _ = formatter.date(from:\
    \ date) {\n        return true\n    }\n    return false", '    return false',
  "    let isEmpty = date.isEmpty\n    let parts = date.split(separator: \"-\")\n\
    \    let validMonths = Array(1...12)\n    let validDaysThirty = Array(1...30)\n\
    \    let validDaysThirtyOne = Array(1...31)\n    let validDaysFebruary = Array(1...29)\n\
    \    let validYear = Array(2020...2100)\n    if isEmpty {\n        return false\n\
    \    }\n    if parts.count != 3 {\n        return false\n    }\n    let day =\
    \ Int(parts[1]) ?? 0\n    let month = Int(parts[0]) ?? 0\n    let year = Int(parts[2])\
    \ ?? 0\n    if !validMonths.contains(month) {\n        return false\n    }\n \
    \   if month == 2 {\n        if !validDaysFebruary.contains(day) {\n         \
    \   return false\n        }\n    } else if month % 2 == 0 {\n        if !validDaysThirty.contains(day)\
    \ {\n            return false\n        }\n    } else {\n        if !validDaysThirtyOne.contains(day)\
    \ {\n            return false\n        }\n    }\n    if !validYear.contains(year)\
    \ {\n        return false\n    }\n    return true", "    guard date.contains(\"\
    -\") else {\n        return false\n    }\n    let dateComponents = date.components(separatedBy:\
    \ \"-\")\n    guard dateComponents.count == 3 else {\n        return false\n \
    \   }\n    let year = Int(dateComponents[2])\n    let month = Int(dateComponents[0])\n\
    \    let day = Int(dateComponents[1])\n    guard year != nil, month != nil, day\
    \ != nil else {\n        return false\n    }\n    guard year! >= 0, month! >=\
    \ 1, month! <= 12, day! >= 1 else {\n        return false\n    }\n    guard month!\
    \ != 2 || day! <= 29 else {\n        return false\n    }\n    guard (month! <=\
    \ 7 && month! % 2 != 0) || (month! >= 8 && month! % 2 == 0) else {\n        return\
    \ day! <= 30\n    }\n    return day! <= 31", '    return false', "    let components\
    \ = date.components(separatedBy: \"-\")\n    guard components.count == 3 else\
    \ { return false }\n    guard let year = Int(components[2]), let month = Int(components[0]),\
    \ let day = Int(components[1]) else { return false }\n    guard (1...12).contains(month)\
    \ else { return false }\n    guard (1...31).contains(day) else { return false\
    \ }\n    if month == 2 {\n        if year % 4 == 0 {\n            return (1...29).contains(day)\n\
    \        } else {\n            return (1...28).contains(day)\n        }\n    }\
    \ else if [1,3,5,7,8,10,12].contains(month) {\n        return (1...31).contains(day)\n\
    \    } else {\n        return (1...30).contains(day)\n    }", "    let date =\
    \ date.components(separatedBy: \"-\")\n    guard date.count == 3 else {\n    \
    \    return false\n    }\n    guard date[0].count == 2, date[1].count == 2, date[2].count\
    \ == 4 else {\n        return false\n    }\n    guard date[0].isNumeric(), date[1].isNumeric(),\
    \ date[2].isNumeric() else {\n        return false\n    }\n    let month = Int(date[0])\
    \ ?? 0\n    let day = Int(date[1]) ?? 0\n    let year = Int(date[2]) ?? 0\n  \
    \  guard (1...12).contains(month) else {\n        return false\n    }\n    guard\
    \ (1...31).contains(day) else {\n        return false\n    }\n    if month ==\
    \ 2 {\n        guard (1...29).contains(day) else {\n            return false\n\
    \        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        guard (1...30).contains(day) else {\n            return false\n \
    \       }\n    }\n    return true", '    return true', "    let dateSplit = date.split(separator:\
    \ \"-\")\n    guard dateSplit.count == 3,\n        let month = Int(dateSplit[0]),\n\
    \        let day = Int(dateSplit[1]),\n        let year = Int(dateSplit[2]) else\
    \ {\n            return false\n    }\n    if month < 1 || month > 12 {\n     \
    \   return false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n\
    \            return false\n        }\n    } else if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return\
    \ false\n        }\n    } else {\n        if day < 1 || day > 31 {\n         \
    \   return false\n        }\n    }\n    if year < 1900 || year > 2100 {\n    \
    \    return false\n    }\n    return true", "  var date = date\n  date = date.replacingOccurrences(of:\
    \ \"/\", with: \"-\")\n  date = date.replacingOccurrences(of: \".\", with: \"\
    -\")\n  if !date.isEmpty {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)\n\
    \    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    let date\
    \ = dateFormatter.date(from: date)\n    return date != nil\n  }\n  return false",
  "    let pattern = \"^(([0][1-9])|([1][0-2]))-(([0][1-9])|([1-2][0-9])|([3][0-1]))-(([1][9][0-9][0-9])|([2][0][0-9][0-9]))$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  return regex.matches(in: date, options: [], range: NSRange(location: 0, length:\
    \ date.count)).count > 0", '    return false', "    let format = \"dd-MM-yyyy\"\
    \n    let formatter = DateFormatter()\n    formatter.dateFormat = format\n   \
    \ guard let _ = formatter.date(from: date) else {\n        return false\n    }\n\
    \    return true", "    let dateArray = date.components(separatedBy: \"-\")\n\
    \    guard dateArray.count == 3 else {\n        return false\n    }\n    guard\
    \ dateArray[0].count == 2 && dateArray[1].count == 2 && dateArray[2].count ==\
    \ 4 else {\n        return false\n    }\n    let month = Int(dateArray[0]) ??\
    \ 0\n    let day = Int(dateArray[1]) ?? 0\n    let year = Int(dateArray[2]) ??\
    \ 0\n    guard month >= 1 && month <= 12 else {\n        return false\n    }\n\
    \    if month == 2 {\n        if year % 4 == 0 {\n            return day >= 1\
    \ && day <= 29\n        } else {\n            return day >= 1 && day <= 28\n \
    \       }\n    } else if month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12 {\n        return day >= 1 && day\
    \ <= 31\n    } else {\n        return day >= 1 && day <= 30\n    }", "    let\
    \ dateRgx = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\n    let\
    \ matched = date.range(of: dateRgx, options: .regularExpression)\n    return matched\
    \ != nil", "    let numberDays = [\"01\": 31, \"02\": 28, \"03\": 31, \"04\":\
    \ 30, \"05\": 31, \"06\": 30, \"07\": 31, \"08\": 31, \"09\": 30, \"10\": 31,\
    \ \"11\": 30, \"12\": 31]\n    var dateList = date.components(separatedBy: \"\
    -\")\n    if dateList.count != 3 {\n        return false\n    }\n    if dateList[0].count\
    \ != 2 || dateList[1].count != 2 || dateList[2].count != 4 {\n        return false\n\
    \    }\n    if numberDays[dateList[0]] == nil {\n        return false\n    }\n\
    \    if Int(dateList[1])! > numberDays[dateList[0]]! {\n        return false\n\
    \    }\n    return true", "    var components = date.components(separatedBy: \"\
    -\")\n    if components.count != 3 {\n        return false\n    }\n    if let\
    \ month = Int(components[0]), let day = Int(components[1]), let year = Int(components[2])\
    \ {\n        let daysInMonths = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31]\n        if year < 0 || month < 1 || month > 12 || day < 1 || day > daysInMonths[month]\
    \ {\n            return false\n        }\n        return true\n    }\n    return\
    \ false", "    let pattern = #\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    #\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n \
    \   let matches = regex.matches(in: date, options: [], range: NSRange(location:\
    \ 0, length: date.count))\n    return matches.count == 1", "    \n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale\
    \ = Locale(identifier: \"en_US_POSIX\")\n    dateFormatter.timeZone = TimeZone(secondsFromGMT:\
    \ 0)\n    \n    if let _ = dateFormatter.date(from: date) {\n        return true\n\
    \    } else {\n        return false\n    }", "    let comps = date.components(separatedBy:\
    \ \"-\")\n    if comps.count != 3 {\n        return false\n    }\n    if comps[0].count\
    \ != 2 || comps[1].count != 2 || comps[2].count != 4 {\n        return false\n\
    \    }\n    guard let month = Int(comps[0]), let day = Int(comps[1]), let year\
    \ = Int(comps[2]) else {\n        return false\n    }\n    let daysInMonth = [31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month < 1 || month > 12\
    \ {\n        return false\n    }\n    if day < 1 || day > daysInMonth[month -\
    \ 1] {\n        return false\n    }\n    if month == 2 && day == 29 {\n      \
    \  if year % 4 != 0 {\n            return false\n        }\n        if year %\
    \ 100 == 0 && year % 400 != 0 {\n            return false\n        }\n    }\n\
    \    return true", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    let dateString = dateFormatter.date(from: date)\n    return\
    \ dateString != nil", "    if date.isEmpty {\n        return false\n    }\n  \
    \  let dateComponents = date.components(separatedBy: CharacterSet(charactersIn:\
    \ \"-/\"))\n    guard dateComponents.count == 3 else {\n        return false\n\
    \    }\n    guard dateComponents[0].isNumeric, dateComponents[1].isNumeric, dateComponents[2].isNumeric\
    \ else {\n        return false\n    }\n    let day = Int(dateComponents[1])\n\
    \    let month = Int(dateComponents[0])\n    let year = Int(dateComponents[2])\n\
    \    guard day != nil, month != nil, year != nil else {\n        return false\n\
    \    }\n    let months = [1, 3, 5, 7, 8, 10, 12]\n    if !months.contains(month!)\
    \ && (day! > 30 || day! < 1) {\n        return false\n    }\n    if month! ==\
    \ 2 && day! > 29 {\n        return false\n    }\n    if month! < 1 || month! >\
    \ 12 {\n        return false\n    }\n    return true", '    return false', " \
    \   \n    let possibleComponents = date.components(separatedBy: \"-\")\n    guard\
    \ possibleComponents.count == 3 else {\n        return false\n    }\n    \n  \
    \  let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"dd-MM-yyyy\"\
    \n    dateFormatter.timeZone = TimeZone(abbreviation: \"GMT+0:00\")\n    \n  \
    \  guard let _ = dateFormatter.date(from: date) else {\n        return false\n\
    \    }\n    \n    return true", "    let dateComponents = date.components(separatedBy:\
    \ \"-\")\n    let month = Int(dateComponents[0]) ?? 0\n    let day = Int(dateComponents[1])\
    \ ?? 0\n    let year = Int(dateComponents[2]) ?? 0\n    return isValidDate(dateComponents:\
    \ dateComponents) &&\n        isValidDay(day: day, month: month) &&\n        isValidMonth(month:\
    \ month) &&\n        isValidYear(year: year)", "    let calendar = Calendar.current\n\
    \    let components = date.components(separatedBy: \"-\")\n    guard let day =\
    \ Int(components[0]), let month = Int(components[1]), let year = Int(components[2])\
    \ else {\n        return false\n    }\n    let dateComponents = DateComponents(year:\
    \ year, month: month, day: day)\n    guard let date = calendar.date(from: dateComponents)\
    \ else {\n        return false\n    }\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    return dateFormatter.string(from:\
    \ date) == date", "    let dateRegex = \"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \n    let dateTest = NSPredicate(format: \"SELF MATCHES %@\", dateRegex)\n   \
    \ let dateBool = dateTest.evaluate(with: date)\n    if !dateBool {\n        return\
    \ false\n    }\n    let dateSplit = date.split(separator: \"-\")\n    let month\
    \ = Int(dateSplit[0])\n    let day = Int(dateSplit[1])\n    switch month {\n \
    \   case 1, 3, 5, 7, 8, 10, 12:\n        if day! < 1 || day! > 31 {\n        \
    \    return false\n        }\n    case 4, 6, 9, 11:\n        if day! < 1 || day!\
    \ > 30 {\n            return false\n        }\n    case 2:\n        if day! <\
    \ 1 || day! > 29 {\n            return false\n        }\n    default:\n      \
    \  return false\n    }\n    return true", "    // Enter your code between the\
    \ two comment markers\n    let tmpDate = date.components(separatedBy: \"-\")\n\
    \    if tmpDate.count != 3 {\n        return false\n    }\n    guard let day =\
    \ Int(tmpDate[1]), let month = Int(tmpDate[0]), let year = Int(tmpDate[2]) else\
    \ {\n        return false\n    }\n    switch month {\n    case 1, 3, 5, 7, 8,\
    \ 10, 12:\n        if day > 31 || day < 1 {\n            return false\n      \
    \  }\n    case 4, 6, 9, 11:\n        if day > 30 || day < 1 {\n            return\
    \ false\n        }\n    case 2:\n        if year % 4 == 0 {\n            if day\
    \ > 29 || day < 1 {\n                return false\n            }\n        } else\
    \ {\n            if day > 28 || day < 1 {\n                return false\n    \
    \        }\n        }\n    default:\n        return false\n    }\n    return true\n\
    \    // End code", "    var components = date.components(separatedBy: \"-\")\n\
    \    if components.count != 3 {\n        return false\n    }\n    let month =\
    \ Int(components[0]) ?? 0\n    let day = Int(components[1]) ?? 0\n    let year\
    \ = Int(components[2]) ?? 0\n    if month < 1 || month > 12 {\n        return\
    \ false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n  \
    \  if (month == 2 && day > 29) || (month == 4 && day > 30) || (month == 6 && day\
    \ > 30) || (month == 9 && day > 30) || (month == 11 && day > 30) {\n        return\
    \ false\n    }\n    if year < 0 {\n        return false\n    }\n    return true",
  "    let validMonths = \"^(0[1-9]|1[0-2])\\\\-(0[1-9]|[1-2][0-9]|3[0-1])\\\\-\\\\\
    d{4}$\"\n    let validJanuaryMarchMayJulyAugustOctoberDecember = \"^(0[1-9]|1[0-2])\\\
    \\-(0[1-9]|[1-2][0-9]|3[0-1])\\\\-\\\\d{4}$\"\n    let validAprilJuneSeptemberNovember\
    \ = \"^(0[1-9]|1[0-2])\\\\-(0[1-9]|[1-2][0-9]|30)\\\\-\\\\d{4}$\"\n    let validFebruary\
    \ = \"^(0[1-9]|1[0-2])\\\\-(0[1-9]|[1-2][0-9]|29)\\\\-\\\\d{4}$\"\n    let validYear\
    \ = \"^(0[1-9]|1[0-2])\\\\-(0[1-9]|[1-2][0-9]|3[0-1])\\\\-\\\\d{4}$\"\n    let\
    \ validFormat = \"^(0[1-9]|1[0-2])\\\\-(0[1-9]|[1-2][0-9]|3[0-1])\\\\-\\\\d{4}$\"\
    \n    let validSlash = \"^\\\\d{2}\\\\/\\\\d{2}\\\\/\\\\d{4}$\"\n    return Regex(validMonths).test(input:\
    \ date) &&\n           Regex(validJanuaryMarchMayJulyAugustOctoberDecember).test(input:\
    \ date) &&\n           Regex(validAprilJuneSeptemberNovember).test(input: date)\
    \ &&\n           Regex(validFebruary).test(input: date) &&\n           Regex(validYear).test(input:\
    \ date) &&\n           Regex(validFormat).test(input: date) &&\n           !Regex(validSlash).test(input:\
    \ date)", "    let regex = try! NSRegularExpression(pattern: \"^\\\\d{2}-\\\\\
    d{2}-\\\\d{4}$\")\n    let match = regex.firstMatch(in: date, range: NSRange(location:\
    \ 0, length: date.count)) != nil\n    if match {\n        let arr = date.split(separator:\
    \ \"-\")\n        guard let month = Int(arr[0]), let day = Int(arr[1]), let year\
    \ = Int(arr[2]) else { return false }\n        if month < 1 || month > 12 { return\
    \ false }\n        switch month {\n        case 1, 3, 5, 7, 8, 10, 12:\n     \
    \       if day < 1 || day > 31 { return false }\n        case 4, 6, 9, 11:\n \
    \           if day < 1 || day > 30 { return false }\n        case 2:\n       \
    \     if day < 1 || day > 29 { return false }\n        default:\n            return\
    \ false\n        }\n        if year < 1 { return false }\n        return true\n\
    \    }\n    return false", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"mm-dd-yyyy\"\n    let someDateTime = dateFormatter.date(from: date)\n  \
    \  return someDateTime != nil", "    guard date.count == 10 else { return false\
    \ }\n    guard date.suffix(4).isAllDigits else { return false }\n    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"dd-MM-yyyy\"\n    guard\
    \ let date = dateFormatter.date(from: date) else { return false }\n    return\
    \ date.isToday || date.isPast", "    var valid = true\n    let date_regex = \"\
    ^(([0][1-9])|([1][0-2]))-(([0][1-9])|([1-2][0-9])|([3][0-1]))-([0-9]{4})$\"\n\
    \    let regex = try! NSRegularExpression(pattern: date_regex, options: [])\n\
    \    let matches = regex.matches(in: date, options: [], range: NSRange(location:\
    \ 0, length: date.count))\n    if matches.count == 0 {\n        valid = false\n\
    \    }\n    if valid {\n        let date_sep = date.split(separator: \"-\")\n\
    \        let m = Int(date_sep[0])!\n        let d = Int(date_sep[1])!\n      \
    \  let y = Int(date_sep[2])!\n        valid = m > 0 && m < 13 && d > 0 && d <\
    \ 32 && y > 0\n        if m == 2 {\n            if y % 4 == 0 {\n            \
    \    valid = d < 30\n            } else {\n                valid = d < 29\n  \
    \          }\n        } else if m == 4 || m == 6 || m == 9 || m == 11 {\n    \
    \        valid = d < 31\n        }\n    }\n    return valid", "    // put your\
    \ code here\n    return true", "    // Validations\n    let pattern = \"^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$\"\
    \n    guard let regex = try? NSRegularExpression(pattern: pattern, options: [])\
    \ else { return false }\n    guard regex.matches(in: date, options: [], range:\
    \ NSRange(location: 0, length: date.count)).count == 1 else { return false }\n\
    \    \n    // After validation, split date\n    let dateArr = date.split(separator:\
    \ \"-\")\n    guard let month = Int(dateArr[0]), let day = Int(dateArr[1]), let\
    \ year = Int(dateArr[2]) else { return false }\n    \n    let daysOfMonths = [31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    let monthLimit = 12\n    let\
    \ yearLimit = 9999\n    \n    // check month\n    guard 1...monthLimit ~= month\
    \ else { return false }\n    \n    // check year\n    guard year < yearLimit else\
    \ { return false }\n    \n    // check days of month\n    guard daysOfMonths[month\
    \ - 1] >= day else { return false }\n    \n    // no need to check Feb for non-leap\
    \ year\n    if month != 2 { return true }\n    \n    // check leap year\n    if\
    \ year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) {\n        return true\n\
    \    }\n    \n    return false", "    // 1. The date string is not empty.\n  \
    \  if date.isEmpty {\n        return false\n    }\n    \n    // 2. The number\
    \ of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n    let dateArr = date.components(separatedBy: \"-\")\n    let month:\
    \ Int = Int(dateArr[0])!\n    let day: Int = Int(dateArr[1])!\n    if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12) && (day < 1 || day > 31) {\n        return false\n    } else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) && (day < 1 || day >\
    \ 30) {\n        return false\n    } else if month == 2 && (day < 1 || day > 29)\
    \ {\n        return false\n    }\n    \n    // 3. The months should not be less\
    \ than 1 or higher than 12.\n    if month < 1 || month > 12 {\n        return\
    \ false\n    }\n    \n    // 4. The date should be in the format: mm-dd-yyyy\n\
    \    if dateArr.count != 3 {\n        return false\n    }\n    \n    return true",
  "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    dateFormatter.timeZone = TimeZone(abbreviation: \"GMT+0:00\")\n    guard\
    \ let dateFromString = dateFormatter.date(from: date) else {\n        return false\n\
    \    }\n    return true", "    let monthIndex = date.index(date.startIndex, offsetBy:\
    \ 2)\n    let month = Int(date[..<monthIndex])\n    let monthDays = [0, 31, 29,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    guard date.count == 10 else { return\
    \ false }\n    guard date[monthIndex] == \"-\" else { return false }\n    guard\
    \ date[date.index(monthIndex, offsetBy: 3)] == \"-\" else { return false }\n \
    \   guard let monthInt = month, monthInt >= 1, monthInt <= 12 else { return false\
    \ }\n    guard monthDays[monthInt] >= Int(date[date.index(monthIndex, offsetBy:\
    \ 1)...])! else { return false }\n    return true", '    return date.hasPrefix("01-")
    || date.hasPrefix("02-") || date.hasPrefix("03-") || date.hasPrefix("04-") ||
    date.hasPrefix("05-") || date.hasPrefix("06-") || date.hasPrefix("07-") || date.hasPrefix("08-")
    || date.hasPrefix("09-") || date.hasPrefix("10-") || date.hasPrefix("11-") ||
    date.hasPrefix("12-")', "    if date.isEmpty {\n        return false\n    }\n\
    \    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    if let _ = dateFormatter.date(from: date) {\n        return true\n    }\n\
    \    return false", "    // write your code here\n    return true", "    // Write\
    \ your code here.\n    return true", "    if date.count < 10 {\n        return\
    \ false\n    }\n    var arr = date.split(separator: \"-\")\n    guard arr.count\
    \ == 3 else {\n        return false\n    }\n    guard arr[0].count == 2, arr[1].count\
    \ == 2, arr[2].count == 4 else {\n        return false\n    }\n    guard let day\
    \ = Int(arr[1]), let month = Int(arr[0]), let year = Int(arr[2]) else {\n    \
    \    return false\n    }\n    if year < 1 {\n        return false\n    }\n   \
    \ if month < 1 || month > 12 {\n        return false\n    }\n    if month == 2\
    \ {\n        if day < 1 || day > 29 {\n            return false\n        }\n \
    \   } else if month == 4 || month == 6 || month == 9 || month == 11 {\n      \
    \  if day < 1 || day > 30 {\n            return false\n        }\n    } else {\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    }\n\
    \    return true", '    return false', "    if date.isEmpty {\n        return\
    \ false\n    }\n    let separatedDate = date.components(separatedBy: \"-\")\n\
    \    if separatedDate.count != 3 {\n        return false\n    }\n    let month\
    \ = Int(separatedDate[0])\n    let day = Int(separatedDate[1])\n    let year =\
    \ Int(separatedDate[2])\n    if month == nil || day == nil || year == nil {\n\
    \        return false\n    }\n    switch month! {\n    case 1, 3, 5, 7, 8, 10,\
    \ 12:\n        if day! > 31 || day! < 1 {\n            return false\n        }\n\
    \    case 4, 6, 9, 11:\n        if day! > 30 || day! < 1 {\n            return\
    \ false\n        }\n    case 2:\n        if year! % 4 == 0 {\n            if day!\
    \ > 29 || day! < 1 {\n                return false\n            }\n        } else\
    \ {\n            if day! > 28 || day! < 1 {\n                return false\n  \
    \          }\n        }\n    default:\n        return false\n    }\n    return\
    \ true", '    return false', "    guard !date.isEmpty else { return false }\n\
    \    guard date.contains(\"-\") else { return false }\n    let dateArr = date.components(separatedBy:\
    \ \"-\")\n    guard dateArr.count == 3 else { return false }\n    guard let dd\
    \ = Int(dateArr[0]), let mm = Int(dateArr[1]), let yyyy = Int(dateArr[2]) else\
    \ { return false }\n    switch mm {\n    case 1, 3, 5, 7, 8, 10, 12:\n       \
    \ guard dd >= 1 && dd <= 31 else { return false }\n    case 4, 6, 9, 11:\n   \
    \     guard dd >= 1 && dd <= 30 else { return false }\n    case 2:\n        guard\
    \ dd >= 1 && dd <= 29 else { return false }\n    default:\n        return false\n\
    \    }\n    guard mm >= 1 && mm <= 12 else { return false }\n    return true",
  "    if date.contains(\"-\") == false {\n        return false\n    }\n    let date_array\
    \ = date.components(separatedBy: \"-\")\n    if date_array.count != 3 {\n    \
    \    return false\n    }\n    let month = Int(date_array[0]) ?? 0\n    let day\
    \ = Int(date_array[1]) ?? 0\n    let year = Int(date_array[2]) ?? 0\n    if month\
    \ < 1 || month > 12 {\n        return false\n    }\n    if year < 0 {\n      \
    \  return false\n    }\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n\
    \        if day < 1 || day > 31 {\n            return false\n        }\n    case\
    \ 4, 6, 9, 11:\n        if day < 1 || day > 30 {\n            return false\n \
    \       }\n    case 2:\n        if (year % 4 == 0 && year % 100 != 0) || year\
    \ % 400 == 0 {\n            if day < 1 || day > 29 {\n                return false\n\
    \            }\n        } else {\n            if day < 1 || day > 28 {\n     \
    \           return false\n            }\n        }\n    default:\n        return\
    \ false\n    }\n    return true", "    let date = date.split(separator: \"-\"\
    )\n    if date.count == 3 {\n        if let month = Int(date[0]),\n          \
    \  let day = Int(date[1]),\n            let year = Int(date[2]) {\n          \
    \  if month < 1 || month > 12 {\n                return false\n            }\n\
    \            switch month {\n            case 1, 3, 5, 7, 8, 10, 12:\n       \
    \         if day < 1 || day > 31 {\n                    return false\n       \
    \         }\n            case 4, 6, 9, 11:\n                if day < 1 || day\
    \ > 30 {\n                    return false\n                }\n            case\
    \ 2:\n                if day < 1 || day > 29 {\n                    return false\n\
    \                }\n            default:\n                return false\n     \
    \       }\n            if year < 1 {\n                return false\n         \
    \   }\n            return true\n        }\n    }\n    return false", "    \n \
    \   let check = date.components(separatedBy: \"-\")\n    let check2 = date.components(separatedBy:\
    \ \"/\")\n    \n    if check.count != 3 || check2.count != 1 {\n        return\
    \ false\n    }\n    \n    let month = Int(check[0])!\n    let day = Int(check[1])!\n\
    \    let year = Int(check[2])!\n    \n    if month > 12 || month < 1 {\n     \
    \   return false\n    }\n    \n    if day > 31 || day < 1 {\n        return false\n\
    \    }\n    \n    if month == 2 && day > 29 {\n        return false\n    }\n \
    \   \n    if month == 4 || month == 6 || month == 9 || month == 11 {\n       \
    \ if day > 30 {\n            return false\n        }\n    }\n    \n    return\
    \ true", "    guard !date.isEmpty else { return false }\n    let components =\
    \ date.components(separatedBy: \"-\")\n    guard components.count == 3 else {\
    \ return false }\n    let year = Int(components[2])!\n    let month = Int(components[0])!\n\
    \    let day = Int(components[1])!\n    guard month >= 1 && month <= 12 else {\
    \ return false }\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n      \
    \  guard day >= 1 && day <= 31 else { return false }\n    case 4, 6, 9, 11:\n\
    \        guard day >= 1 && day <= 30 else { return false }\n    case 2:\n    \
    \    guard day >= 1 && day <= 29 else { return false }\n    default:\n       \
    \ break\n    }\n    return true", "  let formatter = DateFormatter()\n  formatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n  guard let _ = formatter.date(from: date) else {\n    return\
    \ false\n  }\n  return true", "  let pattern = #\"^((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))-\\\
    d{4}$\"#\n  let monthDays = [nil, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31]\n  let numbers = date.split(separator: \"-\").map { Int($0)! }\n  let month\
    \ = numbers[0]\n  let day = numbers[1]\n  let year = numbers[2]\n  let regex =\
    \ try! NSRegularExpression(pattern: pattern, options: [])\n  if regex.firstMatch(in:\
    \ date, options: [], range: NSRange(location: 0, length: date.count)) == nil {\n\
    \    return false\n  }\n  if month > 12 || month < 1 {\n    return false\n  }\n\
    \  if day > monthDays[month]! || day < 1 {\n    return false\n  }\n  if month\
    \ == 2 && day == 29 && !((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)\
    \ {\n    return false\n  }\n  return true", "    // Place your code here\n   \
    \ return false", "    let dateArray = date.components(separatedBy: \"-\")\n  \
    \  if dateArray.count == 3 {\n        if let month = Int(dateArray[0]), let day\
    \ = Int(dateArray[1]), let year = Int(dateArray[2]) {\n            if month >=\
    \ 1 && month <= 12 {\n                switch month {\n                case 1,\
    \ 3, 5, 7, 8, 10, 12:\n                    if day >= 1 && day <= 31 {\n      \
    \                  return true\n                    }\n                case 4,\
    \ 6, 9, 11:\n                    if day >= 1 && day <= 30 {\n                \
    \        return true\n                    }\n                case 2:\n       \
    \             if day >= 1 && day <= 29 {\n                        return true\n\
    \                    }\n                default:\n                    return false\n\
    \                }\n            }\n        }\n    }\n    return false", "  let\
    \ regex = \"^([0-1][0-9])-(0[1-9]|[1-2][0-9]|3[0-1])-(19[0-9][0-9]|20[0-9][0-9])$\"\
    \n  return checkRegex(regex: regex, against: date)", "    // \uB0A0\uC9DC\uB97C\
    \ \uD30C\uC2F1\uD558\uAE30 \uC704\uD574 DateFormatter\uC744 \uC120\uC5B8\uD55C\
    \uB2E4.\n    let formatter = DateFormatter()\n    // \uD3EC\uB9F7\uC744 \uC9C0\
    \uC815\uD55C\uB2E4.\n    formatter.dateFormat = \"MM-dd-yyyy\"\n    // \uC635\uC154\
    \uB110 \uAC1D\uCCB4\uC774\uAE30 \uB54C\uBB38\uC5D0 \uC548\uC804\uD558\uAC8C \uCD94\
    \uCD9C\uD55C\uB2E4.\n    guard let _ = formatter.date(from: date) else {\n   \
    \     return false\n    }\n    return true", "    let components = date.components(separatedBy:\
    \ \"-\")\n    guard components.count == 3 else { return false }\n    guard let\
    \ year = Int(components[2]), let month = Int(components[0]), let day = Int(components[1])\
    \ else { return false }\n    guard year > 0, month > 0, month < 13, day > 0 else\
    \ { return false }\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n    \
    \    guard day < 32 else { return false }\n    case 4, 6, 9, 11:\n        guard\
    \ day < 31 else { return false }\n    case 2:\n        if year % 4 == 0 && year\
    \ % 100 != 0 || year % 400 == 0 {\n            guard day < 30 else { return false\
    \ }\n        } else {\n            guard day < 29 else { return false }\n    \
    \    }\n    default:\n        return false\n    }\n    return true", "    var\
    \ is_valid = false\n    let months = [\"january\", \"february\", \"march\", \"\
    april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\",\
    \ \"november\", \"december\"]\n    let date_split = date.split(separator: \"-\"\
    )\n    if date_split.count == 3 {\n        let month = String(date_split[0])\n\
    \        let day = String(date_split[1])\n        let year = String(date_split[2])\n\
    \        if let month_number = Int(month), let day_number = Int(day), let year_number\
    \ = Int(year) {\n            if months.contains(month.lowercased()) {\n      \
    \          if month_number > 0 && month_number < 13 {\n                    if\
    \ day_number > 0 && day_number < 32 {\n                        if year_number\
    \ > 0 {\n                            is_valid = true\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    }\n\
    \    return is_valid", "    guard !date.isEmpty else { return false }\n    guard\
    \ date.count == 10 else { return false }\n    guard date.components(separatedBy:\
    \ \"-\").count == 3 else { return false }\n    guard !(date.contains(\" \")) else\
    \ { return false }\n    let components = date.components(separatedBy: \"-\")\n\
    \    guard let day = Int(components[1]), let month = Int(components[0]), let year\
    \ = Int(components[2]) else { return false }\n    switch month {\n    case 1,\
    \ 3, 5, 7, 8, 10, 12:\n        guard day <= 31 && day >= 1 else { return false\
    \ }\n    case 4, 6, 9, 11:\n        guard day <= 30 && day >= 1 else { return\
    \ false }\n    case 2:\n        guard day <= 29 && day >= 1 else { return false\
    \ }\n    default:\n        return false\n    }\n    guard year <= 9999 && year\
    \ >= 0 else { return false }\n    guard month <= 12 && month >= 1 else { return\
    \ false }\n    return true", "    // write your code here\n    let dateArr = date.components(separatedBy:\
    \ \"-\")\n    if dateArr.count != 3 {\n        return false\n    }\n    let month\
    \ = Int(dateArr[0])\n    let day = Int(dateArr[1])\n    let year = Int(dateArr[2])\n\
    \    if month! > 12 || month! < 1 {\n        return false\n    }\n    if day!\
    \ > 31 || day! < 1 {\n        return false\n    }\n    if (month! == 4 || month!\
    \ == 6 || month! == 9 || month! == 11) && day! > 30 {\n        return false\n\
    \    }\n    if month! == 2 && day! > 29 {\n        return false\n    }\n    if\
    \ year! % 4 == 0 && year! % 100 != 0 && month! == 2 && day! > 28 {\n        return\
    \ false\n    }\n    return true", "  // your code here\n  let date_array = date.split(separator:\
    \ \"-\")\n  guard date_array.count == 3 else {\n    return false\n  }\n  if let\
    \ month = Int(date_array[0]), let day = Int(date_array[1]), let year = Int(date_array[2])\
    \ {\n    if year >= 0 && year <= 9999 {\n      if month >= 1 && month <= 12 {\n\
    \        if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) && day >= 1 && day <= 31 {\n          return\
    \ true\n        } else if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) && day >= 1 && day <= 30 {\n          return true\n        } else if month\
    \ == 2 && day >= 1 && day <= 29 {\n          return true\n        }\n      }\n\
    \    }\n  }\n  return false", '    return true', "    if date.isEmpty {\n    \
    \    return false\n    }\n    let parts = date.split(separator: \"-\")\n    guard\
    \ parts.count == 3 else {\n        return false\n    }\n    let month = Int(parts[0])!\n\
    \    let day = Int(parts[1])!\n    let year = Int(parts[2])!\n    switch month\
    \ {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day > 31 || day < 1 {\n     \
    \       return false\n        }\n    case 4, 6, 9, 11:\n        if day > 30 ||\
    \ day < 1 {\n            return false\n        }\n    case 2:\n        if day\
    \ > 29 || day < 1 {\n            return false\n        }\n    default:\n     \
    \   return false\n    }\n    if month > 12 || month < 1 {\n        return false\n\
    \    }\n    return true", "    \n    // check if the date is empty\n    if date.isEmpty\
    \ {\n        return false\n    }\n    \n    // split the date into an array\n\
    \    let date = date.split(separator: \"-\")\n    \n    // check if the date is\
    \ in the correct format\n    if date.count != 3 {\n        return false\n    }\n\
    \    \n    // if it is, then convert each field of the date into integers\n  \
    \  let month = Int(date[0])\n    let day = Int(date[1])\n    let year = Int(date[2])\n\
    \    \n    // check if the month is valid (1-12)\n    if month! > 12 || month!\
    \ < 1 {\n        return false\n    }\n    \n    // check if the month is a valid\
    \ month (between 1 and 31 days)\n    if month! == 1 || month! == 3 || month! ==\
    \ 5 || month! == 7 || month! == 8 || month! == 10 || month! == 12 {\n        if\
    \ day! > 31 || day! < 1 {\n            return false\n        }\n    }\n    \n\
    \    // check if the month is a valid month (between 1 and 30 days)\n    if month!\
    \ == 4 || month! == 6 || month! == 9 || month! == 11 {\n        if day! > 30 ||\
    \ day! < 1 {\n            return false\n        }\n    }\n    \n    // check if\
    \ the month is a valid month (between 1 and 29 days)\n    if month! == 2 {\n \
    \       if day! > 29 || day! < 1 {\n            return false\n        }\n    }\n\
    \    \n    // check if the year is valid\n    if year! < 1 {\n        return false\n\
    \    }\n    \n    // if the date passes all tests above, return true\n    return\
    \ true", "    let date = date.split(separator: \"-\")\n    if date.count != 3\
    \ {\n        return false\n    }\n    let month = Int(date[0]) ?? 0\n    let day\
    \ = Int(date[1]) ?? 0\n    let year = Int(date[2]) ?? 0\n    if month < 1 || month\
    \ > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return\
    \ false\n    }\n    if (month == 2 && day > 29) || ((month == 4 || month == 6\
    \ || month == 9 || month == 11) && day > 30) {\n        return false\n    }\n\
    \    if year < 0 {\n        return false\n    }\n    return true", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"mm-dd-yyyy\"\n    let date\
    \ = dateFormatter.date(from: date)\n    if date != nil {\n        return true\n\
    \    }\n    return false", "    let dateComponents = date.components(separatedBy:\
    \ \"-\")\n    guard dateComponents.count == 3 else { return false }\n    if let\
    \ month = Int(dateComponents[0]), let day = Int(dateComponents[1]), let year =\
    \ Int(dateComponents[2]) {\n        switch month {\n        case 2:\n        \
    \    return day <= 29 && day >= 1\n        case 4, 6, 9, 11:\n            return\
    \ day <= 30 && day >= 1\n        case 1, 3, 5, 7, 8, 10, 12:\n            return\
    \ day <= 31 && day >= 1\n        default:\n            return false\n        }\n\
    \    }\n    return false", '    return date.range(of: "^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$",
    options: .regularExpression) != nil', '    return false', '    return true', " \
    \   let months = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\"\
    , \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"]\n    let months_n = [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]\n\
    \    let d_split = date.components(separatedBy: \"-\")\n    guard d_split.count\
    \ == 3 else { return false }\n    guard d_split[0].count == 2 else { return false\
    \ }\n    guard d_split[1].count == 2 else { return false }\n    guard d_split[2].count\
    \ == 4 else { return false }\n    guard let month = Int(d_split[0]) else { return\
    \ false }\n    guard month >= 1 && month <= 12 else { return false }\n    guard\
    \ let days = Int(d_split[1]) else { return false }\n    guard days >= 1 && days\
    \ <= 31 else { return false }\n    guard let year = Int(d_split[2]) else { return\
    \ false }\n    guard year >= 0 else { return false }\n    if months_n.contains(d_split[0])\
    \ {\n        return true\n    } else if months.contains(d_split[0].lowercased())\
    \ {\n        return true\n    } else {\n        return false\n    }", '    return
    false', "    let calendar = Calendar.current\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let validDate = dateFormatter.date(from:\
    \ date) {\n        if let validDateInCalendar = calendar.date(from: calendar.dateComponents([.year,\
    \ .month, .day], from: validDate)) {\n            return validDateInCalendar ==\
    \ validDate\n        }\n    }\n    return false", "    let months = [1, 3, 5,\
    \ 7, 8, 10, 12]\n    let months2 = [4, 6, 9, 11]\n    let month = date.split(separator:\
    \ \"-\")[0]\n    let day = date.split(separator: \"-\")[1]\n    let year = date.split(separator:\
    \ \"-\")[2]\n    if date.isEmpty {\n        return false\n    }\n    guard let\
    \ monthInt = Int(month),\n        let dayInt = Int(day),\n        let yearInt\
    \ = Int(year) else {\n            return false\n    }\n    if monthInt == 2 &&\
    \ dayInt > 29 {\n        return false\n    }\n    if months.contains(monthInt)\
    \ && dayInt > 31 {\n        return false\n    }\n    if months2.contains(monthInt)\
    \ && dayInt > 30 {\n        return false\n    }\n    if dayInt < 1 || dayInt >\
    \ 31 {\n        return false\n    }\n    if monthInt < 1 || monthInt > 12 {\n\
    \        return false\n    }\n    if yearInt < 1 {\n        return false\n   \
    \ }\n    return true", "    var result = false\n    let dateArray = date.components(separatedBy:\
    \ \"-\")\n    let month = Int(dateArray[0])\n    let day = Int(dateArray[1])\n\
    \    let year = Int(dateArray[2])\n    if year! % 4 == 0{\n        if month! ==\
    \ 2 && day! <= 29 {\n            result = true\n        } else if (month! == 1\
    \ || month! == 3 || month! == 5 || month! == 7 || month! == 8 || month! == 10\
    \ || month! == 12) && day! <= 31 {\n            result = true\n        } else\
    \ if (month! == 4 || month! == 6 || month! == 9 || month! == 11) && day! <= 30\
    \ {\n            result = true\n        }\n    } else {\n        if month! ==\
    \ 2 && day! <= 28 {\n            result = true\n        } else if (month! == 1\
    \ || month! == 3 || month! == 5 || month! == 7 || month! == 8 || month! == 10\
    \ || month! == 12) && day! <= 31 {\n            result = true\n        } else\
    \ if (month! == 4 || month! == 6 || month! == 9 || month! == 11) && day! <= 30\
    \ {\n            result = true\n        }\n    }\n    return result", "    let\
    \ date = date.split(separator: \"-\")\n    if date.count != 3 {\n        return\
    \ false\n    }\n    if date[0].count != 2 || date[1].count != 2 || date[2].count\
    \ != 4 {\n        return false\n    }\n    guard let month = Int(date[0]), let\
    \ day = Int(date[1]), let year = Int(date[2]) else {\n        return false\n \
    \   }\n    if month > 12 || month < 1 {\n        return false\n    }\n    let\
    \ isLeapYear = year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\n    if month\
    \ == 2 {\n        if day > 29 || day < 1 {\n            return false\n       \
    \ }\n        if !isLeapYear && day == 29 {\n            return false\n       \
    \ }\n    } else if month % 2 == 0 {\n        if day > 30 || day < 1 {\n      \
    \      return false\n        }\n    } else {\n        if day > 31 || day < 1 {\n\
    \            return false\n        }\n    }\n    return true", "    // validator\n\
    \    var isValid = true\n    // check empty and format\n    if date.isEmpty ||\
    \ !date.contains(\"-\") {\n        isValid = false\n    } else {\n        // convert\
    \ to array\n        let dateArr = date.components(separatedBy: \"-\")\n      \
    \  // check the length\n        if dateArr.count != 3 {\n            isValid =\
    \ false\n        } else {\n            // check month\n            guard let month\
    \ = Int(dateArr[0]) else {\n                isValid = false\n                return\
    \ isValid\n            }\n            if month < 1 || month > 12 {\n         \
    \       isValid = false\n            } else {\n                // check day\n\
    \                guard let day = Int(dateArr[1]) else {\n                    isValid\
    \ = false\n                    return isValid\n                }\n           \
    \     switch month {\n                case 1, 3, 5, 7, 8, 10, 12:\n          \
    \          if day < 1 || day > 31 {\n                        isValid = false\n\
    \                    }\n                case 4, 6, 9, 11:\n                  \
    \  if day < 1 || day > 30 {\n                        isValid = false\n       \
    \             }\n                case 2:\n                    if day < 1 || day\
    \ > 29 {\n                        isValid = false\n                    }\n   \
    \             default:\n                    isValid = false\n                }\n\
    \            }\n        }\n    }\n    return isValid", '    return false', " \
    \   // Write your code here\n    return false", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    let date = dateFormatter.date(from:\
    \ date)\n    if date != nil {\n        return true\n    }\n    return false",
  "    let dateFormat = \"MM-dd-yyyy\"\n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = dateFormat\n    let formatDate = dateFormatter.date(from:\
    \ date)\n    let isValidDate = formatDate != nil\n    return isValidDate", " \
    \   let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\
    \n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    dateFormatter.timeZone\
    \ = TimeZone(secondsFromGMT: 0)\n    if let validDate = dateFormatter.date(from:\
    \ date) {\n        return true\n    }\n    return false", "  // validate the length\
    \ of the string\n  if date.count == 0 {\n    return false\n  }\n  // validate\
    \ that the input is in the format \"mm-dd-yyyy\"\n  if !date.contains(\"-\") {\n\
    \    return false\n  }\n  // split the date string by \"-\"\n  let dateComponents\
    \ = date.split(separator: \"-\")\n  guard let month = Int(dateComponents[0]),\n\
    \    let day = Int(dateComponents[1]),\n    let year = Int(dateComponents[2])\
    \ else {\n      return false\n  }\n  // check if month is in the range [1, 12]\n\
    \  if !(1...12 ~= month) {\n    return false\n  }\n  // check if day is in the\
    \ correct range\n  switch month {\n  case 1, 3, 5, 7, 8, 10, 12:\n    if !(1...31\
    \ ~= day) {\n      return false\n    }\n  case 4, 6, 9, 11:\n    if !(1...30 ~=\
    \ day) {\n      return false\n    }\n  case 2:\n    if !(1...29 ~= day) {\n  \
    \    return false\n    }\n  default:\n    return false\n  }\n  // check if year\
    \ is in the range [1900, 2050]\n  if !(1900...2050 ~= year) {\n    return false\n\
    \  }\n  return true", "    var values = date.split(separator: \"-\")\n    if values.count\
    \ != 3 {\n        return false\n    }\n    guard let month = Int(values[0]), let\
    \ day = Int(values[1]), let year = Int(values[2]) else {\n        return false\n\
    \    }\n    guard year > 999 && year < 10000 else {\n        return false\n  \
    \  }\n    let days = getDays(month: month, year: year)\n    if month > 12 || month\
    \ < 1 || day > days || day < 1 {\n        return false\n    }\n    return true",
  "    guard date.count == 10 else { return false }\n    guard date.contains(\"-\"\
    ) else { return false }\n    guard let index = date.firstIndex(of: \"-\") else\
    \ { return false }\n    guard index == 2 else { return false }\n    guard let\
    \ lastIndex = date.lastIndex(of: \"-\") else { return false }\n    guard lastIndex\
    \ == 5 else { return false }\n    guard let day = Int(date[..<index]) else { return\
    \ false }\n    guard let month = Int(date[date.index(after: index)..<date.index(before:\
    \ lastIndex)]) else { return false }\n    guard let year = Int(date[date.index(after:\
    \ lastIndex)...]) else { return false }\n    let monthDays = [1: 31, 2: 28, 3:\
    \ 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31]\n    guard\
    \ monthDays[month]! >= day else { return false }\n    return true", "    let dateParts\
    \ = date.split(separator: \"-\")\n    if dateParts.count != 3 {\n        return\
    \ false\n    }\n    let month = Int(dateParts[0]) ?? 0\n    let day = Int(dateParts[1])\
    \ ?? 0\n    let year = Int(dateParts[2]) ?? 0\n    if month > 12 || month < 1\
    \ {\n        return false\n    }\n    if day > 31 || day < 1 {\n        return\
    \ false\n    }\n    if month == 2 && day > 29 {\n        return false\n    }\n\
    \    if [4, 6, 9, 11].contains(month) && day > 30 {\n        return false\n  \
    \  }\n    return true", "    guard let date = date.components(separatedBy: \"\
    /\").first else { return false }\n    return DateFormatter.dateFormat(fromTemplate:\
    \ \"MM-dd-yyyy\", options: 0, locale: Locale.current).contains(date)", "    let\
    \ dateArr = date.components(separatedBy: \"-\")\n    guard dateArr.count == 3,\n\
    \        let month = Int(dateArr[0]),\n        let day = Int(dateArr[1]),\n  \
    \      let year = Int(dateArr[2]) else {\n            return false\n    }\n  \
    \  guard year >= 0,\n        month >= 1, month <= 12,\n        day >= 1, day <=\
    \ 31 else {\n            return false\n    }\n    let daysInMonth = [31,28,31,30,31,30,31,31,30,31,30,31]\n\
    \    if month == 2 {\n        if year % 4 == 0 && (year % 100 != 0 || year % 400\
    \ == 0) {\n            return day >= 1 && day <= 29\n        } else {\n      \
    \      return day >= 1 && day <= 28\n        }\n    } else {\n        return day\
    \ >= 1 && day <= daysInMonth[month-1]\n    }", '    return false', "    \n   \
    \ let components = date.components(separatedBy: CharacterSet(charactersIn: \"\
    -\")).map { Int($0) }\n    \n    if components.count != 3 {\n        return false\n\
    \    }\n    \n    let month = components[0]\n    let day = components[1]\n   \
    \ let year = components[2]\n    \n    if month == nil || day == nil || year ==\
    \ nil {\n        return false\n    }\n    \n    let isLeapYear = year!.isMultiple(of:\
    \ 4) && !year!.isMultiple(of: 100) || year!.isMultiple(of: 400)\n    \n    let\
    \ isMonthValid = month! >= 1 && month! <= 12\n    let isDayValid = day! >= 1 &&\
    \ day! <= 31\n    \n    if isMonthValid && isDayValid {\n        if month! ==\
    \ 2 {\n            if isLeapYear {\n                return day! <= 29\n      \
    \      } else {\n                return day! <= 28\n            }\n        } else\
    \ if month! == 4 || month! == 6 || month! == 9 || month! == 11 {\n           \
    \ return day! <= 30\n        }\n        return true\n    }\n    \n    return false",
  "    //var list_date: [String] = date.split(separator: \"-\")\n    let list_date\
    \ = date.split(separator: \"-\")\n    var result = false\n    if list_date.count\
    \ != 3 {\n        return result\n    }\n    if let month = Int(list_date[0]),\
    \ let day = Int(list_date[1]), let year = Int(list_date[2]) {\n        if day\
    \ > 0 && day < 32 && month > 0 && month < 13 && year > 1899 && year < 2201 {\n\
    \            if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) && day <= 31 {\n                result =\
    \ true\n            } else if (month == 4 || month == 6 || month == 9 || month\
    \ == 11) && day <= 30 {\n                result = true\n            } else if\
    \ month == 2 && day <= 29 {\n                result = true\n            }\n  \
    \      }\n    }\n    return result", "    if !date.isEmpty {\n        let tmp\
    \ = date.split(separator: \"-\")\n        if tmp.count == 3 {\n            if\
    \ let month = Int(tmp[0]), let day = Int(tmp[1]), let year = Int(tmp[2]) {\n \
    \               if month >= 1 && month <= 12 {\n                    switch month\
    \ {\n                    case 1, 3, 5, 7, 8, 10, 12:\n                       \
    \ if day >= 1 && day <= 31 {\n                            return true\n      \
    \                  }\n                    case 4, 6, 9, 11:\n                \
    \        if day >= 1 && day <= 30 {\n                            return true\n\
    \                        }\n                    case 2:\n                    \
    \    if year % 4 == 0 {\n                            if day >= 1 && day <= 29\
    \ {\n                                return true\n                           \
    \ }\n                        } else {\n                            if day >= 1\
    \ && day <= 28 {\n                                return true\n              \
    \              }\n                        }\n                    default:\n  \
    \                      return false\n                    }\n                }\n\
    \            }\n        }\n    }\n    return false", "    let comps = date.components(separatedBy:\
    \ \"-\")\n    if comps.count != 3 {\n        return false\n    }\n    let day\
    \ = Int(comps[1]) ?? 0\n    let month = Int(comps[0]) ?? 0\n    let year = Int(comps[2])\
    \ ?? 0\n    if month < 1 || month > 12 {\n        return false\n    }\n    if\
    \ day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n  \
    \      if (year % 4 == 0 && year % 100 != 0) || year % 400 == 0 {\n          \
    \  if day > 29 {\n                return false\n            }\n        } else\
    \ {\n            if day > 28 {\n                return false\n            }\n\
    \        }\n    } else if month == 4 || month == 6 || month == 9 || month == 11\
    \ {\n        if day > 30 {\n            return false\n        }\n    }\n    return\
    \ true", "    let months: [Int] = [1, 3, 5, 7, 8, 10, 12]\n    var days: [Int]\
    \ = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    let chars: [Character]\
    \ = Array(date)\n    if !(chars.count == 10) {\n        return false\n    }\n\
    \    var day: Int = Int(String(chars[0...1]))!\n    var month: Int = Int(String(chars[3...4]))!\n\
    \    var year: Int = Int(String(chars[6...9]))!\n    if year % 4 == 0 && (year\
    \ % 100 != 0 || year % 400 == 0) {\n        days[2] = 29\n    }\n    if !(chars[2]\
    \ == \"-\") || !(chars[5] == \"-\") {\n        return false\n    }\n    return\
    \ (month <= 12 && month > 0) && (day > 0 && day <= days[month])", "    let dateFormatter\
    \ = DateFormatter()\n    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    return\
    \ dateFormatter.date(from: date) != nil", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier:\
    \ \"en_US_POSIX\")\n    guard let _ = dateFormatter.date(from: date) else {\n\
    \        return false\n    }\n    return true", "    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    if let _ = dateFormatter.date(from:\
    \ date) {\n        return true\n    } else {\n        return false\n    }", " \
    \   let sep = Set(\"-/.\")\n    let datesep = CharacterSet(charactersIn: date).intersection(sep)\n\
    \    if datesep.count != 1 {\n        return false\n    }\n    let date_arr =\
    \ date.components(separatedBy: datesep)\n    if date_arr.count != 3 {\n      \
    \  return false\n    }\n    let month = Int(date_arr[0]) ?? 0\n    let day = Int(date_arr[1])\
    \ ?? 0\n    let year = Int(date_arr[2]) ?? 0\n    if month < 1 || month > 12 {\n\
    \        return false\n    }\n    if year < 1800 || year > 2200 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day < 1 || day > 29 {\n      \
    \      return false\n        }\n    } else if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        if day < 1 || day > 30 {\n            return\
    \ false\n        }\n    } else {\n        if day < 1 || day > 31 {\n         \
    \   return false\n        }\n    }\n    return true", "    let date = date.components(separatedBy:\
    \ CharacterSet(charactersIn: \"-/\"))\n    guard date.count == 3 else { return\
    \ false }\n    let validDay = (1...31).contains(Int(date[1])!)\n    let validMonth\
    \ = (1...12).contains(Int(date[0])!)\n    return validDay && validMonth", '    return
    false', "    let acceptableChars = CharacterSet(charactersIn: \"0123456789-\"\
    )\n    let acceptableCharsArray = Array(acceptableChars)\n    let dateArray =\
    \ Array(date)\n    if dateArray.count == 10 {\n        for element in dateArray\
    \ {\n            if !acceptableCharsArray.contains(element) {\n              \
    \  return false\n            }\n        }\n        var month = \"\"\n        var\
    \ day = \"\"\n        var year = \"\"\n        if dateArray[2] == \"-\" && dateArray[5]\
    \ == \"-\" {\n            month = String(dateArray[0]) + String(dateArray[1])\n\
    \            day = String(dateArray[3]) + String(dateArray[4])\n            year\
    \ = String(dateArray[6]) + String(dateArray[7]) + String(dateArray[8]) + String(dateArray[9])\n\
    \        } else {\n            return false\n        }\n        if let monthInt\
    \ = Int(month), let dayInt = Int(day), let yearInt = Int(year) {\n           \
    \ if yearInt >= 2020 {\n                switch monthInt {\n                case\
    \ 1:\n                    if dayInt >= 1 && dayInt <= 31 {\n                 \
    \       return true\n                    }\n                case 2:\n        \
    \            if dayInt >= 1 && dayInt <= 29 {\n                        return\
    \ true\n                    }\n                case 3:\n                    if\
    \ dayInt >= 1 && dayInt <= 31 {\n                        return true\n       \
    \             }\n                case 4:\n                    if dayInt >= 1 &&\
    \ dayInt <= 30 {\n                        return true\n                    }\n\
    \                case 5:\n                    if dayInt >= 1 && dayInt <= 31 {\n\
    \                        return true\n                    }\n                case\
    \ 6:\n                    if dayInt >= 1 && dayInt <= 30 {\n                 \
    \       return true\n                    }\n                case 7:\n        \
    \            if dayInt >= 1 && dayInt <= 31 {\n                        return\
    \ true\n                    }\n                case 8:\n                    if\
    \ dayInt >= 1 && dayInt <= 31 {\n                        return true\n       \
    \             }\n                case 9:\n                    if dayInt >= 1 &&\
    \ dayInt <= 30 {\n                        return true\n                    }\n\
    \                case 10:\n                    if dayInt >= 1 && dayInt <= 31\
    \ {\n                        return true\n                    }\n            \
    \    case 11:\n                   ", "    \n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation:\
    \ \"GMT+0:00\")\n    let dateTest = dateFormatter.date(from: date)\n    \n   \
    \ if dateTest != nil {\n        return true\n    }\n    return false", "    let\
    \ date_split = date.split(separator: \"-\")\n    if date_split.count != 3 {\n\
    \        return false\n    }\n    guard let month = Int(date_split[0]), let day\
    \ = Int(date_split[1]), let year = Int(date_split[2]) else {\n        return false\n\
    \    }\n    if month < 1 || month > 12 {\n        return false\n    }\n    if\
    \ day < 1 || day > 31 {\n        return false\n    }\n    if month == 2 {\n  \
    \      if day > 29 {\n            return false\n        }\n    } else if month\
    \ == 4 || month == 6 || month == 9 || month == 11 {\n        if day > 30 {\n \
    \           return false\n        }\n    }\n    return true", "  // TODO: Write\
    \ some code to solve this coding challenge\n  return false", "    let words =\
    \ date.split(separator: \"-\")\n    guard words.count == 3 else { return false\
    \ }\n    guard let month = Int(words[0]), let day = Int(words[1]), let year =\
    \ Int(words[2]) else { return false }\n    if day < 1 || day > 31 { return false\
    \ }\n    if day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)\
    \ { return false }\n    if month == 2 && day > 29 { return false }\n    if month\
    \ < 1 || month > 12 { return false }\n    if year < 1 { return false }\n    return\
    \ true", "    \n    let dateRegex = \"(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}\"\
    \n    let dateTest = NSPredicate(format: \"SELF MATCHES %@\", dateRegex)\n   \
    \ return dateTest.evaluate(with: date)", "  //  return true\n  \n  var isValid\
    \ = false\n  let dateFormatter = DateFormatter()\n  dateFormatter.dateFormat =\
    \ \"MM-dd-yyyy\"\n  if let _ = dateFormatter.date(from: date) {\n    isValid =\
    \ true\n  }\n  return isValid", "    // write your code here\n    return true",
  '    return false', "    var components = date.components(separatedBy: \"-\")\n\
    \    let days = Int(components[1])\n    let months = Int(components[0])\n    let\
    \ years = Int(components[2])\n    if days! > 0 && months! > 0 && years! > 0 {\n\
    \        if months! < 13 {\n            if months! == 1 || months! == 3 || months!\
    \ == 5 || months! == 7 || months! == 8 || months! == 10 || months! == 12 {\n \
    \               if days! < 32 {\n                    return true\n           \
    \     }\n            } else if months! == 4 || months! == 6 || months! == 9 ||\
    \ months! == 11 {\n                if days! < 31 {\n                    return\
    \ true\n                }\n            } else if months! == 2 {\n            \
    \    if days! < 30 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false", "    let dateParts = date.split(separator:\
    \ \"-\")\n    if dateParts.count != 3 {\n        return false\n    }\n    let\
    \ month = Int(dateParts[0]) ?? 0\n    let day = Int(dateParts[1]) ?? 0\n    let\
    \ year = Int(dateParts[2]) ?? 0\n    let currentYear = Calendar.current.component(.year,\
    \ from: Date())\n    if year > currentYear {\n        return false\n    }\n  \
    \  switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        if day > 31 || day\
    \ < 1 {\n            return false\n        }\n    case 4, 6, 9, 11:\n        if\
    \ day > 30 || day < 1 {\n            return false\n        }\n    case 2:\n  \
    \      if day > 29 || day < 1 {\n            return false\n        }\n    default:\n\
    \        return false\n    }\n    return true", "    if date.count < 10 {\n  \
    \      return false\n    }\n    if date.contains(\"/\") {\n        return false\n\
    \    }\n    let dateArr = date.components(separatedBy: \"-\")\n    let months\
    \ = Int(dateArr[0])\n    let days = Int(dateArr[1])\n    let years = Int(dateArr[2])\n\
    \    if months! > 12 || months! < 1 {\n        return false\n    }\n    if days!\
    \ > 31 || days! < 1 {\n        return false\n    }\n    if years! < 1 {\n    \
    \    return false\n    }\n    return true", "    let months = [31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31]\n    let chars = date.split(separator: \"-\"\
    )\n    let month = Int(chars[0])!\n    let day = Int(chars[1])!\n    let year\
    \ = Int(chars[2])!\n    return month > 0 && month <= 12 && day > 0 && day <= months[month\
    \ - 1] && (year > 0 && year < 3000)", "    let dateComponents = date.components(separatedBy:\
    \ \"-\")\n    guard dateComponents.count == 3 else { return false }\n    guard\
    \ let year = Int(dateComponents[2]), year >= 0 else { return false }\n    guard\
    \ let month = Int(dateComponents[0]), month >= 1, month <= 12 else { return false\
    \ }\n    guard let day = Int(dateComponents[1]), day >= 1 else { return false\
    \ }\n    let isLeapYear = year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)\n\
    \    switch month {\n    case 2:\n        return isLeapYear ? day <= 29 : day\
    \ <= 28\n    case 4, 6, 9, 11:\n        return day <= 30\n    default:\n     \
    \   return day <= 31\n    }", "    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n    let date = dateFormatter.date(from: date)\n    return date != nil", " \
    \   let formatter = DateFormatter()\n    formatter.dateFormat = \"MM-dd-yyyy\"\
    \n    guard let _ = formatter.date(from: date) else {\n        return false\n\
    \    }\n    return true", "    guard date.count == 10 else { return false }\n\
    \    let valid_format = #\"^(\\d{2})-(\\d{2})-(\\d{4})$\"#\n    guard date =~\
    \ valid_format else { return false }\n    let groups = date.matches(for: valid_format)\n\
    \    let month = Int(groups[0])!\n    let day = Int(groups[1])!\n    let year\
    \ = Int(groups[2])!\n    let leap_year = (year % 4 == 0 && year % 100 != 0) ||\
    \ year % 400 == 0\n    if year < 0 { return false }\n    switch month {\n    case\
    \ 1, 3, 5, 7, 8, 10, 12:\n        if day > 31 || day < 1 { return false }\n  \
    \  case 4, 6, 9, 11:\n        if day > 30 || day < 1 { return false }\n    case\
    \ 2:\n        if leap_year {\n            if day > 29 || day < 1 { return false\
    \ }\n        } else {\n            if day > 28 || day < 1 { return false }\n \
    \       }\n    default:\n        return false\n    }\n    return true", "  let\
    \ numberOfDays = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  let dateArray\
    \ = date.components(separatedBy: \"-\")\n  if dateArray.count != 3 {\n    return\
    \ false\n  }\n  guard let month = Int(dateArray[0]), let day = Int(dateArray[1]),\
    \ let year = Int(dateArray[2]) else {\n    return false\n  }\n  if day < 1 ||\
    \ day > numberOfDays[month] {\n    return false\n  }\n  if month < 1 || month\
    \ > 12 {\n    return false\n  }\n  return true", "  let check = date.split(separator:\
    \ \"-\")\n  if check.count != 3 {\n    return false\n  }\n  guard let month =\
    \ Int(check[0]),\n        let day = Int(check[1]),\n        let year = Int(check[2])\
    \ else {\n    return false\n  }\n  if month < 1 || month > 12 {\n    return false\n\
    \  }\n  if day < 1 || day > 31 {\n    return false\n  }\n  if month == 2 {\n \
    \   if day > 29 {\n      return false\n    }\n  } else if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n    if day > 30 {\n      return false\n\
    \    }\n  }\n  return true", "    guard !date.isEmpty else { return false }\n\
    \    let components = date.components(separatedBy: CharacterSet(charactersIn:\
    \ \"-/ \"))\n    guard components.count == 3 else { return false }\n    guard\
    \ let day = Int(components[1]), let month = Int(components[0]), let year = Int(components[2])\
    \ else { return false }\n    guard month > 0 && month < 13 else { return false\
    \ }\n    let daysInMonth = [4, 6, 9, 11].contains(month) ? 30 : [2].contains(month)\
    \ ? 28 : 31\n    guard day > 0 && day <= daysInMonth else { return false }\n \
    \   return true", "    let dateArr = date.components(separatedBy: \"-\")\n   \
    \ guard dateArr.count == 3 else { return false }\n    let year = Int(dateArr[2])\
    \ ?? 0\n    let month = Int(dateArr[0]) ?? 0\n    let day = Int(dateArr[1]) ??\
    \ 0\n    guard year > 0, month > 0, day > 0 else { return false }\n    if month\
    \ > 12 { return false }\n    if month == 2 {\n        if day > 29 { return false\
    \ }\n    } else if month == 4 || month == 6 || month == 9 || month == 11 {\n \
    \       if day > 30 { return false }\n    } else {\n        if day > 31 { return\
    \ false }\n    }\n    return true", "    let regex = \"^(?:(?:31(\\\\/|-|\\\\\
    .)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\\
    2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\
    \\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    \\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\\
    d)?\\\\d{2})$\"\n    let matches = date.matches(regex)\n    return !matches.isEmpty",
  "    let date_regex = \"[0-9]{2}-[0-9]{2}-[0-9]{4}\"\n    guard date.match(pattern:\
    \ date_regex) else { return false }\n    let date_components = date.components(separatedBy:\
    \ \"-\")\n    guard date_components.count == 3 else { return false }\n    guard\
    \ let month = Int(date_components[0]), let day = Int(date_components[1]), let\
    \ year = Int(date_components[2]) else { return false }\n    guard year >= 1 else\
    \ { return false }\n    guard month >= 1 && month <= 12 else { return false }\n\
    \    guard day >= 1 && day <= 31 else { return false }\n    switch month {\n \
    \   case 1, 3, 5, 7, 8, 10, 12:\n        guard day <= 31 else { return false }\n\
    \    case 4, 6, 9, 11:\n        guard day <= 30 else { return false }\n    case\
    \ 2:\n        if year % 4 == 0 {\n            guard day <= 29 else { return false\
    \ }\n        } else {\n            guard day <= 28 else { return false }\n   \
    \     }\n    default:\n        return false\n    }\n    return true", '    return
    false', "    let pattern = #\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    #\n    let dateTest = NSPredicate(format: \"SELF MATCHES %@\", pattern)\n    return\
    \ dateTest.evaluate(with: date)", "    guard !date.isEmpty else { return false\
    \ }\n    let monthInt = Int(date.prefix(2))\n    let dayInt = Int(date.dropFirst(3).prefix(2))\n\
    \    let yearInt = Int(date.dropFirst(6))\n    guard date.count == 10, date.prefix(2).contains(\"\
    -\"), date.dropFirst(3).prefix(2).contains(\"-\"), date.suffix(4).contains(\"\
    -\"), monthInt != nil, dayInt != nil, yearInt != nil else { return false }\n \
    \   let month = monthInt!\n    let day = dayInt!\n    let year = yearInt!\n  \
    \  let monthsThirty = [4, 6, 9, 11]\n    let monthsThirtyOne = [1, 3, 5, 7, 8,\
    \ 10, 12]\n    if year < 1 { return false }\n    if monthsThirty.contains(month)\
    \ {\n        if day < 1 || day > 30 { return false }\n    } else if monthsThirtyOne.contains(month)\
    \ {\n        if day < 1 || day > 31 { return false }\n    } else if month == 2\
    \ {\n        if day < 1 || day > 29 { return false }\n    } else {\n        return\
    \ false\n    }\n    return true", "    let parts = date.split(separator: \"-\"\
    )\n    guard parts.count == 3 else { return false }\n    guard let year = Int(parts[2]),\
    \ year >= 0 else { return false }\n    guard let month = Int(parts[0]), 1...12\
    \ ~= month else { return false }\n    guard let day = Int(parts[1]), 1...31 ~=\
    \ day else { return false }\n    if [1, 3, 5, 7, 8, 10, 12].contains(month) {\n\
    \        if day > 31 { return false }\n    } else if [4, 6, 9, 11].contains(month)\
    \ {\n        if day > 30 { return false }\n    } else if day > 29 {\n        return\
    \ false\n    }\n    return true"]
stop_tokens:
- "\n}"
