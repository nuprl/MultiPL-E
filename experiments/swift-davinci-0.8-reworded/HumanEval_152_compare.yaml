name: HumanEval_152_compare
language: swift
prompt: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return an array of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\n/// >>>\
  \ compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0, 0, 0, 0,\
  \ 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0, 0, -2])\n\
  /// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess:\
  \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0,\
  \ 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
  \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
  \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
completions: ["    var res: [Int] = []\n    for i in 0..<game.count {\n        if\
    \ game[i] > guess[i] {\n            res.append(game[i] - guess[i])\n        }\
    \ else if game[i] < guess[i] {\n            res.append(guess[i] - game[i])\n \
    \       } else {\n            res.append(0)\n        }\n    }\n    return res",
  "    var result = [Int]()\n    for (index, _) in game.enumerated() {\n        if\
    \ game[index] < guess[index] {\n            result.append(abs(game[index] - guess[index]))\n\
    \        } else if game[index] > guess[index] {\n            result.append(abs(game[index]\
    \ - guess[index]))\n        } else {\n            result.append(0)\n        }\n\
    \    }\n    return result", "    var result: [Int] = []\n    for i in 0..<game.count\
    \ {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result",
  "    var result: [Int] = []\n    for i in 0..<game.count {\n        if game[i] ==\
    \ guess[i] {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result", "  var results: [Int] =\
    \ []\n  for i in 0..<game.count {\n    let diff = abs(game[i] - guess[i])\n  \
    \  results.append(diff)\n  }\n  return results", "    var result = [Int]()\n \
    \   for (index, element) in game.enumerated() {\n        if element > guess[index]\
    \ {\n            result.append(element - guess[index])\n        } else if element\
    \ < guess[index] {\n            result.append(guess[index] - element)\n      \
    \  } else {\n            result.append(0)\n        }\n    }\n    return result",
  '    return game.enumerated().map { abs($0.element - guess[$0.offset]) }', "   \
    \ guard game.count == guess.count else { return [] }\n    return game.enumerated().map\
    \ { $0.element - guess[$0.offset] }", "    var result: [Int] = []\n    for i in\
    \ 0..<game.count {\n        if game[i] < guess[i] {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        } else if game[i] > guess[i] {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        } else {\n            result.append(0)\n        }\n  \
    \  }\n    return result", "    guard game.count == guess.count else {\n      \
    \  fatalError(\"both arrays should be of the same length\")\n    }\n    var result:\
    \ [Int] = []\n    for index in 0..<game.count {\n        result.append(abs(game[index]\
    \ - guess[index]))\n    }\n    return result", "    var result = [Int]()\n   \
    \ for i in 0..<game.count {\n        if game[i] == guess[i] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[i] - guess[i]))\n      \
    \  }\n    }\n    return result", "    var result = [Int]()\n    for num in 0..<game.count\
    \ {\n        let diff = abs(game[num] - guess[num])\n        result.append(diff)\n\
    \    }\n    return result", "    var arr = [Int]()\n    for i in 0..<game.count\
    \ {\n        arr.append(abs(game[i] - guess[i]))\n    }\n    return arr", '    return
    [0]', "    var differences: [Int] = []\n    for index in 0..<game.count {\n  \
    \      let difference = abs(game[index] - guess[index])\n        differences.append(difference)\n\
    \    }\n    return differences", "    let newArray = zip(game, guess).map{abs($0.0\
    \ - $0.1)}\n    return newArray", "    var result = [Int]()\n    for i in 0..<game.count\
    \ {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result",
  "    var diffs = [Int]()\n    for i in 0..<game.count {\n        diffs.append(abs(game[i]\
    \ - guess[i]))\n    }\n    return diffs", "    if game.count != guess.count {\n\
    \        return []\n    }\n    var results = [Int]()\n    for i in 0..<game.count\
    \ {\n        if game[i] == guess[i] {\n            results.append(0)\n       \
    \ } else {\n            results.append(abs(game[i] - guess[i]))\n        }\n \
    \   }\n    return results", "    var result: [Int] = []\n    for (index, _) in\
    \ game.enumerated() {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n    }\n    return result", "    let diff = zip(game, guess).map {\
    \ abs($0 - $1) }\n    return diff", '    return game.indices.map { abs(game[$0]
    - guess[$0]) }', "    var gameScore = [Int]()\n    for (idx, _) in game.enumerated()\
    \ {\n        gameScore.append(abs(game[idx] - guess[idx]))\n    }\n    return\
    \ gameScore", '    return game.enumerated().map { $0.element == guess[$0.offset]
    ? 0 : abs($0.element - guess[$0.offset]) }', "    assert(game.count == guess.count,\
    \ \"The arrays must be of equal length\")\n    var result: [Int] = []\n    for\
    \ i in 0..<game.count {\n        let absDiff = abs(game[i] - guess[i])\n     \
    \   result.append(absDiff)\n    }\n    return result", "    var diffs = [Int]()\n\
    \    var idx = 0\n    while idx < game.count {\n        let diff = abs(game[idx]\
    \ - guess[idx])\n        diffs.append(diff)\n        idx += 1\n    }\n    return\
    \ diffs", '    return game.enumerated().map { $0.element - guess[$0.offset] }',
  "    \n    return game.enumerated().map { ($0.offset, $0.element) }.map { $0.element\
    \ - guess[$0.offset] }.map { abs($0) }", '    return game.enumerated().map { return
    max(game[$0.offset] - guess[$0.offset], guess[$0.offset] - game[$0.offset]) }',
  '    return game.enumerated().map { game[$0.offset] == guess[$0.offset] ? 0 : abs(game[$0.offset]
    - guess[$0.offset]) }', "    var result = [Int]()\n    for i in 0..<game.count\
    \ {\n        result.append(game[i] - guess[i])\n    }\n    return result", " \
    \   var result: [Int] = []\n    for (index, score) in game.enumerated() {\n  \
    \      result.append(abs(score - guess[index]))\n    }\n    return result", " \
    \ var arr: [Int] = []\n  for i in 0..<game.count {\n    if game[i] > guess[i]\
    \ {\n      arr.append(game[i] - guess[i])\n    } else if game[i] < guess[i] {\n\
    \      arr.append(guess[i] - game[i])\n    } else {\n      arr.append(0)\n   \
    \ }\n  }\n  return arr", "    var result = [Int]()\n    for i in 0..<game.count\
    \ {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result",
  "    var result: [Int] = []\n    for index in 0..<game.count {\n        result.append(abs(game[index]\
    \ - guess[index]))\n    }\n    return result", "    var results = [Int]()\n  \
    \  for i in 0..<game.count {\n        if game[i] == guess[i] {\n            results.append(0)\n\
    \        } else {\n            results.append(abs(game[i] - guess[i]))\n     \
    \   }\n    }\n    return results", "    var res: [Int] = []\n    for i in 0..<game.count\
    \ {\n        let diff = game[i] - guess[i]\n        res.append(abs(diff))\n  \
    \  }\n    return res", '    return game.enumerated().map({ $0.element - guess[$0.offset]
    }).map({ $0 < 0 ? $0 * -1 : $0 })', "    var arr = [Int]()\n    for (index, n)\
    \ in game.enumerated() {\n        if n == guess[index] {\n            arr.append(0)\n\
    \        } else {\n            arr.append(abs(n - guess[index]))\n        }\n\
    \    }\n    return arr", "    var result: [Int] = []\n    for index in 0..<game.count\
    \ {\n        result.append(abs(game[index] - guess[index]))\n    }\n    return\
    \ result", '    return zip(game, guess).map(-)', "    \n    var result = [Int]()\n\
    \    \n    for i in 0..<game.count {\n        if game[i] != guess[i] {\n     \
    \       result.append(abs(game[i] - guess[i]))\n        } else {\n           \
    \ result.append(0)\n        }\n    }\n    \n    return result", "  var right =\
    \ [Int]()\n  for (index, value) in game.enumerated() {\n    if game[index] ==\
    \ guess[index] {\n      right.append(0)\n    } else {\n      let difference =\
    \ abs(value - guess[index])\n      right.append(difference)\n    }\n  }\n  return\
    \ right", "    var finalResult = [Int]()\n    for i in 0..<game.count {\n    \
    \    let result = game[i] - guess[i]\n        finalResult.append(abs(result))\n\
    \    }\n    return finalResult", '    return []', "    var result: [Int] = []\n\
    \    for i in 0..<game.count {\n        let n = game[i]\n        let g = guess[i]\n\
    \        let res = abs(n - g)\n        result.append(res)\n    }\n    return result",
  "    var arr = [Int]()\n    for i in 0..<game.count {\n        arr.append(abs(game[i]\
    \ - guess[i]))\n    }\n    return arr", '    return game.enumerated().map { $0.element
    - guess[$0.offset] }', "    var result: [Int] = []\n    for i in 0..<game.count\
    \ {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result",
  "    var result: [Int] = []\n    for i in 0..<game.count {\n        let number =\
    \ abs(game[i] - guess[i])\n        result.append(number)\n    }\n    return result",
  '    return game.enumerated().map { $0.1 == guess[$0.0] ? 0 : abs($0.1 - guess[$0.0])
    }', "    var result: [Int] = []\n    for index in 0..<game.count {\n        if\
    \ game[index] == guess[index] {\n            result.append(0)\n        } else\
    \ {\n            result.append(abs(game[index] - guess[index]))\n        }\n \
    \   }\n    return result", '    return game.enumerated().map { abs($0.element
    - guess[$0.offset]) }', "    var res = [Int]()\n    for (index, number) in game.enumerated()\
    \ {\n        res.append(abs(number - guess[index]))\n    }\n    return res", " \
    \   var result: [Int] = []\n    for n in 0...game.count - 1 {\n        let diff\
    \ = abs(game[n] - guess[n])\n        result.append(diff)\n    }\n    return result",
  "    var results = [Int]()\n    if game.count == guess.count {\n        for index\
    \ in 0..<game.count {\n            let value = game[index] - guess[index]\n  \
    \          results.append(abs(value))\n        }\n    }\n    return results",
  '    return game.enumerated().map { $0 == $1 ? 0 : abs($0 - $1) }', "    var result\
    \ = [Int]()\n    for (key, _) in game.enumerated() {\n        result.append(abs(game[key]\
    \ - guess[key]))\n    }\n    return result", '    return game.enumerated().map
    { $0.1 - guess[$0.0] }', "    return game.enumerated().map({ (i, v) -> Int in\n\
    \        if v == guess[i] {\n            return 0\n        } else {\n        \
    \    return abs(v - guess[i])\n        }\n    })", "    var arr: [Int] = []\n\
    \    for i in 0..<game.count {\n        if game[i] == guess[i] {\n           \
    \ arr.append(0)\n        } else {\n            arr.append(abs(game[i] - guess[i]))\n\
    \        }\n    }\n    return arr", "    return game.enumerated().map { \n   \
    \     guess[$0.offset] - $0.element == 0 ? 0 : abs(guess[$0.offset] - $0.element)\
    \ \n    }", '    return zip(game, guess).map { $0 == $1 ? 0 : abs($0 - $1) }',
  "    var result: [Int] = []\n    for index in 0..<game.count {\n        if (guess[index]\
    \ == game[index]) {\n            result.append(0)\n        } else {\n        \
    \    result.append(abs(guess[index] - game[index]))\n        }\n    }\n    return\
    \ result", '    return game.enumerated().map { (i, num) in return abs(num - guess[i])
    }', "    guard game.count == guess.count else {\n        return []\n    }\n  \
    \  var results = [Int]()\n    for (i, g) in game.enumerated() {\n        results.append(abs(g\
    \ - guess[i]))\n    }\n    return results", "    var result: [Int] = []\n    for\
    \ index in 0..<game.count {\n        result.append(abs(game[index] - guess[index]))\n\
    \    }\n    return result", "  var result: [Int] = []\n  for i in 0..<game.count\
    \ {\n    result.append(abs(game[i] - guess[i]))\n  }\n  return result", "    if\
    \ game.count != guess.count {\n        return []\n    }\n    var result: [Int]\
    \ = []\n    for (index, guessValue) in guess.enumerated() {\n        let score\
    \ = game[index]\n        let diff = guessValue - score\n        result.append(abs(diff))\n\
    \    }\n    return result", "    var diffs = [Int]()\n    guard game.count ==\
    \ guess.count else {\n        return diffs\n    }\n    for (idx, val) in game.enumerated()\
    \ {\n        let diff = abs(val - guess[idx])\n        diffs.append(diff)\n  \
    \  }\n    return diffs", '    return game.enumerated().map { ($0.element - guess[$0.offset]).abs
    }', "    var result = [Int]()\n    for (index, number) in game.enumerated() {\n\
    \        let diff = abs(number - guess[index])\n        result.append(diff)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<game.count\
    \ {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result",
  "    assert(game.count == guess.count, \"game and guess arrays must be of the same\
    \ length\")\n    var offArray = [Int]()\n    for i in 0..<game.count {\n     \
    \   offArray.append(abs(game[i] - guess[i]))\n    }\n    return offArray", '    return
    zip(game, guess).map { abs($0 - $1) }', "    var arrayToReturn = [Int]()\n   \
    \ for i in 0..<game.count {\n        if game[i] != guess[i] {\n            arrayToReturn.append(abs(game[i]\
    \ - guess[i]))\n        } else {\n            arrayToReturn.append(0)\n      \
    \  }\n    }\n    return arrayToReturn", "    return game.enumerated().map({(index,\
    \ value) in\n        return abs(value - guess[index])\n    })", "    \n    var\
    \ result: [Int] = []\n    \n    for (index, value) in game.enumerated() {\n  \
    \      result.append(value - guess[index])\n    }\n    \n    return result", " \
    \   var results: [Int] = []\n    for (score, guess) in zip(game, guess) {\n  \
    \      if guess == score {\n            results.append(0)\n        } else {\n\
    \            results.append(abs(guess - score))\n        }\n    }\n    return\
    \ results", "    var numberArray = [Int]()\n    for (index, value) in game.enumerated()\
    \ {\n        if value == guess[index] {\n            numberArray.append(0)\n \
    \       } else {\n            numberArray.append(abs(value - guess[index]))\n\
    \        }\n    }\n    return numberArray", "    guard game.count == guess.count\
    \ else { return [] }\n    return zip(game, guess).map { abs($0 - $1) }", "  let\
    \ result = zip(game, guess).map { abs($0.0 - $0.1) }\n  return result", "    var\
    \ result = [Int]()\n    if game.count == guess.count {\n        for i in 0..<game.count\
    \ {\n            result.append(abs(game[i] - guess[i]))\n        }\n    }\n  \
    \  return result", '    return zip(game, guess).map { abs($0.0 - $0.1) }', " \
    \   return game.enumerated().map { index, number in\n        return abs(number\
    \ - guess[index])\n    }", "    var diffArray = [Int]()\n    for index in 0...(game.count\
    \ - 1) {\n        diffArray.append(abs(game[index] - guess[index]))\n    }\n \
    \   return diffArray", "    return game.enumerated().map { index, score in\n \
    \       let guess = guess[index]\n        return abs(score - guess)\n    }", " \
    \   var result: [Int] = []\n    for x in 0..<game.count {\n        result.append(abs(game[x]\
    \ - guess[x]))\n    }\n    return result", "    var results = [Int]()\n    for\
    \ i in 0..<game.count {\n        let diff = abs(game[i] - guess[i])\n        results.append(diff)\n\
    \    }\n    return results", "    if game.count != guess.count {\n        return\
    \ []\n    }\n    var res = [Int]()\n    for (i, _) in game.enumerated() {\n  \
    \      res.append(abs(game[i] - guess[i]))\n    }\n    return res", "    return\
    \ game.enumerated().map {\n        abs($0.element - guess[$0.offset])\n    }",
  '    return zip(game, guess).map { abs($0 - $1) }', "    var result = [Int]()\n\
    \    for (g, gs) in zip(game, guess) {\n        let dif = abs(g - gs)\n      \
    \  result.append(dif)\n    }\n    return result", "    var arr: [Int] = []\n \
    \   for (index, _) in game.enumerated() {\n        arr.append(abs(game[index]\
    \ - guess[index]))\n    }\n    return arr", "    var result = [Int]()\n    for\
    \ (index, element) in game.enumerated() {\n        result.append(abs(element -\
    \ guess[index]))\n    }\n    return result", "    var compareArray = [Int]()\n\
    \    for (index, value) in game.enumerated() {\n        compareArray.append(abs(game[index]\
    \ - guess[index]))\n    }\n    return compareArray", "    // Implement your solution\
    \ here\n    return []", "    let result: [Int] = []\n    for (i, value) in game.enumerated()\
    \ {\n        let difference = abs(value - guess[i])\n        result.append(difference)\n\
    \    }\n    return result", '    return [0]', "    var result: [Int] = []\n  \
    \  for i in 0..<game.count {\n        result.append(abs(game[i] - guess[i]))\n\
    \    }\n    return result", "    var diff = [Int]()\n    for (index, match) in\
    \ game.enumerated() {\n        if game[index] == guess[index] {\n            diff.append(0)\n\
    \        } else {\n            diff.append(abs(match - guess[index]))\n      \
    \  }\n    }\n    return diff", "    var results: [Int] = []\n    for (index, value)\
    \ in game.enumerated() {\n        results.append(abs(value - guess[index]))\n\
    \    }\n    return results", "    var difference: [Int] = []\n    for i in 0..<game.count\
    \ {\n        difference.append(abs(game[i] - guess[i]))\n    }\n    return difference",
  "    return game.enumerated().map { (index, number) -> Int in\n        return abs(number\
    \ - guess[index])\n    }", "    var result: [Int] = []\n    for i in 0...game.count\
    \ - 1 {\n        let diff = abs(game[i] - guess[i])\n        result.append(diff)\n\
    \    }\n    return result", "  var result: [Int] = []\n  for (index, value) in\
    \ game.enumerated() {\n    if value == guess[index] {\n      result.append(0)\n\
    \    } else {\n      result.append(abs(value - guess[index]))\n    }\n  }\n  return\
    \ result", '    return zip(game, guess).map { abs($0 - $1) }', "    var arr =\
    \ [Int]()\n    for i in 0..<game.count {\n        arr.append(abs(game[i] - guess[i]))\n\
    \    }\n    return arr", "    var results = [Int]()\n    for index in 0..<game.count\
    \ {\n        results.append(abs(game[index] - guess[index]))\n    }\n    return\
    \ results", "    var result = [Int]()\n    for (index, element) in game.enumerated()\
    \ {\n        let diff = element - guess[index]\n        result.append(abs(diff))\n\
    \    }\n    return result", "    var result: [Int] = []\n    for index in 0..<game.count\
    \ {\n        if game[index] == guess[index] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[index] - guess[index]))\n\
    \        }\n    }\n    return result", "    var array = [Int]()\n    for i in\
    \ 0..<game.count {\n        if game[i] == guess[i] {\n            array.append(0)\n\
    \        } else {\n            array.append(abs(game[i] - guess[i]))\n       \
    \ }\n    }\n    return array", '    // your code here', '    return zip(game,
    guess).map { abs($0 - $1) }', "    var result = [Int]()\n    for (index, value)\
    \ in game.enumerated() {\n        if value > guess[index] {\n            result.append(value\
    \ - guess[index])\n        } else if value < guess[index] {\n            result.append(guess[index]\
    \ - value)\n        } else {\n            result.append(0)\n        }\n    }\n\
    \    return result", '    return game.indices.map { abs(game[$0] - guess[$0])
    }', '    return zip(game, guess).map { guess, game in abs(guess - game) }', " \
    \   var out = [Int]()\n    for i in 0..<game.count {\n        if guess[i] == game[i]\
    \ {\n            out.append(0)\n        } else {\n            out.append(abs(guess[i]\
    \ - game[i]))\n        }\n    }\n    return out", "    var result: [Int] = []\n\
    \    for i in 0..<game.count {\n        if guess[i] == game[i] {\n           \
    \ result.append(0)\n        } else {\n            result.append(abs(guess[i] -\
    \ game[i]))\n        }\n    }\n    return result", "    var result: [Int] = []\n\
    \    for i in 0..<game.count {\n        if game[i] < guess[i] {\n            result.append(guess[i]\
    \ - game[i])\n        } else if game[i] > guess[i] {\n            result.append(game[i]\
    \ - guess[i])\n        } else {\n            result.append(0)\n        }\n   \
    \ }\n    return result", "    var ret = [Int]()\n    for i in 0..<game.count {\n\
    \        if game[i] != guess[i] {\n            ret.append(abs(game[i] - guess[i]))\n\
    \        } else {\n            ret.append(0)\n        }\n    }\n    return ret",
  "    var result = [Int]()\n    for i in 0..<game.count {\n        if game[i] ==\
    \ guess[i] {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result", "    var result: [Int] =\
    \ []\n    for (i, _) in game.enumerated() {\n        let difference = abs(game[i]\
    \ - guess[i])\n        result.append(difference)\n    }\n    return result", " \
    \   var result: [Int] = []\n    for i in 0..<game.count {\n        if game[i]\
    \ == guess[i] {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result", '    return game.enumerated().map({abs($0.element
    - guess[$0.offset])})', '    return game.indices.map { abs(game[$0] - guess[$0])
    }', "    var score = [Int]()\n    for (index, guess) in guess.enumerated() {\n\
    \        score.append(abs(game[index] - guess))\n    }\n    return score", '    return
    game.enumerated().map { $0.element - guess[$0.offset] }', "    var result: [Int]\
    \ = []\n    var i = 0\n    while i < game.count {\n        if game[i] > guess[i]\
    \ {\n            result.append(game[i] - guess[i])\n        } else if game[i]\
    \ < guess[i] {\n            result.append(guess[i] - game[i])\n        } else\
    \ {\n            result.append(0)\n        }\n        i += 1\n    }\n    return\
    \ result", "    var results = [Int]()\n    for (index, item) in game.enumerated()\
    \ {\n        let distance = abs(item - guess[index])\n        results.append(distance)\n\
    \    }\n    return results", "    if game.count != guess.count {\n        return\
    \ []\n    }\n    var arr: [Int] = []\n    for idx in 0..<game.count {\n      \
    \  if game[idx] == guess[idx] {\n            arr.append(0)\n        } else {\n\
    \            arr.append(abs(game[idx] - guess[idx]))\n        }\n    }\n    return\
    \ arr", "    var result: [Int] = []\n    for i in 0...game.count - 1 {\n     \
    \   if game[i] == guess[i] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(game[i] - guess[i]))\n        }\n    }\n    return\
    \ result", '    return zip(game, guess).map { abs($0.0 - $0.1) }', "    var result\
    \ = [Int]()\n    for i in 0..<game.count {\n        let absDiff = abs(game[i]\
    \ - guess[i])\n        result.append(absDiff)\n    }\n    return result", "  \
    \  var result = [Int]()\n    for index in 0..<game.count {\n        if game[index]\
    \ == guess[index] {\n            result.append(0)\n        } else {\n        \
    \    result.append(abs(game[index] - guess[index]))\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var index = 0\n    while index < game.count\
    \ {\n        let g = game[index]\n        let q = guess[index]\n        if g ==\
    \ q {\n            result.append(0)\n        } else {\n            result.append(abs(g\
    \ - q))\n        }\n        index += 1\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 0..<game.count {\n        result.append(abs(game[i]\
    \ - guess[i]))\n    }\n    return result", "    var result = [Int]()\n    for\
    \ i in 0..<game.count {\n        if game[i] == guess[i] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[i] - guess[i]))\n      \
    \  }\n    }\n    return result", "    if game.count != guess.count {\n       \
    \ return []\n    }\n    var result = [Int]()\n    for i in 0..<game.count {\n\
    \        result.append(abs(game[i] - guess[i]))\n    }\n    return result", " \
    \   // your code here\n    return []", '    return zip(game, guess).map { abs($0
    - $1) }', "    var result = [Int]()\n    for i in 0..<game.count {\n        let\
    \ gameScore = game[i]\n        let guessScore = guess[i]\n        let difference\
    \ = abs(gameScore - guessScore)\n        result.append(difference)\n    }\n  \
    \  return result", "    let result = zip(game, guess).map { $0.0 - $0.1 }\n  \
    \  let comparison = result.map { $0.magnitude }\n    return comparison", "   \
    \ var diff : [Int] = []\n    if game.count == guess.count {\n        for index\
    \ in 0..<game.count {\n            if game[index] == guess[index] {\n        \
    \        diff.append(0)\n            } else {\n                diff.append(abs(game[index]\
    \ - guess[index]))\n            }\n        }\n    }\n    return diff", '    return
    game.enumerated().map { $0.1 - guess[$0.0] }', "    var result: [Int] = []\n \
    \   for (index, _) in game.enumerated() {\n        result.append(abs(game[index]\
    \ - guess[index]))\n    }\n    return result", "    var result = [Int]()\n   \
    \ for (i, value) in game.enumerated() {\n        result.append(abs(game[i] - guess[i]))\n\
    \    }\n    return result", "    \n    var result: [Int] = []\n    \n    for i\
    \ in 0..<game.count {\n        if game[i] == guess[i] {\n            result.append(0)\n\
    \        } else {\n            result.append(abs(game[i] - guess[i]))\n      \
    \  }\n    }\n    \n    return result", "    \n    var result: [Int] = []\n   \
    \ \n    for i in 0..<game.count {\n        let val = abs(game[i] - guess[i])\n\
    \        result.append(val)\n    }\n    \n    return result", "    var result\
    \ = [Int]()\n    for i in 0..<game.count {\n        result.append(abs(game[i]\
    \ - guess[i]))\n    }\n    return result", "    return game.enumerated().map {\
    \ (index, element) -> Int in\n        return abs(element - guess[index])\n   \
    \ }", "    let array = zip(game, guess).map { abs($0 - $1) }\n    return array",
  '    return game.indices.map { abs(game[$0] - guess[$0]) }', "    var result = [Int]()\n\
    \    for index in 0..<game.count {\n        let score = game[index]\n        let\
    \ g = guess[index]\n        if g == score {\n            result.append(0)\n  \
    \      } else {\n            let dif = abs(g - score)\n            result.append(dif)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for index\
    \ in 0..<game.count {\n        let guess = guess[index]\n        let game = game[index]\n\
    \        result.append(abs(guess - game))\n    }\n    return result", "    var\
    \ result: [Int] = []\n    for i in 0..<game.count {\n        if game[i] == guess[i]\
    \ {\n            result.append(0)\n        } else {\n            result.append(abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return result", '    return []', '    return
    []', "    var arr = [Int]()\n    for (i, _) in game.enumerated() {\n        if\
    \ game[i] == guess[i] {\n            arr.append(0)\n        } else {\n       \
    \     arr.append(abs(game[i] - guess[i]))\n        }\n    }\n    return arr",
  '    return game.enumerated().map({($0.element - guess[$0.offset]).distance(to:
    0)})', "    return game.enumerated().map { (offset, element) -> Int in\n     \
    \   abs(element - guess[offset])\n    }", '    return game.enumerated().map {
    abs($0.element - guess[$0.offset]) }', "    guard game.count == guess.count else\
    \ { return [] }\n    var result = [Int]()\n    for index in 0..<game.count {\n\
    \        result.append(abs(game[index] - guess[index]))\n    }\n    return result",
  "    var result = [Int]()\n    for (gameScore, guessScore) in zip(game, guess) {\n\
    \        result.append(abs(gameScore - guessScore))\n    }\n    return result",
  "    var result = [Int]()\n    for (index, score) in game.enumerated() {\n     \
    \   if score == guess[index] {\n            result.append(0)\n        } else {\n\
    \            result.append(abs(score - guess[index]))\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for i in 0..<game.count {\n      \
    \  result.append(abs(game[i] - guess[i]))\n    }\n    return result", "    var\
    \ result: [Int] = []\n    for i in 0..<game.count {\n        result.append(abs(game[i]\
    \ - guess[i]))\n    }\n    return result", "    var resultArray = [Int]()\n  \
    \  for i in 0..<game.count {\n        resultArray.append(abs(game[i] - guess[i]))\n\
    \    }\n    return resultArray", "    var result = [Int]()\n    for i in 0..<game.count\
    \ {\n        let diff = abs(game[i] - guess[i])\n        result.append(diff)\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 0..<game.count\
    \ {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result",
  "    var differences: [Int] = []\n    var iterator: Int = 0\n    while iterator\
    \ < game.count {\n        differences.append(abs(game[iterator] - guess[iterator]))\n\
    \        iterator += 1\n    }\n    return differences", "    var result = [Int]()\n\
    \    for i in 0..<game.count {\n        let resultValue = abs(game[i] - guess[i])\n\
    \        result.append(resultValue)\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for (index, number) in game.enumerated() {\n        let diff\
    \ = abs(number - guess[index])\n        result.append(diff)\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 0..<game.count {\n        result.append(game[i]\
    \ - guess[i])\n    }\n    return result", "    var results: [Int] = []\n    for\
    \ (index, score) in game.enumerated() {\n        let diff = abs(guess[index] -\
    \ score)\n        results.append(diff)\n    }\n    return results", '    return
    zip(game, guess).map { abs($0 - $1) }', "  var result: [Int] = []\n  for (n, x)\
    \ in game.enumerated() {\n    let difference = abs(x - guess[n])\n    result.append(difference)\n\
    \  }\n  return result", "    var results: [Int] = []\n    for i in 0..<game.count\
    \ {\n        results.append(abs(game[i] - guess[i]))\n    }\n    return results",
  "    // your code goes here\n    var result: [Int] = []\n    for i in 0..<game.count\
    \ {\n        if game[i] != guess[i] {\n            result.append(abs(game[i] -\
    \ guess[i]))\n        } else {\n            result.append(0)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    for i in 0..<game.count\
    \ {\n        result.append(abs(game[i] - guess[i]))\n    }\n    return result",
  "    var final : [Int] = []\n    for index in 0..<game.count {\n        final.append(abs(game[index]\
    \ - guess[index]))\n    }\n    return final", "    var result: [Int] = []\n  \
    \  for i in 0..<game.count {\n        result.append(abs(game[i] - guess[i]))\n\
    \    }\n    return result", "    var res: [Int] = []\n    for index in 0..<game.count\
    \ {\n        res.append(abs(game[index] - guess[index]))\n    }\n    return res",
  "    return game.enumerated().map { (index, gameScore) in\n        abs(gameScore\
    \ - guess[index])\n    }", "    var correct = [Int]()\n    for (index, score)\
    \ in game.enumerated() {\n        if guess[index] == score {\n            correct.append(0)\n\
    \        } else {\n            correct.append(abs(guess[index] - score))\n   \
    \     }\n    }\n    return correct", "    let scores = zip(game, guess).map {\
    \ (a, b) -> Int in\n        return abs(a - b)\n    }\n    return scores", "  \
    \  var result: [Int] = []\n    for i in 0..<game.count {\n        let comparison\
    \ = game[i] - guess[i]\n        let resultToAppend = comparison >= 0 ? comparison\
    \ : -comparison\n        result.append(resultToAppend)\n    }\n    return result",
  "    var result = [Int]()\n    for i in 0..<game.count {\n        if game[i] > guess[i]\
    \ {\n            result.append(game[i] - guess[i])\n        } else if game[i]\
    \ < guess[i] {\n            result.append(guess[i] - game[i])\n        } else\
    \ {\n            result.append(0)\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    for i in 0..<game.count {\n        let item = game[i]\
    \ - guess[i]\n        if item < 0 {\n            result.append(item * -1)\n  \
    \      } else {\n            result.append(item)\n        }\n    }\n    return\
    \ result", "    var result: [Int] = []\n    for i in 0...game.count - 1 {\n  \
    \      let sum = abs(game[i] - guess[i])\n        result.append(sum)\n    }\n\
    \    return result", "    var arr = [Int]()\n    for i in 0..<game.count {\n \
    \       arr.append(abs(game[i] - guess[i]))\n    }\n    return arr", '    return
    game.enumerated().map({ $0.element == guess[$0.offset] ? 0 : abs($0.element -
    guess[$0.offset]) })', "    let zip = Array(zip(game, guess))\n    return zip.map\
    \ { abs($0 - $1) }", '    return game.enumerated().map { abs($0.element - guess[$0.offset])
    }', "    guard game.count == guess.count else { return [] }\n    return game.enumerated().map\
    \ { abs($0.element - guess[$0.offset]) }", "    var results: [Int] = []\n    var\
    \ gameIterator = game.makeIterator()\n    var guessIterator = guess.makeIterator()\n\
    \    while let gameItem = gameIterator.next(), let guessItem = guessIterator.next()\
    \ {\n        let result = abs(gameItem - guessItem)\n        results.append(result)\n\
    \    }\n    return results", "    let difference = zip(game, guess).map { $0.0\
    \ - $0.1 }\n    return difference.map { abs($0) }", "    return game.enumerated().map\
    \ { (index, value) -> Int in\n        guard let guessValue = guess[safe: index]\
    \ else { return 0 }\n        return abs(value - guessValue)\n    }", "    var\
    \ result = [Int]()\n    for (index, number) in game.enumerated() {\n        result.append(number\
    \ - guess[index])\n    }\n    return result", "    let result = zip(game, guess).map\
    \ { abs($0 - $1) }\n    return result"]
stop_tokens:
- "\n}"
