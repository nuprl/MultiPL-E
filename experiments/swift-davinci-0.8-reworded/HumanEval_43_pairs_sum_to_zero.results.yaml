language: swift
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let arr = Set(l)\n    for i in arr {\n        if arr.contains(-i)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmppnaat1u8/tmppnaat1u8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae36884fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae368546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae368546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3685457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppnaat1u8                        0x0000558bf1368574 <unavailable> + 5492

    5    libc.so.6                          0x00002ae368a3b460 __libc_start_main +
    245

    6    tmppnaat1u8                        0x0000558bf13681d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var s: Set<Int> = []\n    for n in l {\n        if s.contains(-n)\
    \ {\n            return true\n        }\n        s.insert(n)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var m = Set<Int>()\n    for i in l {\n        if m.contains(-i)\
    \ {\n            return true\n        }\n        m.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var hashTable = [Int: Bool]()\n    for value in l {\n\
    \        if let _ = hashTable[-value] {\n            return true\n        }\n\
    \        hashTable[value] = true\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tvar sums: Set<Int> = []\n\tfor n in l {\n\t\tif sums.contains(-n)\
    \ {\n\t\t\treturn true\n\t\t}\n\t\tsums.insert(n)\n\t}\n\treturn false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\t// REPLACE THIS WITH YOUR SOLUTION\n\treturn false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpa9u7oiql/tmpa9u7oiql.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba06aec4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba06abbbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba06abbb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba06abba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9u7oiql                        0x0000556ab8773585 <unavailable> + 5509

    5    libc.so.6                          0x00002ba06b0b0460 __libc_start_main +
    245

    6    tmpa9u7oiql                        0x0000556ab8772f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var negs = [Int]()\n    var poss = [Int]()\n    for i\
    \ in l {\n        if i < 0 {\n            negs.append(i)\n        } else {\n \
    \           poss.append(i)\n        }\n    }\n    for i in poss {\n        for\
    \ j in negs {\n            if i + j == 0 {\n                return true\n    \
    \        }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var numbers = l\n    // Sort the array of numbers to make\
    \ it easier to look for the\n    // the negative of a given number\n    numbers.sort()\n\
    \    // Look for the negative of a given number\n    for i in 0..<numbers.count\
    \ {\n        // Check that the index is a valid number\n        if let index =\
    \ numbers.binarySearch(value: -numbers[i]) {\n            // Check that the number\
    \ is not the negative of itself\n            if index != i {\n               \
    \ return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp60soknkm.swift:23:32: error: value of type '[Int]' has no member\
    \ 'binarySearch'\n        if let index = numbers.binarySearch(value: -numbers[i])\
    \ {\n                       ~~~~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0 ..< l.count {\n        for j in i + 1 ..< l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7h5_jjut/tmp7h5_jjut.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bde96ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bde665b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bde665988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bde6647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7h5_jjut                        0x000056311a787585 <unavailable> + 5509

    5    libc.so.6                          0x00002b6bdeb5a460 __libc_start_main +
    245

    6    tmp7h5_jjut                        0x000056311a786f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return false\n    }\n    var\
    \ set: Set<Int> = []\n    for element in l {\n        let complement = -element\n\
    \        if set.contains(complement) {\n            return true\n        }\n \
    \       set.insert(element)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i+1..<l.count {\n            if l[i] +\
    \ l[j] == 0 {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0 ..< l.count {\n        for j in i + 1 ..< l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var sum = 0\n  var n = l.count\n  for num in l {\n    sum\
    \ += num\n  }\n  return sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpunhzij61/tmpunhzij61.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a034cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a0043b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a0043988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a00427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunhzij61                        0x0000555ca5893745 <unavailable> + 5957

    5    libc.so.6                          0x00002b72a0538460 __libc_start_main +
    245

    6    tmpunhzij61                        0x0000555ca5893129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count == 0 {\n        return false\n    }\n    if\
    \ l.count == 1 {\n        return false\n    }\n    if l.count == 2 {\n       \
    \ return l[0] + l[1] == 0\n    }\n    var negative : [Int] = []\n    var positive\
    \ : [Int] = []\n    for i in l {\n        if i < 0 {\n            negative.append(i)\n\
    \        } else {\n            positive.append(i)\n        }\n    }\n    var neg\
    \ = negative.sorted()\n    var pos = positive.sorted()\n    var j = 0\n    var\
    \ i = neg.count - 1\n    while i >= 0 && j < pos.count {\n        if neg[i] +\
    \ pos[j] == 0 {\n            return true\n        } else if neg[i] + pos[j] >\
    \ 0 {\n            i -= 1\n        } else {\n            j += 1\n        }\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var buffer: [Int] = []\n    for element in l {\n     \
    \   if buffer.contains(-element) {\n            return true\n        }\n     \
    \   buffer.append(element)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    var sumFound = false\n    if l.count\
    \ < 2 {\n        return false\n    }\n    for i in 0...l.count-1 {\n        sum\
    \ = 0\n        sumFound = false\n        if l[i] != 0 {\n            sum = l[i]\n\
    \            for j in i+1...l.count-1 {\n                if l[j] == -sum {\n \
    \                   sumFound = true\n                    break\n             \
    \   }\n            }\n        }\n        if sumFound {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b58ee4bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58ee1b1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b58ee1b1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b58ee1b113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b58ee1b0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp62fwrp5f                        0x000055c4e2fd4f98 <unavailable> + 8088

    6    tmp62fwrp5f                        0x000055c4e2fd4594 <unavailable> + 5524

    7    libc.so.6                          0x00002b58ee6a6460 __libc_start_main +
    245

    8    tmp62fwrp5f                        0x000055c4e2fd41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let set = Set(l)\n    for n in set {\n        if set.contains(-n)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2kk2w8jk/tmp2kk2w8jk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78e5c13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78e590ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78e590a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78e59097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2kk2w8jk                        0x000055ef4971b574 <unavailable> + 5492

    5    libc.so.6                          0x00002b78e5dff460 __libc_start_main +
    245

    6    tmp2kk2w8jk                        0x000055ef4971b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfy_tki7_/tmpfy_tki7_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba025ae5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0257dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0257dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0257db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfy_tki7_                        0x000055ea9c3bf585 <unavailable> + 5509

    5    libc.so.6                          0x00002ba025cd1460 __libc_start_main +
    245

    6    tmpfy_tki7_                        0x000055ea9c3bef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var solution: Bool = false\n    var newList = l\n    for\
    \ num in l {\n        newList.removeFirst()\n        for num2 in newList {\n \
    \           if num + num2 == 0 {\n                solution = true\n          \
    \  }\n        }\n    }\n    return solution\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // make sure there are at least two elements in the array\n\
    \    if l.count < 2 {\n        return false\n    }\n    // sort the list\n   \
    \ let l_sorted = l.sorted()\n    // now go through the list,\n    // stopping\
    \ when we run out of elements\n    // or the remaining elements are all positive\n\
    \    var i = 0\n    while i < l_sorted.count-1 && l_sorted[i] < 0 {\n        //\
    \ see if the current element and the next element sum to zero\n        if l_sorted[i]\
    \ + l_sorted[i+1] == 0 {\n            return true\n        }\n        // update\
    \ i to the next element\n        i += 1\n    }\n    // if we got through the whole\
    \ list without finding a match,\n    // return false\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyryb_vze/tmpyryb_vze.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3029895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b302958cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b302958c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b302958b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyryb_vze                        0x000056460e91d6d5 <unavailable> + 5845

    5    libc.so.6                          0x00002b3029a81460 __libc_start_main +
    245

    6    tmpyryb_vze                        0x000056460e91d0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for item in l {\n        if\
    \ seen.contains(-item) {\n            return true\n        }\n        seen.insert(item)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tvar l_set = Set<Int>()\n\tfor i in l {\n\t\tif l_set.contains(-i)\
    \ {\n\t\t\treturn true\n\t\t}\n\t\tl_set.insert(i)\n\t}\n\treturn false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard !l.isEmpty else { return false }\n    var dict:\
    \ [Int: Int] = [:]\n    var pairExists = false\n    for i in l {\n        if dict[i]\
    \ != nil {\n            dict[i]! += 1\n        } else {\n            dict[i] =\
    \ 1\n        }\n    }\n    for num in l {\n        if dict[num] == nil {\n   \
    \         continue\n        }\n        let complement = -num\n        if dict[complement]\
    \ != nil {\n            dict[num]! -= 1\n            dict[complement]! -= 1\n\
    \            pairExists = true\n        }\n    }\n    return pairExists\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpd4gql_kl/tmpd4gql_kl.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab97c734c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab97c42bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab97c42b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab97c42a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4gql_kl                        0x000055b22117a6f4 <unavailable> + 5876

    5    libc.so.6                          0x00002ab97c920460 __libc_start_main +
    245

    6    tmpd4gql_kl                        0x000055b22117a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var visited = Set<Int>()\n    for element in l {\n   \
    \     if visited.contains(-element) {\n            return true\n        }\n  \
    \      visited.insert(element)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  if l.count < 2 {\n    return false\n  }\n  var i = 0\n \
    \ var j = 1\n  while i < l.count {\n    j = i + 1\n    while j < l.count {\n \
    \     if l[i] + l[j] == 0 {\n        return true\n      }\n      j += 1\n    }\n\
    \    i += 1\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Create a set to store all the values.\n    var s =\
    \ Set<Int>()\n    // Iterate over all the values in the array.\n    for x in l\
    \ {\n        // If the value is contained in the set, then the\n        // corresponding\
    \ value is contained too.\n        if s.contains(-x) {\n            return true\n\
    \        }\n        // Add the value to the set.\n        s.insert(x)\n    }\n\
    \    // Return false since no pairs of values sum to zero.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var map = [Int: Bool]()\n    for elem in l {\n       \
    \ let minus_elem = -elem\n        if map[minus_elem] != nil {\n            return\
    \ true\n        }\n        map[elem] = true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let dict = l.map { ($0, true) }.dictionary\n    for i\
    \ in l {\n        if dict[0 - i] != nil {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplnds9bmn.swift:16:37: error: value of type '[(Int, Bool)]' has\
    \ no member 'dictionary'\n    let dict = l.map { ($0, true) }.dictionary\n   \
    \            ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var (set, sum) = (Set<Int>(), 0)\n    for i in l {\n \
    \       sum += i\n        set.insert(i)\n    }\n    return (set.contains(0) &&\
    \ set.count > 1) || sum == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7sx2nfo6/tmp7sx2nfo6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad93f7cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad93f4c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad93f4c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad93f4c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7sx2nfo6                        0x000055af550ab614 <unavailable> + 5652

    5    libc.so.6                          0x00002ad93f9ba460 __libc_start_main +
    245

    6    tmp7sx2nfo6                        0x000055af550ab279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Make this function work.\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmptid2q2qd/tmptid2q2qd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae57324ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae572f45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae572f45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae572f447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptid2q2qd                        0x000055c355409585 <unavailable> + 5509

    5    libc.so.6                          0x00002ae57343a460 __libc_start_main +
    245

    6    tmptid2q2qd                        0x000055c355408f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpva_dcozk/tmpva_dcozk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8d13b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8d10aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8d10aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8d10a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpva_dcozk                        0x0000556b62732585 <unavailable> + 5509

    5    libc.so.6                          0x00002ad8d159f460 __libc_start_main +
    245

    6    tmpva_dcozk                        0x0000556b62731f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in l {\n        for j in l {\n            if i ==\
    \ j {\n                continue\n            }\n            if i + j == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in l {\n        for j in l {\n            if i ==\
    \ j {\n                continue\n            }\n            if i + j == 0 {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if (l.count < 2) {\n        return false\n    }\n    var\
    \ dict: [Int:Int] = [:]\n    for i in l {\n        if let _ = dict[i] {\n    \
    \        return true\n        }\n        dict[-i] = 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  var l = l\n  var temp = l.sorted(by: <)\n  let lSize = l.count\n\
    \  var counter = 0\n  while counter < lSize - 1 {\n    let curr = temp[counter]\n\
    \    var tempCounter = counter + 1\n    while tempCounter < lSize {\n      let\
    \ newVal = temp[tempCounter]\n      if curr + newVal == 0 {\n        return true\n\
    \      }\n      tempCounter += 1\n    }\n    counter += 1\n  }\n  return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var tracker = Set<Int>()\n    for i in l {\n        if\
    \ tracker.contains(-i) {\n            return true\n        }\n        tracker.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count == 1 {\n        return false\n    }\n    var\
    \ l = l\n    for i in l {\n        l.remove(at: 0)\n        for j in l {\n   \
    \         if i + j == 0 {\n                return true\n            }\n      \
    \  }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count == 1 {\n        return false\n    }\n    if\
    \ l.count == 2 {\n        return l[0] + l[1] == 0\n    }\n    return pairs_sum_to_zero(l:\
    \ Array(l[1...])) || pairs_sum_to_zero(l: Array(l[...l.count - 2]))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeyanytjj.swift:22:79: error: missing argument label 'arrayLiteral:'\
    \ in call\n    return pairs_sum_to_zero(l: Array(l[1...])) || pairs_sum_to_zero(l:\
    \ Array(l[...l.count - 2]))\n                                                \
    \                              ^\n                                           \
    \                                   arrayLiteral: \n/tmp/tmpeyanytjj.swift:22:81:\
    \ error: cannot convert value of type 'PartialRangeThrough<Int>' to expected argument\
    \ type 'Int'\n    return pairs_sum_to_zero(l: Array(l[1...])) || pairs_sum_to_zero(l:\
    \ Array(l[...l.count - 2]))\n                                                \
    \                                ^\n"
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let indexArray = Array(l.indices)\n    for i in indexArray\
    \ {\n        for j in indexArray {\n            if l[i] == -l[j] && i != j {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var table = [Int : Int]()\n    for el in l {\n       \
    \ if let _ = table[el] {\n            return true\n        }\n        table[-el]\
    \ = 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpgm7cpczt/tmpgm7cpczt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae0fb33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae0f82ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae0f82a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae0f8297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgm7cpczt                        0x000055906c121304 <unavailable> + 4868

    5    libc.so.6                          0x00002aae0fd1f460 __libc_start_main +
    245

    6    tmpgm7cpczt                        0x000055906c120f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for n in l {\n        if set.contains(-n)\
    \ {\n            return true\n        }\n        set.insert(n)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var d = [Int: Int]()\n    for i in l {\n        if d[i]\
    \ != nil {\n            return true\n        }\n        d[-i] = 1\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let lSorted = l.sorted()\n    var lSortedIdx = 0\n   \
    \ var rSortedIdx = lSorted.count - 1\n    while lSortedIdx < rSortedIdx {\n  \
    \      let sum = lSorted[lSortedIdx] + lSorted[rSortedIdx]\n        if sum ==\
    \ 0 {\n            return true\n        } else if sum < 0 {\n            lSortedIdx\
    \ += 1\n        } else {\n            rSortedIdx -= 1\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for (index, i) in l.enumerated() {\n        for j in l[index\
    \ + 1...] {\n            if i + j == 0 {\n                return true\n      \
    \      }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwrfhatx1.swift:17:19: error: for-in loop requires 'Int' to conform\
    \ to 'Sequence'\n        for j in l[index + 1...] {\n                 ~^~~~~~~~~~~~~~\n\
    /tmp/tmpwrfhatx1.swift:17:29: error: cannot convert value of type 'PartialRangeFrom<Int>'\
    \ to expected argument type 'Int'\n        for j in l[index + 1...] {\n      \
    \                      ^\n"
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var map: [Int: Int] = [:]\n    for i in l {\n        if\
    \ map[i] != nil {\n            return true\n        }\n        map[-i] = 1\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = 0\n    for n in l {\n        sum += n\n    }\n\
    \    if sum == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpuvvma9aa/tmpuvvma9aa.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ffba25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ffb71cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ffb71c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ffb71b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvvma9aa                        0x0000556730e686f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b1ffbc11460 __libc_start_main +
    245

    6    tmpuvvma9aa                        0x0000556730e680d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var d = [Int:Int]()\n    for i in l {\n        if let\
    \ d_i = d[i] {\n            d[i] = d_i + 1\n        } else {\n            d[i]\
    \ = 1\n        }\n    }\n    var d_ = [Int:Int]()\n    for i in l {\n        if\
    \ let d_i = d_[i] {\n            d_[i] = d_i + 1\n        } else {\n         \
    \   d_[i] = 1\n        }\n    }\n    for i in l {\n        if let d_i = d_[i]\
    \ {\n            if let d_i_ = d_[-i] {\n                if d_i_ > 0 {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \ }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpbp7yv_xq/tmpbp7yv_xq.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b521dc34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b521d92bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b521d92b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b521d92a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbp7yv_xq                        0x000055f5c8c8f5a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b521de20460 __libc_start_main +
    245

    6    tmpbp7yv_xq                        0x000055f5c8c8f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var s = Set<Int>()\n    for i in l {\n        if (s.contains(-i))\
    \ {\n            return true\n        }\n        s.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for element in l {\n    \
    \    dict[element] = element\n    }\n    for num in l {\n        if num == 0 {\n\
    \            if dict[0] == 0 {\n                return true\n            }\n \
    \       } else if dict[-num] != nil {\n            return true\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpnt44jxb5/tmpnt44jxb5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b887d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b884cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b884ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b884c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnt44jxb5                        0x00005627f25415a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b9b889bf460 __libc_start_main +
    245

    6    tmpnt44jxb5                        0x00005627f2541209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  // YOUR CODE HERE\n  for i in 0..<l.count{\n    for j in\
    \ i+1..<l.count{\n      if l[i] + l[j] == 0{\n        return true\n      }\n \
    \   }\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum_hset = Set<Int>()\n    var sum = 0\n    for i\
    \ in l {\n        sum += i\n        if sum_hset.contains(sum) {\n            return\
    \ true\n        }\n        sum_hset.insert(sum)\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp5eo635rn/tmp5eo635rn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7f44bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7f142b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7f142988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7f1417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5eo635rn                        0x000055a57b7575c4 <unavailable> + 5572

    5    libc.so.6                          0x00002b2f7f637460 __libc_start_main +
    245

    6    tmp5eo635rn                        0x000055a57b757229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l_copy = l\n    l_copy.sort()\n    var index1 = 0\n\
    \    var index2 = l_copy.count - 1\n    while index1 < index2 {\n        if l_copy[index1]\
    \ + l_copy[index2] > 0 {\n            index2 -= 1\n        } else if l_copy[index1]\
    \ + l_copy[index2] < 0 {\n            index1 += 1\n        } else {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let a = l.sorted()\n    var i = 0\n    var j = a.count\
    \ - 1\n    while i < j {\n        let s = a[i] + a[j]\n        if s == 0 {\n \
    \           return true\n        } else if s < 0 {\n            i += 1\n     \
    \   } else {\n            j -= 1\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var hashMap: [Int: Int] = [:]\n    for i in l {\n    \
    \    hashMap[i] = i\n    }\n    for j in l {\n        if hashMap[0 - j] != nil\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpi3k9ycp5/tmpi3k9ycp5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b818683bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8186532b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8186532988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81865317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3k9ycp5                        0x0000560714e0a5c4 <unavailable> + 5572

    5    libc.so.6                          0x00002b8186a27460 __libc_start_main +
    245

    6    tmpi3k9ycp5                        0x0000560714e0a229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var done = false\n    var pairs = Set<Int>()\n    for\
    \ num in l {\n        if pairs.contains(-num) {\n            done = true\n   \
    \         break\n        }\n        pairs.insert(num)\n    }\n    return done\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var map = [Int:Int]()\n    for i in l {\n        if let\
    \ cnt = map[i] {\n            map[i] = cnt + 1\n        } else {\n           \
    \ map[i] = 1\n        }\n    }\n    for (k, v) in map {\n        if k == 0 &&\
    \ v > 1 {\n            return true\n        }\n        if map[0 - k] != nil {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpv7oo7h1s/tmpv7oo7h1s.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8be8ae9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8be87e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8be87e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8be87df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7oo7h1s                        0x000055f8f6068714 <unavailable> + 5908

    5    libc.so.6                          0x00002b8be8cd5460 __libc_start_main +
    245

    6    tmpv7oo7h1s                        0x000055f8f6068379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count == 0 {\n        return false\n    }\n    if\
    \ l.count == 1 {\n        return false\n    }\n    for i in 0..<l.count {\n  \
    \      for j in i+1..<l.count {\n            if l[i] + l[j] == 0 {\n         \
    \       return true\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var visited: Set<Int> = []\n    for n in l {\n       \
    \ if visited.contains(-n) {\n            return true\n        }\n        visited.insert(n)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return false\n    }\n    let\
    \ sorted_l = l.sorted(by: { a, b in return a < b })\n    if sorted_l[0] >= 0 ||\
    \ sorted_l[sorted_l.count - 1] <= 0 {\n        return false\n    }\n    var i\
    \ = 0\n    var j = sorted_l.count - 1\n    while i < j {\n        if sorted_l[i]\
    \ + sorted_l[j] < 0 {\n            i += 1\n        } else if sorted_l[i] + sorted_l[j]\
    \ > 0 {\n            j -= 1\n        } else {\n            return true\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // get all possible pairs of integers of the array\n \
    \   let pairs = get_all_pairs(l: l)\n    // calculate the sum of each pair and\
    \ return true if a pair is equal to zero\n    for pair in pairs {\n        if\
    \ pair.0 + pair.1 == 0 {\n            return true\n        }\n    }\n    // return\
    \ false if no pairs were equal to zero\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphb7nzs5u.swift:17:17: error: cannot find 'get_all_pairs' in scope\n\
    \    let pairs = get_all_pairs(l: l)\n                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp3pi2y3tr/tmp3pi2y3tr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c911fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c8e16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c8e16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c8e157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pi2y3tr                        0x000056321cee5304 <unavailable> + 4868

    5    libc.so.6                          0x00002b23c930b460 __libc_start_main +
    245

    6    tmp3pi2y3tr                        0x000056321cee4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var theset = Set<Int>()\n    for n in l {\n        if\
    \ theset.contains(-n) {\n            return true\n        }\n        theset.insert(n)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpx7dqia8r/tmpx7dqia8r.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0274039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0273d30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0273d30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0273d2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7dqia8r                        0x0000557af5f2a585 <unavailable> + 5509

    5    libc.so.6                          0x00002b0274225460 __libc_start_main +
    245

    6    tmpx7dqia8r                        0x0000557af5f29f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // your code here\n    var list: [Int] = l\n    var i\
    \ = 0\n    var j = list.count - 1\n    while (i < j) {\n        let sum = list[i]\
    \ + list[j]\n        if (sum == 0) {\n            return true\n        } else\
    \ if (sum < 0) {\n            i += 1\n        } else {\n            j -= 1\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpqb7vtami/tmpqb7vtami.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53797a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b537949bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b537949b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b537949a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqb7vtami                        0x0000563bb3a44635 <unavailable> + 5685

    5    libc.so.6                          0x00002b5379990460 __libc_start_main +
    245

    6    tmpqb7vtami                        0x0000563bb3a44019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count == 1 {\n        return false\n    }\n    var\
    \ set: Set<Int> = []\n    for n in l {\n        if set.contains(-n) {\n      \
    \      return true\n        }\n        set.insert(n)\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // if there are less than two elements, return false\n\
    \    if l.count < 2 {\n        return false\n    }\n    // make a set out of the\
    \ elements in the list\n    var element_set = Set(l)\n    // for each element\
    \ in the set\n    for element in element_set {\n        // check if the set contains\
    \ its opposite\n        if element_set.contains(-element) {\n            // if\
    \ it does, return true\n            return true\n        }\n    }\n    // if you\
    \ make it out of the loop, it means that no pair sums to zero\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpnays5n3o/tmpnays5n3o.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd343a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd3409bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd3409b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd3409a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnays5n3o                        0x000055db1a0155c4 <unavailable> + 5572

    5    libc.so.6                          0x00002abd34590460 __libc_start_main +
    245

    6    tmpnays5n3o                        0x000055db1a015229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else {\n        return false\n    }\n\
    \    // Write your code here.\n    var numSet = Set<Int>()\n    for num in l {\n\
    \        if numSet.contains(-num) {\n            return true\n        }\n    \
    \    numSet.insert(num)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var i: Int = 0\n    var j: Int = 0\n    while i < l.count\
    \ {\n        j = i + 1\n        while j < l.count {\n            if l[i] + l[j]\
    \ == 0 {\n                return true\n            }\n            j += 1\n   \
    \     }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if i ==\
    \ 0 {\n            if set.contains(0) {\n                return true\n       \
    \     }\n            set.insert(0)\n        } else if set.contains(-i) {\n   \
    \         return true\n        } else {\n            set.insert(i)\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let n = l.count\n    for i in 0..<n {\n        for j in\
    \ (i+1)..<n {\n            if l[i] + l[j] == 0 {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpgll4lgmm/tmpgll4lgmm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae03a770c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae03a467b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae03a467988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae03a4667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgll4lgmm                        0x0000558ca4fab585 <unavailable> + 5509

    5    libc.so.6                          0x00002ae03a95c460 __libc_start_main +
    245

    6    tmpgll4lgmm                        0x0000558ca4faaf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  // TODO: Implement this.\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpnapb5x0g/tmpnapb5x0g.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e3c4f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e3c1e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e3c1e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e3c1e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnapb5x0g                        0x000055df8221a585 <unavailable> + 5509

    5    libc.so.6                          0x00002b1e3c6de460 __libc_start_main +
    245

    6    tmpnapb5x0g                        0x000055df82219f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set: [Int] = []\n    for value in l {\n        if\
    \ set.contains(-value) {\n            return true\n        }\n        set.append(value)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // return false if l is empty\n    guard l.count > 0 else\
    \ {\n        return false\n    }\n    // build a set of unique values\n    var\
    \ unique_vals = Set<Int>()\n    for val in l {\n        unique_vals.insert(val)\n\
    \    }\n    // if the number of unique values is equal to the length of l, then\
    \ l only\n    // contains distinct elements, and we have to return false\n   \
    \ if unique_vals.count == l.count {\n        return false\n    }\n    // loop\
    \ through l, and check if the negative of each value is also in l\n    for val\
    \ in l {\n        if l.contains(-val) {\n            return true\n        }\n\
    \    }\n    // return false if we have not encountered a matching pair\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmph2qctu5p/tmph2qctu5p.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f91a8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f91785b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f91785988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f917847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2qctu5p                        0x0000559dd0eb4905 <unavailable> + 6405

    5    libc.so.6                          0x00002b2f91c7a460 __libc_start_main +
    245

    6    tmph2qctu5p                        0x0000559dd0eb42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function.\n    \n    var set :\
    \ Set<Int> = Set()\n    \n    for num in l {\n        if set.contains(-num) {\n\
    \            return true\n        }\n        set.insert(num)\n    }\n    \n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  return two_sum(l: l, t: 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnep2_vle.swift:16:10: error: cannot find 'two_sum' in scope\n \
    \ return two_sum(l: l, t: 0)\n         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var already_seen = Set<Int>()\n    for number in l {\n\
    \        let counterpart = -number\n        if already_seen.contains(counterpart)\
    \ {\n            return true\n        }\n        already_seen.insert(number)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a = Array(l.sorted())\n    var i = 0\n    var j =\
    \ a.count - 1\n    while i < j {\n        if a[i] + a[j] < 0 {\n            i\
    \ += 1\n        } else if a[i] + a[j] > 0 {\n            j -= 1\n        } else\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Your code here\n    var set : Set<Int> = []\n    for\
    \ num in l {\n        if let value = set.remove(num) {\n            return true\n\
    \        }\n        set.insert(-num)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return l.filter({ l.contains(-1 * $0) }).count > 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp26tf3s4_/tmp26tf3s4_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99f80abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99f7da2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99f7da2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99f7da17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26tf3s4_                        0x0000562ede76e494 <unavailable> + 5268

    5    libc.so.6                          0x00002b99f8297460 __libc_start_main +
    245

    6    tmp26tf3s4_                        0x0000562ede76e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let sorted_list = l.sorted()\n    var left = 0\n    var\
    \ right = sorted_list.count - 1\n    while left < right {\n        let sum = sorted_list[left]\
    \ + sorted_list[right]\n        if sum == 0 {\n            return true\n     \
    \   } else if sum < 0 {\n            left += 1\n        } else {\n           \
    \ right -= 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var hm = [Int: Int]()\n    for num in l {\n        if\
    \ let i = hm[num] {\n            hm[num] = i + 1\n        } else {\n         \
    \   hm[num] = 1\n        }\n    }\n    for n in l {\n        if hm[n] != nil {\n\
    \            if n == 0 && hm[n]! > 1 {\n                return true\n        \
    \    } else if hm[-n] != nil {\n                return true\n            }\n \
    \       }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpy91_fs38/tmpy91_fs38.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1172e74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1172b6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1172b6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1172b6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy91_fs38                        0x0000561213609634 <unavailable> + 5684

    5    libc.so.6                          0x00002b1173060460 __libc_start_main +
    245

    6    tmpy91_fs38                        0x0000561213609299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    if l.count <= 1 {\n        return false\n\
    \    }\n    l.sort()\n    var l_idx = 0\n    var r_idx = l.count - 1\n    while\
    \ l_idx < r_idx {\n        let sum = l[l_idx] + l[r_idx]\n        if sum == 0\
    \ {\n            return true\n        } else if sum < 0 {\n            l_idx +=\
    \ 1\n        } else {\n            r_idx -= 1\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Sort the list. The pairs_sum_to_zero algorithm below\
    \ works\n    // for any sorted list, so we can be certain that the list \n   \
    \ // is sorted.\n    var sorted_list = sort(l: l)\n    // We will return the result\
    \ of our operation, so set this to\n    // false initially.\n    var result =\
    \ false\n    // We can use a for loop to iterate over the elements of the array.\n\
    \    // By iterating over the array and looking at the next element,\n    // we\
    \ can compare them and determine if the sum is zero.\n    for i in 0...(sorted_list.count\
    \ - 2) {\n        if (sorted_list[i] + sorted_list[i + 1] == 0) {\n          \
    \  result = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjj0d1n4y.swift:19:23: error: cannot find 'sort' in scope\n    var\
    \ sorted_list = sort(l: l)\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  // Your code here\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmps3y99frd/tmps3y99frd.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acea88a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acea8597b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acea8597988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acea85967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3y99frd                        0x000055ed1f1f1585 <unavailable> + 5509

    5    libc.so.6                          0x00002acea8a8c460 __libc_start_main +
    245

    6    tmps3y99frd                        0x000055ed1f1f0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let set = Set(l)\n    for i in set {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp_or2akc8/tmp_or2akc8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97e2fffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97e2cf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97e2cf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97e2cf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_or2akc8                        0x000055abfd30c574 <unavailable> + 5492

    5    libc.so.6                          0x00002b97e31eb460 __libc_start_main +
    245

    6    tmp_or2akc8                        0x000055abfd30c1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var array = l\n    array.sort()\n    if (array.count <\
    \ 2) {\n        return false\n    }\n    for i in 0..<array.count {\n        for\
    \ j in (i+1)..<array.count {\n            if array[i] + array[j] == 0 {\n    \
    \            return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var new_l = l\n    var i = 0\n    while i < new_l.count\
    \ {\n        var n = 0\n        while n < new_l.count {\n            if new_l[i]\
    \ + new_l[n] == 0 && i != n {\n                return true\n            }\n  \
    \          n += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Implement this function\n    var set = Set<Int>()\n\
    \    var result = false\n    if l.count == 0{\n        return result\n    }\n\
    \    for e in l{\n        if set.contains(e) {\n            result = true\n  \
    \          break\n        }\n        else{\n            set.insert(e)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpp3rd9ajt/tmpp3rd9ajt.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82bdad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82bd7c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82bd7c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82bd7c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3rd9ajt                        0x0000558e1c4ae6eb <unavailable> + 5867

    5    libc.so.6                          0x00002b82bdcbc460 __libc_start_main +
    245

    6    tmpp3rd9ajt                        0x0000558e1c4ae289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // TODO: Write your code here\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp3iouo0x4/tmp3iouo0x4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d2580ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d25501b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d25501988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d255007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3iouo0x4                        0x000055566dd2e585 <unavailable> + 5509

    5    libc.so.6                          0x00002b5d259f6460 __libc_start_main +
    245

    6    tmp3iouo0x4                        0x000055566dd2df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var found = false\n    var list = l\n    for (i,x) in\
    \ list.enumerated() {\n        let n = x\n        list.remove(at: i)\n       \
    \ if list.contains(-n) {\n            found = true\n        }\n    }\n    return\
    \ found\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adffb770c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adffb467561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adffb467286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adffb46713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adffb466bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002adffb454018 <unavailable> + 1355800

    6    tmp_k4f2v_o                        0x0000558c7325aee3 <unavailable> + 7907

    7    tmp_k4f2v_o                        0x0000558c7325a56d <unavailable> + 5485

    8    libc.so.6                          0x00002adffb95c460 __libc_start_main +
    245

    9    tmp_k4f2v_o                        0x0000558c7325a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i..<l.count {\n\
    \            if (i != j) && (l[i] + l[j] == 0) {\n                return true\n\
    \            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\t// YOUR CODE GOES HERE\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp8_o__j1y.swift:17:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // keep track of which numbers we've seen already\n  \
    \  var seen = Set<Int>()\n    for element in l {\n        // if we've seen the\
    \ number, return true\n        if seen.contains(-element) {\n            return\
    \ true\n        }\n        // otherwise, add the number to the set\n        seen.insert(element)\n\
    \    }\n    // if we haven't returned by now, then return false\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var a: [Int] = []\n    for i in l {\n        if a.contains(-i)\
    \ {\n            return true\n        }\n        a.append(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\t// replace this comment and the following line with your\
    \ implementation\n\t// you may use additional functions\n\treturn false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp2y4qmtr9/tmp2y4qmtr9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4e9ccfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4e99c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4e99c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4e99c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2y4qmtr9                        0x000055f393f2e585 <unavailable> + 5509

    5    libc.so.6                          0x00002af4e9ebb460 __libc_start_main +
    245

    6    tmp2y4qmtr9                        0x000055f393f2df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tvar check = Set<Int>()\n\tfor x in l {\n\t\tif check.contains(-x)\
    \ {\n\t\t\treturn true\n\t\t}\n\t\tcheck.insert(x)\n\t}\n\treturn false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = []\n    for num in l {\n        if\
    \ num == 0 {\n            continue\n        }\n        if seen.contains(-num)\
    \ {\n            return true\n        }\n        seen.insert(num)\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var hs = Set<Int>()\n    l.forEach { item in\n       \
    \ if hs.contains(-item) {\n            return true\n        }\n        hs.insert(item)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_82_x59s.swift:19:20: error: unexpected non-void return value in\
    \ void function\n            return true\n                   ^\n"
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sort()\n    var i = 0\n    var j = l.count\
    \ - 1\n    while i < j {\n        if l[i] + l[j] == 0 {\n            return true\n\
    \        } else if l[i] + l[j] < 0 {\n            i += 1\n        } else {\n \
    \           j -= 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // STUDENT PUT YOUR CODE HERE\n    var testList = l\n\
    \    if testList.count < 2 {\n        return false\n    }\n    for index in 0...testList.count\
    \ - 1 {\n        for index2 in 0...testList.count - 1 {\n            if index\
    \ != index2 {\n                if testList[index] + testList[index2] == 0 {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return l.count > 1 && l.filter({abs($0) == abs(l[0])}).count\
    \ > 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpf0gokwaa/tmpf0gokwaa.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afda4571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afda4268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afda4268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afda42677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0gokwaa                        0x000056532c81d62b <unavailable> + 5675

    5    libc.so.6                          0x00002afda475d460 __libc_start_main +
    245

    6    tmpf0gokwaa                        0x000056532c81d1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen: Set<Int> = []\n    for i in l {\n        if\
    \ seen.contains(-i) {\n            return true\n        }\n        seen.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return false\n    }\n    var\
    \ s = Set<Int>()\n    for i in l {\n        if s.contains(-i) {\n            return\
    \ true\n        }\n        s.insert(i)\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  for (i, el1) in l.enumerated() {\n    for el2 in l[i+1..<l.count]\
    \ {\n      if el1 + el2 == 0 {\n        return true\n      }\n    }\n  }\n  return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for (ind1, val1) in l.enumerated() {\n        for (ind2,\
    \ val2) in l.enumerated() {\n            if (ind1 != ind2) && (val1 + val2 ==\
    \ 0) {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // var i = 0\n    // var j = 0\n    // while i < l.count\
    \ {\n    //     while j < l.count {\n    //         if i != j && l[i] + l[j] ==\
    \ 0 {\n    //             return true\n    //         }\n    //         j += 1\n\
    \    //     }\n    //     i += 1\n    // }\n    // return false\n    return l.contains(0)\
    \ && l.filter({ i in i == 0 }).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpdf0ab85l/tmpdf0ab85l.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf57b27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf5781eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf5781e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf5781d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdf0ab85l                        0x0000557241a1e494 <unavailable> + 5268

    5    libc.so.6                          0x00002abf57d13460 __libc_start_main +
    245

    6    tmpdf0ab85l                        0x0000557241a1e0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard l.count > 1 else { return false }\n    var seen\
    \ = Set<Int>()\n    for i in l {\n        if seen.contains(-i) {\n           \
    \ return true\n        }\n        seen.insert(i)\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in (i+1)..<l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dic = [Int: Int]()\n    for i in l {\n        dic[i]\
    \ = i\n    }\n    for i in dic.keys {\n        if (dic[-i] != nil) {\n       \
    \     return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmphhervd8m/tmphhervd8m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f5952dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f59224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f59224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f592237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhervd8m                        0x000055f2b5f65774 <unavailable> + 6004

    5    libc.so.6                          0x00002b9f59719460 __libc_start_main +
    245

    6    tmphhervd8m                        0x000055f2b5f653d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict: [Int: Int] = [:]\n    for i in l {\n       \
    \ if dict[i] != nil {\n            dict[i]! += 1\n        } else {\n         \
    \   dict[i] = 1\n        }\n    }\n    for (key, _) in dict {\n        if dict[0\
    \ - key] != nil {\n            if key == 0 {\n                if dict[key]! >=\
    \ 2 {\n                    return true\n                }\n            } else\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in l {\n        for j in l {\n            if (i\
    \ != j) && (i + j == 0) {\n                return true\n            }\n      \
    \  }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var vals = Set<Int>()\n    for x in l {\n        if vals.contains(-x)\
    \ {\n            return true\n        }\n        vals.insert(x)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for i in l {\n        if set.contains(-i)\
    \ {\n            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var s = Set<Int>()\n    for e in l {\n        if s.contains(-e)\
    \ {\n            return true\n        }\n        s.insert(e)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Int]()\n    for num in l {\n        dict[num]\
    \ = 1\n    }\n    for num in l {\n        if dict[0 - num] != nil {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpnud5nfap/tmpnud5nfap.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92da330c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92da027b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92da027988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92da0267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnud5nfap                        0x00005639f91c15a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b92da51c460 __libc_start_main +
    245

    6    tmpnud5nfap                        0x00005639f91c1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let sorted_l = l.sorted()\n    var result = false\n  \
    \  for i in 0..<sorted_l.count {\n        for j in i+1..<sorted_l.count {\n  \
    \          if sorted_l[i] + sorted_l[j] == 0 {\n                result = true\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // You should implement this function for problem 3.\n\
    \    // You may change these lines, but make sure your function does what it's\
    \ meant to.\n    var l = l\n    l.sort()\n    var i = 0\n    var j = l.count -\
    \ 1\n    while i < j {\n        if l[i] + l[j] < 0 {\n            i += 1\n   \
    \     } else if l[i] + l[j] > 0 {\n            j -= 1\n        } else {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // implement this function!\n    var uniques = [Int]()\n\
    \    for num in l {\n        if !uniques.contains(num) {\n            uniques.append(num)\n\
    \        }\n    }\n    for num in uniques {\n        if uniques.contains(-num)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfa9v4p58/tmpfa9v4p58.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8e3ba8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8e389fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8e389f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8e389e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfa9v4p58                        0x0000561758fef594 <unavailable> + 5524

    5    libc.so.6                          0x00002ad8e3d94460 __libc_start_main +
    245

    6    tmpfa9v4p58                        0x0000561758fef1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum_dict: [Int: Int] = [:]\n    for element in l {\n\
    \        if sum_dict[element] != nil {\n            return true\n        }\n \
    \       sum_dict[-element] = 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var dict = [Int: Bool]()\n    for n in l {\n        if\
    \ dict[n] != nil {\n            return true\n        }\n        dict[-n] = true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tguard l.count > 1 else {\n\t\treturn false\n\t}\n\tlet s\
    \ = Set(l)\n\tfor x in s {\n\t\tif s.contains(-x) {\n\t\t\treturn true\n\t\t}\n\
    \t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmplkly0t84/tmplkly0t84.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25fc832c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25fc529b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25fc529988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25fc5287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplkly0t84                        0x000056361d05e5c4 <unavailable> + 5572

    5    libc.so.6                          0x00002b25fca1e460 __libc_start_main +
    245

    6    tmplkly0t84                        0x000056361d05e229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Your code here\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpp3kzbygh/tmpp3kzbygh.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af50a01bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af509d12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af509d12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af509d117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3kzbygh                        0x00005561ca390585 <unavailable> + 5509

    5    libc.so.6                          0x00002af50a207460 __libc_start_main +
    245

    6    tmpp3kzbygh                        0x00005561ca38ff69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpgm7cpczt/tmpgm7cpczt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae0fb33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae0f82ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae0f82a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae0f8297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgm7cpczt                        0x000055906c121304 <unavailable> + 4868

    5    libc.so.6                          0x00002aae0fd1f460 __libc_start_main +
    245

    6    tmpgm7cpczt                        0x000055906c120f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var list = l\n    list.sort()\n    if list.count < 2 {\n\
    \        return false\n    }\n    if list[0] == 0 && list[1] == 0 {\n        return\
    \ true\n    }\n    for i in 0..<list.count - 1 {\n        for j in i + 1..<list.count\
    \ {\n            if list[i] + list[j] == 0 {\n                return true\n  \
    \          }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // if list is empty or has 1 element, return false\n \
    \   if l.count <= 1 {\n        return false\n    }\n    // set to keep track of\
    \ all elements in the array\n    var s = Set<Int>()\n    // loop through elements\
    \ in list\n    for i in l {\n        // if the set already contains an element\
    \ that is the negative of i\n        // we have found a pair that sums to zero,\
    \ return true\n        if s.contains(-i) {\n            return true\n        }\n\
    \        // add i to the set\n        s.insert(i)\n    }\n    // if we reach this\
    \ point, there is no pair of elements that sum to zero,\n    // return false\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count <= 1 {\n        return false\n    }\n    var\
    \ set: Set<Int> = Set<Int>()\n    for i in l {\n        if set.contains(-i) {\n\
    \            return true\n        }\n        set.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var d = Dictionary<Int, Int>()\n    for i in l {\n   \
    \     let x = abs(i)\n        if d[x] == nil {\n            d[x] = 1\n       \
    \ } else {\n            return true\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmph5oo8ajy/tmph5oo8ajy.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef74ba6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef7489db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef7489d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef7489c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5oo8ajy                        0x000055b76637275b <unavailable> + 5979

    5    libc.so.6                          0x00002aef74d92460 __libc_start_main +
    245

    6    tmph5oo8ajy                        0x000055b7663722f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tvar numSet = Set<Int>()\n\tfor num in l {\n\t\tif numSet.contains(-num)\
    \ {\n\t\t\treturn true\n\t\t}\n\t\tnumSet.insert(num)\n\t}\n\treturn false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let s: Set<Int> = Set(l)\n    for x in s {\n        if\
    \ (x != 0 && s.contains(-x)) {\n            return true\n        }\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var mySet: Set<Int> = []\n    for i in l {\n        if\
    \ mySet.contains(-i) {\n            return true\n        }\n        mySet.insert(i)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count <= 1 {\n        return false\n    }\n    var\
    \ seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i) {\n      \
    \      return true\n        }\n        seen.insert(i)\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum = [Int: Int]()\n    for num in l {\n        if\
    \ sum[-num] != nil {\n            return true\n        }\n        sum[num] = 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var d = Dictionary<Int, Bool>()\n    for e in l {\n  \
    \      if d[e] != nil {\n            return true\n        }\n        d[-e] = true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var set = Set<Int>()\n    for item in l {\n        if\
    \ set.contains(-item) {\n            return true\n        }\n        set.insert(item)\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let elements = Set(l)\n    for element in elements {\n\
    \        if elements.contains(-element) {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpyrad3gru/tmpyrad3gru.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad89a7c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad89a4bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad89a4bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad89a4ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrad3gru                        0x000055d79da04574 <unavailable> + 5492

    5    libc.so.6                          0x00002ad89a9b0460 __libc_start_main +
    245

    6    tmpyrad3gru                        0x000055d79da041d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpgm7cpczt/tmpgm7cpczt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae0fb33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae0f82ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae0f82a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae0f8297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgm7cpczt                        0x000055906c121304 <unavailable> + 4868

    5    libc.so.6                          0x00002aae0fd1f460 __libc_start_main +
    245

    6    tmpgm7cpczt                        0x000055906c120f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // YOUR CODE GOES HERE\n    var i = 0\n    var j = 1\n\
    \    for i in l {\n        for j in l{\n            if i + j == 0 {\n        \
    \        return true\n            }\n        }\n    }\n    return false\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpt9g435sx/tmpt9g435sx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4937b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4934a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4934a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4934a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9g435sx                        0x0000561575d28474 <unavailable> + 5236

    5    libc.so.6                          0x00002ba49399c460 __libc_start_main +
    245

    6    tmpt9g435sx                        0x0000561575d280d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var complement_map: [Int: Int] = [:]\n    for x in l {\n\
    \        if complement_map[x] != nil {\n            return true\n        }\n \
    \       complement_map[-x] = x\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 2 {\n        return false\n    }\n    if\
    \ l.count == 2 {\n        return l[0] + l[1] == 0\n    }\n    var s = Set<Int>()\n\
    \    for x in l {\n        if s.contains(-x) {\n            return true\n    \
    \    }\n        s.insert(x)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  // create a set for the list\n  var s = Set<Int>()\n  for\
    \ n in l {\n    // if n is in the set, return true\n    if s.contains(n) {\n \
    \     return true\n    }\n    // otherwise add n to the set\n    s.insert(n)\n\
    \  }\n  // return false because no pairs exist\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmps6yg2y28/tmps6yg2y28.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0defb6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0def864b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0def864988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0def8637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6yg2y28                        0x000055a32cb1a68b <unavailable> + 5771

    5    libc.so.6                          0x00002b0defd59460 __libc_start_main +
    245

    6    tmps6yg2y28                        0x000055a32cb1a229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // your solution goes here.\n    var counter = Set<Int>()\n\
    \    if l.count > 1 {\n        for i in l {\n            if counter.contains(i\
    \ * -1) {\n                return true\n            }\n            counter.insert(i)\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Fill in this function\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmps6yro4d3/tmps6yro4d3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba85d832c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba85d529b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba85d529988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba85d5287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6yro4d3                        0x000055f77c04f585 <unavailable> + 5509

    5    libc.so.6                          0x00002ba85da1e460 __libc_start_main +
    245

    6    tmps6yro4d3                        0x000055f77c04ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  /// Your code goes here!!!\n  return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpt_fvp2ha/tmpt_fvp2ha.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73677dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af736474b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af736474988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7364737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_fvp2ha                        0x000055c886e08585 <unavailable> + 5509

    5    libc.so.6                          0x00002af736969460 __libc_start_main +
    245

    6    tmpt_fvp2ha                        0x000055c886e07f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in l {\n        for j in l {\n            if (j\
    \ + i == 0) && (i != j) {\n                return true\n            }\n      \
    \  }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var count_map = [Int: Int]()\n    for n in l {\n     \
    \   if count_map[n] == nil {\n            count_map[n] = 1\n        } else {\n\
    \            count_map[n]! += 1\n        }\n    }\n    for (k, v) in count_map\
    \ {\n        if k == 0 && v >= 2 {\n            return true\n        } else if\
    \ count_map[-k] != nil {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpckig49fz/tmpckig49fz.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1432383c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b143207ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b143207a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14320797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckig49fz                        0x0000561d860c47f4 <unavailable> + 6132

    5    libc.so.6                          0x00002b143256f460 __libc_start_main +
    245

    6    tmpckig49fz                        0x0000561d860c4459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  let count = l.count\n  for i in 0..<count {\n    for j in\
    \ i..<count {\n      if i != j && l[i] + l[j] == 0 {\n        return true\n  \
    \    }\n    }\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  // YOUR CODE HERE\n  return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmptp8zu69v/tmptp8zu69v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3117d41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3117a38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3117a38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3117a377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptp8zu69v                        0x000055b2ea00a585 <unavailable> + 5509

    5    libc.so.6                          0x00002b3117f2d460 __libc_start_main +
    245

    6    tmptp8zu69v                        0x000055b2ea009f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\tif l.count < 2 {\n\t\treturn false\n\t}\n\tvar set : Set<Int>\
    \ = []\n\tfor i in l {\n\t\tif set.contains(-i) {\n\t\t\treturn true\n\t\t}\n\t\
    \tset.insert(i)\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var s = Set<Int>()\n    for item in l {\n        if s.contains(-item)\
    \ {\n            return true\n        }\n        s.insert(item)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Your implementation here\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpzd4_7aol/tmpzd4_7aol.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a3d8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a3a82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a3a82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a3a817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd4_7aol                        0x000055ef1ae48585 <unavailable> + 5509

    5    libc.so.6                          0x00002ae1a3f77460 __libc_start_main +
    245

    6    tmpzd4_7aol                        0x000055ef1ae47f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return Set(l).count != l.count || l.contains(0)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfedh6yoo/tmpfedh6yoo.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa18a28c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa1871fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa1871f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa1871e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfedh6yoo                        0x000055ae8b54b4c4 <unavailable> + 5316

    5    libc.so.6                          0x00002baa18c14460 __libc_start_main +
    245

    6    tmpfedh6yoo                        0x000055ae8b54b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let d = Set(l.filter { $0 != 0 })\n    return d.contains(-d.first!)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp5d_wmtzm/tmp5d_wmtzm.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dbbf91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dbbc88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dbbc88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dbbc877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5d_wmtzm                        0x000055e60d47b885 <unavailable> + 6277

    5    libc.so.6                          0x00002b5dbc17d460 __libc_start_main +
    245

    6    tmp5d_wmtzm                        0x000055e60d47b269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sum_to_zero = false\n    var temp_array = l.sorted()\n\
    \    let length = temp_array.count\n    var counter = 0\n    for i in 0..<length\
    \ {\n        for j in (i+1)..<length {\n            if temp_array[i] + temp_array[j]\
    \ == 0 {\n                sum_to_zero = true\n                break\n        \
    \    }\n            counter += 1\n        }\n    }\n    print(\"Number of iterations\
    \ in pairs_sum_to_zero is: \\(counter)\")\n    return sum_to_zero\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: 'Number of iterations in pairs_sum_to_zero is: 6

    Number of iterations in pairs_sum_to_zero is: 6

    Number of iterations in pairs_sum_to_zero is: 6

    Number of iterations in pairs_sum_to_zero is: 13

    Number of iterations in pairs_sum_to_zero is: 0

    Number of iterations in pairs_sum_to_zero is: 12

    Number of iterations in pairs_sum_to_zero is: 12

    Number of iterations in pairs_sum_to_zero is: 15

    Number of iterations in pairs_sum_to_zero is: 15

    '
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for i in l {\n        if seen.contains(-i)\
    \ {\n            return true\n        }\n        seen.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Write your solution here.\n    if l.count < 2 {\n \
    \       return false\n    }\n    var res : [Int] = []\n    for i in 0...l.count-1\
    \ {\n        for j in i+1...l.count-1 {\n            if l[i] + l[j] == 0 {\n \
    \               res.append(l[i])\n                res.append(l[j])\n         \
    \   }\n        }\n    }\n    if res.count > 1 {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b534401fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5343d16561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5343d16286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5343d1613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5343d15bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9jggls6w                        0x000055c704e54f75 <unavailable> + 8053

    6    tmp9jggls6w                        0x000055c704e5451d <unavailable> + 5405

    7    libc.so.6                          0x00002b534420b460 __libc_start_main +
    245

    8    tmp9jggls6w                        0x000055c704e541f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Implement this function\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp7cng_o7l/tmp7cng_o7l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b809a28ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8099f81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8099f81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8099f807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7cng_o7l                        0x000055ca61fa2585 <unavailable> + 5509

    5    libc.so.6                          0x00002b809a476460 __libc_start_main +
    245

    6    tmp7cng_o7l                        0x000055ca61fa1f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var sums = Set<Int>()\n    for i in l {\n        if sums.contains(-i)\
    \ {\n            return true\n        }\n        sums.insert(i)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let minus_set = Set(l.map({ -$0 }))\n    for num in l\
    \ {\n        if minus_set.contains(num) {\n            return true\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpacrm92wb/tmpacrm92wb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b948cf43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b948cc3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b948cc3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b948cc397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpacrm92wb                        0x00005620d2ef95e4 <unavailable> + 5604

    5    libc.so.6                          0x00002b948d12f460 __libc_start_main +
    245

    6    tmpacrm92wb                        0x00005620d2ef9249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                return true\n        \
    \    }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var hash = [Int: Bool]()\n    for num in l {\n       \
    \ if hash[num] != nil {\n            return true\n        }\n        hash[-num]\
    \ = true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 1
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // fill this in\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpvn5j84ox.swift:17:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpgm7cpczt/tmpgm7cpczt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae0fb33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae0f82ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae0f82a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae0f8297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgm7cpczt                        0x000055906c121304 <unavailable> + 4868

    5    libc.so.6                          0x00002aae0fd1f460 __libc_start_main +
    245

    6    tmpgm7cpczt                        0x000055906c120f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028668
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var seen = Set<Int>()\n    for x in l {\n        if seen.contains(-x)\
    \ {\n            return true\n        }\n        seen.insert(x)\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\t// TODO: Complete this function\n\tfor i in 0..<l.count\
    \ {\n\t\tfor j in i+1..<l.count {\n\t\t\tif l[i] + l[j] == 0 {\n\t\t\t\treturn\
    \ true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpfcy_07_z/tmpfcy_07_z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2afc8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab2af981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab2af981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab2af9807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfcy_07_z                        0x000055bc74132585 <unavailable> + 5509

    5    libc.so.6                          0x00002ab2afe76460 __libc_start_main +
    245

    6    tmpfcy_07_z                        0x000055bc74131f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028667
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var found = false\n    var seen = Set<Int>()\n    for\
    \ num in l {\n        if seen.contains(-num) {\n            found = true\n   \
    \         break\n        }\n        seen.insert(num)\n    }\n    return found\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028669
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes an array of integers as an input.\n/// it\
    \ returns true if there are two distinct elements in the array that\n/// sum to\
    \ zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n///\
    \ false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n\
    /// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\treturn 0 < 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmp9ukvz3zr/tmp9ukvz3zr.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad18984cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad189543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad189543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1895427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ukvz3zr                        0x0000561a5b70a304 <unavailable> + 4868

    5    libc.so.6                          0x00002ad189a38460 __libc_start_main +
    245

    6    tmp9ukvz3zr                        0x0000561a5b709f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660028669
