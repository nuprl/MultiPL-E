name: HumanEval_71_triangle_area
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return the area\
  \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
  \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
  \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
  /// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1, b:\
  \ 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\n\
  assert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8,\
  \ c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
  \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
  \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
  \ 2, b: 2, c: 10) == -1)"
completions: ["    var area: Double = -1\n    if ((a+b) > c) && ((a+c) > b) && ((b+c)\
    \ > a) {\n        area = Double(a*b)/2\n    }\n    return area", "    let sides\
    \ = [a, b, c].sorted(by: <)\n    let sum = sides.reduce(0, +)\n    if sum > (sides[2]\
    \ * 2) {\n        let p = Double(sum) / 2\n        let area = sqrt(p * (p - Double(sides[0]))\
    \ * (p - Double(sides[1])) * (p - Double(sides[2])))\n        return Double(round(10\
    \ * area) / 10)\n    }\n    return -1", "    let sides = [a, b, c].sorted()\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = Double(a + b + c) /\
    \ 2\n        return sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n\
    \    }\n    return -1", "    if a <= 0 || b <= 0 || c <= 0 {\n        return -1\n\
    \    }\n    if (a + b <= c) || (a + c <= b) || (b + c <= a) {\n        return\
    \ -1\n    }\n    let s = Double(a + b + c) / 2\n    let area = sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    return Double(round(100 * area)/100)",
  "    if a+b>c && a+c>b && b+c>a {\n        let s = Double(a+b+c)/2\n        return\
    \ sqrt(s*(s-Double(a))*(s-Double(b))*(s-Double(c)))\n    } else {\n        return\
    \ -1\n    }", "    let triangle = Triangle(a: a, b: b, c: c)\n    return triangle.getArea().roundTo(places:\
    \ 2)", "    let s = (a + b + c) / 2\n    let temp = (s - Double(a)) * (s - Double(b))\
    \ * (s - Double(c))\n    if temp > 0 {\n        return sqrt(temp) * 2\n    }\n\
    \    return -1", "    // TODO: write your function here\n    return 0.0", "  \
    \  if (a + b) < c || (a + c) < b || (b + c) < a {\n        return -1\n    }\n\
    \    let s = (a + b + c) / 2\n    let area = Double(s * (s - a) * (s - b) * (s\
    \ - c))\n    return Double(round(100 * sqrt(area)) / 100)", "    var s = Double(a\
    \ + b + c) / 2.0\n    let val = s * (s - Double(a)) * (s - Double(b)) * (s - Double(c))\n\
    \    if (val <= 0) {\n        return -1\n    }\n    return sqrt(val)", "    let\
    \ longest = max(a, max(b, c))\n    let sum = a + b + c\n    if longest >= sum\
    \ - longest {\n        return -1\n    }\n    let result = Double(a * b * c) /\
    \ Double(sum) * 4.0\n    return result.rounded(toPlaces: 2)", "    let s = (a\
    \ + b + c) / 2\n    return (s > a && s > b && s > c) ? sqrt(Double(s * (s - a)\
    \ * (s - b) * (s - c))) : -1", '    return -1', "    if (a + b > c) && (a + c\
    \ > b) && (b + c > a) {\n        let s = Double((a + b + c)) / 2\n        let\
    \ area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n     \
    \   return round(area * 100) / 100\n    }\n    return -1", "    // Your code here\n\
    \    if a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c > a {\n   \
    \     let s = Double(a + b + c) / 2\n        let d = (s * (s - Double(a)) * (s\
    \ - Double(b)) * (s - Double(c)))\n        return sqrt(d)\n    }\n    return -1",
  "    let s = Double(a + b + c) / 2\n    let area = sqrt(s * (s - Double(a)) * (s\
    \ - Double(b)) * (s - Double(c)))\n    return area.isNaN ? -1 : area", "    if\
    \ is_triangle(a: a, b: b, c: c) {\n        return (a + b + c) / 2\n    }\n   \
    \ return -1", "    if is_triangle(a: a, b: b, c: c) {\n        let s = (a + b\
    \ + c) / 2\n        return sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n   \
    \ }\n    return -1", "    if isValidTriangle(a: a, b: b, c: c) {\n        return\
    \ Double(Double(a * b) / 2)\n    }\n    return -1", "    var area: Double = -1\n\
    \    let triangle_sides = [a, b, c]\n    let sorted_sides = triangle_sides.sorted()\n\
    \    if sorted_sides[0] + sorted_sides[1] > sorted_sides[2] {\n        let s =\
    \ Double(sorted_sides[0] + sorted_sides[1] + sorted_sides[2]) / 2\n        area\
    \ = sqrt(s * (s - Double(sorted_sides[0])) * (s - Double(sorted_sides[1])) * (s\
    \ - Double(sorted_sides[2])))\n    }\n    return area", "    let p = Double(a\
    \ + b + c) / 2\n    let s = p * (p - Double(a)) * (p - Double(b)) * (p - Double(c))\n\
    \    if s > 0 {\n        return sqrt(s)\n    }\n    return -1", "    if (a > b\
    \ + c) || (b > a + c) || (c > a + b) {\n        return -1\n    }\n    let s =\
    \ Double(a + b + c) / 2\n    return sqrt(s * (s - Double(a)) * (s - Double(b))\
    \ * (s - Double(c)))", "    let s = (a + b + c) / 2.0\n    let area = sqrt(s *\
    \ (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    if area > 0 {\n  \
    \      return round(area * 100) / 100\n    }\n    return -1", "    let sides =\
    \ [a, b, c].sorted()\n    if sides[0] + sides[1] > sides[2] {\n        let s =\
    \ Double(a + b + c) / 2\n        return sqrt(s * (s - Double(a)) * (s - Double(b))\
    \ * (s - Double(c)))\n    }\n    return -1", "    let s = (a + b + c) / 2\n  \
    \  return (s >= a && s >= b && s >= c) ? sqrt(Double(s * (s - a) * (s - b) * (s\
    \ - c))) : -1", "    let max = max_of_three(a: a, b: b, c: c)\n    let sum = a\
    \ + b + c - max\n    if sum <= max {\n        return -1\n    }\n    let s = Double(sum)\
    \ / 2\n    let area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n\
    \    return area.rounded(toPlaces: 2)", "    let a = Double(a)\n    let b = Double(b)\n\
    \    let c = Double(c)\n    if a + b > c && a + c > b && b + c > a {\n       \
    \ let s = (a + b + c) / 2\n        return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)) * 100) / 100\n    }\n    return -1", "    let sorted = [a, b, c].sorted()\n\
    \    if sorted[0] + sorted[1] <= sorted[2] {\n        return -1\n    }\n    let\
    \ x = (sorted[0] + sorted[1] + sorted[2]) / 2\n    let area = Double(x * (x -\
    \ sorted[0]) * (x - sorted[1]) * (x - sorted[2]))\n    return sqrt(area)", '    return
    -1', "    if a + b <= c || a + c <= b || b + c <= a {\n        return -1\n   \
    \ }\n    let p = Double(a + b + c) / 2\n    return Double(round(100 * sqrt(p *\
    \ (p - Double(a)) * (p - Double(b)) * (p - Double(c)))) / 100)", "    if a < 0\
    \ || b < 0 || c < 0 {\n        return -1\n    }\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        let s = Double(a + b + c) / 2\n        let area = sqrt(s\
    \ * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n        return Double(round(area\
    \ * 100) / 100)\n    }\n    return -1", "    // Enter your code between the two\
    \ comment markers\n    let max_len = max(a, b, c)\n    let min_len = min(a, b,\
    \ c)\n    let mid_len = a + b + c - max_len - min_len\n    if max_len < mid_len\
    \ + min_len {\n        return Double(mid_len * min_len) / 2\n    } else {\n  \
    \      return -1\n    }\n    // End code", "    let sides = [a, b, c].sorted()\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = (Double(a) + Double(b)\
    \ + Double(c)) / 2\n        return sqrt(p * (p - Double(a)) * (p - Double(b))\
    \ * (p - Double(c)))\n    }\n    return -1", "    let sides = [a, b, c].sorted(by:\
    \ <)\n    if sides[0] + sides[1] <= sides[2] {\n        return -1\n    }\n   \
    \ let semi = (a + b + c) / 2\n    return Double(sqrt(Double(semi * (semi - a)\
    \ * (semi - b) * (semi - c))))", "    //TODO: Implement Me\n    return -1", " \
    \   // guard clauses, to short circuit the function if our input is invalid\n\
    \    guard a > 0 else { return -1 }\n    guard b > 0 else { return -1 }\n    guard\
    \ c > 0 else { return -1 }\n    // if the sum of any two sides is less than the\
    \ third side, it's invalid.\n    guard a + b > c else { return -1 }\n    guard\
    \ a + c > b else { return -1 }\n    guard b + c > a else { return -1 }\n    //\
    \ otherwise, we can use Heron's formula to get the area of the triangle.\n   \
    \ let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) *\
    \ (s - c)))\n    return Double(round(100 * area) / 100)", "    // TODO: implement\
    \ the triangle area\n    return 0.0", '    // your code goes here', "    let sides\
    \ = [a, b, c].sorted()\n    guard sides[0] + sides[1] > sides[2] else { return\
    \ -1 }\n    let p = Double(a + b + c) / 2\n    return round(pow(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)), 0.5) * 100) / 100", "    var triangle_area:\
    \ Double = -1\n    let valid_triangle = a + b > c && a + c > b && b + c > a\n\
    \    if valid_triangle {\n        let p = Double(a + b + c) / 2\n        triangle_area\
    \ = sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n    }\n   \
    \ return triangle_area", "    if(a + b > c && a + c > b && b + c > a) {\n    \
    \    let s = (a + b + c) / 2\n        let area = sqrt(Double(s * (s - a) * (s\
    \ - b) * (s - c)))\n        return (area * 100).rounded() / 100\n    }\n    return\
    \ -1", '    return -1', "    let sorted = [a, b, c].sorted()\n    let largest\
    \ = sorted[2]\n    let smallest = sorted[0]\n    let middle = sorted[1]\n    if\
    \ largest >= middle + smallest {\n        return -1\n    }\n    let a = Double(sorted[0])\n\
    \    let b = Double(sorted[1])\n    let c = Double(sorted[2])\n    let s = (a\
    \ + b + c) / 2\n    let area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return\
    \ area", '    return -1', "    let sides = [a, b, c].sorted()\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = (Double(a) + Double(b) + Double(c))\
    \ / 2\n        return sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n\
    \    }\n    return -1", "    var s = Double(a + b + c) / 2\n    var tri_area =\
    \ sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    if tri_area.isNaN\
    \ {\n        return -1\n    }\n    return round(tri_area * 100) / 100", "  //\
    \ Maintain a list of sides, which are sorted from smallest to largest\n  var sides\
    \ = [a, b, c].sorted()\n  // Return -1 if the sum of the smallest two sides is\
    \ less than the third side\n  if sides[0] + sides[1] < sides[2] {\n    return\
    \ -1\n  }\n  // Otherwise, return the area of the triangle, rounded to 2 decimal\
    \ points\n  return pow(Double(sides[0]), 2) * sqrt(3) / 4", "    let triangle:\
    \ [Int] = [a, b, c]\n    let sorted_triangle = triangle.sorted()\n    let count\
    \ = sorted_triangle.count\n    let perimeter = sorted_triangle.reduce(0, +)\n\
    \    let area = 0.25 * sqrt(Double(perimeter * (perimeter - sorted_triangle[0])\
    \ * (perimeter - sorted_triangle[1]) * (perimeter - sorted_triangle[2])))\n  \
    \  if count == 3 && sorted_triangle[0] + sorted_triangle[1] > sorted_triangle[2]\
    \ && area > 0.0 {\n        return area\n    } else {\n        return -1\n    }",
  "    let doubles = [Double(a), Double(b), Double(c)]\n    let sortedDoubles = doubles.sorted()\n\
    \    guard sortedDoubles[0] + sortedDoubles[1] > sortedDoubles[2] else {\n   \
    \     return -1\n    }\n    let p = sortedDoubles.reduce(0.0, +) / 2\n    let\
    \ area = p * (p - sortedDoubles[0]) * (p - sortedDoubles[1]) * (p - sortedDoubles[2])\n\
    \    return sqrt(area)", "    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        let s = Double((a + b + c)) / 2\n        let area = Double(sqrt(s * (s\
    \ - Double(a)) * (s - Double(b)) * (s - Double(c))))\n        return area.rounded(toPlaces:\
    \ 2)\n    }\n    return -1", "  let sides = [a, b, c].sorted()\n  if sides[0]\
    \ + sides[1] > sides[2] {\n    let p = Double(a + b + c) / 2\n    return round(sqrt(p\
    \ * (p - Double(a)) * (p - Double(b)) * (p - Double(c))) * 100) / 100\n  }\n \
    \ return -1", "    \n    if (a + b > c) && (a + c > b) && (b + c > a) {\n    \
    \    let p = Double((a + b + c)) / 2\n        let area = sqrt(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)))\n        return round(area * 100) / 100\n\
    \    }\n    return -1", "    let sides = [a, b, c].sorted()\n    guard sides[0]\
    \ + sides[1] > sides[2] else { return -1 }\n    let p = Double(a + b + c) / 2\n\
    \    return sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))", " \
    \   let sides = [a, b, c].sorted()\n    if sides[0] + sides[1] > sides[2] {\n\
    \        let p = (Double(a) + Double(b) + Double(c)) / 2\n        return sqrt(p\
    \ * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n    }\n    return -1",
  "    let (a, b, c) = (Double(a), Double(b), Double(c))\n    if a + b > c && a +\
    \ c > b && b + c > a {\n        let s = (a + b + c) / 2\n        return sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    }\n    return -1", "    let triArea = Double(a\
    \ + b + c)\n    let radians = triArea / 2.0\n    let area = sqrt(radians * (radians\
    \ - Double(a)) * (radians - Double(b)) * (radians - Double(c)))\n    if area.isNaN\
    \ || area == 0 {\n        return -1\n    }\n    return Double(round(100 * area)\
    \ / 100)", "    var temp = [a, b, c]\n    temp.sort()\n    if temp[0] + temp[1]\
    \ <= temp[2] {\n        return -1\n    }\n    let p = Double(a + b + c) / 2\n\
    \    return (p * (p - Double(a)) * (p - Double(b)) * (p - Double(c))).squareRoot()",
  "    // create an array of type Double and assign the values to the elements\n \
    \   let sides: [Double] = [Double(a), Double(b), Double(c)]\n    let sortedSides\
    \ = sides.sorted()\n    // check if the sum of the first two elements is greater\
    \ than the third element\n    if sortedSides[0] + sortedSides[1] > sortedSides[2]\
    \ {\n        // get the lengths of the three sides\n        let a = sortedSides[0]\n\
    \        let b = sortedSides[1]\n        let c = sortedSides[2]\n        // get\
    \ the half perimeter\n        let s = (a + b + c) / 2\n        // find the area\
    \ using the Heron's formula\n        let area = sqrt(s * (s - a) * (s - b) * (s\
    \ - c))\n        // round to 2 decimal points\n        return Double(round(1000\
    \ * area) / 1000)\n    }\n    return -1", "    let lengths = [a, b, c].sorted()\n\
    \    guard lengths[0] + lengths[1] > lengths[2] else { return -1 }\n    let s\
    \ = (a + b + c) / 2\n    return sqrt(Double(s) * Double(s - a) * Double(s - b)\
    \ * Double(s - c))", "    var result: Double = -1\n    if a + b > c && a + c >\
    \ b && b + c > a {\n        let s = Double(a + b + c) / 2\n        result = sqrt(s\
    \ * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    }\n    return result",
  "    // c > b > a\n    let c = Double(c)\n    let b = Double(b)\n    let a = Double(a)\n\
    \    if (c < b) {\n        return triangle_area(a: b, b: c, c: a)\n    }\n   \
    \ if (b < a) {\n        return triangle_area(a: c, b: a, c: b)\n    }\n    //\
    \ c > b > a\n    if c < a + b {\n        let s = (a + b + c) / 2\n        return\
    \ sqrt(s * (s - a) * (s - b) * (s - c))\n    }\n    return -1", "    let a = Double(a)\n\
    \    let b = Double(b)\n    let c = Double(c)\n    let s = (a + b + c) / 2.0\n\
    \    if a + b > c && a + c > b && b + c > a {\n        return sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n    }\n    return -1", "    if a+b>c && a+c>b && b+c>a\
    \ {\n        let p = Double(a+b+c)/2\n        let area = sqrt(p*(p-Double(a))*(p-Double(b))*(p-Double(c)))\n\
    \        return (area*100).rounded()/100\n    }\n    return -1", '  return 0.0',
  "    if a < b + c && b < a + c && c < a + b {\n        let p = Double(a + b + c)\
    \ / 2\n        let area = Double(p * (p - Double(a)) * (p - Double(b)) * (p -\
    \ Double(c)))\n        return sqrt(area)\n    }\n    return -1", "    if a + b\
    \ > c && a + c > b && b + c > a {\n        let s = (a + b + c) / 2\n        let\
    \ area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n        return Double(round(area\
    \ * 100) / 100)\n    }\n    return -1", "    let sum1 = Double(a + b)\n    let\
    \ sum2 = Double(a + c)\n    let sum3 = Double(b + c)\n    if sum1 > Double(c)\
    \ && sum2 > Double(b) && sum3 > Double(a) {\n        let s = (sum1 + sum2 + sum3)\
    \ / 2\n        let area = sqrt(s * (s - sum1) * (s - sum2) * (s - sum3))\n   \
    \     return round(area * 100) / 100\n    }\n    return -1", "    let result =\
    \ (a + b > c) && (a + c > b) && (b + c > a)\n    return result ? Double(a * b\
    \ / 2) : -1", "    if (a + b) < c || (a + c) < b || (b + c) < a {\n        return\
    \ -1\n    }\n    let p = Double((a + b + c) / 2)\n    let s = Double(sqrt(p *\
    \ (p - Double(a)) * (p - Double(b)) * (p - Double(c))))\n    return round(s *\
    \ 100) / 100", "  let sm = Double(a + b + c) / 2\n  let area = sqrt(sm * (sm -\
    \ Double(a)) * (sm - Double(b)) * (sm - Double(c)))\n  if area > 0 {\n    return\
    \ area\n  }\n  return -1", "    let triangle: [Int] = [a, b, c]\n    triangle.sort()\n\
    \    return (triangle[0] + triangle[1] > triangle[2]) ? Double(triangle[0] * triangle[1])\
    \ / 2 : -1", "    let s = a + b + c\n    if s < 3 {\n        return -1\n    }\
    \ else {\n        let p = Double(s) / 2\n        let area = p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c))\n        return sqrt(area)\n    }", "  \
    \  if is_triangle(a: a, b: b, c: c) {\n        let p = (a + b + c) / 2.0\n   \
    \     return sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n \
    \   }\n    return -1", "    let sum = Double(a + b + c)\n    if sum <= 0.0 {\n\
    \        return -1.0\n    }\n    let halfSum = sum / 2.0\n    return sqrt(halfSum\
    \ * (halfSum - Double(a)) * (halfSum - Double(b)) * (halfSum - Double(c)))", " \
    \ let sides = [a, b, c].sorted()\n  let area = area_for_sides(a: sides[0], b:\
    \ sides[1], c: sides[2])\n  return area.isNaN ? -1 : area", "    // NOTE: This\
    \ is not the BEST way to do this, but since we haven't covered \n    // conditionals\
    \ yet, we're just going to brute force it and try all six permutations\n    var\
    \ validSides = [[Int]]()\n    validSides.append([a, b, c])\n    validSides.append([a,\
    \ c, b])\n    validSides.append([b, a, c])\n    validSides.append([b, c, a])\n\
    \    validSides.append([c, a, b])\n    validSides.append([c, b, a])\n    \n  \
    \  for side in validSides {\n        if (side[0] + side[1] > side[2]) {\n    \
    \        let s = (side[0] + side[1] + side[2]) / 2\n            let area = sqrt(Double(s\
    \ * (s - side[0]) * (s - side[1]) * (s - side[2])))\n            return Double(round(100\
    \ * area) / 100)\n        }\n    }\n    \n    return -1", "    let s = (a + b\
    \ + c) / 2.0\n    let area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s -\
    \ Double(c)))\n    if area.isNaN {\n        return -1\n    }\n    return area",
  "    let length = [a, b, c].sorted(by: >)\n    if length[0] < length[1] + length[2]\
    \ {\n        let s = Double(a + b + c) / 2\n        return Double(sqrt(s * (s\
    \ - Double(a)) * (s - Double(b)) * (s - Double(c))))\n    }\n    return -1", " \
    \   // check the validity of the triangle\n    if !is_valid_triangle(a: a, b:\
    \ b, c: c) {\n        return -1\n    }\n    // calculate the area\n    let s =\
    \ (a + b + c) / 2\n    let a = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n\
    \    return Double(round(a * 100) / 100)", "    let sides = [a, b, c].sorted()\n\
    \    if sides[0] + sides[1] <= sides[2] {\n        return -1\n    }\n    let s\
    \ = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n\
    \    return area.rounded(toPlaces: 2)", "    let s = (a + b + c) / 2\n    let\
    \ triangle_area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n    if triangle_area\
    \ > 0 {\n        return Double(round(triangle_area * 100)/100)\n    } else {\n\
    \        return -1\n    }", "    let sides = [a, b, c].sorted()\n    let area\
    \ = Double(sides[0] + sides[1] - sides[2])\n    if area <= 0 {\n        return\
    \ -1\n    }\n    return Double(sides[0] + sides[1] + sides[2]) / 2 * area", " \
    \   let sides = [a, b, c].sorted(by: >)\n    let (a, b, c) = (sides[0], sides[1],\
    \ sides[2])\n    guard a < b + c else { return -1 }\n    let p = Double(a + b\
    \ + c) / 2\n    return Double(round(100 * sqrt(p * (p - Double(a)) * (p - Double(b))\
    \ * (p - Double(c)))) / 100)", "    if a + b > c && a + c > b && b + c > a {\n\
    \        let p = Double(a + b + c) / 2\n        return Double(sqrt(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c))))\n    }\n    return -1", "    let triangle\
    \ = Triangle(a: a, b: b, c: c)\n    return triangle.area()", "    let sides =\
    \ [a, b, c].sorted(by: <)\n    guard sides[0] + sides[1] > sides[2] else { return\
    \ -1 }\n    let p = Double(a + b + c) / 2\n    return sqrt(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)))", "    let s = Double(a + b + c) / 2\n\
    \    let x = s * (s - Double(a)) * (s - Double(b)) * (s - Double(c))\n    let\
    \ area = sqrt(x)\n    if area.isNaN {\n        return -1\n    }\n    return Double(round(area\
    \ * 100) / 100)", "    let triangle = Triangle(a: a, b: b, c: c)\n    if triangle.isValid()\
    \ {\n        return triangle.area()\n    }\n    return -1", "    let sides = [a,\
    \ b, c].sorted()\n    if sides[0] + sides[1] > sides[2] {\n        return Double(0.5\
    \ * sides[0] * sides[1])\n    }\n    return -1", "    if a + b <= c || a + c <=\
    \ b || b + c <= a {\n        return -1\n    }\n    let s = Double(a + b + c) /\
    \ 2\n    return (s * (s - Double(a)) * (s - Double(b)) * (s - Double(c))).squareRoot()",
  "    var result: Double = -1\n    let sides = [a, b, c]\n    let sorted = sides.sorted()\n\
    \    let sum = sorted[0] + sorted[1]\n    if sum > sorted[2] {\n        result\
    \ = Double(sorted[0] + sorted[1] + sorted[2]) / 2\n        result = sqrt(result\
    \ * (result - Double(sorted[0])) * (result - Double(sorted[1])) * (result - Double(sorted[2])))\n\
    \    }\n    return round(result * 100) / 100", "    let sides = [a, b, c].sorted(by:\
    \ <)\n    let side1 = Double(sides[0])\n    let side2 = Double(sides[1])\n   \
    \ let side3 = Double(sides[2])\n    if sides[0] + sides[1] <= sides[2] {\n   \
    \     return -1\n    }\n    let s = (side1 + side2 + side3) / 2\n    let area\
    \ = Double(sqrt(s * (s - side1) * (s - side2) * (s - side3)))\n    return round(area\
    \ * 100) / 100", "    if is_triangle(a: a, b: b, c: c) {\n        let sp = (a\
    \ + b + c) / 2\n        let area = sqrt(Double(sp * (sp - a) * (sp - b) * (sp\
    \ - c)))\n        return round(area * 100) / 100\n    }\n    return -1", "   \
    \ let p = Double(a + b + c) / 2.0\n    let t = p * (p - Double(a)) * (p - Double(b))\
    \ * (p - Double(c))\n    if t > 0 {\n        return sqrt(t)\n    }\n    return\
    \ -1", "    let arr = [a, b, c].sorted()\n    guard arr[0] + arr[1] > arr[2] else\
    \ { return -1 }\n    let p = Double(a + b + c) / 2\n    return sqrt(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)))", "    let sum = Double(a + b + c)\n  \
    \  if (sum <= 0.0) {\n        return -1.0\n    }\n    let s = sum / 2.0\n    let\
    \ result = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n   \
    \ return round(100 * result) / 100", "    if (a + b) > c && (a + c) > b && (b\
    \ + c) > a {\n        let s = (a + b + c) / 2\n        let area = sqrt(Double(s\
    \ * (s - a) * (s - b) * (s - c)))\n        return Double(round(100 * area) / 100)\n\
    \    }\n    return -1", "    if a + b > c && a + c > b && b + c > a {\n      \
    \  let s = (a + b + c) / 2\n        let area = sqrt(Double(s * (s - a) * (s -\
    \ b) * (s - c)))\n        return Double(round(100 * area) / 100)\n    }\n    return\
    \ -1", "    let ab = Double(a + b)\n    let bc = Double(b + c)\n    let ac = Double(a\
    \ + c)\n    let triangle_perimeter = (ab + bc + ac) / 2\n    var triangle_area\
    \ = triangle_perimeter * (triangle_perimeter - ab) * (triangle_perimeter - bc)\
    \ * (triangle_perimeter - ac)\n    if triangle_area > 0 {\n        triangle_area\
    \ = Double(triangle_area).squareRoot()\n        return triangle_area.rounded(toPlaces:\
    \ 2)\n    } else {\n        return -1\n    }", "    let sides = [a, b, c].sorted()\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let s = (a + b + c) / 2\n  \
    \      return Double(s * (s - a) * (s - b) * (s - c)).squareRoot()\n    }\n  \
    \  return -1", '    // your code here', "    let s = Double(a + b + c) / 2\n \
    \   let area = Double(a) * Double(b) * Double(c) / (4 * sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c))))\n    if (a + b > c) && (a + c > b) &&\
    \ (b + c > a) {\n        return area\n    } else {\n        return -1\n    }",
  "    var side1 = Double(a)\n    var side2 = Double(b)\n    var side3 = Double(c)\n\
    \    let sum12 = side1 + side2\n    let sum23 = side2 + side3\n    let sum13 =\
    \ side1 + side3\n    if sum12 <= side3 || sum23 <= side1 || sum13 <= side2 {\n\
    \        return -1\n    }\n    let s = (side1 + side2 + side3) / 2\n    let triangleArea\
    \ = (s * (s - side1) * (s - side2) * (s - side3)).squareRoot()\n    return triangleArea.rounded(toPlaces:\
    \ 2)", '    return 0.0', "    let max_length = max(a, b, c)\n    let remaining_sides\
    \ = (a + b + c) - max_length\n    if remaining_sides <= max_length {\n       \
    \ return -1\n    }\n    let s = Double(remaining_sides) / 2\n    let area = sqrt(s\
    \ * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    return round(area\
    \ * 100) / 100", "    let (x, y, z) = (Double(a), Double(b), Double(c))\n    return\
    \ [(x, y, z), (y, z, x), (z, x, y)].map { (a, b, c) -> Double in\n        if a\
    \ + b > c {\n            let s = (a + b + c) / 2\n            return sqrt(s *\
    \ (s - a) * (s - b) * (s - c))\n        }\n        return -1\n    }.min() ?? -1",
  "    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b + c) / 2\n\
    \        let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n        return\
    \ Double(round(100 * area) / 100)\n    }\n    return -1", "    let s: Double =\
    \ Double(a + b + c) / 2\n    let area: Double = sqrt(s * (s - Double(a)) * (s\
    \ - Double(b)) * (s - Double(c)))\n    if (a + b > c) && (a + c > b) && (b + c\
    \ > a) {\n        return area\n    } else {\n        return -1\n    }", "    let\
    \ s = (a + b + c) / 2.0\n    return sqrt(s * (s - Double(a)) * (s - Double(b))\
    \ * (s - Double(c)))", "    if a > b + c || b > a + c || c > a + b {\n       \
    \ return -1\n    }\n    let s = Double(a + b + c) / 2\n    return sqrt(s * (s\
    \ - Double(a)) * (s - Double(b)) * (s - Double(c)))", "    let triangle = Triangle(a:\
    \ a, b: b, c: c)\n    return triangle.area", "    var area = -1.0\n    if isValidTriangle(a:\
    \ a, b: b, c: c) {\n        let sum = Double(a + b + c)\n        let p = sum /\
    \ 2\n        area = sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n\
    \    }\n    return area", "    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        let p = Double(a + b + c) / 2\n        let area = sqrt(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)))\n        return Double(round(100 * area)\
    \ / 100)\n    }\n    return -1", "    if a + b > c && a + c > b && b + c > a {\n\
    \        let s = (a + b + c) / 2\n        let area = Double(sqrt(Double(s * (s\
    \ - a) * (s - b) * (s - c))))\n        return round(area * 100) / 100\n    }\n\
    \    return -1", "    // Write your code here\n    var area = 0.0\n    if (a +\
    \ b <= c) || (a + c <= b) || (b + c <= a) {\n        return -1\n    }\n    let\
    \ semiperimeter = (a + b + c)/2\n    area = semiperimeter * (semiperimeter - a)\
    \ * (semiperimeter - b) * (semiperimeter - c)\n    return sqrt(area)", "    let\
    \ sides = [a, b, c].sorted()\n    if sides[0] + sides[1] > sides[2] {\n      \
    \  let p = Double(a + b + c) / 2\n        return sqrt(p * (p - Double(a)) * (p\
    \ - Double(b)) * (p - Double(c)))\n    }\n    return -1", "    \n    if (a < 0\
    \ || b < 0 || c < 0) {\n        return -1\n    }\n    \n    let is_valid_triangle\
    \ = (a + b > c) && (a + c > b) && (b + c > a)\n    \n    if !is_valid_triangle\
    \ {\n        return -1\n    }\n    \n    let semi_perimeter = (a + b + c) / 2\n\
    \    let area = Double(sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter\
    \ - b) * (semi_perimeter - c)))\n    \n    return Double(area.rounded(toPlaces:\
    \ 2))", "    let p = (a + b + c) / 2.0\n    if (a + b > c) && (a + c > b) && (b\
    \ + c > a) {\n        return sqrt(p * (p - Double(a)) * (p - Double(b)) * (p -\
    \ Double(c)))\n    }\n    return -1", "    var S: Double = -1\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        let p = Double(a + b + c) / 2\n\
    \        S = sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n \
    \   }\n    return S", "    let c1 = Double(a), c2 = Double(b), c3 = Double(c)\n\
    \    let S = (c1 + c2 + c3) / 2\n    let area = sqrt(S * (S - c1) * (S - c2) *\
    \ (S - c3))\n    return area.isNaN ? -1 : area", '    return -1', "    let valid\
    \ = (a + b > c) && (a + c > b) && (b + c > a)\n    if valid {\n        let p =\
    \ Double(a + b + c) / 2\n        let area = sqrt(p * (p - Double(a)) * (p - Double(b))\
    \ * (p - Double(c)))\n        return Double(round(100 * area) / 100)\n    }\n\
    \    return -1", "    let sides = [a, b, c].sorted()\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let s = Double(a + b + c) / 2\n        return (s * (s\
    \ - Double(a)) * (s - Double(b)) * (s - Double(c))).squareRoot()\n    }\n    return\
    \ -1", "    if !(a + b > c && a + c > b && b + c > a) {\n        return -1\n \
    \   }\n    let s = Double(a + b + c) / 2\n    return sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))", "    let sum_two_sides_is_greater_than_third\
    \ = (a + b > c) && (a + c > b) && (b + c > a)\n    return sum_two_sides_is_greater_than_third\
    \ ? 0.5 * Double(a * b) : -1", "    let s = (a + b + c) / 2\n    if (a < (b +\
    \ c)) && (b < (a + c)) && (c < (a + b)) {\n        return (Double(s) * (Double(s)\
    \ - Double(a)) * (Double(s) - Double(b)) * (Double(s) - Double(c)))\n        .squareRoot()\n\
    \    }\n    return -1", "    let s: Double = Double(a + b + c) / 2\n    let area:\
    \ Double = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n   \
    \ return (area.isNaN || area <= 0) ? -1 : area", "  let ds = [Double(a), Double(b),\
    \ Double(c)]\n  let ds_sorted = ds.sorted()\n  let sum = ds_sorted.reduce(0, +)\n\
    \  if ds_sorted[0] + ds_sorted[1] > ds_sorted[2] {\n    return sqrt(sum * (sum\
    \ - ds_sorted[0]) * (sum - ds_sorted[1]) * (sum - ds_sorted[2]))\n  }\n  return\
    \ -1", "    if (a + b > c) && (a + c > b) && (b + c > a) {\n        // calculate\
    \ half perimeter\n        let p = Double((a + b + c) / 2)\n        // calculate\
    \ area\n        let area = sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n\
    \        // round to 2 decimal points\n        return round(area * 100) / 100\n\
    \    }\n    return -1", "    let triangle = Triangle(a: a, b: b, c: c)\n    guard\
    \ triangle.isValid() else { return -1 }\n    return Double(triangle.area())",
  "    var area = -1.0\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n     \
    \   let s = Double((a + b + c)) / 2.0\n        area = sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    }\n    return area", "    let p =\
    \ Double(a + b + c) / 2.0\n    let x = Double(a)\n    let y = Double(b)\n    let\
    \ z = Double(c)\n    let area = sqrt(p * (p - x) * (p - y) * (p - z))\n    if\
    \ a + b > c && a + c > b && b + c > a {\n        return round(area * 100) / 100\n\
    \    } else {\n        return -1\n    }", "    let sides = [a, b, c].sorted()\n\
    \    guard sides[0] + sides[1] > sides[2] else { return -1 }\n    let s = Double(sides[0]\
    \ + sides[1] + sides[2]) / 2\n    return sqrt(s * (s - Double(sides[0])) * (s\
    \ - Double(sides[1])) * (s - Double(sides[2])))", "  if a > b + c || b > a + c\
    \ || c > a + b {\n    return -1\n  }\n  let s = (a + b + c) / 2\n  let area =\
    \ sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n  return round(area * 100) /\
    \ 100", "    if a + b > c && a + c > b && b + c > a {\n        let s = (a + b\
    \ + c) / 2\n        let area = Double(s) * (Double(s) - Double(a)) * (Double(s)\
    \ - Double(b)) * (Double(s) - Double(c))\n        let a = sqrt(area)\n       \
    \ return round(a * 100) / 100\n    }\n    return -1", "    var triArea: Double\
    \ = -1.0\n    if a + b > c && a + c > b && b + c > a {\n        triArea = Double(a\
    \ + b + c) / 2\n    }\n    return triArea", "    if (a+b>c && a+c>b && b+c>a)\
    \ {\n        let s = Double((a+b+c)/2)\n        let area = sqrt(s*(s-Double(a))*(s-Double(b))*(s-Double(c)))\n\
    \        return round(area*100)/100\n    }\n    return -1", "    let total = a\
    \ + b + c\n    if (total - a) < a && (total - b) < b && (total - c) < c {\n  \
    \      let half = Double(total) / 2\n        let a2 = Double(a) * Double(a)\n\
    \        let b2 = Double(b) * Double(b)\n        let c2 = Double(c) * Double(c)\n\
    \        let bottom = half * (half - Double(a)) * (half - Double(b)) * (half -\
    \ Double(c))\n        let area = bottom.squareRoot()\n        return area\n  \
    \  }\n    return -1", "    if !is_valid_triangle(a: a, b: b, c: c) {\n       \
    \ return -1\n    }\n    let s = (a + b + c) / 2\n    let area = sqrt(Double(s\
    \ * (s - a) * (s - b) * (s - c)))\n    return area.rounded(toPlaces: 2)", "  \
    \  if a + b > c && a + c > b && b + c > a {\n        let p = Double(a + b + c)\
    \ / 2\n        return sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n\
    \    }\n    return -1", "    let sides = [a, b, c].sorted()\n    guard (sides[0]\
    \ + sides[1]) > sides[2] else { return -1 }\n    let p = (Double(a) + Double(b)\
    \ + Double(c)) / 2\n    return Double(round(100 * sqrt(p * (p - Double(a)) * (p\
    \ - Double(b)) * (p - Double(c)))) / 100)", "    // Note: * is the multiplication\
    \ operator in swift\n    if a + b > c && a + c > b && b + c > a {\n        let\
    \ s = (a + b + c) / 2\n        let area = sqrt(Double(s * (s - a) * (s - b) *\
    \ (s - c)))\n        return Double(round(100 * area) / 100)\n    }\n    return\
    \ -1", "  let sorted = [a, b, c].sorted()\n  return (sorted[0] + sorted[1] > sorted[2])\
    \ ? 0.5 * Double(a * b) : -1", "    // TODO\n    let s = Double(a + b + c) / 2\n\
    \    if Double(a) + Double(b) > Double(c) && Double(a) + Double(c) > Double(b)\
    \ && Double(b) + Double(c) > Double(a) {\n        return Double(sqrt(s * (s -\
    \ Double(a)) * (s - Double(b)) * (s - Double(c))))\n    } else {\n        return\
    \ -1\n    }", "    let myArray = [a, b, c]\n    let max = myArray.max()\n    if\
    \ max == myArray.min() {\n        return -1\n    }\n    let sides = myArray.filter{$0\
    \ != max}\n    if sides[0] + sides[1] <= max {\n        return -1\n    }\n   \
    \ let s = Double(sides[0] + sides[1] + max) / 2\n    let area = sqrt(s * (s -\
    \ Double(sides[0])) * (s - Double(sides[1])) * (s - Double(max)))\n    return\
    \ round(area * 100) / 100", "    if valid_triangle(a: a, b: b, c: c) {\n     \
    \   let p = (a + b + c) / 2\n        let area = sqrt(Double(p * (p - a) * (p -\
    \ b) * (p - c)))\n        return area.rounded(toPlaces: 2)\n    }\n    return\
    \ -1", "    \n    let result: Double\n    \n    if (a+b) > c && (a+c) > b && (b+c)\
    \ > a {\n        let s = Double((a+b+c))/2\n        result = sqrt(s*(s-Double(a))*(s-Double(b))*(s-Double(c)))\n\
    \    } else {\n        result = -1\n    }\n    \n    return result", "    let\
    \ a = Double(a)\n    let b = Double(b)\n    let c = Double(c)\n    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = (a + b + c) / 2\n        return\
    \ round(sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100\n    }\n    return\
    \ -1", "    let abc = [a, b, c].sorted()\n    let p = (a + b + c).toDouble() /\
    \ 2.0\n    if abc[0] + abc[1] > abc[2] {\n        return sqrt(p * (p - a.toDouble())\
    \ * (p - b.toDouble()) * (p - c.toDouble())).roundTo(places: 2)\n    }\n    return\
    \ -1", "    let s = Double(a + b + c) / 2\n    let area = sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    return area.isNaN ? -1 : area", " \
    \   let sumOfTwoSides = a + b\n    let sumOfThreeSides = a + b + c\n    let area:\
    \ Double\n    if sumOfTwoSides > c && sumOfThreeSides > 2 * c {\n        area\
    \ = sqrt(Double(sumOfThreeSides * (sumOfThreeSides - 2 * c) * (sumOfThreeSides\
    \ - 2 * a) * (sumOfThreeSides - 2 * b))) / 4\n    } else {\n        area = -1\n\
    \    }\n    return area", "    var res = -1.0\n    let sides = [a, b, c]\n   \
    \ if sides.max()! < sides.reduce(0, +) - sides.max()! {\n        res = 0.5 * Double(a\
    \ * b)\n    }\n    return res", "  if (a + b > c) && (a + c > b) && (b + c > a)\
    \ {\n    let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s\
    \ - b) * (s - c)))\n    return Double(round(100 * area) / 100)\n  }\n  return\
    \ -1", "    if (a+b) > c && (a+c) > b && (b+c) > a {\n        let s = Double((a+b+c))/2\n\
    \        let base = abs(Double(b-c))\n        let height = abs(Double(b-a))\n\
    \        return sqrt(s*(s-base)*(s-height))\n    }\n    return -1", "    let p\
    \ = (a + b + c) / 2\n    return ((p - Double(a)) * (p - Double(b)) * (p - Double(c))\
    \ * p).squareRoot()", "    if a + b > c && a + c > b && b + c > a {\n        let\
    \ s = (a + b + c) / 2\n        let S = sqrt(Double(s * (s - a) * (s - b) * (s\
    \ - c)))\n        return (S * 100).rounded() / 100\n    }\n    return -1", " \
    \   let sides = [a, b, c].sorted(by: <)\n    guard sides[0] + sides[1] > sides[2]\
    \ else { return -1 }\n    let p = Double(a + b + c) / 2\n    return sqrt(p * (p\
    \ - Double(a)) * (p - Double(b)) * (p - Double(c)))", '    return 0.0', "    let\
    \ s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) * (s -\
    \ c)))\n    if area > 0 {\n        return round(area * 100) / 100\n    }\n   \
    \ return -1", "    var result: Double = -1\n    var aDouble = Double(a)\n    var\
    \ bDouble = Double(b)\n    var cDouble = Double(c)\n    if aDouble + bDouble >\
    \ cDouble {\n        result = Double(a + b + c) / 2\n    }\n    return result",
  "    //TODO: write your code here.\n    let sum = Double(a + b + c)\n    let ret\
    \ = (sum / 2) * (sum / 2 - Double(a)) * (sum / 2 - Double(b)) * (sum / 2 - Double(c))\n\
    \    if ret < 0 {\n        return -1\n    }\n    return sqrt(ret)", "    let sides\
    \ = [a, b, c].sorted()\n    guard sides[0] + sides[1] > sides[2] else { return\
    \ -1 }\n    let s = Double(sides[0] + sides[1] + sides[2]) / 2\n    return s !=\
    \ 0 ? round(100 * sqrt(s * (s - Double(sides[0])) * (s - Double(sides[1])) * (s\
    \ - Double(sides[2])))) / 100 : 0", "    if (a + b) < c || (a + c) < b || (b +\
    \ c) < a {\n        return -1\n    }\n    let p = Double((a + b + c)) / 2\n  \
    \  let area = Double(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n\
    \    return area.squareRoot()", "  let sorted = [a, b, c].sorted()\n  let s =\
    \ Double(sorted[0] + sorted[1])\n  let h = Double(sorted[2])\n  if s > h {\n \
    \   return 0.5 * sqrt(s * (s - h))\n  }\n  return -1", "    var area = -1.0\n\
    \    if ((a + b) > c) && ((a + c) > b) && ((b + c) > a) {\n        area = Double(0.5\
    \ * (a * b))\n    }\n    return area", "    if (a + b > c) && (a + c > b) && (b\
    \ + c > a) {\n        let s = (a + b + c) / 2\n        let area = sqrt(Double(s\
    \ * (s - a) * (s - b) * (s - c)))\n        return round(100 * area) / 100\n  \
    \  }\n    return -1", "    let s = (a + b + c)/2.0\n    let area = sqrt(s*(s-Double(a))*(s-Double(b))*(s-Double(c)))\n\
    \    return area > 0 ? area : -1", "    let a = Double(a)\n    let b = Double(b)\n\
    \    let c = Double(c)\n    if a > b + c || b > a + c || c > a + b {\n       \
    \ return -1\n    }\n    let s = (a + b + c) / 2\n    return sqrt(s * (s - a) *\
    \ (s - b) * (s - c))", '    return 0.0', "    let list = [a, b, c].sorted()\n\
    \    if list[0] + list[1] > list[2] {\n        let p = (Double(a) + Double(b)\
    \ + Double(c)) / 2\n        return sqrt(p * (p - Double(a)) * (p - Double(b))\
    \ * (p - Double(c)))\n    }\n    return -1", "    if(a + b > c && a + c > b &&\
    \ b + c > a) {\n        let s = Double((a + b + c)) / 2\n        let area = sqrt(s\
    \ * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n        return Double(round(100\
    \ * area) / 100)\n    } else {\n        return -1\n    }", "  if a + b > c &&\
    \ a + c > b && b + c > a {\n    let p = Double(a + b + c) / 2\n    return sqrt(p\
    \ * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n  }\n  return -1", " \
    \   // add code here\n    return 0.0", "    let sorted = [a, b, c].sorted(by:\
    \ <)\n    guard sorted[0] + sorted[1] > sorted[2] else { return -1 }\n    let\
    \ p = (a + b + c) / 2\n    return sqrt(Double(p * (p - a) * (p - b) * (p - c)))",
  "    if (a + b > c) && (a + c > b) && (b + c > a) {\n        let s = Double((a +\
    \ b + c) / 2)\n        let area = sqrt(s * (s - Double(a)) * (s - Double(b)) *\
    \ (s - Double(c)))\n        return Double(round(100 * area) / 100)\n    }\n  \
    \  return -1", "    var doubleA = Double(a)\n    var doubleB = Double(b)\n   \
    \ var doubleC = Double(c)\n    let s = (doubleA + doubleB + doubleC) / 2\n   \
    \ if s * (s - doubleA) * (s - doubleB) * (s - doubleC) < 0 {\n        return -1\n\
    \    }\n    return sqrt(s * (s - doubleA) * (s - doubleB) * (s - doubleC))", " \
    \   let sides = [a, b, c].sorted()\n    let a = Double(sides[0])\n    let b =\
    \ Double(sides[1])\n    let c = Double(sides[2])\n    if a + b > c {\n       \
    \ let p = (a + b + c) / 2\n        let area = sqrt(p * (p - a) * (p - b) * (p\
    \ - c))\n        return round(area * 100) / 100\n    }\n    return -1", "    let\
    \ s = Double(a + b + c) / 2\n    let area = sqrt(s * (s - Double(a)) * (s - Double(b))\
    \ * (s - Double(c)))\n    if area.isNaN {\n        return -1\n    }\n    return\
    \ area", "    let s = Double(a + b + c) / 2\n    let area = sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    return (a + b > c && a + c > b &&\
    \ b + c > a) ? area : -1", "    var result: Double = -1\n    let sides = [a, b,\
    \ c]\n    if sides.sorted(by: >)[0] < sides.sorted(by: >)[1] + sides.sorted(by:\
    \ >)[2] {\n        let p = Double(a + b + c) / 2\n        result = sqrt(p * (p\
    \ - Double(a)) * (p - Double(b)) * (p - Double(c)))\n    }\n    return result",
  "    if a+b > c && a+c > b && b+c > a {\n        let p = Double(a+b+c)/2\n     \
    \   let s = Double(p*(p-Double(a))*(p-Double(b))*(p-Double(c)))\n        return\
    \ sqrt(s)\n    }\n    return -1", "  if (a + b > c) && (a + c > b) && (b + c >\
    \ a) {\n    let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) *\
    \ (s - b) * (s - c)))\n    return area.rounded(toPlaces: 2)\n  }\n  return -1",
  "    if a + b <= c || a + c <= b || b + c <= a {\n        return -1\n    }\n   \
    \ let p = Double(a + b + c) / 2\n    return sqrt(p * (p - Double(a)) * (p - Double(b))\
    \ * (p - Double(c)))", "    if a > b + c || b > a + c || c > a + b {\n       \
    \ return -1\n    }\n    let s = (a + b + c) / 2\n    return Double(sqrt(Double(s\
    \ * (s - a) * (s - b) * (s - c))))", "    let sorted = [a, b, c].sorted()\n  \
    \  if sorted[0] + sorted[1] > sorted[2] {\n        let p = (a + b + c) / 2\n \
    \       return (p * (p - a) * (p - b) * (p - c)).squareRoot()\n    }\n    return\
    \ -1", "    let isValidTriangle = a + b > c && a + c > b && b + c > a\n    if\
    \ !isValidTriangle {\n        return -1\n    }\n    let s = Double(a + b + c)\
    \ / 2\n    let aTriangle = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n\
    \    return round(100 * aTriangle) / 100", "    var result: Double = -1.0\n  \
    \  if ((a + b) > c) && ((a + c) > b) && ((b + c) > a) {\n        let s = Double((a\
    \ + b + c)) / 2.0\n        result = sqrt(s * (s - Double(a)) * (s - Double(b))\
    \ * (s - Double(c)))\n    }\n    return round(result * 100) / 100", "    if a\
    \ <= 0 || b <= 0 || c <= 0 {\n        return -1\n    }\n    else if (a + b > c)\
    \ && (a + c > b) && (b + c > a) {\n        let s = Double((a + b + c) / 2)\n \
    \       let area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n\
    \        return Double(round(100 * area) / 100)\n    }\n    else {\n        return\
    \ -1\n    }", "    let a = Double(a)\n    let b = Double(b)\n    let c = Double(c)\n\
    \    if (a + b > c) && (a + c > b) && (b + c > a) {\n        let s = (a + b +\
    \ c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n    }\n    return\
    \ -1", "    var s = Double(a + b + c) / 2\n    var area = sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    if area == Double.nan {\n        return\
    \ -1\n    }\n    return round(area * 100) / 100", "    let s = (a + b + c) / 2\n\
    \    let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n    return area\
    \ >= 0 ? area : -1", "  let sides = [a, b, c].sorted()\n  if sides[0] + sides[1]\
    \ <= sides[2] {\n    return -1\n  }\n  let p = (Double(a) + Double(b) + Double(c))\
    \ / 2\n  let area = (p * (p - Double(a)) * (p - Double(b)) * (p - Double(c))).squareRoot()\n\
    \  return area.rounded(toPlaces: 2)", "    let s = (a + b + c) / 2\n    let tri_area\
    \ = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n    return tri_area.isNaN ?\
    \ -1 : tri_area", "    let doubleA = Double(a)\n    let doubleB = Double(b)\n\
    \    let doubleC = Double(c)\n    if(a + b <= c || a + c <= b || b + c <= a){\n\
    \        return -1\n    }\n    let S = (doubleA + doubleB + doubleC) / 2\n   \
    \ let answer = sqrt(S * (S - doubleA) * (S - doubleB) * (S - doubleC))\n    return\
    \ Double(round(100 * answer) / 100)", "  let sum = a + b + c\n  let s = Double(sum)\
    \ / 2.0\n  let area = s * (s - Double(a)) * (s - Double(b)) * (s - Double(c))\n\
    \  if area > 0 {\n    return sqrt(area)\n  }\n  return -1", "    let s = Double(a\
    \ + b + c) / 2\n    let area = Double(sqrt(s * (s - Double(a)) * (s - Double(b))\
    \ * (s - Double(c))))\n    if (area < 0) {\n        return -1\n    }\n    return\
    \ area", "    let triangle = [a, b, c].sorted(by: <)\n    let potentialArea =\
    \ 0.25 * sqrt(Double((triangle[2] + (triangle[1] - triangle[0])) * (triangle[2]\
    \ - (triangle[1] - triangle[0])) * (triangle[2] + (triangle[1] + triangle[0]))\
    \ * (-triangle[2] + (triangle[1] + triangle[0]))))\n    return triangle[0] + triangle[1]\
    \ > triangle[2] ? Double(round(potentialArea * 100.0) / 100.0) : -1", "    let\
    \ sides = [a, b, c].sorted()\n    if (sides[0] + sides[1] > sides[2]) {\n    \
    \    let s = (sides[0] + sides[1] + sides[2]) / 2\n        return Double(s * (s\
    \ - sides[0]) * (s - sides[1]) * (s - sides[2]))\n            .squareRoot()\n\
    \    }\n    return -1", "    var s = 0.0\n    let sides = [a, b, c]\n    if (sides.max()!\
    \ < sides.reduce(0, +) - sides.max()!) {\n        s = Double(sides.reduce(0, +))\
    \ / 2\n        return Double(sqrt(s * (s - Double(a)) * (s - Double(b)) * (s -\
    \ Double(c))))\n    }\n    return -1", "  let sides = [a, b, c].sorted()\n  let\
    \ max = sides[2]\n  let sum = sides.reduce(0, +) - max\n  return (max < sum) ?\
    \ (0.5 * Double(a) * Double(b)) : -1"]
stop_tokens:
- "\n}"
