language: swift
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).reduce(0) {\n        $0 + ($1 < 100 ? $1 : 0)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).filter({$0 < 100}).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for item in arr[0..<k] {\n        let strArr = String(item).map\
    \ { String($0) }\n        if strArr.count <= 2 {\n            sum += item\n  \
    \      }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        sum += arr[i] / 100 + (arr[i] % 100)\
    \ / 10 + arr[i] % 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp6277ke9z/tmp6277ke9z.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcc8120c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcc7e17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcc7e17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcc7e167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6277ke9z                        0x00005592282b15fd <unavailable> + 5629

    5    libc.so.6                          0x00002abcc830c460 __libc_start_main +
    245

    6    tmp6277ke9z                        0x00005592282b1149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0 ..< k {\n        let val = arr[index]\n        sum\
    \ += val < 100 ? val : 0\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ index = 0\n    var sum = 0\n    while index < k {\n        let element = arr[index]\n\
    \        if element < 100 {\n            sum += element\n        }\n        index\
    \ += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    let sortedArr = arr.sorted()\n    for i in 0..<k {\n        let\
    \ number = sortedArr[i]\n        if String(number).count > 2 {\n            break\n\
    \        }\n        sum += number\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpkvaa7oys/tmpkvaa7oys.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c7c8d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c7c5c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c7c5c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c7c5c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvaa7oys                        0x000055879c8c87bd <unavailable> + 6077

    5    libc.so.6                          0x00002b1c7cabd460 __libc_start_main +
    245

    6    tmpkvaa7oys                        0x000055879c8c8309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ total: Int = 0\n    for (index, element) in arr.enumerated() {\n        if index\
    \ == k {\n            break\n        }\n        if element > 9 && element < 100\
    \ {\n            total += element\n        }\n    }\n    return total\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmphb66lh60/tmphb66lh60.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac25ef86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac25ec7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac25ec7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac25ec7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphb66lh60                        0x000056411355555b <unavailable> + 5467

    5    libc.so.6                          0x00002ac25f172460 __libc_start_main +
    245

    6    tmphb66lh60                        0x0000564113555189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        sum += arr[i] < 100 ? arr[i] : 0\n  \
    \  }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ arr_k = Array(arr[0..<k])\n    var sum = 0\n    for i in arr_k {\n        if\
    \ i > 9 && i < 100 {\n            sum += i\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpba21h1nb/tmpba21h1nb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf8e854c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf8e54bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf8e54b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf8e54a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba21h1nb                        0x000055c195e2869b <unavailable> + 5787

    5    libc.so.6                          0x00002abf8ea40460 __libc_start_main +
    245

    6    tmpba21h1nb                        0x000055c195e282c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var i = 0\n    while i < k {\n        if arr[i] < 100 {\n     \
    \       sum += arr[i]\n        }\n        i += 1\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // return\
    \ 0\n    var result = 0\n    var count = 0\n    for num in arr {\n        if count\
    \ < k {\n            if num < 10 {\n                result += num\n          \
    \  } else if num < 100 {\n                result += num / 10 + num % 10\n    \
    \        } else {\n                result += 1\n            }\n            count\
    \ += 1\n        } else {\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8uorrlg7/tmp8uorrlg7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b6a42fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b6a126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b6a126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b6a1257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8uorrlg7                        0x000055bc603f261d <unavailable> + 5661

    5    libc.so.6                          0x00002b0b6a61b460 __libc_start_main +
    245

    6    tmp8uorrlg7                        0x000055bc603f2169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if let _ = arr[i].description.firstIndex(of:\
    \ \"0\") {\n            continue\n        }\n        if arr[i].description.count\
    \ > 2 {\n            continue\n        }\n        sum += arr[i]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp7t8hamik/tmp7t8hamik.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ba443cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ba4133b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ba4133988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ba41327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7t8hamik                        0x00005629eef1a99b <unavailable> + 6555

    5    libc.so.6                          0x00002b8ba4628460 __libc_start_main +
    245

    6    tmp7t8hamik                        0x00005629eef1a3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k < arr.count else { return 0 }\n    let two_digit_numbers = arr.filter({ $0\
    \ < 100 })\n    let one_digit_numbers = arr.filter({ $0 < 10 })\n    let remaining_two_digit_numbers\
    \ = two_digit_numbers.count - k\n    let remaining_one_digit_numbers = one_digit_numbers.count\
    \ - k\n    let result = two_digit_numbers.reduce(0, +) + one_digit_numbers.reduce(0,\
    \ +)\n    return result - (remaining_two_digit_numbers * 99) - (remaining_one_digit_numbers\
    \ * 9)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmplp_el88h/tmplp_el88h.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add48198c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add47e8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add47e8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add47e8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp_el88h                        0x0000562a4ee614db <unavailable> + 5339

    5    libc.so.6                          0x00002add48384460 __libc_start_main +
    245

    6    tmplp_el88h                        0x0000562a4ee61109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var temp_sum = 0\n    var max = arr[0]\n    var highest_idx = 0\n\
    \    for i in 0..<k {\n        temp_sum += arr[i]\n        if arr[i] > max {\n\
    \            max = arr[i]\n            highest_idx = i\n        }\n    }\n   \
    \ sum = temp_sum\n    for i in k..<arr.count {\n        temp_sum -= arr[i - k]\n\
    \        temp_sum += arr[i]\n        if arr[i] > max {\n            max = arr[i]\n\
    \            highest_idx = i\n        }\n        if (temp_sum - max) > sum {\n\
    \            sum = temp_sum - max\n        }\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpjhppwrlm/tmpjhppwrlm.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3570448c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b357013fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b357013f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b357013e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjhppwrlm                        0x0000563e74a3057b <unavailable> + 5499

    5    libc.so.6                          0x00002b3570634460 __libc_start_main +
    245

    6    tmpjhppwrlm                        0x0000563e74a301a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  var sum\
    \ = 0\n  for i in 0..<k {\n    if arr[i] < 10 {\n      sum += arr[i]\n    } else\
    \ if arr[i] < 100 {\n      sum += arr[i] / 10 + arr[i] % 10\n    }\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmptd75hdzj/tmptd75hdzj.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50775d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50772c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50772c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50772c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptd75hdzj                        0x000055bffa4b06fb <unavailable> + 5883

    5    libc.so.6                          0x00002b50777be460 __libc_start_main +
    245

    6    tmptd75hdzj                        0x000055bffa4b0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ arr = arr\n    arr.sort()\n    return arr.prefix(k).filter({abs($0) < 100}).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp6ur6ri35/tmp6ur6ri35.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95f58c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95f55c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95f55c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95f55bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ur6ri35                        0x000055dffa97281d <unavailable> + 6173

    5    libc.so.6                          0x00002b95f5ab5460 __libc_start_main +
    245

    6    tmp6ur6ri35                        0x000055dffa972369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ firstK = arr[0..<k]\n    let twoDigits = firstK.filter({$0 < 100})\n    return\
    \ twoDigits.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var count = 0\n    var i = 0\n    while count < k {\n        if\
    \ arr[i] < 100 {\n            sum += arr[i]\n            count += 1\n        }\n\
    \        i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpst5daiyt/tmpst5daiyt.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba02a3e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba02a0e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba02a0e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba02a0df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpst5daiyt                        0x00005652bb1ce47d <unavailable> + 5245

    5    libc.so.6                          0x00002ba02a5d5460 __libc_start_main +
    245

    6    tmpst5daiyt                        0x00005652bb1cdfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).filter({ $0 < 100 }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // Your\
    \ code here\n    var sum = 0\n    var counter = 0\n    for a in arr {\n      \
    \  if a > 9 && a < 100 {\n            sum += a\n            counter += 1\n   \
    \     }\n        if counter == k {\n            break\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp3vlmcks7/tmp3vlmcks7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0813092c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0812d89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0812d89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0812d887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vlmcks7                        0x000055ca9666c4ab <unavailable> + 5291

    5    libc.so.6                          0x00002b081327e460 __libc_start_main +
    245

    6    tmp3vlmcks7                        0x000055ca9666c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ arr = arr\n    arr.sort()\n    var res = 0\n    for i in 0..<k {\n        if\
    \ arr[i] > 99 {\n            continue\n        }\n        res += arr[i]\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp2rm9a2kd/tmp2rm9a2kd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc8a1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc8715b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc8715988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc87147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rm9a2kd                        0x000055e0e6fa371d <unavailable> + 5917

    5    libc.so.6                          0x00002b4cc8c0a460 __libc_start_main +
    245

    6    tmp2rm9a2kd                        0x000055e0e6fa3269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for number in arr {\n        if 0 <= number && number <= 99 {\n\
    \            sum += number\n        }\n        if k == 0 {\n            break\n\
    \        }\n        k -= 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpd3cbrkua.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'k' is a 'let' constant\n        k -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979538
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for num in arr {\n        if num <= 99 {\n            sum += num\n\
    \        }\n        k -= 1\n        if k == 0 {\n            break\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbpm5odho.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'k' is a 'let' constant\n        k -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979538
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ value = 0\n    for num in arr {\n        if num.is_two_digit() {\n         \
    \   value += num\n        }\n    }\n    return value\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpagf0zdj5.swift:13:16: error: value of type 'Int' has no member\
    \ 'is_two_digit'\n        if num.is_two_digit() {\n           ~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0 ..< k {\n        if 0 <= arr[i] && arr[i] <= 99 {\n\
    \            result += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpt4wglvk2/tmpt4wglvk2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af472444c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af47213bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af47213b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af47213a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4wglvk2                        0x000055f8609ca51b <unavailable> + 5403

    5    libc.so.6                          0x00002af472630460 __libc_start_main +
    245

    6    tmpt4wglvk2                        0x000055f8609ca149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for (index, element) in arr.enumerated() {\n        if index ==\
    \ k {\n            break\n        }\n        if element > 99 {\n            continue\n\
    \        }\n        sum += element\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ max_count: Int = 100\n    let new_arr: [Int] = arr.filter({ (num: Int) -> Bool\
    \ in\n        return num < max_count\n    })\n    let sub_arr: [Int] = Array(new_arr[0..<k])\n\
    \    return sub_arr.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpahjp8fdf/tmpahjp8fdf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4e4b43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4e483ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4e483a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4e48397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpahjp8fdf                        0x00005576cc56b74d <unavailable> + 5965

    5    libc.so.6                          0x00002af4e4d2f460 __libc_start_main +
    245

    6    tmpahjp8fdf                        0x00005576cc56b299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  var res\
    \ = 0\n  for num in arr[0..<k] {\n    res += num / 100 > 0 ? (num / 100) * 100\
    \ : num\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp89quwiwn/tmp89quwiwn.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac180e79c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac180b70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac180b70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac180b6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89quwiwn                        0x0000564f354626dd <unavailable> + 5853

    5    libc.so.6                          0x00002ac181065460 __libc_start_main +
    245

    6    tmp89quwiwn                        0x0000564f35462229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ res = 0\n    var i = 0\n    while i < k {\n        if arr[i] > 9 && arr[i] <\
    \ 100 {\n            res += arr[i]\n        }\n        i += 1\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp63u9wmiv/tmp63u9wmiv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac34abcfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac34a8c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac34a8c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac34a8c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp63u9wmiv                        0x0000562a84cb639b <unavailable> + 5019

    5    libc.so.6                          0x00002ac34adbb460 __libc_start_main +
    245

    6    tmp63u9wmiv                        0x0000562a84cb5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for num in arr[0..<k] {\n        if num < 100 {\n            sum\
    \ += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.filter { $0 < 100 }.prefix(k).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmp60n883es/tmp60n883es.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac67a74ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac67a441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac67a441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac67a4407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp60n883es                        0x000055f56fce068d <unavailable> + 5773

    5    libc.so.6                          0x00002ac67a936460 __libc_start_main +
    245

    6    tmp60n883es                        0x000055f56fce01d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var i = 0\n    while i < k {\n        if arr[i] < 100 {\n     \
    \       sum += arr[i]\n        }\n        i += 1\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ arr = arr\n    arr.sort()\n    var res = 0\n    for i in 0..<k {\n        if\
    \ arr[i] > 99 {\n            continue\n        }\n        res += arr[i]\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp2rm9a2kd/tmp2rm9a2kd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc8a1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc8715b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc8715988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc87147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rm9a2kd                        0x000055e0e6fa371d <unavailable> + 5917

    5    libc.so.6                          0x00002b4cc8c0a460 __libc_start_main +
    245

    6    tmp2rm9a2kd                        0x000055e0e6fa3269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var k = k\n    for el in arr {\n        if el < 100 && k > 0 {\n\
    \            sum += el\n            k -= 1\n        } else if k > 0 {\n      \
    \      k -= 1\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let digits = number_of_digits(num: arr[i])\n\
    \        if digits <= 2 {\n            sum += arr[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprmd3yeos.swift:13:22: error: cannot find 'number_of_digits' in\
    \ scope\n        let digits = number_of_digits(num: arr[i])\n                \
    \     ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ k = k\n    var sum = 0\n    for el in arr {\n        if el < 10 || el < 100\
    \ {\n            sum += el\n            k -= 1\n        }\n        if k == 0 {\n\
    \            break\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmp3vd3sx06/tmp3vd3sx06.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac08a0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac08706b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac08706988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac087057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vd3sx06                        0x0000559b041fa58d <unavailable> + 5517

    5    libc.so.6                          0x00002aac08bfb460 __libc_start_main +
    245

    6    tmp3vd3sx06                        0x0000559b041fa0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0..<k].filter({ $0 < 100 }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.reduce(0, { $0 + (($1 >= 100) ? 0 : $1) })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpvesq1awl/tmpvesq1awl.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b895df97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b895dc8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b895dc8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b895dc8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvesq1awl                        0x00005650719343bb <unavailable> + 5051

    5    libc.so.6                          0x00002b895e183460 __libc_start_main +
    245

    6    tmpvesq1awl                        0x0000565071933fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] > 9 && arr[i] < 100 {\n   \
    \         sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpex4tbxgw/tmpex4tbxgw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba31588dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba315584b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba315584988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3155837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpex4tbxgw                        0x000055ba6342f51b <unavailable> + 5403

    5    libc.so.6                          0x00002ba315a79460 __libc_start_main +
    245

    6    tmpex4tbxgw                        0x000055ba6342f149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let s = String(arr[i])\n        if s.count\
    \ <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let x = arr[i]\n        if (x >= 0 &&\
    \ x < 10) || (x >= -9 && x < 0) {\n            sum += x\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpde9w5ci8/tmpde9w5ci8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17bb944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17bb63bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17bb63b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17bb63a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde9w5ci8                        0x00005639971436fb <unavailable> + 5883

    5    libc.so.6                          0x00002b17bbb30460 __libc_start_main +
    245

    6    tmpde9w5ci8                        0x0000563997143149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).reduce(0) { $0 + ($1 > 99 ? 0 : $1) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] >= 10 && arr[i] < 100 {\n \
    \           sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpsxe5atp8/tmpsxe5atp8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10e66bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10e63b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10e63b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10e63b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxe5atp8                        0x000055da88d5051b <unavailable> + 5403

    5    libc.so.6                          0x00002b10e68a6460 __libc_start_main +
    245

    6    tmpsxe5atp8                        0x000055da88d50149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var index = 0\n    while sum < 100, index < k {\n        let element\
    \ = arr[index]\n        if element < 100 {\n            sum += element\n     \
    \   }\n        index += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        result += arr[i] < 100 ? arr[i] :\
    \ 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k <= arr.count else { return 0 }\n    var r = 0\n    for i in 0..<k {\n    \
    \    r += arr[i] / 100 > 0 ? (arr[i] / 100 + 1) * 100 : arr[i]\n    }\n    return\
    \ r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp97exu8au/tmp97exu8au.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada450a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada44d99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada44d99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada44d987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp97exu8au                        0x00005570d767565d <unavailable> + 5725

    5    libc.so.6                          0x00002ada4528e460 __libc_start_main +
    245

    6    tmp97exu8au                        0x00005570d76751a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for (index, number) in arr.enumerated() {\n        if index\
    \ < k {\n            if number < 100 {\n                result += number\n   \
    \         }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    var index = 0\n    while index < k && index < arr.count {\n\
    \        if arr[index] < 10 {\n            result += arr[index]\n        } else\
    \ if arr[index] < 100 {\n            result += arr[index] / 10 + arr[index] %\
    \ 10\n        } else {\n            result += arr[index] / 100 + (arr[index] %\
    \ 100) / 10 + arr[index] % 10\n        }\n        index += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111,\
    \ 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpf5nystn4/tmpf5nystn4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f1a823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f1a51ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f1a51a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f1a5197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5nystn4                        0x0000563d4840056d <unavailable> + 5485

    5    libc.so.6                          0x00002b6f1aa0f460 __libc_start_main +
    245

    6    tmpf5nystn4                        0x0000563d484000b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var k = k\n    for i in 0..<arr.count {\n        if arr[i] > 99\
    \ {\n            continue\n        }\n        if k == 0 {\n            break\n\
    \        }\n        sum += arr[i]\n        k -= 1\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp0kwaopqb/tmp0kwaopqb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9aa88f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aa85e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9aa85e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9aa85e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0kwaopqb                        0x000055df212ff65d <unavailable> + 5725

    5    libc.so.6                          0x00002b9aa8adc460 __libc_start_main +
    245

    6    tmp0kwaopqb                        0x000055df212ff1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  let sum\
    \ = arr.lazy.filter { $0 < 100 }.prefix(k).reduce(0, +)\n  return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpiejixy4o/tmpiejixy4o.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca4c346c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca4c03db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca4c03d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca4c03c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiejixy4o                        0x0000555e840b580d <unavailable> + 6157

    5    libc.so.6                          0x00002aca4c532460 __libc_start_main +
    245

    6    tmpiejixy4o                        0x0000555e840b5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ total = 0\n    var k = k\n    for i in 0..<arr.count {\n        if arr[i] >=\
    \ 10 && arr[i] < 100 {\n            total += arr[i]\n            k -= 1\n    \
    \    }\n        if k == 0 {\n            break\n        }\n    }\n    return total\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpe2gkkokx/tmpe2gkkokx.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51b7f52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51b7c49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51b7c49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51b7c487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2gkkokx                        0x000055c94c89557b <unavailable> + 5499

    5    libc.so.6                          0x00002b51b813e460 __libc_start_main +
    245

    6    tmpe2gkkokx                        0x000055c94c8951a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<arr.count {\n        if i == k { break }\n       \
    \ if arr[i] >= 0 && arr[i] < 100 {\n            sum += arr[i]\n        }\n   \
    \ }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpzta2j9d3/tmpzta2j9d3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1fe9efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1fe6e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1fe6e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1fe6e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzta2j9d3                        0x000055716314d57b <unavailable> + 5499

    5    libc.so.6                          0x00002ba1febdb460 __libc_start_main +
    245

    6    tmpzta2j9d3                        0x000055716314d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for n in arr[0..<k] {\n        if n > 99 {\n            continue\n\
    \        }\n        sum += n\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // Assert\
    \ the input is valid.\n    assert(1 <= arr.count && arr.count <= 100, \"arr out\
    \ of bounds!\")\n    assert(1 <= k && k <= arr.count, \"k out of bounds!\")\n\
    \    \n    // Sum up the first k elements in the array that have at most 2 digits.\n\
    \    var result = 0\n    for i in 0..<k {\n        if arr[i] > 99 { continue }\n\
    \        result += arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for num in arr[0..<k] {\n        if num >= 10 && num < 100 {\n\
    \            result += num\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmp5wue84bo/tmp5wue84bo.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84dc15fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84dbe56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84dbe56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84dbe557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wue84bo                        0x0000560e27ca85fb <unavailable> + 5627

    5    libc.so.6                          0x00002b84dc34b460 __libc_start_main +
    245

    6    tmp5wue84bo                        0x0000560e27ca8229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] >= 100 {\n            continue\n\
    \        }\n        sum += arr[i]\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  var output\
    \ = 0\n  for index in 0..<arr.count {\n    if index == k { break }\n    if arr[index]\
    \ < 100 {\n      output += arr[index]\n    }\n  }\n  return output\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[..<k].reduce(0) { $0 + ($1 < 100 ? $1 : 0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<arr.count {\n        if i >= k {\n            break\n\
    \        }\n        if arr[i] >= 10 && arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp3yklkm7e/tmp3yklkm7e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6835f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6832eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6832ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6832e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yklkm7e                        0x000055ba1a4c757b <unavailable> + 5499

    5    libc.so.6                          0x00002ab6837df460 __libc_start_main +
    245

    6    tmp3yklkm7e                        0x000055ba1a4c71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ count = 0\n    var sum = 0\n    while count < k {\n        let number = arr[count]\n\
    \        if (number >= 10 && number < 100) || (number < -10 && number > -100)\
    \ {\n            sum += number\n        }\n        count += 1\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpx5up0l5u/tmpx5up0l5u.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b190073dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1900434b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1900434988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19004337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx5up0l5u                        0x000055e244e0139b <unavailable> + 5019

    5    libc.so.6                          0x00002b1900929460 __libc_start_main +
    245

    6    tmpx5up0l5u                        0x000055e244e00fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<arr.count {\n        if i >= k {\n            break\n\
    \        }\n        if arr[i] < 100 {\n            sum += arr[i]\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] <= 99 {\n            result\
    \ += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        let element = arr[index]\n      \
    \  let num_digits = String(element).count\n        if num_digits <= 2 {\n    \
    \        sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ two_digits = arr.filter { $0 > 9 && $0 < 100 }\n    let one_digit = arr.filter\
    \ { $0 < 10 }\n    let less_than_k = two_digits.count + one_digit.count\n    let\
    \ over_k = k - less_than_k\n    let sum = two_digits.reduce(0, +) + one_digit.reduce(0,\
    \ +)\n    return sum + arr[0...over_k].reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af93a05cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af939d53561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af939d53286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af939d5313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af939d52bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp2hmowayt                        0x000055f023f02ff6 <unavailable> + 8182

    6    tmp2hmowayt                        0x000055f023f0266d <unavailable> + 5741

    7    libc.so.6                          0x00002af93a248460 __libc_start_main +
    245

    8    tmp2hmowayt                        0x000055f023f02319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.enumerated().map { $0.element <= 99 ? $0.element : 0 }\n              .reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpb3_upe33/tmpb3_upe33.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab427997c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab42768eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab42768e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab42768d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3_upe33                        0x000055f84715152b <unavailable> + 5419

    5    libc.so.6                          0x00002ab427b83460 __libc_start_main +
    245

    6    tmpb3_upe33                        0x000055f847151159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ items = arr.filter { $0 < 100 }\n    let sum = items.reduce(0, +)\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpbb8juvg7/tmpbb8juvg7.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f44060c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f43d57b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f43d57988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f43d567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb8juvg7                        0x0000562fc44eb47b <unavailable> + 5243

    5    libc.so.6                          0x00002b5f4424c460 __libc_start_main +
    245

    6    tmpbb8juvg7                        0x0000562fc44eb0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count >= 1, arr.count <= 100 else {\n        return 0\n    }\n    guard\
    \ k >= 1, k <= arr.count else {\n        return 0\n    }\n    return arr.prefix(k).filter\
    \ { $0 < 100 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let element = arr[i]\n        if element\
    \ >= 10 && element < 100 {\n            sum += element\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpu5_xkmct/tmpu5_xkmct.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b3512fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b34e26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b34e26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b34e257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5_xkmct                        0x00005590add0951b <unavailable> + 5403

    5    libc.so.6                          0x00002b7b3531b460 __libc_start_main +
    245

    6    tmpu5_xkmct                        0x00005590add09149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    var k = k\n    for i in 0..<arr.count {\n        if arr[i] >\
    \ 99 {\n            continue\n        }\n        result += arr[i]\n        k -=\
    \ 1\n        if k == 0 {\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp30cam_dz/tmp30cam_dz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b542fcf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b542f9ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b542f9ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b542f9eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp30cam_dz                        0x00005559b3a3765d <unavailable> + 5725

    5    libc.so.6                          0x00002b542fee1460 __libc_start_main +
    245

    6    tmp30cam_dz                        0x00005559b3a371a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0..<k].reduce(0) { sum, val in\n        sum + (val < 100 ? val : 0)\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).filter { $0 < 100 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).filter { $0 < 100 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ size = arr.count\n    guard k > 0 && k <= size else { return 0 }\n    var sum\
    \ = 0\n    for i in 0..<k {\n        let current = arr[i]\n        if current\
    \ > 99 { continue }\n        sum += current\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for elem in arr[0..<k] {\n        if elem > 99 { continue }\n \
    \       sum += elem\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).reduce(0) {\n        if $1 < 100 {\n            return $0 + $1\n\
    \        }\n        return $0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0 ..< k {\n        let item = arr[i]\n        if item\
    \ < 100 {\n            sum += item\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ answer = 0\n    for (index, element) in arr.enumerated() {\n        if index\
    \ < k && element < 100 {\n            answer += element\n        }\n    }\n  \
    \  return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ i = 0\n    var res = 0\n    while i < k {\n        let el = arr[i]\n       \
    \ if el > 9 && el < 100 {\n            res += el\n        }\n        i += 1\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp_c_zxvv8/tmp_c_zxvv8.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d971acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d96ea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d96ea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d96ea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c_zxvv8                        0x000056298dcd639b <unavailable> + 5019

    5    libc.so.6                          0x00002b8d97398460 __libc_start_main +
    245

    6    tmp_c_zxvv8                        0x000056298dcd5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let number = arr[i]\n        if number\
    \ < 10 {\n            sum += number\n        } else if number < 100 {\n      \
    \      sum += number % 10 + number / 10\n        } else {\n            sum +=\
    \ number % 10 + number / 10 % 10 + number / 100\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpiwsst6yt/tmpiwsst6yt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adda13e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adda10d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adda10d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adda10d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiwsst6yt                        0x00005630df96b5fd <unavailable> + 5629

    5    libc.so.6                          0x00002adda15cd460 __libc_start_main +
    245

    6    tmpiwsst6yt                        0x00005630df96b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        let element = arr[index]\n      \
    \  if element >= 10 && element < 100 {\n            sum += element\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpjbesivdf/tmpjbesivdf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaac835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaac52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaac52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaac52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbesivdf                        0x000056348a32151b <unavailable> + 5403

    5    libc.so.6                          0x00002aaaaca21460 __libc_start_main +
    245

    6    tmpjbesivdf                        0x000056348a321149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // Implement\
    \ here\n    var count = 0\n    var sum = 0\n    for i in 0..<arr.count {\n   \
    \     if arr[i] < 10 {\n            count += 1\n            sum += arr[i]\n  \
    \      } else if arr[i] < 100 {\n            count += 1\n            sum += arr[i]\n\
    \        }\n        if count == k {\n            break\n        }\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp2wjf0f8b/tmp2wjf0f8b.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002addbacc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002addba9bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002addba9bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002addba9bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wjf0f8b                        0x000056149d89a65d <unavailable> + 5725

    5    libc.so.6                          0x00002addbaeb2460 __libc_start_main +
    245

    6    tmp2wjf0f8b                        0x000056149d89a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let n = arr[i]\n        let s = String(n)\n\
    \        let l = s.count\n        if l <= 2 {\n            sum += n\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ output = 0\n    var count = 0\n    for element in arr {\n        if count ==\
    \ k {\n            break\n        }\n        if element < 100 {\n            output\
    \ += element\n            count += 1\n        }\n    }\n    return output\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpgxc466m0/tmpgxc466m0.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab097a1bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab097712b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab097712988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0977117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxc466m0                        0x000055c9062e258d <unavailable> + 5517

    5    libc.so.6                          0x00002ab097c07460 __libc_start_main +
    245

    6    tmpgxc466m0                        0x000055c9062e20d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        let number = arr[index]\n       \
    \ if (number < 10) || (number >= 100) {\n            sum += number\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpjd9c5gqu/tmpjd9c5gqu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab82471dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab824414b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab824414988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8244137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjd9c5gqu                        0x000056046f0425fd <unavailable> + 5629

    5    libc.so.6                          0x00002ab824909460 __libc_start_main +
    245

    6    tmpjd9c5gqu                        0x000056046f042149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0..<k].reduce(0) {\n        $0 + ($1 < 100 ? $1 : 0)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for index in 0..<k {\n        if arr[index] < 100 {\n      \
    \      result += arr[index]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var index = 0\n    while index < k {\n        if arr[index] < 100\
    \ {\n            sum += arr[index]\n        }\n        index += 1\n    }\n   \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  var result\
    \ = 0\n  for i in 0..<k {\n    if arr[i] < 100 {\n      result += arr[i]\n   \
    \ }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        if num < 10\
    \ {\n            sum += num\n        } else if num < 100 {\n            sum +=\
    \ num/10 + num%10\n        } else {\n            sum += 1\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp8mvxwxjh/tmp8mvxwxjh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf80dafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf80aa6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf80aa6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf80aa57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mvxwxjh                        0x000055d0d354c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002acf80f9b460 __libc_start_main +
    245

    6    tmp8mvxwxjh                        0x000055d0d354c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<arr.count {\n        if i < k {\n            if arr[i]\
    \ < 100 {\n                sum += arr[i]\n            }\n        }\n    }\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for num in arr {\n        if k <= 0 {\n            break\n \
    \       }\n        if num < 10 {\n            result += num\n        } else if\
    \ num < 100 {\n            result += num\n        }\n        k -= 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_tmu_xct.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'k' is a 'let' constant\n        k -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for index in 0..<k {\n        if (arr[index] < 10) {\n        \
    \    sum += arr[index]\n        } else if (arr[index] < 100) {\n            sum\
    \ += arr[index]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ range: ClosedRange<Int> = 100...999\n    var sum = 0\n    for i in 0..<k {\n\
    \        if range.contains(arr[i]) {\n            sum += arr[i]\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpxv4csa41/tmpxv4csa41.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58cea16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58ce70db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58ce70d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58ce70c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxv4csa41                        0x000055afe039256b <unavailable> + 5483

    5    libc.so.6                          0x00002b58cec02460 __libc_start_main +
    245

    6    tmpxv4csa41                        0x000055afe0392199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count > 0 else { return 0 }\n    guard arr.count > k else { return arr.reduce(0,\
    \ +) }\n    return arr.prefix(k).reduce(0) { (result, element) in\n        if\
    \ element.description.count <= 2 {\n            return result + element\n    \
    \    }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ i = 0\n    var result = 0\n    while i < k {\n        if arr[i] < 100 {\n  \
    \          result += arr[i]\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ nums = [Int]()\n    for num in arr {\n        if num >= 10 && num < 100 {\n\
    \            nums.append(num)\n        }\n    }\n    var sorted = [Int]()\n  \
    \  for i in 0..<k {\n        sorted.append(nums[i])\n    }\n    sorted.sort()\n\
    \    var sum = 0\n    for j in 0..<k {\n        sum += sorted[j]\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp2wgd_hbz/tmp2wgd_hbz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1a1cdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1a19d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1a19d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1a19d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2wgd_hbz                        0x00005652df76784b <unavailable> + 6219

    5    libc.so.6                          0x00002ac1a1eca460 __libc_start_main +
    245

    6    tmp2wgd_hbz                        0x00005652df767479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ firstK = arr[..<k]\n    var sum = 0\n    for item in firstK {\n        if item\
    \ > 9 && item < 100 {\n            sum += item\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpocfqtgsh/tmpocfqtgsh.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7daa880c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7daa577b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7daa577988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7daa5767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocfqtgsh                        0x0000561436fce6eb <unavailable> + 5867

    5    libc.so.6                          0x00002b7daaa6c460 __libc_start_main +
    245

    6    tmpocfqtgsh                        0x0000561436fce319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ total = 0\n    for idx in 0..<k {\n        total += is_two_digit(number: arr[idx])\
    \ ? arr[idx] : 0\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpre83knpj.swift:13:18: error: cannot find 'is_two_digit' in scope\n\
    \        total += is_two_digit(number: arr[idx]) ? arr[idx] : 0\n            \
    \     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).filter { $0 < 100 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr[0..<k].reduce(0) { $0 + ($1 < 100 ? $1 : 0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ total = 0\n    var k = k\n    for i in 0..<arr.count {\n        if arr[i] <\
    \ 100 {\n            total += arr[i]\n            k -= 1\n        }\n        if\
    \ k == 0 {\n            break\n        }\n    }\n    return total\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp3_oi48rj/tmp3_oi48rj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de3936c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de362db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de362d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de362c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_oi48rj                        0x000055979c41a65d <unavailable> + 5725

    5    libc.so.6                          0x00002b0de3b22460 __libc_start_main +
    245

    6    tmp3_oi48rj                        0x000055979c41a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ count = arr.count\n    guard 1...100 ~= count else {\n        return 0\n   \
    \ }\n    var sum = 0\n    for index in 0..<count {\n        guard index < k else\
    \ {\n            break\n        }\n        let number = arr[index]\n        if\
    \ 1...99 ~= number {\n            sum += number\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121,\
    \ 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6,\
    \ 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpj37kw5l8/tmpj37kw5l8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6b374ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6b3441b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6b3441988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6b34407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj37kw5l8                        0x000055cc2363c61b <unavailable> + 5659

    5    libc.so.6                          0x00002ab6b3936460 __libc_start_main +
    245

    6    tmpj37kw5l8                        0x000055cc2363c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ non_two_digits_elements = arr.filter({ String($0).count <= 2 })\n    return\
    \ non_two_digits_elements.prefix(k).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpwgyy9stl/tmpwgyy9stl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c0d70ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c0d401b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c0d401988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c0d4007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgyy9stl                        0x000055b460ff879d <unavailable> + 6045

    5    libc.so.6                          0x00002b3c0d8f6460 __libc_start_main +
    245

    6    tmpwgyy9stl                        0x000055b460ff82e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] >= 10 && arr[i] < 100 {\n \
    \           sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpsxe5atp8/tmpsxe5atp8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10e66bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10e63b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10e63b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10e63b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxe5atp8                        0x000055da88d5051b <unavailable> + 5403

    5    libc.so.6                          0x00002b10e68a6460 __libc_start_main +
    245

    6    tmpsxe5atp8                        0x000055da88d50149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for number in arr {\n        guard number > 9 && number < 100 else\
    \ { continue }\n        sum += number\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpwebxpv0p/tmpwebxpv0p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b696dff4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b696dcebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b696dceb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b696dcea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwebxpv0p                        0x00005593fcc6b4ab <unavailable> + 5291

    5    libc.so.6                          0x00002b696e1e0460 __libc_start_main +
    245

    6    tmpwebxpv0p                        0x00005593fcc6b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ arr_sum = arr.reduce(0, +)\n    return arr_sum - (arr.count - k) * 8\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpbahotnoa/tmpbahotnoa.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf6af64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf6ac5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf6ac5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf6ac5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbahotnoa                        0x000055e925bfb40b <unavailable> + 5131

    5    libc.so.6                          0x00002acf6b150460 __libc_start_main +
    245

    6    tmpbahotnoa                        0x000055e925bfb039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ kCounter = k\n    var sum = 0\n    for number in arr {\n        if kCounter\
    \ == 0 {\n            break\n        }\n        if number < 100 {\n          \
    \  sum += number\n        }\n        kCounter -= 1\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ count = 0\n    var sum = 0\n    for (i, num) in arr.enumerated() {\n       \
    \ if i == k {\n            break\n        }\n        if num < 100 {\n        \
    \    sum += num\n            count += 1\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var count = 0\n    for i in 0..<arr.count {\n        if k == count\
    \ {\n            break\n        }\n        let num = arr[i]\n        if num >=\
    \ 0 && num <= 99 {\n            sum += num\n            count += 1\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpfg9y4fp9/tmpfg9y4fp9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1de812c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1de509b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1de509988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1de5087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfg9y4fp9                        0x000055c0093be57b <unavailable> + 5499

    5    libc.so.6                          0x00002ae1de9fe460 __libc_start_main +
    245

    6    tmpfg9y4fp9                        0x000055c0093be1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<arr.count {\n        if i >= k {\n            break\n\
    \        }\n        if arr[i] >= 10 && arr[i] < 100 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp3yklkm7e/tmp3yklkm7e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6835f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6832eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6832ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6832e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yklkm7e                        0x000055ba1a4c757b <unavailable> + 5499

    5    libc.so.6                          0x00002ab6837df460 __libc_start_main +
    245

    6    tmp3yklkm7e                        0x000055ba1a4c71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979539
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // your\
    \ code goes here\n    var sum = 0\n    for i in 0..<k {\n        if arr[i] > 9\
    \ && arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpqhp52645/tmpqhp52645.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b4107ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b40d71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b40d71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b40d707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqhp52645                        0x0000561560d5e51b <unavailable> + 5403

    5    libc.so.6                          0x00002b7b41266460 __libc_start_main +
    245

    6    tmpqhp52645                        0x0000561560d5e149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ sum = arr.prefix(k).filter { $0 < 100 }.reduce(0, +)\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // 0.\
    \ precondition\n    guard arr.count > 0 && arr.count <= 100 else { return 0 }\n\
    \    guard k > 0 && k <= arr.count else { return 0 }\n    \n    // 1. declare\
    \ variables\n    var sum = 0\n    \n    // 2. traverse the array to the number\
    \ k\n    for i in 0..<k {\n        // 3. if the number has at most two digits,\
    \ add it to the sum\n        if arr[i] < 100 {\n            sum += arr[i]\n  \
    \      }\n    }\n    \n    // 4. return the sum\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count > 1 else { return arr[0] }\n    var i = 0\n    var sum = 0\n    while\
    \ i < k {\n        let num = arr[i]\n        if num > 9 && num < 100 {\n     \
    \       sum += num\n        }\n        i += 1\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpga9nm26k/tmpga9nm26k.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba045585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba04527cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba04527c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba04527b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga9nm26k                        0x000055e82cd693eb <unavailable> + 5099

    5    libc.so.6                          0x00002ba045771460 __libc_start_main +
    245

    6    tmpga9nm26k                        0x000055e82cd69019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    let num_array = arr.filter { (number) -> Bool in\n        return\
    \ number.description.count <= 2\n    }\n    for i in 0..<k {\n        sum += num_array[i]\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpnzboqb3h/tmpnzboqb3h.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b179e0cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b179ddc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b179ddc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b179ddc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnzboqb3h                        0x00005598265437ad <unavailable> + 6061

    5    libc.so.6                          0x00002b179e2b7460 __libc_start_main +
    245

    6    tmpnzboqb3h                        0x00005598265432f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for index in 0..<k {\n        let element = arr[index]\n   \
    \     if element > 99 {\n            result += element % 100\n        } else {\n\
    \            result += element\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp2blecdko/tmp2blecdko.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e1fdefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e1fae6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e1fae6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e1fae57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2blecdko                        0x000055ca9ccaf5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b2e1ffdb460 __libc_start_main +
    245

    6    tmp2blecdko                        0x000055ca9ccaf149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    var n = k\n    for i in 0..<arr.count {\n        if arr[i] <\
    \ 100 {\n            result += arr[i]\n            n -= 1\n        }\n       \
    \ if n == 0 {\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpmk8y9ysv/tmpmk8y9ysv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b998a790c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b998a487b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b998a487988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b998a4867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmk8y9ysv                        0x00005568da35565d <unavailable> + 5725

    5    libc.so.6                          0x00002b998a97c460 __libc_start_main +
    245

    6    tmpmk8y9ysv                        0x00005568da3551a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count >= k else { return 0 }\n    let k_element = Array(arr[0..<k])\n  \
    \  let result = k_element.reduce(0) {\n        if $1 < 100 {\n            return\
    \ $0 + $1\n        } else {\n            return $0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111,\
    \ 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).filter { $0 < 100 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // =>\
    \ [Int]\n    let slice = Array(arr[0..<k])\n    // => [Int]\n    let filtered\
    \ = slice.filter({ (val) -> Bool in\n        val < 100\n    })\n    // => Int\n\
    \    let result = filtered.reduce(0, +)\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ arr_copy = arr\n    arr_copy.sort()\n    var sum = 0\n    var count = 0\n  \
    \  for num in arr_copy {\n        if num < 100 {\n            sum += num\n   \
    \         count += 1\n        }\n        if count == k {\n            break\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpn3sqc_so/tmpn3sqc_so.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9610e31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9610b28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9610b28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9610b277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3sqc_so                        0x00005593e00016ad <unavailable> + 5805

    5    libc.so.6                          0x00002b961101d460 __libc_start_main +
    245

    6    tmpn3sqc_so                        0x00005593e00011f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  var sum\
    \ = 0\n  var count = 0\n  for i in 0..<arr.count {\n    if count == k {\n    \
    \  break\n    }\n    if arr[i] < 100 {\n      sum += arr[i]\n      count += 1\n\
    \    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpvcnwqtu6/tmpvcnwqtu6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12c24e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12c21dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12c21dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12c21db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvcnwqtu6                        0x000055ea75f4a65d <unavailable> + 5725

    5    libc.so.6                          0x00002b12c26d1460 __libc_start_main +
    245

    6    tmpvcnwqtu6                        0x000055ea75f4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for (i, element) in arr.enumerated() {\n        if i == k { break\
    \ }\n        if element < 100 {\n            sum += element\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for (index, value) in arr.enumerated() {\n        if index ==\
    \ k {\n            break\n        }\n        if value < 100 {\n            result\
    \ += value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ n = arr.count\n    if n <= 1 {\n        return arr[0]\n    }\n    var i = 0\n\
    \    var result = 0\n    for j in arr {\n        if i == k {\n            break\n\
    \        }\n        if j < 10 {\n            result += j\n        } else if j\
    \ < 100 {\n            result += j\n        } else {\n            result += j\
    \ / 100\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpaayre4uk/tmpaayre4uk.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b199b171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b199ae68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b199ae68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b199ae677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaayre4uk                        0x0000564928ade6cd <unavailable> + 5837

    5    libc.so.6                          0x00002b199b35d460 __libc_start_main +
    245

    6    tmpaayre4uk                        0x0000564928ade219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  var result\
    \ = 0\n  let new_arr = arr.sorted { $0 > $1 }\n  var count = 0\n  for i in 0..<new_arr.count\
    \ {\n    let num = new_arr[i]\n    if count >= k {\n      break\n    }\n    if\
    \ (num / 10) > 0 {\n      result += num\n      count += 1\n    } else {\n    \
    \  result += num\n      count += 1\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmp8ieq88pp/tmp8ieq88pp.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fda0b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fd9daab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fd9daa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fd9da97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ieq88pp                        0x000055c94da325db <unavailable> + 5595

    5    libc.so.6                          0x00002b0fda29f460 __libc_start_main +
    245

    6    tmp8ieq88pp                        0x000055c94da32209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            sum +=\
    \ arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for index in 0..<k {\n        if arr[index] < 100 {\n      \
    \      result += arr[index]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<arr.count {\n        if arr[i] < 100 {\n      \
    \      result += arr[i]\n        }\n        if i + 1 == k {\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  var sum\
    \ = 0\n  var cnt = 0\n  var i = 0\n  while cnt < k {\n    let num = arr[i]\n \
    \   let digits = digits_of(num: num)\n    if digits < 3 {\n      sum += num\n\
    \      cnt += 1\n    } else {\n      cnt += digits\n    }\n    i += 1\n  }\n \
    \ return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppg_a41zq.swift:16:18: error: cannot find 'digits_of' in scope\n\
    \    let digits = digits_of(num: num)\n                 ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ total = 0\n    for i in 0..<k {\n        if let sum = sum_of_digits(x: arr[i])\
    \ {\n            total += sum\n        }\n    }\n    return total\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpl9twsbmy.swift:13:22: error: cannot find 'sum_of_digits' in scope\n\
    \        if let sum = sum_of_digits(x: arr[i]) {\n                     ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    var counter = 0\n    var index = 0\n    while counter < k &&\
    \ index < arr.count {\n        if arr[index] < 100 {\n            result += arr[index]\n\
    \            counter += 1\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpchjiecgd/tmpchjiecgd.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbfc3efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbfc0e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbfc0e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbfc0e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpchjiecgd                        0x000055acb7b674cd <unavailable> + 5325

    5    libc.so.6                          0x00002acbfc5db460 __libc_start_main +
    245

    6    tmpchjiecgd                        0x000055acb7b67019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var count = 0\n    for i in 0..<arr.count {\n        if (arr[i]\
    \ >= 10 && arr[i] <= 99) || arr[i] == 100 {\n            sum += arr[i]\n     \
    \       count += 1\n        }\n        if count == k {\n            break\n  \
    \      }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpzkkfo81e/tmpzkkfo81e.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b06989c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b06680b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b06680988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b0667f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzkkfo81e                        0x000055a48f44157b <unavailable> + 5499

    5    libc.so.6                          0x00002b1b06b75460 __libc_start_main +
    245

    6    tmpzkkfo81e                        0x000055a48f4411a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ total = 0\n    var counter = 0\n    while counter < k {\n        let element\
    \ = arr[counter]\n        if Double(element) < 100 {\n            total += element\n\
    \        }\n        counter += 1\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    //your\
    \ code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmphguy_8nm/tmphguy_8nm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b921846fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9218166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9218166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92181657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphguy_8nm                        0x000055cf689c533b <unavailable> + 4923

    5    libc.so.6                          0x00002b921865b460 __libc_start_main +
    245

    6    tmphguy_8nm                        0x000055cf689c4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // Edge\
    \ case\n    guard k <= arr.count else { return 0 }\n    \n    var sum = 0\n  \
    \  for i in 0..<k {\n        let number = arr[i]\n        if number < 100 {\n\
    \            sum += number\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979540
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ max_digits = 2\n    var result = 0\n    for i in 0..<k {\n        let num_digits\
    \ = 1 + Int(log10(Double(arr[i])))\n        if num_digits <= max_digits {\n  \
    \          result += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp31g9_6mk.swift:14:34: error: cannot find 'log10' in scope\n   \
    \     let num_digits = 1 + Int(log10(Double(arr[i])))\n                      \
    \           ^~~~~\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for index in 0..<k {\n        let num = arr[index]\n       \
    \ if num >= 100 {\n            result += num\n        } else if num < 10 {\n \
    \           result += num\n        } else {\n            let tens = (num / 10)\
    \ * 10\n            let ones = num % 10\n            result += tens + ones\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpe_c8xk1_/tmpe_c8xk1_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f64512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f64209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f64209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f642087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_c8xk1_                        0x00005581ef95c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b9f646fe460 __libc_start_main +
    245

    6    tmpe_c8xk1_                        0x00005581ef95c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ (1...k).filter { arr[$0 - 1] < 100 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpc4dw8vps/tmpc4dw8vps.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f3fb33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f3f82ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f3f82a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f3f8297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc4dw8vps                        0x000055fe0514f5cb <unavailable> + 5579

    5    libc.so.6                          0x00002b1f3fd1f460 __libc_start_main +
    245

    6    tmpc4dw8vps                        0x000055fe0514f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    var counter = 0\n    while counter < k {\n        if arr[counter]\
    \ >= 10 {\n            result += arr[counter] % 10\n        } else {\n       \
    \     result += arr[counter]\n        }\n        counter += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(add_elements(arr: [1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111,\
    \ 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp49z8450v/tmp49z8450v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29af381c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29af078b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29af078988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29af0777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49z8450v                        0x0000561c6036a50d <unavailable> + 5389

    5    libc.so.6                          0x00002b29af56d460 __libc_start_main +
    245

    6    tmp49z8450v                        0x0000561c6036a059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // Time\
    \ O(n)\n    // Space O(1)\n    let max_len = 2\n    var result = 0\n    let len\
    \ = min(k, arr.count)\n    for i in 0..<len {\n        let num = arr[i]\n    \
    \    if num <= 9 {\n            result += num\n        } else if num <= 99 {\n\
    \            result += num\n        } else if num <= 999 {\n            result\
    \ += num % 100\n        } else {\n            result += num % 1000\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpz0tuvf7w/tmpz0tuvf7w.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4779ebbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4779bb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4779bb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4779bb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz0tuvf7w                        0x0000561aa78ec6ed <unavailable> + 5869

    5    libc.so.6                          0x00002b477a0a7460 __libc_start_main +
    245

    6    tmpz0tuvf7w                        0x0000561aa78ec239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let element = arr[i]\n        sum +=\
    \ (0..<10).contains(element) ? element :\n               (10..<100).contains(element)\
    \ ? element : element / 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpwx5ma3tq/tmpwx5ma3tq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b888207ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8881d71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8881d71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8881d707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwx5ma3tq                        0x00005592a7f8657b <unavailable> + 5499

    5    libc.so.6                          0x00002b8882266460 __libc_start_main +
    245

    6    tmpwx5ma3tq                        0x00005592a7f861a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] > 9 && arr[i] < 100 {\n\
    \            result += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpq6t16148/tmpq6t16148.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fa1090c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fa0d87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fa0d87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fa0d867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6t16148                        0x000055710781651b <unavailable> + 5403

    5    libc.so.6                          0x00002b1fa127c460 __libc_start_main +
    245

    6    tmpq6t16148                        0x0000557107816149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979540
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ k > 0 else { return 0 }\n    guard arr.count > 0 else { return 0 }\n    return\
    \ arr[..<k].filter({$0 < 100}).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        if (arr[i] / 10) < 1 {\n            sum\
    \ += arr[i]\n        } else if (arr[i] / 100) < 1 {\n            sum += arr[i]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for element in arr[..<k] {\n        if element < 100 {\n   \
    \         result += element\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ k = min(k, arr.count)\n    var result = 0\n    for i in 0..<k {\n        let\
    \ num = arr[i]\n        if num < 10 {\n            result += num\n        } else\
    \ if num < 100 {\n            result += num / 10 + num % 10\n        } else {\n\
    \            result += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: Exception
  stderr: 'tmpt04g97q7/tmpt04g97q7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7990b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab798dabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab798dab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab798daa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt04g97q7                        0x00005645d22586ed <unavailable> + 5869

    5    libc.so.6                          0x00002ab7992a0460 __libc_start_main +
    245

    6    tmpt04g97q7                        0x00005645d2258239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).reduce(0) { $0 + ($1 < 100 ? $1 : 0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ filtered = arr.filter { $0 > 10 && $0 < 100 }\n    return filtered.prefix(k).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpaba4hmnr/tmpaba4hmnr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3c5939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3c5630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3c5630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3c562f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaba4hmnr                        0x000055fba70dd5ab <unavailable> + 5547

    5    libc.so.6                          0x00002af3c5b25460 __libc_start_main +
    245

    6    tmpaba4hmnr                        0x000055fba70dd1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // Enter\
    \ code here\n    var sum = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n\
    \            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ k == 0 ? 0 : sum_digits(num: arr[0]) + add_elements(arr: arr, k: k - 1)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprdb1ypa2.swift:11:25: error: cannot find 'sum_digits' in scope\n\
    \    return k == 0 ? 0 : sum_digits(num: arr[0]) + add_elements(arr: arr, k: k\
    \ - 1)\n                        ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.map{$0 < 100 ? $0 : 0}.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp4bv7cy_r/tmp4bv7cy_r.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af640f0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af640c05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af640c05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af640c047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4bv7cy_r                        0x0000559e5398045b <unavailable> + 5211

    5    libc.so.6                          0x00002af6410fa460 __libc_start_main +
    245

    6    tmp4bv7cy_r                        0x0000559e53980089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var digits = 1\n    for i in 0..<k {\n        if arr[i] / 10 ==\
    \ 0 {\n            sum += arr[i]\n        } else {\n            digits = 2\n \
    \           while digits >= 1 {\n                sum += arr[i] % (10 ** digits)\n\
    \                digits -= 1\n            }\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5s149ndq.swift:19:37: error: cannot find operator '**' in scope\n\
    \                sum += arr[i] % (10 ** digits)\n                            \
    \        ^~\n"
  stdout: ''
  timestamp: 1659979540
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpibjt3i0b/tmpibjt3i0b.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acafb059c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acafad50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acafad50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acafad4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibjt3i0b                        0x00005599a76b833b <unavailable> + 4923

    5    libc.so.6                          0x00002acafb245460 __libc_start_main +
    245

    6    tmpibjt3i0b                        0x00005599a76b7f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659979538
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    guard\
    \ arr.count > 1 else { return 0 }\n    guard arr.count <= 100 else { return 0\
    \ }\n    guard k > 1 else { return 0 }\n    guard k <= arr.count else { return\
    \ 0 }\n    \n    return arr.reduce(0, { $0 + (2 >= String($1).count ? $1 : 0)\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpbwr2_s2v/tmpbwr2_s2v.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad89387c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad8907eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad8907e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad8907d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbwr2_s2v                        0x00005650fc41951b <unavailable> + 5403

    5    libc.so.6                          0x00002aad89573460 __libc_start_main +
    245

    6    tmpbwr2_s2v                        0x00005650fc419149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for index in 0..<k {\n        result += (arr[index] > 99 ? 99\
    \ : arr[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: Exception
  stderr: 'tmp0kh33yz4/tmp0kh33yz4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8db408ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8db3d81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8db3d81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8db3d807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0kh33yz4                        0x000055600cb7c5fd <unavailable> + 5629

    5    libc.so.6                          0x00002b8db4276460 __libc_start_main +
    245

    6    tmp0kh33yz4                        0x000055600cb7c149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ max_arr = arr.filter { $0 < 100 }\n    return max_arr.filter { $0 < 100 }.prefix(k).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add_elements(arr: [1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3,\
    \ 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7,\
    \ 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpkzkiq45e/tmpkzkiq45e.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e8cfddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e8ccd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e8ccd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e8ccd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkzkiq45e                        0x000056227f52568d <unavailable> + 5773

    5    libc.so.6                          0x00002b0e8d1c9460 __libc_start_main +
    245

    6    tmpkzkiq45e                        0x000056227f5251d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for num in arr[..<k] {\n        if num < 100 {\n            sum\
    \ += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ nums = arr.filter { $0 < 100 }\n    let result = nums.prefix(k).reduce(0, +)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpba76h3qj/tmpba76h3qj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b472195ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4721651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4721651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47216507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba76h3qj                        0x00005581cddbb68d <unavailable> + 5773

    5    libc.so.6                          0x00002b4721b46460 __libc_start_main +
    245

    6    tmpba76h3qj                        0x00005581cddbb1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n  var count\
    \ = 0\n  for index in 0..<k {\n    if arr[index] < 100 {\n      count += arr[index]\n\
    \    }\n  }\n  return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add_elements(arr:\
    \ [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) == -4)\nassert(add_elements(arr:\
    \ [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr: [11, 21, 3,\
    \ 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: 1
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for num in arr {\n        if num.toString().count <= 2 {\n \
    \           result += num\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpcdjgkmpe.swift:13:16: error: value of type 'Int' has no member\
    \ 'toString'\n        if num.toString().count <= 2 {\n           ~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    let\
    \ digit_counts = arr.map { ($0 / 10 == 0) ? 1 : (($0 / 100 == 0) ? 2 : 3) }\n\
    \    var sum = 0\n    for i in 0..<min(arr.count, k) {\n        if digit_counts[i]\
    \ <= 2 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use print\
    \ or debugPrint function\n    var sum = 0\n    for i in 0..<k {\n        if arr[i]\
    \ <= 99 {\n            sum += arr[i]\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] >= 100 { continue }\n  \
    \      result += arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ k = k\n    var sum = 0\n    var arr = arr\n    while k > 0 {\n        if arr[0]\
    \ > 99 {\n            arr.append(arr[0] / 10)\n        }\n        sum += arr[0]\n\
    \        arr.remove(at: 0)\n        k -= 1\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp6k8vmp82/tmp6k8vmp82.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0f46eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0f43e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0f43e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0f43e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6k8vmp82                        0x000055e898c955bd <unavailable> + 5565

    5    libc.so.6                          0x00002ba0f48da460 __libc_start_main +
    245

    6    tmp6k8vmp82                        0x000055e898c95109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ arr = arr\n    arr.sort(by: { abs($0) > abs($1) })\n    var sum = 0\n    for\
    \ _ in 0..<k {\n        sum += arr.removeFirst()\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmp4am4hh16/tmp4am4hh16.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9fd500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9fd1f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9fd1f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9fd1f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4am4hh16                        0x000055b82c6476cb <unavailable> + 5835

    5    libc.so.6                          0x00002ba9fd6ec460 __libc_start_main +
    245

    6    tmp4am4hh16                        0x000055b82c6472f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for idx in 0..<k {\n        let elem = arr[idx]\n        if elem\
    \ < 100 {\n            sum += elem\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    return\
    \ arr.prefix(k).filter { abs($0) < 100 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        let num = arr[i]\n        let num_s =\
    \ String(num)\n        if num_s.count == 1 || num_s.count == 2 {\n           \
    \ sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k: 3) ==\
    \ -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\nassert(add_elements(arr:\
    \ [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr: [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1], k:\
    \ 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: 0
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ result = 0\n    for i in 0..<k {\n        if arr[i] < 100 {\n            result\
    \ += arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87, 88, 99], k:\
    \ 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k: 2) == 0)\n\
    assert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) == 125)\nassert(add_elements(arr:\
    \ [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\nassert(add_elements(arr: [1],\
    \ k: 1) == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979541
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    for i in 0..<k {\n        sum += arr[i] / 100 != 0 ? arr[i] / 100\
    \ + (arr[i] % 100) / 10 + arr[i] % 10 : arr[i]\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpap8k8fi4/tmpap8k8fi4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b046a585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b046a27cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b046a27c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b046a27b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpap8k8fi4                        0x000055a3698095fd <unavailable> + 5629

    5    libc.so.6                          0x00002b046a771460 __libc_start_main +
    245

    6    tmpap8k8fi4                        0x000055a369809149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979541
- exit_code: -4
  program: "\n/// Given a non-empty array of integers arr and an integer k, return\n\
    /// the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2.\
    \ 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var\
    \ sum = 0\n    var arr = arr\n    arr.sort()\n    for i in 0..<k {\n        if\
    \ arr[i] < 100 {\n            sum += arr[i]\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add_elements(arr: [1, -2, -3, 41, 57, 76, 87,\
    \ 88, 99], k: 3) == -4)\nassert(add_elements(arr: [111, 121, 3, 4000, 5, 6], k:\
    \ 2) == 0)\nassert(add_elements(arr: [11, 21, 3, 90, 5, 6, 7, 8, 9], k: 4) ==\
    \ 125)\nassert(add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4) == 24)\n\
    assert(add_elements(arr: [1], k: 1) == 1)"
  status: Exception
  stderr: 'tmpabse_q3t/tmpabse_q3t.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46dd3d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46dd0d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46dd0d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46dd0cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpabse_q3t                        0x00005577df8b371d <unavailable> + 5917

    5    libc.so.6                          0x00002b46dd5c5460 __libc_start_main +
    245

    6    tmpabse_q3t                        0x00005577df8b3269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979541
