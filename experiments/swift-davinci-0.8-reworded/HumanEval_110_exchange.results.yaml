language: swift
name: HumanEval_110_exchange
results:
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return lst1.filter { $0 % 2 == 1 }.count\
    \ == lst2.filter { $0 % 2 == 1 }.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpbyi37xos/tmpbyi37xos.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1477609c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1477300b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1477300988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14772ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyi37xos                        0x0000561a1bfddac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b14777f5460 __libc_start_main +
    245

    6    tmpbyi37xos                        0x0000561a1bfdd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evenLst1 = lst1.filter { $0 % 2 ==\
    \ 0 }\n    var oddLst2 = lst2.filter { $0 % 2 != 0 }\n    if evenLst1.count +\
    \ oddLst2.count == lst1.count + lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpavmo3ih0/tmpavmo3ih0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37a0827c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37a051eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37a051e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37a051d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavmo3ih0                        0x000055f6a250162d <unavailable> + 5677

    5    libc.so.6                          0x00002b37a0a13460 __libc_start_main +
    245

    6    tmpavmo3ih0                        0x000055f6a25011f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var nums = [Int]()\n    nums += lst1\n\
    \    nums += lst2\n    let evenNums = nums.filter { $0 % 2 == 0 }\n    let oddNums\
    \ = nums.filter { $0 % 2 != 0 }\n    let evenNumsCount = evenNums.count\n    let\
    \ oddNumsCount = oddNums.count\n    return evenNumsCount % 2 == 0 && oddNumsCount\
    \ % 2 == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp4jy08__7/tmp4jy08__7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2396700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23963f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23963f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23963f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4jy08__7                        0x000056112466bb77 <unavailable> + 7031

    5    libc.so.6                          0x00002b23968ec460 __libc_start_main +
    245

    6    tmp4jy08__7                        0x000056112466b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let even1 = lst1.filter {$0 % 2 == 0}\n\
    \    let odd1 = lst1.filter {$0 % 2 != 0}\n    let even2 = lst2.filter {$0 % 2\
    \ == 0}\n    let odd2 = lst2.filter {$0 % 2 != 0}\n    if even1.count + even2.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else if odd1.count\
    \ + odd2.count == lst1.count + lst2.count {\n        return \"YES\"\n    } else\
    \ {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp2il_vj7n/tmp2il_vj7n.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a26c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a23bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a23bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a23ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2il_vj7n                        0x0000564acc6b462d <unavailable> + 5677

    5    libc.so.6                          0x00002ae1a28b0460 __libc_start_main +
    245

    6    tmp2il_vj7n                        0x0000564acc6b41f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for (i, num) in lst1.enumerated() {\n        if num % 2 == 1 {\n        \
    \    if let index = lst2.firstIndex(where: { $0 % 2 == 0 }) {\n              \
    \  lst1[i] = lst2[index]\n                lst2[index] = num\n            } else\
    \ {\n                return \"NO\"\n            }\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n  let even: (Int) -> Bool = { $0 % 2 == 0 }\n\
    \  let odd: (Int) -> Bool = { $0 % 2 != 0 }\n  let cntEven = lst1.filter(even).count\n\
    \  let cntOdd1 = lst1.filter(odd).count\n  let cntOdd2 = lst2.filter(odd).count\n\
    \  return cntEven + cntOdd2 >= cntOdd1 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpk59apq7e/tmpk59apq7e.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa47c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa47944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa47944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa479437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk59apq7e                        0x0000555e059e279f <unavailable> + 6047

    5    libc.so.6                          0x00002baa47e39460 __libc_start_main +
    245

    6    tmpk59apq7e                        0x0000555e059e21f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpbib_eab_/tmpbib_eab_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cc250ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cc2201b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cc2201988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cc22007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbib_eab_                        0x00005628a6a0547d <unavailable> + 5245

    5    libc.so.6                          0x00002b5cc26f6460 __libc_start_main +
    245

    6    tmpbib_eab_                        0x00005628a6a05049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return odds.count == evens.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpasyvraok/tmpasyvraok.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac982a36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac98272db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac98272d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac98272c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasyvraok                        0x00005631ad62cf96 <unavailable> + 8086

    5    libc.so.6                          0x00002ac982c22460 __libc_start_main +
    245

    6    tmpasyvraok                        0x00005631ad62c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    if evens.count + odds.count ==\
    \ lst1.count + lst2.count {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpp_k2x0f1/tmpp_k2x0f1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c85363c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c8505ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c8505a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c850597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp_k2x0f1                        0x0000560685c7962d <unavailable> + 5677

    5    libc.so.6                          0x00002b6c8554f460 __libc_start_main +
    245

    6    tmpp_k2x0f1                        0x0000560685c791f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var count1 = 0\n    var count2 = 0\n  \
    \  for i in lst1 {\n        if i % 2 == 0 {\n            count1 += 1\n       \
    \ }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            count2 +=\
    \ 1\n        }\n    }\n    if lst1.count - count1 <= count2 || lst2.count - count2\
    \ <= count1 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp3kl_y82a/tmp3kl_y82a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49f596dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49f5664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49f5664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49f56637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3kl_y82a                        0x00005599420745ef <unavailable> + 5615

    5    libc.so.6                          0x00002b49f5b59460 __libc_start_main +
    245

    6    tmp3kl_y82a                        0x0000559942074049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n  // YOUR CODE HERE\n  return \"YOUR ANSWER\
    \ HERE\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmppodd5x74/tmppodd5x74.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b103bc00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b103b8f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b103b8f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b103b8f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppodd5x74                        0x000055e22767b47d <unavailable> + 5245

    5    libc.so.6                          0x00002b103bdec460 __libc_start_main +
    245

    6    tmppodd5x74                        0x000055e22767b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var num1 = 0\n    var num2 = 0\n    for\
    \ number in lst1 {\n        if number % 2 == 0 {\n            num1 += 1\n    \
    \    }\n    }\n    for number in lst2 {\n        if number % 2 == 0 {\n      \
    \      num2 += 1\n        }\n    }\n    if num1 > num2 {\n        return \"YES\"\
    \n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpi0_evrgm/tmpi0_evrgm.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9073cd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90739c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90739c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90739c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi0_evrgm                        0x0000565316dc667d <unavailable> + 5757

    5    libc.so.6                          0x00002b9073ebd460 __libc_start_main +
    245

    6    tmpi0_evrgm                        0x0000565316dc6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1, lst2 = lst2\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n            for j in 0..<lst2.count\
    \ {\n                if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    break\n          \
    \      }\n            }\n        }\n    }\n    for i in 0..<lst1.count {\n   \
    \     if lst1[i] % 2 == 1 {\n            return \"NO\"\n        }\n    }\n   \
    \ return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp1waf0y4q/tmp1waf0y4q.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8d525cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8d4f53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8d4f53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8d4f527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1waf0y4q                        0x0000560bc5b5387f <unavailable> + 6271

    5    libc.so.6                          0x00002af8d5448460 __libc_start_main +
    245

    6    tmp1waf0y4q                        0x0000560bc5b532d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    if lst1.filter({$0 % 2 == 0}).count ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    if lst2.filter({$0 % 2 == 0}).count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpj74_9fb4/tmpj74_9fb4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dcdb08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dcd7ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dcd7ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dcd7fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj74_9fb4                        0x0000558ac554162d <unavailable> + 5677

    5    libc.so.6                          0x00002b7dcdcf4460 __libc_start_main +
    245

    6    tmpj74_9fb4                        0x0000558ac55411f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter({ $0 % 2 ==\
    \ 0 }).count\n    let lst2Even = lst2.filter({ $0 % 2 == 0 }).count\n    return\
    \ lst1Even == lst1.count || lst2Even == lst2.count ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpdavattcf/tmpdavattcf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86edb62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86ed859b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86ed859988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86ed8587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdavattcf                        0x000056259510462d <unavailable> + 5677

    5    libc.so.6                          0x00002b86edd4e460 __libc_start_main +
    245

    6    tmpdavattcf                        0x00005625951041f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count > odds.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa5lrowny/tmpa5lrowny.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a1425bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a13f52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a13f52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a13f517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5lrowny                        0x000055a673dfa62d <unavailable> + 5677

    5    libc.so.6                          0x00002b1a14447460 __libc_start_main +
    245

    6    tmpa5lrowny                        0x000055a673dfa1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let sum1 = lst1.reduce(0, +)\n    let sum2\
    \ = lst2.reduce(0, +)\n    return (sum1 % 2 == 0 && sum2 % 2 == 0) || (sum1 %\
    \ 2 != 0 && sum2 % 2 != 0) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps5pu1bbl/tmps5pu1bbl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32f10fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32f0df2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32f0df2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32f0df17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps5pu1bbl                        0x000055d02a952a27 <unavailable> + 6695

    5    libc.so.6                          0x00002b32f12e7460 __libc_start_main +
    245

    6    tmps5pu1bbl                        0x000055d02a952159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1OnlyEvens = lst1.filter { $0 %\
    \ 2 == 0 }\n    let lst2OnlyOdds = lst2.filter { $0 % 2 != 0 }\n    return lst1OnlyEvens.count\
    \ == lst1.count && lst2OnlyOdds.count == lst2.count ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp9yin7vm7/tmp9yin7vm7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adeebd8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adeeba82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adeeba82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adeeba817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yin7vm7                        0x00005647ea51362d <unavailable> + 5677

    5    libc.so.6                          0x00002adeebf77460 __libc_start_main +
    245

    6    tmp9yin7vm7                        0x00005647ea5131f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            // lst1[i] is\
    \ odd and lst2[j] is even\n            // so let's swap the two elements\n   \
    \         let temp = lst1[i]\n            lst1[i] = lst2[j]\n            lst2[j]\
    \ = temp\n            i += 1\n            j += 1\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 == 1 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenValuesLst1 = [Int]()\n    var evenValuesLst2 = [Int]()\n    var oddValuesLst1\
    \ = [Int]()\n    var oddValuesLst2 = [Int]()\n    var evenValues = [Int]()\n \
    \   var oddValues = [Int]()\n    var result = \"NO\"\n    \n    for i in 0..<lst1.count\
    \ {\n        if lst1[i] % 2 == 0 {\n            evenValuesLst1.append(lst1[i])\n\
    \        } else {\n            oddValuesLst1.append(lst1[i])\n        }\n    }\n\
    \    \n    for i in 0..<lst2.count {\n        if lst2[i] % 2 == 0 {\n        \
    \    evenValuesLst2.append(lst2[i])\n        } else {\n            oddValuesLst2.append(lst2[i])\n\
    \        }\n    }\n    \n    if evenValuesLst1.count > 0 && oddValuesLst2.count\
    \ > 0 {\n        evenValues = evenValuesLst1\n        oddValues = oddValuesLst2\n\
    \    } else if evenValuesLst2.count > 0 && oddValuesLst1.count > 0 {\n       \
    \ evenValues = evenValuesLst2\n        oddValues = oddValuesLst1\n    }\n    \n\
    \    if evenValues.count + oddValues.count > 0 {\n        result = \"YES\"\n \
    \   }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvasog0sm/tmpvasog0sm.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f9c9d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f9c6c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f9c6c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f9c6c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvasog0sm                        0x0000565104ab78cf <unavailable> + 6351

    5    libc.so.6                          0x00002b8f9cbbc460 __libc_start_main +
    245

    6    tmpvasog0sm                        0x0000565104ab7329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evenNumbers = lst1.filter { $0 % 2\
    \ == 0 }\n    return lst1.count - evenNumbers.count > 0 ? \"NO\" : \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqcnj9n1k/tmpqcnj9n1k.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa9c63bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa9c332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa9c332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa9c3317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcnj9n1k                        0x00005644b3b5162d <unavailable> + 5677

    5    libc.so.6                          0x00002baa9c827460 __libc_start_main +
    245

    6    tmpqcnj9n1k                        0x00005644b3b511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    let evenNumbers = lst1.filter { $0 % 2 == 0 }\n    let oddNumbers = lst2.filter\
    \ { $0 % 2 != 0 }\n    for even in evenNumbers {\n        if let odd = oddNumbers.first(where:\
    \ { even + $0 == 0 }) {\n            let indexOdd = lst2.firstIndex(of: odd)\n\
    \            let indexEven = lst1.firstIndex(of: even)\n            lst1[indexEven!]\
    \ = odd\n            lst2[indexOdd!] = even\n        }\n    }\n    if lst1.filter({\
    \ $0 % 2 != 0 }).isEmpty {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpzhtzbz3w/tmpzhtzbz3w.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8fcb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8f9aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8f9ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8f9ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhtzbz3w                        0x000055ce4ab118cd <unavailable> + 6349

    5    libc.so.6                          0x00002b5e8fea3460 __libc_start_main +
    245

    6    tmpzhtzbz3w                        0x000055ce4ab11499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let allEven = lst1.filter { $0 % 2 == 0\
    \ }\n    let allOdd = lst2.filter { $0 % 2 != 0 }\n    let isEven = allEven.count\
    \ + allOdd.count == lst1.count\n    return isEven ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7h2hi5we/tmp7h2hi5we.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfa054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bf9d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bf9d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bf9d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7h2hi5we                        0x0000558348ae8ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b4bfa240460 __libc_start_main +
    245

    6    tmp7h2hi5we                        0x0000558348ae81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // TODO: Implement this function!\n   \
    \ return \"NOT IMPLEMENTED\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpgp8e1xsq/tmpgp8e1xsq.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70845d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70842ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70842ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70842cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp8e1xsq                        0x000055fe1a5c547d <unavailable> + 5245

    5    libc.so.6                          0x00002b70847c3460 __libc_start_main +
    245

    6    tmpgp8e1xsq                        0x000055fe1a5c5049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    for num in lst1 {\n        if num % 2 !=\
    \ 0 {\n            for num2 in lst2 {\n                if num2 % 2 == 0 {\n  \
    \                  return \"YES\"\n                }\n            }\n        }\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpld2q1sjd/tmpld2q1sjd.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74a65e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74a62e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74a62e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74a62df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpld2q1sjd                        0x000055d5566337ef <unavailable> + 6127

    5    libc.so.6                          0x00002b74a67d5460 __libc_start_main +
    245

    6    tmpld2q1sjd                        0x000055d556633249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var numberOfEvensInLst1 = 0\n    var numberOfEvensInLst2\
    \ = 0\n    var numberOfOddsInLst1 = 0\n    var numberOfOddsInLst2 = 0\n    \n\
    \    for number in lst1 {\n        if number % 2 == 0 {\n            numberOfEvensInLst1\
    \ += 1\n        } else {\n            numberOfOddsInLst1 += 1\n        }\n   \
    \ }\n    \n    for number in lst2 {\n        if number % 2 == 0 {\n          \
    \  numberOfEvensInLst2 += 1\n        } else {\n            numberOfOddsInLst2\
    \ += 1\n        }\n    }\n    \n    if numberOfEvensInLst1 > numberOfOddsInLst2\
    \ || numberOfEvensInLst2 > numberOfOddsInLst1 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpuyisydej/tmpuyisydej.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9dad7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9daa73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9daa73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9daa727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuyisydej                        0x00005601e053467d <unavailable> + 5757

    5    libc.so.6                          0x00002ac9daf68460 __libc_start_main +
    245

    6    tmpuyisydej                        0x00005601e0534249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    if lst1.contains(where: { $0 % 2 != 0 })\
    \ && lst2.contains(where: { $0 % 2 == 0 }) {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpxc23tn5b/tmpxc23tn5b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d348fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d345f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d345f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d345f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxc23tn5b                        0x000056546ad366ef <unavailable> + 5871

    5    libc.so.6                          0x00002b0d34ae9460 __libc_start_main +
    245

    6    tmpxc23tn5b                        0x000056546ad36149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return lst1.contains(where: { $0 % 2 !=\
    \ 0 }) && lst2.contains(where: { $0 % 2 == 0 }) ? \"YES\" : \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp356khp8f/tmp356khp8f.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3fa9dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3fa6d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3fa6d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3fa6d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp356khp8f                        0x00005574e30276ef <unavailable> + 5871

    5    libc.so.6                          0x00002ad3fabcb460 __libc_start_main +
    245

    6    tmp356khp8f                        0x00005574e3027149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // TODO: Implement me!\n    return \"\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpc02kl5bi/tmpc02kl5bi.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a1314c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a100bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a100b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a100a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc02kl5bi                        0x000055e7ea08c47d <unavailable> + 5245

    5    libc.so.6                          0x00002b22a1500460 __libc_start_main +
    245

    6    tmpc02kl5bi                        0x000055e7ea08c049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // Implement me!\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: SyntaxError
  stderr: '/tmp/tmpj2tuzpwp.swift:17:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = lst1.filter({ $0 % 2 == 0 }).count\n\
    \    for i in lst2 {\n        if i % 2 == 0 {\n            evens += 1\n      \
    \  }\n    }\n    if evens == lst1.count {\n        return \"YES\"\n    }\n   \
    \ return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmphxnihoi0/tmphxnihoi0.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad752856c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad75254db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad75254d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad75254c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphxnihoi0                        0x0000557eb1ba7106 <unavailable> + 8454

    5    libc.so.6                          0x00002ad752a42460 __libc_start_main +
    245

    6    tmphxnihoi0                        0x0000557eb1ba6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let even = lst1.filter{ $0 % 2 == 0 }\n\
    \    let odd = lst2.filter{ $0 % 2 != 0 }\n    return (lst1.count - even.count)\
    \ == odd.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpyrw9e_w6/tmpyrw9e_w6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ecc9b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ecc6a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ecc6a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ecc6a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrw9e_w6                        0x000055d1f833eac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b3eccb9d460 __libc_start_main +
    245

    6    tmpyrw9e_w6                        0x000055d1f833e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter { $0\
    \ % 2 != 0 }\n    let evenOdds = zip(evens, odds)\n    for (i, j) in evenOdds\
    \ {\n        lst1.replace(index: lst1.index(of: i)!, with: j)\n        lst2.replace(index:\
    \ lst2.index(of: j)!, with: i)\n    }\n    return lst1.allSatisfy { $0 % 2 ==\
    \ 0 } ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpgf_l17o3.swift:22:21: error: extraneous argument label 'index:'\
    \ in call\n        lst1.replace(index: lst1.index(of: i)!, with: j)\n        \
    \            ^~~~~~~~\n                     \n/tmp/tmpgf_l17o3.swift:22:9: error:\
    \ instance method 'replace(_:with:maxReplacements:)' requires that 'Array<Int>.Index'\
    \ (aka 'Int') conform to 'Collection'\n        lst1.replace(index: lst1.index(of:\
    \ i)!, with: j)\n        ^\n_StringProcessing.RangeReplaceableCollection:7:26:\
    \ note: where 'C' = 'Array<Int>.Index' (aka 'Int')\n    public mutating func replace<C,\
    \ Replacement>(_ other: C, with replacement: Replacement, maxReplacements: Int\
    \ = .max) where C : Collection, Replacement : Collection, Self.Element == C.Element,\
    \ C.Element == Replacement.Element\n                         ^\n/tmp/tmpgf_l17o3.swift:22:9:\
    \ error: instance method 'replace(_:with:maxReplacements:)' requires that 'Int'\
    \ conform to 'Collection'\n        lst1.replace(index: lst1.index(of: i)!, with:\
    \ j)\n        ^\n_StringProcessing.RangeReplaceableCollection:7:26: note: where\
    \ 'Replacement' = 'Int'\n    public mutating func replace<C, Replacement>(_ other:\
    \ C, with replacement: Replacement, maxReplacements: Int = .max) where C : Collection,\
    \ Replacement : Collection, Self.Element == C.Element, C.Element == Replacement.Element\n\
    \                         ^\n/tmp/tmpgf_l17o3.swift:23:9: error: instance method\
    \ 'replace(_:with:maxReplacements:)' requires that 'Array<Int>.Index' (aka 'Int')\
    \ conform to 'Collection'\n        lst2.replace(index: lst2.index(of: j)!, with:\
    \ i)\n        ^\n_StringProcessing.RangeReplaceableCollection:7:26: note: where\
    \ 'C' = 'Array<Int>.Index' (aka 'Int')\n    public mutating func replace<C, Replacement>(_\
    \ other: C, with replacement: Replacement, maxReplacements: Int = .max) where\
    \ C : Collection, Replacement : Collection, Self.Element == C.Element, C.Element\
    \ == Replacement.Element\n                         ^\n/tmp/tmpgf_l17o3.swift:23:9:\
    \ error: instance method 'replace(_:with:maxReplacements:)' requires that 'Int'\
    \ conform to 'Collection'\n        lst2.replace(index: lst2"
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    for i in lst1 {\n        if i % 2 != 0\
    \ {\n            for j in lst2 {\n                if j % 2 == 0 {\n          \
    \          return \"YES\"\n                }\n            }\n        }\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmplsfd45xt/tmplsfd45xt.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b679102fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6790d26b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6790d26988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6790d257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsfd45xt                        0x000055e19dce77ef <unavailable> + 6127

    5    libc.so.6                          0x00002b679121b460 __libc_start_main +
    245

    6    tmplsfd45xt                        0x000055e19dce7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evenInFirst = lst1.filter { $0 % 2\
    \ == 0 }\n    let evenInSecond = lst2.filter { $0 % 2 == 0 }\n    let oddInFirst\
    \ = lst1.filter { $0 % 2 != 0 }\n    let oddInSecond = lst2.filter { $0 % 2 !=\
    \ 0 }\n    return (evenInFirst.count + oddInSecond.count) == lst1.count && (evenInSecond.count\
    \ + oddInFirst.count) == lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpfp1tbr6u/tmpfp1tbr6u.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06de5f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06de2eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06de2ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06de2ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp1tbr6u                        0x00005565c9121ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b06de7e3460 __libc_start_main +
    245

    6    tmpfp1tbr6u                        0x00005565c91211f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return (lst1.map{$0 % 2 == 0}.reduce(true,\
    \ {$0 && $1})) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpy3mqq0dh/tmpy3mqq0dh.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac599ab6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5997adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5997ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5997ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3mqq0dh                        0x000055aa5c77a66d <unavailable> + 5741

    5    libc.so.6                          0x00002ac599ca2460 __libc_start_main +
    245

    6    tmpy3mqq0dh                        0x000055aa5c77a239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var dict: [Int: Int] = [:]\n    for x in\
    \ lst1 {\n        if x % 2 == 0 {\n            if let v = dict[x] {\n        \
    \        dict[x] = v + 1\n            } else {\n                dict[x] = 1\n\
    \            }\n        }\n    }\n    for x in lst2 {\n        if x % 2 == 0 {\n\
    \            if let v = dict[x] {\n                dict[x] = v - 1\n         \
    \   } else {\n                dict[x] = -1\n            }\n        }\n    }\n\
    \    if dict.values.filter({ $0 != 0 }).count > 0 {\n        return \"NO\"\n \
    \   }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp0bu_6va6/tmp0bu_6va6.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af14b45bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af14b152b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af14b152988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af14b1517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0bu_6va6                        0x0000556aa9141e07 <unavailable> + 7687

    5    libc.so.6                          0x00002af14b647460 __libc_start_main +
    245

    6    tmp0bu_6va6                        0x0000556aa9141539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5gzdl2_s/tmp5gzdl2_s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b957757fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9577276b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9577276988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95772757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5gzdl2_s                        0x000055cdd9a8579f <unavailable> + 6047

    5    libc.so.6                          0x00002b957776b460 __libc_start_main +
    245

    6    tmp5gzdl2_s                        0x000055cdd9a851f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var sum1 = 0\n    var sum2 = 0\n    for\
    \ i in lst1 {\n        if i % 2 == 0 {\n            sum1 += 1\n        }\n   \
    \ }\n    for i in lst2 {\n        if i % 2 == 0 {\n            sum2 += 1\n   \
    \     }\n    }\n    if sum1 != 0 && sum2 != 0 {\n        return \"YES\"\n    }\
    \ else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmppxvcog8s/tmppxvcog8s.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27960d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2795dcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2795dcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2795dce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxvcog8s                        0x000055feca47f7ef <unavailable> + 6127

    5    libc.so.6                          0x00002b27962c4460 __libc_start_main +
    245

    6    tmppxvcog8s                        0x000055feca47f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = [Int]()\n    var odds = [Int]()\n\
    \    for x in lst1 {\n        if x % 2 == 0 {\n            evens.append(x)\n \
    \       } else {\n            odds.append(x)\n        }\n    }\n    for x in lst2\
    \ {\n        if x % 2 == 0 {\n            evens.append(x)\n        } else {\n\
    \            odds.append(x)\n        }\n    }\n    return evens.count > odds.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpo5i0vbhd/tmpo5i0vbhd.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4956341c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4956038b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4956038988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49560377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5i0vbhd                        0x000055ac5447777d <unavailable> + 6013

    5    libc.so.6                          0x00002b495652d460 __libc_start_main +
    245

    6    tmpo5i0vbhd                        0x000055ac54477349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // check if lst1 has at least one odd number\n\
    \    if lst1.first(where: { $0 % 2 != 0 }) != nil {\n        // check if lst2\
    \ has at least one even number\n        if lst2.first(where: { $0 % 2 == 0 })\
    \ != nil {\n            return \"YES\"\n        }\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgp2yzidn/tmpgp2yzidn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72777f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72774ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72774eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72774ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgp2yzidn                        0x000056341da1d6ef <unavailable> + 5871

    5    libc.so.6                          0x00002b72779e0460 __libc_start_main +
    245

    6    tmpgp2yzidn                        0x000056341da1d149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1, lst2 = lst2\n    while\
    \ !lst1.isEmpty && !lst2.isEmpty {\n        let n1 = lst1.removeFirst()\n    \
    \    let n2 = lst2.removeFirst()\n        if n1 % 2 == 1 {\n            if n2\
    \ % 2 == 1 {\n                lst1.append(n1)\n                lst2.append(n2)\n\
    \            } else {\n                lst1.append(n2)\n                lst2.append(n1)\n\
    \            }\n        }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979373
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1HasOdd = false\n    var lst2HasOdd = false\n    var lst1HasEven =\
    \ false\n    var lst2HasEven = false\n    var exchangeStr = \"NO\"\n    \n   \
    \ for num in lst1 {\n        if num % 2 == 0 {\n            lst1HasEven = true\n\
    \        } else {\n            lst1HasOdd = true\n        }\n    }\n    \n   \
    \ for num in lst2 {\n        if num % 2 == 0 {\n            lst2HasEven = true\n\
    \        } else {\n            lst2HasOdd = true\n        }\n    }\n    \n   \
    \ if (lst1HasEven && lst2HasOdd) || (lst1HasOdd && lst2HasEven) {\n        exchangeStr\
    \ = \"YES\"\n    }\n    \n    return exchangeStr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpqtssh553/tmpqtssh553.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7255fb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7255caab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7255caa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7255ca97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqtssh553                        0x0000555c3906a7ef <unavailable> + 6127

    5    libc.so.6                          0x00002b725619f460 __libc_start_main +
    245

    6    tmpqtssh553                        0x0000555c3906a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Sum = lst1.reduce(0, +)\n    let\
    \ lst2Sum = lst2.reduce(0, +)\n    let sum = lst1Sum + lst2Sum\n    if sum % 2\
    \ == 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpd98ujkv2/tmpd98ujkv2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b070ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b06dc3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b06dc3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b06dc27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd98ujkv2                        0x000055bb4f04ea27 <unavailable> + 6695

    5    libc.so.6                          0x00002b6b072b8460 __libc_start_main +
    245

    6    tmpd98ujkv2                        0x000055bb4f04e159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // This function is provided for you.\n\
    \    func isEven(_ num: Int) -> Bool {\n        return num % 2 == 0\n    }\n \
    \   // Write your code below.\n    if lst1.contains(where: isEven) && lst2.contains(where:\
    \ isEven) {\n        return \"YES\"\n    } else {\n        return \"NO\"\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7iura3ek/tmp7iura3ek.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75d48d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75d45cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75d45cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75d45cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7iura3ek                        0x00005591657436ef <unavailable> + 5871

    5    libc.so.6                          0x00002b75d4ac2460 __libc_start_main +
    245

    6    tmp7iura3ek                        0x0000559165743149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // For an O(1) solution, count the odds\
    \ in each array as you iterate them.\n    // If the sum of the two counts is even,\
    \ return \"YES\".\n    // Otherwise, return \"NO\".\n    let lst1Odds = lst1.reduce(0)\
    \ { (prev, current) in current % 2 == 1 ? prev + 1 : prev }\n    let lst2Odds\
    \ = lst2.reduce(0) { (prev, current) in current % 2 == 1 ? prev + 1 : prev }\n\
    \    return (lst1Odds + lst2Odds) % 2 == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpaf28rjfl/tmpaf28rjfl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eebac2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eeb7b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eeb7b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eeb7b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaf28rjfl                        0x000055db94503a27 <unavailable> + 6695

    5    libc.so.6                          0x00002b3eebcae460 __libc_start_main +
    245

    6    tmpaf28rjfl                        0x000055db94503159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let odd1 = lst1.filter({ $0 % 2 != 0 })\n\
    \    let odd2 = lst2.filter({ $0 % 2 != 0 })\n    if odd1.count == odd2.count\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpot3_2go6/tmpot3_2go6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04718dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04715d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04715d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04715d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpot3_2go6                        0x00005648c88d2ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b0471ac7460 __libc_start_main +
    245

    6    tmpot3_2go6                        0x00005648c88d21f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    if lst1.contains(where: {$0 % 2 != 0}) {\n        while let index1 = lst1.firstIndex(where:\
    \ {$0 % 2 != 0}) {\n            if let index2 = lst2.firstIndex(where: {$0 % 2\
    \ == 0}) {\n                lst1[index1] = lst2[index2]\n                lst2[index2]\
    \ = lst1[index1]\n            } else {\n                return \"NO\"\n      \
    \      }\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpd12hhkcs/tmpd12hhkcs.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ef049fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ef0196b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ef0196988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ef01957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd12hhkcs                        0x00005569c10d684f <unavailable> + 6223

    5    libc.so.6                          0x00002b4ef068b460 __libc_start_main +
    245

    6    tmpd12hhkcs                        0x00005569c10d62a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let count1 = lst1.filter { $0 % 2 == 0\
    \ }.count\n    let count2 = lst2.filter { $0 % 2 == 0 }.count\n    return count1\
    \ + count2 >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let allEven = lst1.reduce(true, {acc, num\
    \ in acc && num % 2 == 0})\n    if allEven {\n        return \"YES\"\n    } else\
    \ {\n        var lst1 = lst1\n        let odd = lst1.filter({$0 % 2 != 0})\n \
    \       for (i, num) in odd.enumerated() {\n            if let index = lst2.firstIndex(of:\
    \ num) {\n                lst1[i] = lst2[index]\n            }\n        }\n  \
    \      let allEven = lst1.reduce(true, {acc, num in acc && num % 2 == 0})\n  \
    \      return allEven ? \"YES\" : \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpnbu18m1u/tmpnbu18m1u.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b739d296c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b739cf8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b739cf8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b739cf8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnbu18m1u                        0x00005629c84a29fd <unavailable> + 6653

    5    libc.so.6                          0x00002b739d482460 __libc_start_main +
    245

    6    tmpnbu18m1u                        0x00005629c84a25c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n  var lst1 = lst1\n  var lst2 = lst2\n  var\
    \ isExchanged = false\n  while !isExchanged {\n    isExchanged = true\n    for\
    \ i in 0..<lst1.count {\n      if lst1[i] % 2 != 0 {\n        for j in 0..<lst2.count\
    \ {\n          if lst2[j] % 2 == 0 {\n            let temp = lst1[i]\n       \
    \     lst1[i] = lst2[j]\n            lst2[j] = temp\n            isExchanged =\
    \ false\n            break\n          }\n        }\n      }\n    }\n  }\n  for\
    \ elem in lst1 {\n    if elem % 2 != 0 {\n      return \"NO\"\n    }\n  }\n  return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let oddNumbersInList1 = lst1.filter { $0\
    \ % 2 != 0 }\n    let evenNumbersInList2 = lst2.filter { $0 % 2 == 0 }\n    return\
    \ oddNumbersInList1.count == evenNumbersInList2.count ? \"YES\" : \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpey12k_u3/tmpey12k_u3.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97b33b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97b30a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97b30a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97b30a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpey12k_u3                        0x000055d3da7eaf96 <unavailable> + 8086

    5    libc.so.6                          0x00002b97b359c460 __libc_start_main +
    245

    6    tmpey12k_u3                        0x000055d3da7ea1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp3kl_y82a/tmp3kl_y82a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49f596dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49f5664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49f5664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49f56637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3kl_y82a                        0x00005599420745ef <unavailable> + 5615

    5    libc.so.6                          0x00002b49f5b59460 __libc_start_main +
    245

    6    tmp3kl_y82a                        0x0000559942074049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = [Int]()\n    var odds = [Int]()\n\
    \    lst1.forEach { if $0 % 2 == 0 { evens.append($0) } else { odds.append($0)\
    \ } }\n    lst2.forEach { if $0 % 2 == 0 { evens.append($0) } else { odds.append($0)\
    \ } }\n    let sortedEvens = evens.sorted()\n    let sortedOdds = odds.sorted()\n\
    \    for i in 0..<sortedEvens.count {\n        if sortedEvens[i] > sortedOdds[i]\
    \ {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpirkoi69e/tmpirkoi69e.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87b1cf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87b19e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87b19e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87b19e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpirkoi69e                        0x000055f775cb386d <unavailable> + 6253

    5    libc.so.6                          0x00002b87b1edc460 __libc_start_main +
    245

    6    tmpirkoi69e                        0x000055f775cb3439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5gzdl2_s/tmp5gzdl2_s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b957757fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9577276b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9577276988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95772757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5gzdl2_s                        0x000055cdd9a8579f <unavailable> + 6047

    5    libc.so.6                          0x00002b957776b460 __libc_start_main +
    245

    6    tmp5gzdl2_s                        0x000055cdd9a851f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var countOddLst1 = 0\n    var countOddLst2\
    \ = 0\n    for number in lst1 {\n        if number % 2 != 0 {\n            countOddLst1\
    \ += 1\n        }\n    }\n    for number in lst2 {\n        if number % 2 != 0\
    \ {\n            countOddLst2 += 1\n        }\n    }\n    if countOddLst1 != countOddLst2\
    \ {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp2pb0o2ns/tmp2pb0o2ns.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba95d05dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba95cd54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba95cd54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba95cd537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pb0o2ns                        0x0000556a3d8eab17 <unavailable> + 6935

    5    libc.so.6                          0x00002ba95d249460 __libc_start_main +
    245

    6    tmp2pb0o2ns                        0x0000556a3d8ea249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    if evens.count > odds.count {\n\
    \        return \"NO\"\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp5v5za2xq/tmp5v5za2xq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4aa2abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4a9fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4a9fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4a9fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5v5za2xq                        0x0000559b4d81179f <unavailable> + 6047

    5    libc.so.6                          0x00002ba4aa497460 __libc_start_main +
    245

    6    tmp5v5za2xq                        0x0000559b4d8111f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // your code here\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpf1d0ldc6/tmpf1d0ldc6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b2d2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b2cfe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b2cfe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b2cfe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1d0ldc6                        0x00005635bab0947d <unavailable> + 5245

    5    libc.so.6                          0x00002b7b2d4db460 __libc_start_main +
    245

    6    tmpf1d0ldc6                        0x00005635bab09049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evenLst1 = [Int]()\n    var oddLst1\
    \ = [Int]()\n    var evenLst2 = [Int]()\n    var oddLst2 = [Int]()\n    var result\
    \ = [Int]()\n    var result2 = [Int]()\n    for item in lst1 {\n        if item\
    \ % 2 == 0 {\n            evenLst1.append(item)\n        } else {\n          \
    \  oddLst1.append(item)\n        }\n    }\n    for item in lst2 {\n        if\
    \ item % 2 == 0 {\n            evenLst2.append(item)\n        } else {\n     \
    \       oddLst2.append(item)\n        }\n    }\n    for even in evenLst1 {\n \
    \       for odd in oddLst2 {\n            result.append(even)\n            result.append(odd)\n\
    \        }\n    }\n    for odd in oddLst1 {\n        for even in evenLst2 {\n\
    \            result2.append(odd)\n            result2.append(even)\n        }\n\
    \    }\n    if result.count > 0 || result2.count > 0 {\n        return \"YES\"\
    \n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpd28f1uiw/tmpd28f1uiw.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acce3ad0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acce37c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acce37c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acce37c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd28f1uiw                        0x00005596630268ef <unavailable> + 6383

    5    libc.so.6                          0x00002acce3cbc460 __libc_start_main +
    245

    6    tmpd28f1uiw                        0x0000559663026349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evenArray1 = [Int]()\n    var evenArray2\
    \ = [Int]()\n    for value in lst1 {\n        if value % 2 == 0 {\n          \
    \  evenArray1.append(value)\n        }\n    }\n    for value in lst2 {\n     \
    \   if value % 2 == 0 {\n            evenArray2.append(value)\n        }\n   \
    \ }\n    return (evenArray1.count + evenArray2.count) >= lst1.count ? \"YES\"\
    \ : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var odd1 = [Int]()\n    var odd2 = [Int]()\n\
    \    for i in lst1 {\n        if i % 2 != 0 {\n            odd1.append(i)\n  \
    \      }\n    }\n    for i in lst2 {\n        if i % 2 != 0 {\n            odd2.append(i)\n\
    \        }\n    }\n    if odd1.count != odd2.count {\n        return \"NO\"\n\
    \    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp1dnmnod3/tmp1dnmnod3.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d93ee6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d93bddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d93bdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d93bdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1dnmnod3                        0x00005618f855ac17 <unavailable> + 7191

    5    libc.so.6                          0x00002b0d940d2460 __libc_start_main +
    245

    6    tmp1dnmnod3                        0x00005618f855a349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var one = lst1\n    var two = lst2\n  \
    \  var ctr = 0\n    for n in one {\n        if n % 2 != 0 {\n            for i\
    \ in 0..<two.count {\n                if two[i] % 2 == 0 {\n                 \
    \   two[i] = n\n                    ctr += 1\n                    break\n    \
    \            }\n            }\n        }\n    }\n    if ctr == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpj1k0gth7/tmpj1k0gth7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cee4bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cee1b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cee1b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cee1b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1k0gth7                        0x00005633dc42586d <unavailable> + 6253

    5    libc.so.6                          0x00002b4cee6a8460 __libc_start_main +
    245

    6    tmpj1k0gth7                        0x00005633dc425439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let oddNumberCount = lst1.filter {$0 %\
    \ 2 != 0}.count\n    let evenNumberCount = lst2.filter {$0 % 2 == 0}.count\n \
    \   return oddNumberCount <= evenNumberCount ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    for i in lst1 {\n        if !even(num:\
    \ i) {\n            for j in lst2 {\n                if even(num: j) {\n     \
    \               return \"YES\"\n                }\n            }\n        }\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmp9qaydj28.swift:17:13: error: cannot find 'even' in scope\n    \
    \    if !even(num: i) {\n            ^~~~\n/tmp/tmp9qaydj28.swift:19:20: error:\
    \ cannot find 'even' in scope\n                if even(num: j) {\n           \
    \        ^~~~\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            if\
    \ let j = lst2.firstIndex(where: { $0 % 2 == 0 }) {\n                lst1[i] =\
    \ lst2[j]\n                lst2[j] = lst1[i]\n            } else {\n         \
    \       return \"NO\"\n            }\n        }\n    }\n    return \"YES\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp0ghyohl4/tmp0ghyohl4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0724d52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0724a49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0724a49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0724a487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ghyohl4                        0x0000557c31e6392f <unavailable> + 6447

    5    libc.so.6                          0x00002b0724f3e460 __libc_start_main +
    245

    6    tmp0ghyohl4                        0x0000557c31e63389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // Your code here\n    if lst1.reduce(0,\
    \ +) % 2 == 0 {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n\
    \        for j in 0..<lst2.count {\n            if lst1[i] % 2 != 0 {\n      \
    \          let newLst1 = lst1.replacing(at: i, with: lst2[j])\n              \
    \  if newLst1.reduce(0, +) % 2 == 0 {\n                    return \"YES\"\n  \
    \              }\n            }\n        }\n    }\n    return \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmp3jcvdmlz.swift:23:45: error: extraneous argument label 'at:' in\
    \ call\n                let newLst1 = lst1.replacing(at: i, with: lst2[j])\n \
    \                                           ^~~~~\n                          \
    \                   \n/tmp/tmp3jcvdmlz.swift:23:63: error: no exact matches in\
    \ call to subscript \n                let newLst1 = lst1.replacing(at: i, with:\
    \ lst2[j])\n                                                              ^\n\
    /tmp/tmp3jcvdmlz.swift:23:63: note: found candidate with type '(Range<Int>) ->\
    \ ArraySlice<Int>'\n                let newLst1 = lst1.replacing(at: i, with:\
    \ lst2[j])\n                                                              ^\n\
    /tmp/tmp3jcvdmlz.swift:23:63: note: found candidate with type '((UnboundedRange_)\
    \ -> ()) -> ArraySlice<Int>'\n                let newLst1 = lst1.replacing(at:\
    \ i, with: lst2[j])\n                                                        \
    \      ^\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return (evens.count + odds.count\
    \ == lst1.count + lst2.count) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpuaum51y5/tmpuaum51y5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38b146dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38b1164b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38b1164988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38b11637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuaum51y5                        0x0000559ae01c762d <unavailable> + 5677

    5    libc.so.6                          0x00002b38b1659460 __libc_start_main +
    245

    6    tmpuaum51y5                        0x0000559ae01c71f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let isEven = lst1Even.count\
    \ + lst2Even.count == lst1.count + lst2.count\n    return isEven ? \"YES\" : \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpu4l5prmq/tmpu4l5prmq.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b851be08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b851baffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b851baff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b851bafe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu4l5prmq                        0x000055ecfdc2062d <unavailable> + 5677

    5    libc.so.6                          0x00002b851bff4460 __libc_start_main +
    245

    6    tmpu4l5prmq                        0x000055ecfdc201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var result = \"NO\"\n    for (i, x) in\
    \ lst1.enumerated() {\n        if x % 2 != 0 {\n            for (j, y) in lst2.enumerated()\
    \ {\n                if y % 2 == 0 {\n                    let buffer = lst1[i]\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = buffer\n\
    \                    result = \"YES\"\n                    break\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmp6jp3sayj.swift:22:25: error: cannot assign through subscript: 'lst1'\
    \ is a 'let' constant\n                    lst1[i] = lst2[j]\n               \
    \     ~~~~^\n/tmp/tmp6jp3sayj.swift:23:25: error: cannot assign through subscript:\
    \ 'lst2' is a 'let' constant\n                    lst2[j] = buffer\n         \
    \           ~~~~^\n"
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let even = lst1.filter {$0 % 2 == 0}.count\n\
    \    let odd = lst1.filter {$0 % 2 != 0}.count\n    let even2 = lst2.filter {$0\
    \ % 2 == 0}.count\n    let odd2 = lst2.filter {$0 % 2 != 0}.count\n    if odd\
    \ > even {\n        if odd > even2 {\n            return \"NO\"\n        }\n \
    \   }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp2jzdxak1/tmp2jzdxak1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3efbf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3ef8e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3ef8e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3ef8e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jzdxak1                        0x000056065b86879f <unavailable> + 6047

    5    libc.so.6                          0x00002ac3efddd460 __libc_start_main +
    245

    6    tmp2jzdxak1                        0x000056065b8681f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let index1 = lst1.index(where: {$0 % 2\
    \ != 0})\n    let index2 = lst2.index(where: {$0 % 2 == 0})\n    return index1\
    \ != nil && index2 != nil ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmphyqn5qsc/tmphyqn5qsc.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9439fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9436f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9436f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9436f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphyqn5qsc                        0x000055ca16c7473f <unavailable> + 5951

    5    libc.so.6                          0x00002ab943bea460 __libc_start_main +
    245

    6    tmphyqn5qsc                        0x000055ca16c74199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var odd1 = [Int]()\n    var odd2 = [Int]()\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            odd1.append(lst1[i])\n        }\n\
    \        if lst2[i] % 2 != 0 {\n            odd2.append(lst2[i])\n        }\n\
    \    }\n    if odd1.count != odd2.count {\n        return \"NO\"\n    }\n    for\
    \ i in 0..<odd1.count {\n        for j in 0..<lst1.count {\n            if lst1[j]\
    \ == odd1[i] {\n                lst1[j] = odd2[i]\n            }\n           \
    \ if lst2[j] == odd2[i] {\n                lst2[j] = odd1[i]\n            }\n\
    \        }\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0\
    \ {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp3dccy81w/tmp3dccy81w.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa4d5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa4d2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa4d2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa4d2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3dccy81w                        0x000055e9b60f07ad <unavailable> + 6061

    5    libc.so.6                          0x00002baa4d7e8460 __libc_start_main +
    245

    6    tmp3dccy81w                        0x000055e9b60f0379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let isEvenLst1 = lst1.filter { $0 % 2 ==\
    \ 0 }.count == lst1.count\n    let isEvenLst2 = lst2.filter { $0 % 2 == 0 }.count\
    \ == lst2.count\n    return isEvenLst1 || isEvenLst2 ? \"YES\" : \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpjqdl3eav/tmpjqdl3eav.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeaf1dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeaeed5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeaeed5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeaeed47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjqdl3eav                        0x000055560f5ad62d <unavailable> + 5677

    5    libc.so.6                          0x00002aaeaf3ca460 __libc_start_main +
    245

    6    tmpjqdl3eav                        0x000055560f5ad1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    for num in lst1 {\n        if num % 2 !=\
    \ 0 {\n            for num2 in lst2 {\n                if num2 % 2 == 0 {\n  \
    \                  return \"YES\"\n                }\n            }\n        }\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpld2q1sjd/tmpld2q1sjd.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74a65e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74a62e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74a62e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74a62df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpld2q1sjd                        0x000055d5566337ef <unavailable> + 6127

    5    libc.so.6                          0x00002b74a67d5460 __libc_start_main +
    245

    6    tmpld2q1sjd                        0x000055d556633249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Set = Set(lst1)\n    let lst2Set\
    \ = Set(lst2)\n    let lst1Odd = lst1Set.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2Set.filter { $0 % 2 != 0 }\n    let lst1Even = lst1Set.filter { $0 % 2\
    \ == 0 }\n    let lst2Even = lst2Set.filter { $0 % 2 == 0 }\n    if !lst1Odd.isEmpty\
    \ && !lst2Even.isEmpty {\n        let lst1OddDifference = lst1Odd.subtracting(lst2Even)\n\
    \        if lst1OddDifference.isEmpty {\n            return \"YES\"\n        }\n\
    \    }\n    if !lst2Odd.isEmpty && !lst1Even.isEmpty {\n        let lst2OddDifference\
    \ = lst2Odd.subtracting(lst1Even)\n        if lst2OddDifference.isEmpty {\n  \
    \          return \"YES\"\n        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpixp4l302/tmpixp4l302.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401cf1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401cc15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401cc15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401cc147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpixp4l302                        0x000055c99cecd6cd <unavailable> + 5837

    5    libc.so.6                          0x00002b401d10a460 __libc_start_main +
    245

    6    tmpixp4l302                        0x000055c99cecd299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evenArr = [Int]()\n    var oddArr =\
    \ [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evenArr.append(i)\n\
    \        } else {\n            oddArr.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evenArr.append(i)\n        } else\
    \ {\n            oddArr.append(i)\n        }\n    }\n    if oddArr.count == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpcua6ufjo/tmpcua6ufjo.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b165bb87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b165b87eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b165b87e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b165b87d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcua6ufjo                        0x000055ac0009377d <unavailable> + 6013

    5    libc.so.6                          0x00002b165bd73460 __libc_start_main +
    245

    6    tmpcua6ufjo                        0x000055ac00093349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // TODO: Implement this function\n    return\
    \ \"NOT IMPLEMENTED\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp74hxollf/tmp74hxollf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd47d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd47a50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd47a50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd47a4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74hxollf                        0x00005648d2a2c47d <unavailable> + 5245

    5    libc.so.6                          0x00002afd47f45460 __libc_start_main +
    245

    6    tmp74hxollf                        0x00005648d2a2c049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1EvenCount = 0\n    var lst2EvenCount\
    \ = 0\n    for num in lst1 {\n        if num % 2 == 0 {\n            lst1EvenCount\
    \ += 1\n        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n \
    \           lst2EvenCount += 1\n        }\n    }\n    return lst1EvenCount ==\
    \ lst1.count || lst2EvenCount == lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpq_aku3sn/tmpq_aku3sn.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6812cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba680fc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba680fc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba680fc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_aku3sn                        0x0000560ee60ae6dd <unavailable> + 5853

    5    libc.so.6                          0x00002ba6814b7460 __libc_start_main +
    245

    6    tmpq_aku3sn                        0x0000560ee60ae2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var ones = lst1.filter({ $0 % 2 == 1 })\n\
    \    var twos = lst2.filter({ $0 % 2 == 1 })\n    ones = ones.filter({ twos.contains($0)\
    \ })\n    return ones.count == lst1.filter({ $0 % 2 == 1 }).count ? \"YES\" :\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpyi54nt_m/tmpyi54nt_m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4328bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43288b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43288b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43288b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyi54nt_m                        0x00005601f3a5f80f <unavailable> + 6159

    5    libc.so.6                          0x00002b4328daa460 __libc_start_main +
    245

    6    tmpyi54nt_m                        0x00005601f3a5f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return (lst1.filter { $0 % 2 == 0 }.count\
    \ + lst2.filter { $0 % 2 == 0 }.count >= lst1.count) ? \"YES\" : \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter {$0 % 2 == 0}\n\
    \    let odds = lst2.filter {$0 % 2 != 0}\n    let result = (evens.count + odds.count)\
    \ > lst1.count ? \"YES\" : \"NO\"\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpcf5poik5/tmpcf5poik5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b311fb2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b311f822b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b311f822988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b311f8217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcf5poik5                        0x000055c4fe3a762d <unavailable> + 5677

    5    libc.so.6                          0x00002b311fd17460 __libc_start_main +
    245

    6    tmpcf5poik5                        0x000055c4fe3a71f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evens = 0\n    for number in lst1 {\n        if number % 2 == 0 {\n \
    \           evens += 1\n        }\n    }\n    for number in lst2 {\n        if\
    \ number % 2 == 0 {\n            evens -= 1\n        }\n    }\n    return evens\
    \ == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp9tmfiejw/tmp9tmfiejw.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac27b003c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac27acfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac27acfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac27acf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tmfiejw                        0x000056161a6d3b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ac27b1ef460 __libc_start_main +
    245

    6    tmp9tmfiejw                        0x000056161a6d3249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    if lst1.filter({ $0 % 2 == 0 }).count ==\
    \ lst1.count {\n        return \"YES\"\n    } else if lst2.filter({ $0 % 2 ==\
    \ 0 }).count > 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpmakvbiv7/tmpmakvbiv7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaadd441c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaadd138b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaadd138988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaadd1377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmakvbiv7                        0x00005624eb2db79f <unavailable> + 6047

    5    libc.so.6                          0x00002aaadd62d460 __libc_start_main +
    245

    6    tmpmakvbiv7                        0x00005624eb2db1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let count1 = lst1.filter({ $0 % 2 == 0\
    \ }).count\n    let count2 = lst2.filter({ $0 % 2 == 0 }).count\n    if lst1.count\
    \ - count1 == lst2.count - count2 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpt3i0r4jn/tmpt3i0r4jn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abccfe38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abccfb2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abccfb2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abccfb2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3i0r4jn                        0x000055e419a9bac7 <unavailable> + 6855

    5    libc.so.6                          0x00002abcd0024460 __libc_start_main +
    245

    6    tmpt3i0r4jn                        0x000055e419a9b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for (idx, item) in lst1.enumerated() {\n        if item % 2 != 0 {\n    \
    \        var idx2 = lst2.firstIndex(where: {$0 % 2 == 0})\n            if idx2\
    \ == nil {\n                return \"NO\"\n            }\n            lst1[idx]\
    \ = lst2[idx2!]\n            lst2[idx2!] = item\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = 0\n    var odds = 0\n    for\
    \ n in lst1 {\n        if n % 2 == 0 {\n            evens += 1\n        } else\
    \ {\n            odds += 1\n        }\n    }\n    for n in lst2 {\n        if\
    \ n % 2 == 0 {\n            evens += 1\n        } else {\n            odds +=\
    \ 1\n        }\n    }\n    return evens >= odds ? \"YES\" : \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    if !lst1.isEmpty && !lst2.isEmpty {\n \
    \       for num in lst1 {\n            if num % 2 != 0 {\n                for\
    \ num in lst2 {\n                    if num % 2 == 0 {\n                     \
    \   return \"YES\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmprjelr5z0/tmprjelr5z0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4feadd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4feaacdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4feaacd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4feaacc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjelr5z0                        0x000055bd341bf84f <unavailable> + 6223

    5    libc.so.6                          0x00002b4feafc2460 __libc_start_main +
    245

    6    tmprjelr5z0                        0x000055bd341bf2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var numberOfEvenNumbersInLst1 = 0\n   \
    \ var numberOfOddNumbersInLst2 = 0\n    for i in lst1 {\n        if i % 2 == 0\
    \ {\n            numberOfEvenNumbersInLst1 += 1\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 != 0 {\n            numberOfOddNumbersInLst2 += 1\n\
    \        }\n    }\n    if numberOfEvenNumbersInLst1 >= numberOfOddNumbersInLst2\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var even: Int = 0\n    var odd: Int = 0\n\
    \    for item in lst1 {\n        if item % 2 == 0 {\n            even += 1\n \
    \       } else {\n            odd += 1\n        }\n    }\n    for item in lst2\
    \ {\n        if item % 2 == 0 {\n            even += 1\n        } else {\n   \
    \         odd += 1\n        }\n    }\n    if even % 2 == 0 && odd % 2 == 0 {\n\
    \        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpfndqz22b/tmpfndqz22b.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5f7bd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5f78cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5f78cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5f78ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfndqz22b                        0x0000555aa360cb17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab5f7dc4460 __libc_start_main +
    245

    6    tmpfndqz22b                        0x0000555aa360c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = 0\n    var odds = 0\n    var\
    \ lst1 = lst1\n    var lst2 = lst2\n    for x in lst1 {\n        if x % 2 == 0\
    \ {\n            evens += 1\n        } else {\n            odds += 1\n       \
    \ }\n    }\n    for y in lst2 {\n        if y % 2 == 0 {\n            odds +=\
    \ 1\n        } else {\n            evens += 1\n        }\n    }\n    if odds ==\
    \ 0 || evens == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpt9hk2ifv/tmpt9hk2ifv.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99cdfd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99cdcccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99cdccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99cdccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9hk2ifv                        0x000055cc77aba67d <unavailable> + 5757

    5    libc.so.6                          0x00002b99ce1c1460 __libc_start_main +
    245

    6    tmpt9hk2ifv                        0x000055cc77aba249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpbib_eab_/tmpbib_eab_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cc250ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cc2201b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cc2201988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cc22007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbib_eab_                        0x00005628a6a0547d <unavailable> + 5245

    5    libc.so.6                          0x00002b5cc26f6460 __libc_start_main +
    245

    6    tmpbib_eab_                        0x00005628a6a05049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    for item in lst1 {\n        if item % 2\
    \ != 0 {\n            if lst2.contains(where: { $0 % 2 == 0 }) {\n           \
    \     continue\n            } else {\n                return \"NO\"\n        \
    \    }\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpfrob6h1c/tmpfrob6h1c.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49102c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b490ffbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b490ffbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b490ffbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrob6h1c                        0x000055b40ae0785f <unavailable> + 6239

    5    libc.so.6                          0x00002b49104b2460 __libc_start_main +
    245

    6    tmpfrob6h1c                        0x000055b40ae072b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let result = lst1.reduce((false, 0)) {\
    \ (acc, curr) in\n        if curr % 2 == 0 {\n            return (acc.0, acc.1\
    \ + 1)\n        } else {\n            return (acc.0, acc.1)\n        }\n    }\n\
    \    if result.1 == lst1.count {\n        return \"YES\"\n    } else {\n     \
    \   let result2 = lst2.reduce((false, 0)) { (acc, curr) in\n            if curr\
    \ % 2 == 0 {\n                return (acc.0, acc.1 + 1)\n            } else {\n\
    \                return (acc.0, acc.1)\n            }\n        }\n        if result2.1\
    \ > result.1 {\n            return \"YES\"\n        } else {\n            return\
    \ \"NO\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvth681o9/tmpvth681o9.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b674b941c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b674b638b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b674b638988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b674b6377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvth681o9                        0x00005648c395a5dd <unavailable> + 5597

    5    libc.so.6                          0x00002b674bb2d460 __libc_start_main +
    245

    6    tmpvth681o9                        0x00005648c395a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // your code here\n    var result = [Int]()\n\
    \    var lst1 = lst1\n    var lst2 = lst2\n    for (index, _) in lst1.enumerated()\
    \ {\n        for (index2, _) in lst2.enumerated() {\n            let a = lst1[index]\
    \ + lst2[index2]\n            result.append(a)\n        }\n    }\n    let evenCount\
    \ = result.filter {$0 % 2 == 0}.count\n    let sum = lst1.count + lst2.count\n\
    \    if evenCount == sum {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpfbrwtyx3/tmpfbrwtyx3.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ad990fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ad9606b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ad9606988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ad96057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfbrwtyx3                        0x000056325d88eabf <unavailable> + 6847

    5    libc.so.6                          0x00002b1ad9afb460 __libc_start_main +
    245

    6    tmpfbrwtyx3                        0x000056325d88e519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n  let isEven = { return $0 % 2 == 0 }\n  let\
    \ lst1EvenCount = lst1.filter(isEven).count\n  let lst2EvenCount = lst2.filter(isEven).count\n\
    \  let lst1OddCount = lst1.count - lst1EvenCount\n  let lst2OddCount = lst2.count\
    \ - lst2EvenCount\n  return lst1EvenCount + lst2OddCount >= lst1.count && lst2EvenCount\
    \ + lst1OddCount >= lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpxqeblxzb/tmpxqeblxzb.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf4ea2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf4e725b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf4e725988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf4e7247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqeblxzb                        0x0000556c61b6aac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aaf4ec1a460 __libc_start_main +
    245

    6    tmpxqeblxzb                        0x0000556c61b6a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let odd1 = lst1.filter { $0 % 2 != 0 }\n\
    \    let odd2 = lst2.filter { $0 % 2 != 0 }\n    return odd1.count % 2 == odd2.count\
    \ % 2 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqh9b2ac2/tmpqh9b2ac2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf14f31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf14c28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf14c28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf14c277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqh9b2ac2                        0x0000555d436a4ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aaf1511d460 __libc_start_main +
    245

    6    tmpqh9b2ac2                        0x0000555d436a41f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       let temp = lst1[i]\n                    lst1[i] = lst2[j]\n          \
    \          lst2[j] = temp\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return lst1.reduce(true, {$0 && $1 % 2 == 0})\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let res = (lst1.map { $0 % 2 == 0 }.reduce(0,\
    \ +) > 0) ||\n              (lst2.map { $0 % 2 == 0 }.reduce(0, +) > 0)\n    return\
    \ res ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpz8_3udip.swift:16:34: error: cannot convert value of type 'Bool'\
    \ to closure result type 'Int'\n    let res = (lst1.map { $0 % 2 == 0 }.reduce(0,\
    \ +) > 0) ||\n                          ~~~~~~~^~~~\n/tmp/tmpz8_3udip.swift:17:34:\
    \ error: cannot convert value of type 'Bool' to closure result type 'Int'\n  \
    \            (lst2.map { $0 % 2 == 0 }.reduce(0, +) > 0)\n                   \
    \       ~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1Odd = [Int]()\n    var lst2Even\
    \ = [Int]()\n    for num in lst1 {\n        if num % 2 != 0 {\n            lst1Odd.append(num)\n\
    \        }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n        \
    \    lst2Even.append(num)\n        }\n    }\n    if lst1Odd.count == lst2Even.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpd3hl5zg3/tmpd3hl5zg3.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9912261c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9911f58b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9911f58988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9911f577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3hl5zg3                        0x000055d886b8c0e6 <unavailable> + 8422

    5    libc.so.6                          0x00002b991244d460 __libc_start_main +
    245

    6    tmpd3hl5zg3                        0x000055d886b8b349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    if lst1.filter({ $0 % 2 == 0 }).count ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    if lst2.filter({ $0 % 2 ==\
    \ 0 }).count == lst2.count {\n        return \"YES\"\n    }\n    if lst1.filter({\
    \ $0 % 2 == 0 }).count + lst2.filter({ $0 % 2 == 0 }).count > 0 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp1fr7dvxn/tmp1fr7dvxn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac32352ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac323221b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac323221988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3232207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fr7dvxn                        0x0000556d7422479f <unavailable> + 6047

    5    libc.so.6                          0x00002ac323716460 __libc_start_main +
    245

    6    tmp1fr7dvxn                        0x0000556d742241f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    for lst1Item in lst1 {\n        if lst1Item\
    \ % 2 != 0 {\n            if lst2.contains(where: { $0 % 2 == 0 }) {\n       \
    \         return \"YES\"\n            }\n        }\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpbtf0z6ry/tmpbtf0z6ry.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d19d34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d19a2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d19a2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d19a2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbtf0z6ry                        0x0000561dbf5c485f <unavailable> + 6239

    5    libc.so.6                          0x00002b7d19f20460 __libc_start_main +
    245

    6    tmpbtf0z6ry                        0x0000561dbf5c42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // Write your code here\n    var result\
    \ = 0\n    for l1 in lst1 {\n        if l1 % 2 != 0 {\n            for l2 in lst2\
    \ {\n                if l2 % 2 == 0 {\n                    result += 1\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result == lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp8dd1b8v3/tmp8dd1b8v3.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed13842c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed13539b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed13539988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed135387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8dd1b8v3                        0x00005589876b96dd <unavailable> + 5853

    5    libc.so.6                          0x00002aed13a2e460 __libc_start_main +
    245

    6    tmp8dd1b8v3                        0x00005589876b92a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in lst1.indices {\n        if lst1[i] % 2 == 1 {\n            for j\
    \ in lst2.indices {\n                if lst2[j] % 2 == 0 {\n                 \
    \   lst1[i] = lst2[j]\n                    lst2[j] = 1\n                    break\n\
    \                }\n            }\n        }\n    }\n    return lst1.contains(where:\
    \ { $0 % 2 == 1 }) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var firstListOddCount = 0\n    var secondListOddCount\
    \ = 0\n    for number in lst1 {\n        if number % 2 != 0 {\n            firstListOddCount\
    \ += 1\n        }\n    }\n    for number in lst2 {\n        if number % 2 != 0\
    \ {\n            secondListOddCount += 1\n        }\n    }\n    return firstListOddCount\
    \ == secondListOddCount ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsv3hf65_/tmpsv3hf65_.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1d85f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1d82e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1d82e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1d82e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsv3hf65_                        0x0000556f3293db17 <unavailable> + 6935

    5    libc.so.6                          0x00002ae1d87dc460 __libc_start_main +
    245

    6    tmpsv3hf65_                        0x0000556f3293d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // Write your code here\n    return \"\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpsoxsw3x3/tmpsoxsw3x3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac87f75ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac87f451b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac87f451988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac87f4507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsoxsw3x3                        0x000056302bca847d <unavailable> + 5245

    5    libc.so.6                          0x00002ac87f946460 __libc_start_main +
    245

    6    tmpsoxsw3x3                        0x000056302bca8049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count ==\
    \ lst1.count || lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp3pkw34w_/tmp3pkw34w_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86466cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86463c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86463c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86463c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pkw34w_                        0x000055c1a452262d <unavailable> + 5677

    5    libc.so.6                          0x00002b86468ba460 __libc_start_main +
    245

    6    tmp3pkw34w_                        0x000055c1a45221f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    if lst1.count != lst2.count {\n        return \"NO\"\n    }\n    if lst1.contains(where:\
    \ { $0 % 2 != 0 }) {\n        for index in 0..<lst1.count {\n            if lst1[index]\
    \ % 2 != 0 {\n                if lst2.contains(where: { $0 % 2 == 0 }) {\n   \
    \                 for lst2Index in 0..<lst2.count {\n                        if\
    \ lst2[lst2Index] % 2 == 0 {\n                            let tmp = lst1[index]\n\
    \                            lst1[index] = lst2[lst2Index]\n                 \
    \           lst2[lst2Index] = tmp\n                            break\n       \
    \                 }\n                    }\n                } else {\n       \
    \             return \"NO\"\n                }\n            }\n        }\n   \
    \ }\n    return lst1.contains(where: { $0 % 2 != 0 }) ? \"NO\" : \"YES\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenOdd = 0\n\n    while lst1.count > 0 {\n        let a = lst1.removeFirst()\n\
    \        if a % 2 == 0 {\n            evenOdd += 1\n        }\n    }\n\n    while\
    \ lst2.count > 0 {\n        let a = lst2.removeFirst()\n        if a % 2 == 0\
    \ {\n            evenOdd -= 1\n        }\n    }\n\n    return evenOdd == 0 ? \"\
    YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvc_ihlok/tmpvc_ihlok.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72ffc76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72ff96db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72ff96d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72ff96c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvc_ihlok                        0x0000556c36cf2aa7 <unavailable> + 6823

    5    libc.so.6                          0x00002b72ffe62460 __libc_start_main +
    245

    6    tmpvc_ihlok                        0x0000556c36cf21d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let oddInLst1 = lst1.filter { $0 % 2 !=\
    \ 0 }\n    let evenInLst2 = lst2.filter { $0 % 2 == 0 }\n    return oddInLst1.count\
    \ == evenInLst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpba_t6rv1/tmpba_t6rv1.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a4ef55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a4ec4cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a4ec4c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a4ec4b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba_t6rv1                        0x000055eb3a230f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8a4f141460 __libc_start_main +
    245

    6    tmpba_t6rv1                        0x000055eb3a2301f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var arr1 = lst1\n    var arr2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < arr1.count || j < arr2.count {\n\
    \        if arr1[i] % 2 != 0 {\n            if arr2[j] % 2 != 0 {\n          \
    \      return \"NO\"\n            } else {\n                let temp = arr1[i]\n\
    \                arr1[i] = arr2[j]\n                arr2[j] = temp\n         \
    \   }\n        }\n        i += 1\n        j += 1\n    }\n    return \"YES\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpyuohc22d/tmpyuohc22d.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afcce25ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afccdf51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afccdf51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afccdf507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyuohc22d                        0x000055e26fef460d <unavailable> + 5645

    5    libc.so.6                          0x00002afcce446460 __libc_start_main +
    245

    6    tmpyuohc22d                        0x000055e26fef41d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpbib_eab_/tmpbib_eab_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5cc250ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cc2201b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5cc2201988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5cc22007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbib_eab_                        0x00005628a6a0547d <unavailable> + 5245

    5    libc.so.6                          0x00002b5cc26f6460 __libc_start_main +
    245

    6    tmpbib_eab_                        0x00005628a6a05049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var even = true\n    var odd = true\n \
    \   var result = \"NO\"\n    for i in lst1 {\n        if i % 2 == 0 {\n      \
    \      even = true\n        } else {\n            even = false\n            break\n\
    \        }\n    }\n    for i in lst2 {\n        if i % 2 == 0 {\n            odd\
    \ = true\n        } else {\n            odd = false\n            break\n     \
    \   }\n    }\n    if odd == true || even == true {\n        result = \"YES\"\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmputemjiff/tmputemjiff.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75838c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75835bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75835bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75835ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmputemjiff                        0x00005594342ec67d <unavailable> + 5757

    5    libc.so.6                          0x00002b7583ab0460 __libc_start_main +
    245

    6    tmputemjiff                        0x00005594342ec249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp0ppv1a86/tmp0ppv1a86.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae06ab77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae06a86eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae06a86e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae06a86d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ppv1a86                        0x000055becf67b47d <unavailable> + 5245

    5    libc.so.6                          0x00002ae06ad63460 __libc_start_main +
    245

    6    tmp0ppv1a86                        0x000055becf67b049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var numbers = lst1 + lst2\n    var result\
    \ = \"YES\"\n    for i in numbers {\n        if i % 2 != 0 {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpdz4ngcjs/tmpdz4ngcjs.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8ee083c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8edd7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8edd7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8edd797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdz4ngcjs                        0x000055a6ab90b6dd <unavailable> + 5853

    5    libc.so.6                          0x00002ad8ee26f460 __libc_start_main +
    245

    6    tmpdz4ngcjs                        0x000055a6ab90b2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    if (lst1.filter { $0 % 2 == 0 }.count ==\
    \ lst1.count ||\n        lst2.filter { $0 % 2 == 0 }.count == lst2.count) {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp06797ion/tmp06797ion.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad95e1f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad95deeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad95deee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad95deed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp06797ion                        0x0000556cd0b0962d <unavailable> + 5677

    5    libc.so.6                          0x00002ad95e3e3460 __libc_start_main +
    245

    6    tmp06797ion                        0x0000556cd0b091f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1odds = lst1.filter { $0 % 2 !=\
    \ 0 }\n    let lst2evens = lst2.filter { $0 % 2 == 0 }\n    if lst1odds.count\
    \ == lst2evens.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmphrvtoaek/tmphrvtoaek.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3fb4a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3fb19cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3fb19c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3fb19b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphrvtoaek                        0x0000558b265bff96 <unavailable> + 8086

    5    libc.so.6                          0x00002ab3fb691460 __libc_start_main +
    245

    6    tmphrvtoaek                        0x0000558b265bf1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    if lst1.filter { $0 % 2 == 0 }.count !=\
    \ lst1.count &&\n        lst2.filter { $0 % 2 == 0 }.count != lst2.count {\n \
    \       return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp5mr8dh8e/tmp5mr8dh8e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b647ef1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b647ec15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b647ec15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b647ec147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5mr8dh8e                        0x0000558b9d97e62d <unavailable> + 5677

    5    libc.so.6                          0x00002b647f10a460 __libc_start_main +
    245

    6    tmp5mr8dh8e                        0x0000558b9d97e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n  var count = 0\n  for item in lst1 {\n   \
    \ if item % 2 != 0 {\n      count += 1\n    }\n  }\n  for item in lst2 {\n   \
    \ if item % 2 != 0 {\n      count -= 1\n    }\n  }\n  return count == 0 ? \"YES\"\
    \ : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmptdnxe2x9/tmptdnxe2x9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b562f5e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b562f2dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b562f2df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b562f2de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptdnxe2x9                        0x000055922722db17 <unavailable> + 6935

    5    libc.so.6                          0x00002b562f7d4460 __libc_start_main +
    245

    6    tmptdnxe2x9                        0x000055922722d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    let evens = even(array: lst1 + lst2)\n    lst1 = lst1.filter { !evens.contains($0)\
    \ }\n    lst2 = lst2.filter { !evens.contains($0) }\n    for e in lst1 {\n   \
    \     if let i = lst2.firstIndex(where: { $0 % 2 != 0 }) {\n            lst2.remove(at:\
    \ i)\n        } else {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmp0gp0txfo.swift:18:17: error: cannot find 'even' in scope\n    let\
    \ evens = even(array: lst1 + lst2)\n                ^~~~\n"
  stdout: ''
  timestamp: 1659979370
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    if lst1.reduce(true, {$0 && $1.isEven})\
    \ {\n        return \"YES\"\n    }\n    if lst2.reduce(true, {$0 && $1.isEven})\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        for\
    \ j in 0..<lst2.count {\n            if lst1[i].isEven && lst2[j].isOdd {\n  \
    \              return \"YES\"\n            }\n        }\n    }\n    return \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpr3j7rozq.swift:16:36: error: value of type 'Int' has no member\
    \ 'isEven'\n    if lst1.reduce(true, {$0 && $1.isEven}) {\n                  \
    \              ~~ ^~~~~~\n/tmp/tmpr3j7rozq.swift:19:36: error: value of type 'Int'\
    \ has no member 'isEven'\n    if lst2.reduce(true, {$0 && $1.isEven}) {\n    \
    \                            ~~ ^~~~~~\n/tmp/tmpr3j7rozq.swift:24:24: error: value\
    \ of type 'Int' has no member 'isEven'\n            if lst1[i].isEven && lst2[j].isOdd\
    \ {\n               ~~~~~~~ ^~~~~~\n/tmp/tmpr3j7rozq.swift:24:42: error: value\
    \ of type 'Int' has no member 'isOdd'\n            if lst1[i].isEven && lst2[j].isOdd\
    \ {\n                                 ~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let isOdd = { $0 % 2 != 0 }\n    let isEven\
    \ = { $0 % 2 == 0 }\n    let lst1OddCount = lst1.filter(isOdd).count\n    let\
    \ lst2EvenCount = lst2.filter(isEven).count\n    return lst1OddCount <= lst2EvenCount\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evenOdd = Set<Int>()\n    var oddEven\
    \ = Set<Int>()\n    for (index, element) in lst1.enumerated() {\n        if element\
    \ % 2 == 0 {\n            evenOdd.insert(lst2[index])\n        } else {\n    \
    \        oddEven.insert(lst2[index])\n        }\n    }\n    if oddEven.count ==\
    \ 0 || evenOdd.count == 0 {\n        return \"YES\"\n    }\n    for element in\
    \ oddEven {\n        if evenOdd.contains(element) {\n            return \"YES\"\
    \n        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp6i_ep3d8/tmp6i_ep3d8.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57a0222c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b579ff19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b579ff19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b579ff187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6i_ep3d8                        0x000055b946b84a7d <unavailable> + 6781

    5    libc.so.6                          0x00002b57a040e460 __libc_start_main +
    245

    6    tmp6i_ep3d8                        0x000055b946b84649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1OddIdx = lst1.indices.filter {\
    \ lst1[$0] % 2 != 0 }\n    let lst2EvenIdx = lst2.indices.filter { lst2[$0] %\
    \ 2 == 0 }\n    return lst1OddIdx.count == lst2EvenIdx.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpwygj_9w4/tmpwygj_9w4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aba22dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ab9f24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ab9f24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ab9f237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwygj_9w4                        0x0000557b4bc9b0e6 <unavailable> + 8422

    5    libc.so.6                          0x00002b7aba419460 __libc_start_main +
    245

    6    tmpwygj_9w4                        0x0000557b4bc9a349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // YOUR CODE HERE\n    return \"YOUR ANSWER\
    \ HERE\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5l3usjf3/tmp5l3usjf3.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e25e96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e25b8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e25b8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e25b8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5l3usjf3                        0x0000565547d0847d <unavailable> + 5245

    5    libc.so.6                          0x00002b1e26082460 __libc_start_main +
    245

    6    tmp5l3usjf3                        0x0000565547d08049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    /// Write your solution here.\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp9g5iuwvl/tmp9g5iuwvl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fc0934c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fc062bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fc062b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fc062a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9g5iuwvl                        0x000055e4115e747d <unavailable> + 5245

    5    libc.so.6                          0x00002b9fc0b20460 __libc_start_main +
    245

    6    tmp9g5iuwvl                        0x000055e4115e7049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = (lst1 + lst2).filter { $0 %\
    \ 2 == 0 }\n    return evens.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    for i in lst1 {\n        if i % 2 != 0\
    \ {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp288lgyri/tmp288lgyri.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c3b115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c3ae0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c3ae0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c3ae0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp288lgyri                        0x000055e831f7767d <unavailable> + 5757

    5    libc.so.6                          0x00002b8c3b301460 __libc_start_main +
    245

    6    tmp288lgyri                        0x000055e831f77249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    lst1.sort()\n    lst2.sort()\n    var i = 0\n    var j = 0\n    while i <\
    \ lst1.count && j < lst2.count {\n        if lst1[i] % 2 == 0 {\n            i\
    \ += 1\n        } else if lst2[j] % 2 == 0 {\n            var temp = lst1[i]\n\
    \            lst1[i] = lst2[j]\n            lst2[j] = temp\n            i += 1\n\
    \            j += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979370
- exit_code: -1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var one = lst1\n    var two = lst2\n  \
    \  if one.filter({$0 % 2 == 0}).count != one.count {\n        var end = false\n\
    \        while end == false {\n            for i in 0..<one.count {\n        \
    \        if one[i] % 2 != 0 {\n                    for j in 0..<two.count {\n\
    \                        if two[j] % 2 == 0 {\n                            let\
    \ temp = one[i]\n                            one[i] = two[j]\n               \
    \             two[j] = temp\n                            break\n             \
    \           }\n                    }\n                }\n            }\n     \
    \       if one.filter({$0 % 2 == 0}).count == one.count {\n                end\
    \ = true\n            }\n        }\n    }\n    if one.filter({$0 % 2 == 0}).count\
    \ == one.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979375
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let even1 = lst1.filter { $0 % 2 == 0 }\n\
    \    let odd1 = lst1.filter { $0 % 2 != 0 }\n    let even2 = lst2.filter { $0\
    \ % 2 == 0 }\n    let odd2 = lst2.filter { $0 % 2 != 0 }\n    if odd1.count ==\
    \ odd2.count && even1.count == even2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvxjjv1gk/tmpvxjjv1gk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2e0936c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2e062db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2e062d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2e062c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxjjv1gk                        0x00005581e5dedac7 <unavailable> + 6855

    5    libc.so.6                          0x00002ba2e0b22460 __libc_start_main +
    245

    6    tmpvxjjv1gk                        0x00005581e5ded1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var lst1EvenCount = 0\n    var lst2EvenCount = 0\n    var lst1OddCount =\
    \ 0\n    var lst2OddCount = 0\n    var swapped = false\n    \n    for num in lst1\
    \ {\n        if num % 2 == 0 {\n            lst1EvenCount += 1\n        } else\
    \ {\n            lst1OddCount += 1\n        }\n    }\n    \n    for num in lst2\
    \ {\n        if num % 2 == 0 {\n            lst2EvenCount += 1\n        } else\
    \ {\n            lst2OddCount += 1\n        }\n    }\n    \n    if lst1EvenCount\
    \ == lst1.count || lst2EvenCount == lst2.count {\n        return \"YES\"\n   \
    \ }\n    \n    if lst1OddCount == lst1.count || lst2OddCount == lst2.count {\n\
    \        return \"NO\"\n    }\n    \n    for (index, num) in lst1.enumerated()\
    \ {\n        if num % 2 != 0 {\n            if lst2[index] % 2 == 0 {\n      \
    \          lst1[index] = lst2[index]\n                swapped = true\n       \
    \     }\n        }\n    }\n    \n    for (index, num) in lst2.enumerated() {\n\
    \        if num % 2 != 0 {\n            if lst1[index] % 2 == 0 {\n          \
    \      lst2[index] = lst1[index]\n                swapped = true\n           \
    \ }\n        }\n    }\n    \n    if swapped {\n        return \"YES\"\n    } else\
    \ {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpie1c7h1c/tmpie1c7h1c.swift:86: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ec3b46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ec383db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ec383d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ec383c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpie1c7h1c                        0x00005635cecf099d <unavailable> + 6557

    5    libc.so.6                          0x00002b5ec3d32460 __libc_start_main +
    245

    6    tmpie1c7h1c                        0x00005635cecf0569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evenNumsLst1 = lst1.filter { $0 % 2\
    \ == 0 }\n    let evenNumsLst2 = lst2.filter { $0 % 2 == 0 }\n    return evenNumsLst1.count\
    \ + evenNumsLst2.count >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    if lst1.allSatisfy({ $0 % 2 == 0 }) {\n        return \"YES\"\n    }\n  \
    \  for i in 0..<lst1.count {\n        for j in 0..<lst2.count {\n            var\
    \ x = lst1[i]\n            var y = lst2[j]\n            if x % 2 != 0 && y % 2\
    \ == 0 {\n                lst1[i] = y\n                lst2[j] = x\n         \
    \       if lst1.allSatisfy({ $0 % 2 == 0 }) {\n                    return \"YES\"\
    \n                }\n            }\n        }\n    }\n    return \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // Your code here\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpmfcmqkkj/tmpmfcmqkkj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac46aa01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac46a6f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac46a6f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac46a6f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfcmqkkj                        0x0000558aab16247d <unavailable> + 5245

    5    libc.so.6                          0x00002ac46abed460 __libc_start_main +
    245

    6    tmpmfcmqkkj                        0x0000558aab162049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var evenLst1 = lst1.filter { $0 % 2 == 0 }\n    var evenLst2 = lst2.filter\
    \ { $0 % 2 == 0 }\n    var oddLst1 = lst1.filter { $0 % 2 != 0 }\n    var oddLst2\
    \ = lst2.filter { $0 % 2 != 0 }\n    if oddLst1.count == oddLst2.count {\n   \
    \     return \"YES\"\n    } else if oddLst1.count > oddLst2.count {\n        for\
    \ i in 0..<oddLst1.count - oddLst2.count {\n            if evenLst2.count > 0\
    \ {\n                evenLst2.remove(at: 0)\n            } else {\n          \
    \      return \"NO\"\n            }\n        }\n    } else {\n        for i in\
    \ 0..<oddLst2.count - oddLst1.count {\n            if evenLst1.count > 0 {\n \
    \               evenLst1.remove(at: 0)\n            } else {\n               \
    \ return \"NO\"\n            }\n        }\n    }\n    return \"YES\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqcwlxagm/tmpqcwlxagm.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca15d27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca15a1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca15a1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca15a1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqcwlxagm                        0x0000564c3b3158ef <unavailable> + 6383

    5    libc.so.6                          0x00002aca15f13460 __libc_start_main +
    245

    6    tmpqcwlxagm                        0x0000564c3b315349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // return \"NO\"\n    let lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    let lst2Even = lst2.filter { $0 % 2 == 0 }\n    let lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    let totalEven = lst1Even.count + lst2Even.count\n    let totalOdd = lst1Odd.count\
    \ + lst2Odd.count\n    if totalEven > totalOdd {\n        return \"YES\"\n   \
    \ } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpi4sou1o5/tmpi4sou1o5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b113cfeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b113cce5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b113cce5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b113cce47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4sou1o5                        0x000055943496b62d <unavailable> + 5677

    5    libc.so.6                          0x00002b113d1da460 __libc_start_main +
    245

    6    tmpi4sou1o5                        0x000055943496b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var flag = false\n    for e1 in lst1 {\n\
    \        for e2 in lst2 {\n            let value = e1 - e2\n            if (value\
    \ % 2 != 0) {\n                flag = true\n                break\n          \
    \  }\n        }\n    }\n    return flag ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpbxj_h5w7/tmpbxj_h5w7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e80375c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e8006cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e8006c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e8006b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxj_h5w7                        0x000055c8da0d867d <unavailable> + 5757

    5    libc.so.6                          0x00002b2e80561460 __libc_start_main +
    245

    6    tmpbxj_h5w7                        0x000055c8da0d8249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var even = [Int]()\n    var odd = [Int]()\n\
    \    for i in lst1 {\n        if i % 2 == 0 {\n            even.append(i)\n  \
    \      } else {\n            odd.append(i)\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            even.append(i)\n        } else {\n \
    \           odd.append(i)\n        }\n    }\n    return (even.count > odd.count)\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzc1fux9_/tmpzc1fux9_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6be3c58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6be394fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6be394f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6be394e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzc1fux9_                        0x000056151efd777d <unavailable> + 6013

    5    libc.so.6                          0x00002b6be3e44460 __libc_start_main +
    245

    6    tmpzc1fux9_                        0x000056151efd7349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evenCount = 0\n    for num in lst1\
    \ {\n        if num % 2 == 0 {\n            evenCount += 1\n        }\n    }\n\
    \    for num in lst2 {\n        if num % 2 == 0 {\n            evenCount -= 1\n\
    \        }\n    }\n    return evenCount <= 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmphgooqtc4/tmphgooqtc4.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0dc1e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0dbedab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0dbeda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0dbed97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgooqtc4                        0x000055e9c73b9ca3 <unavailable> + 7331

    5    libc.so.6                          0x00002ac0dc3cf460 __libc_start_main +
    245

    6    tmphgooqtc4                        0x000055e9c73b9249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = [Int]()\n    var odds = [Int]()\n\
    \    for n in lst1 {\n        if n % 2 == 0 {\n            evens.append(n)\n \
    \       } else {\n            odds.append(n)\n        }\n    }\n    for n in lst2\
    \ {\n        if n % 2 == 0 {\n            evens.append(n)\n        } else {\n\
    \            odds.append(n)\n        }\n    }\n    if odds.count % 2 == 0 {\n\
    \        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpjrvd67h9/tmpjrvd67h9.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba838a00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8386f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8386f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8386f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjrvd67h9                        0x00005599a4388c17 <unavailable> + 7191

    5    libc.so.6                          0x00002ba838bec460 __libc_start_main +
    245

    6    tmpjrvd67h9                        0x00005599a4388349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    if !lst1.contains(where: { $0 % 2 != 0\
    \ }) {\n        return \"YES\"\n    } else if lst1.contains(where: { $0 % 2 !=\
    \ 0 }) && !lst2.contains(where: { $0 % 2 != 0 }) {\n        return \"NO\"\n  \
    \  } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpnld3ptnr/tmpnld3ptnr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaeb372c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaeb069b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaeb069988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaeb0687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnld3ptnr                        0x00005604a06c36ef <unavailable> + 5871

    5    libc.so.6                          0x00002aaaeb55e460 __libc_start_main +
    245

    6    tmpnld3ptnr                        0x00005604a06c3149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var index1 = 0\n    var index2 = 0\n  \
    \  var evenNumbersArray: [Int] = []\n    var oddNumbersArray: [Int] = []\n   \
    \ while index1 < lst1.count {\n        if lst1[index1] % 2 == 0 {\n          \
    \  evenNumbersArray.append(lst1[index1])\n        } else {\n            oddNumbersArray.append(lst1[index1])\n\
    \        }\n        index1 += 1\n    }\n    while index2 < lst2.count {\n    \
    \    if lst2[index2] % 2 == 0 {\n            evenNumbersArray.append(lst2[index2])\n\
    \        } else {\n            oddNumbersArray.append(lst2[index2])\n        }\n\
    \        index2 += 1\n    }\n    if oddNumbersArray.count < evenNumbersArray.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp_bcjrwev/tmp_bcjrwev.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9dd0574c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9dd026bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9dd026b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9dd026a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_bcjrwev                        0x000055a708e8e61d <unavailable> + 5661

    5    libc.so.6                          0x00002b9dd0760460 __libc_start_main +
    245

    6    tmp_bcjrwev                        0x000055a708e8e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return lst1.reduce(0, +) % 2 == lst2.reduce(0,\
    \ +) % 2 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmppqe7n5u0/tmppqe7n5u0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4aebdfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4aebaf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4aebaf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4aebaf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppqe7n5u0                        0x00005595649eaa27 <unavailable> + 6695

    5    libc.so.6                          0x00002b4aebfea460 __libc_start_main +
    245

    6    tmppqe7n5u0                        0x00005595649ea159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5gzdl2_s/tmp5gzdl2_s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b957757fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9577276b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9577276988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95772757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5gzdl2_s                        0x000055cdd9a8579f <unavailable> + 6047

    5    libc.so.6                          0x00002b957776b460 __libc_start_main +
    245

    6    tmp5gzdl2_s                        0x000055cdd9a851f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let arraySum = lst1.reduce(0, +) + lst2.reduce(0,\
    \ +)\n    return arraySum % 2 == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp_iorztry/tmp_iorztry.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac83237bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac832072b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac832072988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8320717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_iorztry                        0x000055bb8f8b0a27 <unavailable> + 6695

    5    libc.so.6                          0x00002ac832567460 __libc_start_main +
    245

    6    tmp_iorztry                        0x000055bb8f8b0159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { (number) -> Bool\
    \ in\n        return number % 2 == 0\n    }\n    let odds = lst2.filter { (number)\
    \ -> Bool in\n        return number % 2 != 0\n    }\n    if evens.count + odds.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    }\n    return \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmphszrgdww/tmphszrgdww.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31be570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31be267b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31be267988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31be2667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphszrgdww                        0x000055df8007262d <unavailable> + 5677

    5    libc.so.6                          0x00002b31be75c460 __libc_start_main +
    245

    6    tmphszrgdww                        0x000055df800721f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evenLst1 = lst1.filter {$0 % 2 == 0}\n\
    \    let evenLst2 = lst2.filter {$0 % 2 == 0}\n    return evenLst1.count + evenLst2.count\
    \ >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var checkedList1 = [Int](), checkedList2\
    \ = [Int]()\n    var isChanged = false\n    for item in lst1 {\n        if item\
    \ % 2 == 0 {\n            checkedList1.append(item)\n        } else {\n      \
    \      if !lst2.contains(item) {\n                checkedList1.append(item)\n\
    \            } else {\n                isChanged = true\n            }\n     \
    \   }\n    }\n    for item in lst2 {\n        if item % 2 == 0 {\n           \
    \ checkedList2.append(item)\n        } else {\n            if !lst1.contains(item)\
    \ {\n                checkedList2.append(item)\n            } else {\n       \
    \         isChanged = true\n            }\n        }\n    }\n    if isChanged\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpjl47loqh/tmpjl47loqh.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8119d6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8119a66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8119a66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8119a657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjl47loqh                        0x0000555e173178ff <unavailable> + 6399

    5    libc.so.6                          0x00002b8119f5b460 __libc_start_main +
    245

    6    tmpjl47loqh                        0x0000555e17317359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evenNumbersArray = lst1.filter { $0\
    \ % 2 == 0 }\n    let oddNumbersArray = lst2.filter { $0 % 2 != 0 }\n    return\
    \ (evenNumbersArray.count + oddNumbersArray.count) == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsg6w5qb4/tmpsg6w5qb4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a85746c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a8543db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a8543d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a8543c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsg6w5qb4                        0x000055b87415462d <unavailable> + 5677

    5    libc.so.6                          0x00002b8a85932460 __libc_start_main +
    245

    6    tmpsg6w5qb4                        0x000055b8741541f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var array1 = lst1\n    var array2 = lst2\n\
    \    var swapNeeded = true\n    while swapNeeded {\n        swapNeeded = false\n\
    \        for i in 0..<array1.count {\n            for j in 0..<array2.count {\n\
    \                if array1[i] % 2 != 0 && array2[j] % 2 == 0 {\n             \
    \       let temp = array1[i]\n                    array1[i] = array2[j]\n    \
    \                array2[j] = temp\n                    swapNeeded = true\n   \
    \             }\n            }\n        }\n    }\n    for num in array1 {\n  \
    \      if num % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1odd = lst1.filter { $0 % 2 != 0\
    \ }\n    let lst2even = lst2.filter { $0 % 2 == 0 }\n    return lst1odd.count\
    \ == lst2even.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpny9cjnqy/tmpny9cjnqy.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eb6cfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eb69f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7eb69f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7eb69f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpny9cjnqy                        0x000055f78afa9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b7eb6ee6460 __libc_start_main +
    245

    6    tmpny9cjnqy                        0x000055f78afa91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let odd1 = lst1.filter { $0 % 2 != 0 }\n\
    \    let odd2 = lst2.filter { $0 % 2 != 0 }\n    return odd1.count % 2 == odd2.count\
    \ % 2 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqh9b2ac2/tmpqh9b2ac2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf14f31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf14c28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf14c28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf14c277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqh9b2ac2                        0x0000555d436a4ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aaf1511d460 __libc_start_main +
    245

    6    tmpqh9b2ac2                        0x0000555d436a41f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let isEven1 = lst1.map { $0 % 2 == 0 }\n\
    \    let isEven2 = lst2.map { $0 % 2 == 0 }\n    if isEven1.contains(false) {\n\
    \        return isEven2.contains(true) ? \"YES\" : \"NO\"\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsz18yymj/tmpsz18yymj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24fdedac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24fdbd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24fdbd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24fdbd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsz18yymj                        0x00005558dee4a80f <unavailable> + 6159

    5    libc.so.6                          0x00002b24fe0c6460 __libc_start_main +
    245

    6    tmpsz18yymj                        0x00005558dee4a269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    return evens.count + odds.count\
    \ >= lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5gzdl2_s/tmp5gzdl2_s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b957757fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9577276b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9577276988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95772757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5gzdl2_s                        0x000055cdd9a8579f <unavailable> + 6047

    5    libc.so.6                          0x00002b957776b460 __libc_start_main +
    245

    6    tmp5gzdl2_s                        0x000055cdd9a851f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979368
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evenNumbersInLst1 = lst1.filter { $0\
    \ % 2 == 0 }\n    var evenNumbersInLst2 = lst2.filter { $0 % 2 == 0 }\n    var\
    \ oddNumbersInLst1 = lst1.filter { $0 % 2 != 0 }\n    var oddNumbersInLst2 = lst2.filter\
    \ { $0 % 2 != 0 }\n    var diff = abs(evenNumbersInLst1.count - oddNumbersInLst2.count)\n\
    \    for _ in 0..<diff {\n        if evenNumbersInLst1.count > oddNumbersInLst2.count\
    \ {\n            evenNumbersInLst1.removeLast()\n        } else {\n          \
    \  oddNumbersInLst2.removeLast()\n        }\n    }\n    diff = abs(evenNumbersInLst2.count\
    \ - oddNumbersInLst1.count)\n    for _ in 0..<diff {\n        if evenNumbersInLst2.count\
    \ > oddNumbersInLst1.count {\n            evenNumbersInLst2.removeLast()\n   \
    \     } else {\n            oddNumbersInLst1.removeLast()\n        }\n    }\n\
    \    if evenNumbersInLst1.count == oddNumbersInLst2.count &&\n        evenNumbersInLst2.count\
    \ == oddNumbersInLst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpot5bsryt/tmpot5bsryt.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11af3d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11af0cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11af0cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11af0cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpot5bsryt                        0x00005609eb748a6f <unavailable> + 6767

    5    libc.so.6                          0x00002b11af5c2460 __libc_start_main +
    245

    6    tmpot5bsryt                        0x00005609eb7484c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evenLst1 = lst1.filter { $0 % 2 ==\
    \ 0 }\n    let oddLst1 = lst1.filter { $0 % 2 != 0 }\n    let evenLst2 = lst2.filter\
    \ { $0 % 2 == 0 }\n    let oddLst2 = lst2.filter { $0 % 2 != 0 }\n    let totalLst2\
    \ = evenLst2.count + oddLst2.count\n    let totalLst1 = evenLst1.count + oddLst1.count\n\
    \    if totalLst1 == 0 {\n        return \"YES\"\n    } else if totalLst2 == 0\
    \ {\n        return \"NO\"\n    } else if totalLst1 > totalLst2 {\n        return\
    \ \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpj16xzml6/tmpj16xzml6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ef8e29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ef8b20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ef8b20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ef8b1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj16xzml6                        0x000055f87394f79f <unavailable> + 6047

    5    libc.so.6                          0x00002b7ef9015460 __libc_start_main +
    245

    6    tmpj16xzml6                        0x000055f87394f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // YOUR CODE HERE\n    return \"NOT IMPLEMENTED\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpns0cmt8s/tmpns0cmt8s.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab31987cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab319573b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab319573988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3195727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpns0cmt8s                        0x000055ab55f9147d <unavailable> + 5245

    5    libc.so.6                          0x00002ab319a68460 __libc_start_main +
    245

    6    tmpns0cmt8s                        0x000055ab55f91049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return isEven(arr: lst1) ? \"YES\" : \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpupklu4kr.swift:16:12: error: cannot find 'isEven' in scope\n  \
    \  return isEven(arr: lst1) ? \"YES\" : \"NO\"\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let firstList = lst1.filter{ $0 % 2 !=\
    \ 0 }\n    let secondList = lst2.filter{ $0 % 2 != 0 }\n    if firstList.count\
    \ == secondList.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpc4u1bm14/tmpc4u1bm14.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6cc729c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6cc420b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6cc420988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6cc41f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc4u1bm14                        0x000055a3f0097ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002ad6cc915460 __libc_start_main +
    245

    6    tmpc4u1bm14                        0x000055a3f00971f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    /// Write your solution here\n    var lst1odd\
    \ = 0\n    var lst2odd = 0\n    for num in lst1 {\n        if num % 2 != 0 {\n\
    \            lst1odd += 1\n        }\n    }\n    for num in lst2 {\n        if\
    \ num % 2 != 0 {\n            lst2odd += 1\n        }\n    }\n    if lst1odd ==\
    \ lst2odd {\n        return \"YES\"\n    } else {\n        return \"NO\"\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp_ka6a7af/tmp_ka6a7af.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09c5ae7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09c57deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09c57de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09c57dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ka6a7af                        0x000055e92d125b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b09c5cd3460 __libc_start_main +
    245

    6    tmp_ka6a7af                        0x000055e92d125249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst1 = lst1.filter { $0 % 2 != 0 }\n\
    \    let lst2 = lst2.filter { $0 % 2 == 0 }\n    return lst1.count == lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp3krh3nba/tmp3krh3nba.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1beb90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1beb601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1beb601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1beb6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3krh3nba                        0x00005649ded78f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b1bebaf6460 __libc_start_main +
    245

    6    tmp3krh3nba                        0x00005649ded781f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // your code here\n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpf1d0ldc6/tmpf1d0ldc6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b2d2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b2cfe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b2cfe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b2cfe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf1d0ldc6                        0x00005635bab0947d <unavailable> + 5245

    5    libc.so.6                          0x00002b7b2d4db460 __libc_start_main +
    245

    6    tmpf1d0ldc6                        0x00005635bab09049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659979369
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evens = lst1.filter { $0 % 2 == 0 }\n\
    \    let odds = lst2.filter { $0 % 2 != 0 }\n    if evens.count == lst1.count\
    \ || odds.count == lst2.count {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpq54jg41p/tmpq54jg41p.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacaf4c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacaf1bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacaf1bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacaf1be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq54jg41p                        0x000055dda2f9262d <unavailable> + 5677

    5    libc.so.6                          0x00002aacaf6b4460 __libc_start_main +
    245

    6    tmpq54jg41p                        0x000055dda2f921f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var evens = [Int]()\n    var odds = [Int]()\n\
    \    for num in lst1 {\n        if num % 2 == 0 {\n            evens.append(num)\n\
    \        } else {\n            odds.append(num)\n        }\n    }\n    for num\
    \ in lst2 {\n        if num % 2 == 0 {\n            evens.append(num)\n      \
    \  } else {\n            odds.append(num)\n        }\n    }\n    if odds.count\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpy16pzuhe/tmpy16pzuhe.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57f7723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57f741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57f741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57f74197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy16pzuhe                        0x0000563e87083c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b57f790f460 __libc_start_main +
    245

    6    tmpy16pzuhe                        0x0000563e87083349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var count1 = 0\n    var count2 = 0\n  \
    \  for num in lst1 {\n        if num % 2 == 0 {\n            count1 += 1\n   \
    \     }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n           \
    \ count2 += 1\n        }\n    }\n    if count1 > count2 {\n        return \"YES\"\
    \n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp57grak6z/tmp57grak6z.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e76eefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e76be6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e76be6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e76be57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57grak6z                        0x000055e3c42f467d <unavailable> + 5757

    5    libc.so.6                          0x00002b0e770db460 __libc_start_main +
    245

    6    tmp57grak6z                        0x000055e3c42f4249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let isEven = { (n: Int) -> Bool in n %\
    \ 2 == 0 }\n    let isNotEven = { (n: Int) -> Bool in n % 2 != 0 }\n    let areAllEven\
    \ = { (lst: [Int]) -> Bool in lst.map(isEven).reduce(true, { $0 && $1 }) }\n \
    \   let areAnyNotEven = { (lst: [Int]) -> Bool in lst.map(isNotEven).reduce(false,\
    \ { $0 || $1 }) }\n    return areAllEven(lst1) || areAllEven(lst2) || (areAnyNotEven(lst1)\
    \ && areAnyNotEven(lst2)) ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpfsec0m4r/tmpfsec0m4r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1dad85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1daa7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1daa7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1daa7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsec0m4r                        0x000055929cffb8ef <unavailable> + 6383

    5    libc.so.6                          0x00002af1daf71460 __libc_start_main +
    245

    6    tmpfsec0m4r                        0x000055929cffb349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979370
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var firstArr = lst1\n    var secondArr\
    \ = lst2\n    var i = 0\n    while(i < firstArr.count) {\n        if(firstArr[i]\
    \ % 2 != 0) {\n            var j = 0\n            while(j < secondArr.count) {\n\
    \                if(secondArr[j] % 2 == 0) {\n                    firstArr[i]\
    \ = secondArr[j]\n                    secondArr[j] = firstArr[i]\n           \
    \         break\n                }\n                j += 1\n            }\n  \
    \      }\n        i += 1\n    }\n    var odd = false\n    for k in firstArr {\n\
    \        if(k % 2 != 0) {\n            odd = true\n        }\n    }\n    if(odd)\
    \ {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmph6pw5l87/tmph6pw5l87.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30967ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30964f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30964f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30964f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6pw5l87                        0x000055c5025798ef <unavailable> + 6383

    5    libc.so.6                          0x00002b30969eb460 __libc_start_main +
    245

    6    tmph6pw5l87                        0x000055c502579349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let set1 = Set(lst1)\n    let set2 = Set(lst2)\n\
    \    var sum = 0\n    if set1.isDisjoint(with: set2) {\n        return \"NO\"\n\
    \    }\n    for n in set1 {\n        if n % 2 == 0 {\n            sum += 1\n \
    \       }\n    }\n    if sum == set1.count {\n        return \"YES\"\n    }\n\
    \    for n in set2 {\n        if n % 2 == 0 {\n            sum += 1\n        }\n\
    \    }\n    if sum == set1.count + set2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp3goq550f/tmp3goq550f.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae126ad6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1267cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1267cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1267cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3goq550f                        0x000055b6b533a7dd <unavailable> + 6109

    5    libc.so.6                          0x00002ae126cc2460 __libc_start_main +
    245

    6    tmp3goq550f                        0x000055b6b533a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    return lst1.allSatisfy { $0 % 2 == 0 }\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpdkij9e1p/tmpdkij9e1p.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dc13e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dc10dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dc10da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dc10d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkij9e1p                        0x0000560d753c057d <unavailable> + 5501

    5    libc.so.6                          0x00002b2dc15cf460 __libc_start_main +
    245

    6    tmpdkij9e1p                        0x0000560d753c0149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let lst3 = lst1.filter { $0 % 2 == 0 }\n\
    \    let lst4 = lst2.filter { $0 % 2 == 0 }\n    return lst3.count == lst1.count\
    \ || lst4.count == lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpv8g7rcz6/tmpv8g7rcz6.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7678553c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b767824ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b767824a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76782497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv8g7rcz6                        0x000055ab1819f62d <unavailable> + 5677

    5    libc.so.6                          0x00002b767873f460 __libc_start_main +
    245

    6    tmpv8g7rcz6                        0x000055ab1819f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var oddNumbersLst1 = lst1.filter({ $0 %\
    \ 2 != 0})\n    var evenNumbersLst2 = lst2.filter({ $0 % 2 == 0})\n    var lst1\
    \ = lst1\n    var lst2 = lst2\n    for oddNumber in oddNumbersLst1 {\n       \
    \ for (index, evenNumber) in evenNumbersLst2.enumerated() {\n            if oddNumber\
    \ > evenNumber {\n                continue\n            }\n            if oddNumber\
    \ < evenNumber {\n                lst1[lst1.index(of: oddNumber)!] = evenNumber\n\
    \                lst2[lst2.index(of: evenNumber)!] = oddNumber\n             \
    \   oddNumbersLst1.remove(at: oddNumbersLst1.index(of: oddNumber)!)\n        \
    \        evenNumbersLst2.remove(at: index)\n                break\n          \
    \  }\n        }\n    }\n    if lst1.filter({ $0 % 2 != 0}).count == 0 {\n    \
    \    return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpqc6xaeyt/tmpqc6xaeyt.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b7816fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b77e66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b77e66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b77e657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqc6xaeyt                        0x0000557cc625af67 <unavailable> + 8039

    5    libc.so.6                          0x00002b8b7835b460 __libc_start_main +
    245

    6    tmpqc6xaeyt                        0x0000557cc625a699 <unavailable> + 5785

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let setLst1 = Set(lst1)\n    let setLst2\
    \ = Set(lst2)\n    let lst1Even = setLst1.filter { $0 % 2 == 0 }\n    let lst2Even\
    \ = setLst2.filter { $0 % 2 == 0 }\n    if lst1Even.count == setLst1.count {\n\
    \        return \"YES\"\n    } else if lst2Even.count == setLst2.count {\n   \
    \     return \"YES\"\n    } else if lst1Even.count != setLst1.count && lst2Even.count\
    \ != setLst2.count {\n        return \"NO\"\n    } else {\n        return \"YES\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpaf2hkek9/tmpaf2hkek9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b56e56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b56b4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b56b4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b56b4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaf2hkek9                        0x00005611eba3866d <unavailable> + 5741

    5    libc.so.6                          0x00002b7b57042460 __libc_start_main +
    245

    6    tmpaf2hkek9                        0x00005611eba38239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let evensInList1 = lst1.filter { $0 % 2\
    \ == 0 }\n    let oddsInList2 = lst2.filter { $0 % 2 != 0 }\n    if oddsInList2.count\
    \ >= evensInList1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpywq0rx1m/tmpywq0rx1m.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b155cb5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b155c856b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b155c856988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b155c8557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywq0rx1m                        0x000055e0f47a379f <unavailable> + 6047

    5    libc.so.6                          0x00002b155cd4b460 __libc_start_main +
    245

    6    tmpywq0rx1m                        0x000055e0f47a31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let odd1 = lst1.filter { $0 % 2 != 0 }\n\
    \    let odd2 = lst2.filter { $0 % 2 != 0 }\n    return odd1.count + odd2.count\
    \ == 0 ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmppczexslm/tmppczexslm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70cc9c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70cc6bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70cc6bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70cc6ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppczexslm                        0x00005640ab63362d <unavailable> + 5677

    5    libc.so.6                          0x00002b70ccbb0460 __libc_start_main +
    245

    6    tmppczexslm                        0x00005640ab6331f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    // find the indices of the odd numbers\
    \ in both lists\n    let lst1OddIndices = lst1.enumerated().filter { $0.element\
    \ % 2 != 0 }.map { $0.offset }\n    let lst2OddIndices = lst2.enumerated().filter\
    \ { $0.element % 2 != 0 }.map { $0.offset }\n    \n    // check if the indices\
    \ are empty\n    if lst1OddIndices.isEmpty && lst2OddIndices.isEmpty {\n     \
    \   return \"YES\"\n    } else if lst1OddIndices.isEmpty || lst2OddIndices.isEmpty\
    \ {\n        return \"NO\"\n    }\n    \n    // the number of odds in both lists\
    \ needs to be equal\n    if lst1OddIndices.count != lst2OddIndices.count {\n \
    \       return \"NO\"\n    }\n    \n    // the number of odds in both lists needs\
    \ to be equal\n    if lst1OddIndices.count != lst2OddIndices.count {\n       \
    \ return \"NO\"\n    }\n    \n    // for every odd in lst1, there needs to be\
    \ an odd in lst2\n    for i in lst1OddIndices {\n        let lst2Pairs = lst2OddIndices.filter\
    \ { $0 > i }\n        if lst2Pairs.isEmpty {\n            return \"NO\"\n    \
    \    }\n    }\n    \n    // for every odd in lst2, there needs to be an odd in\
    \ lst1\n    for i in lst2OddIndices {\n        let lst1Pairs = lst1OddIndices.filter\
    \ { $0 > i }\n        if lst1Pairs.isEmpty {\n            return \"NO\"\n    \
    \    }\n    }\n    \n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpnejy05ld/tmpnejy05ld.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adab57a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adab549fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adab549f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adab549e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnejy05ld                        0x0000556c962d09dd <unavailable> + 6621

    5    libc.so.6                          0x00002adab5994460 __libc_start_main +
    245

    6    tmpnejy05ld                        0x0000556c962d05a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    /// The difference between the number of\
    \ odd elements in lst1 and\n    /// the number of even elements in lst2 is equal\
    \ to or greater than 0.\n    if oddNumbers(in: lst1) - evenNumbers(in: lst2) >=\
    \ 0 {\n        return \"YES\"\n    }\n    /// The difference between the number\
    \ of odd elements in lst2 and\n    /// the number of even elements in lst1 is\
    \ equal to or greater than 0.\n    if oddNumbers(in: lst2) - evenNumbers(in: lst1)\
    \ >= 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmp2pnkjwod.swift:18:8: error: cannot find 'oddNumbers' in scope\n\
    \    if oddNumbers(in: lst1) - evenNumbers(in: lst2) >= 0 {\n       ^~~~~~~~~~\n\
    /tmp/tmp2pnkjwod.swift:18:31: error: cannot find 'evenNumbers' in scope\n    if\
    \ oddNumbers(in: lst1) - evenNumbers(in: lst2) >= 0 {\n                      \
    \        ^~~~~~~~~~~\n/tmp/tmp2pnkjwod.swift:23:8: error: cannot find 'oddNumbers'\
    \ in scope\n    if oddNumbers(in: lst2) - evenNumbers(in: lst1) >= 0 {\n     \
    \  ^~~~~~~~~~\n/tmp/tmp2pnkjwod.swift:23:31: error: cannot find 'evenNumbers'\
    \ in scope\n    if oddNumbers(in: lst2) - evenNumbers(in: lst1) >= 0 {\n     \
    \                         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let sum1 = lst1.reduce(0, +)\n    let sum2\
    \ = lst2.reduce(0, +)\n    return (sum1 % 2 != sum2 % 2) ? \"NO\" : \"YES\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp8brbylty/tmp8brbylty.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad97fe14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad97fb0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad97fb0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad97fb0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8brbylty                        0x0000559622bbfa27 <unavailable> + 6695

    5    libc.so.6                          0x00002ad980000460 __libc_start_main +
    245

    6    tmp8brbylty                        0x0000559622bbf159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let x = lst1.filter { (x) -> Bool in\n\
    \        return x % 2 == 0\n    }\n    if x.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    let y = lst2.filter { (x) -> Bool in\n        return x %\
    \ 2 == 0\n    }\n    if y.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpx6isvqkh/tmpx6isvqkh.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d856b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d853afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d853af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d853ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx6isvqkh                        0x00005650ccd5662d <unavailable> + 5677

    5    libc.so.6                          0x00002b8d858a4460 __libc_start_main +
    245

    6    tmpx6isvqkh                        0x00005650ccd561f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var oddCountInFirst = 0\n    var oddCountInSecond\
    \ = 0\n    lst1.forEach {\n        if $0 % 2 != 0 {\n            oddCountInFirst\
    \ += 1\n        }\n    }\n    lst2.forEach {\n        if $0 % 2 != 0 {\n     \
    \       oddCountInSecond += 1\n        }\n    }\n    return oddCountInFirst ==\
    \ oddCountInSecond ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpff989yxp/tmpff989yxp.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1faae8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1fa7dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1fa7df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1fa7de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpff989yxp                        0x000055c07f9a2a17 <unavailable> + 6679

    5    libc.so.6                          0x00002af1facd4460 __libc_start_main +
    245

    6    tmpff989yxp                        0x000055c07f9a2149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let even1 = lst1.filter { $0 % 2 == 0 }\n\
    \    let odd1 = lst1.filter { $0 % 2 != 0 }\n    let even2 = lst2.filter { $0\
    \ % 2 == 0 }\n    let odd2 = lst2.filter { $0 % 2 != 0 }\n    let combinedEven\
    \ = even1 + even2\n    let combinedOdd = odd1 + odd2\n    return combinedEven.count\
    \ >= combinedOdd.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    let lst1Sum = lst1.reduce(0, +)\n    let lst2Sum = lst2.reduce(0, +)\n  \
    \  for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j\
    \ in 0..<lst2.count {\n                if lst2[j] % 2 != 0 {\n               \
    \     lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n             \
    \       if (lst1.reduce(0, +) + lst2.reduce(0, +)) % 2 == 0 {\n              \
    \          return \"YES\"\n                    }\n                    lst1[i]\
    \ = lst1Sum - lst2Sum + lst2[j]\n                    lst2[j] = lst2Sum - lst1Sum\
    \ + lst1[i]\n                }\n            }\n        }\n    }\n    return \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpx0ht308n/tmpx0ht308n.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b167d2d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b167cfcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b167cfcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b167cfca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx0ht308n                        0x00005591256838ef <unavailable> + 6383

    5    libc.so.6                          0x00002b167d4c0460 __libc_start_main +
    245

    6    tmpx0ht308n                        0x0000559125683349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let even1 = lst1.filter { $0 % 2 == 0 }\n\
    \    let odd1 = lst1.filter { $0 % 2 != 0 }\n    let even2 = lst2.filter { $0\
    \ % 2 == 0 }\n    let odd2 = lst2.filter { $0 % 2 != 0 }\n    return even1.count\
    \ + odd2.count == lst1.count && even2.count + odd1.count == lst2.count ? \"YES\"\
    \ : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpxvsa6b32/tmpxvsa6b32.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5886aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b588679eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b588679e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b588679d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvsa6b32                        0x00005611daf33ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b5886c93460 __libc_start_main +
    245

    6    tmpxvsa6b32                        0x00005611daf331f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         break\n                }\n            }\n        }\n    }\n    for i\
    \ in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\
    \n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp4g11ff76/tmp4g11ff76.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f1eb25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f1e81cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f1e81c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f1e81b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4g11ff76                        0x00005601b9bc887f <unavailable> + 6271

    5    libc.so.6                          0x00002b3f1ed11460 __libc_start_main +
    245

    6    tmp4g11ff76                        0x00005601b9bc82d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    var i = 0\n    var j = 0\n    while i < lst1.count && j < lst2.count {\n\
    \        if lst1[i] % 2 == 0 {\n            i += 1\n        } else if lst2[j]\
    \ % 2 == 1 {\n            j += 1\n        } else {\n            lst1[i] = lst2[j]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    for num in lst1\
    \ {\n        if num % 2 == 1 {\n            return \"NO\"\n        }\n    }\n\
    \    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    let s1 = Set(lst1)\n    let s2 = Set(lst2)\n\
    \    let allNumbers = s1.union(s2)\n    let odds = allNumbers.filter { $0 % 2\
    \ != 0 }\n    return s1.isSubset(of: odds) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmppbbdx5ld/tmppbbdx5ld.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab359758c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab35944fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab35944f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab35944e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbbdx5ld                        0x0000563bfa45289f <unavailable> + 6303

    5    libc.so.6                          0x00002ab359944460 __libc_start_main +
    245

    6    tmppbbdx5ld                        0x0000563bfa4522f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979371
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two arrays\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 an array of only even numbers.\n\
    /// There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
    \ 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n\
    /// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n    var count = 0\n    var i = 0\n    var j\
    \ = 0\n    while i < lst1.count {\n        if lst1[i] % 2 != 0 {\n           \
    \ while j < lst2.count {\n                if lst2[j] % 2 != 0 {\n            \
    \        j += 1\n                } else {\n                    count += 1\n  \
    \                  break\n                }\n            }\n        }\n      \
    \  i += 1\n    }\n    return (count == lst1.count) ? \"YES\" : \"NO\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpk2p41gl6/tmpk2p41gl6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b299dfdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b299dcd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b299dcd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b299dcd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2p41gl6                        0x0000563096e1b5bd <unavailable> + 5565

    5    libc.so.6                          0x00002b299e1ca460 __libc_start_main +
    245

    6    tmpk2p41gl6                        0x0000563096e1b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979371
