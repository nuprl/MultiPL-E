language: swift
name: HumanEval_67_fruit_distribution
results:
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let first = Int(arr[0])\
    \ ?? 0\n    let second = Int(arr[2]) ?? 0\n    return n - (first + second)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpclr4va7y/tmpclr4va7y.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7640d06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76409fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76409fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76409fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpclr4va7y                        0x00005559936da5e9 <unavailable> + 5609

    5    libc.so.6                          0x00002b7640ef2460 __libc_start_main +
    245

    6    tmpclr4va7y                        0x00005559936da269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return n - fruit_count(s: s)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpvj6zal5_.swift:17:16: error: cannot find 'fruit_count' in scope\n\
    \    return n - fruit_count(s: s)\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    /// My Code\n    var fruitDist = s.components(separatedBy: \"\
    \ \")\n    var totalFruit = Int(fruitDist[0])! + Int(fruitDist[2])!\n    return\
    \ n - totalFruit\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpb5nuibrj.swift:18:23: error: value of type 'String' has no member\
    \ 'components'\n    var fruitDist = s.components(separatedBy: \" \")\n       \
    \             ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp9aaazwyu/tmp9aaazwyu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e68a4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e68745b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e68745988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e687447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9aaazwyu                        0x000055fb9f45e269 <unavailable> + 4713

    5    libc.so.6                          0x00002b0e68c3a460 __libc_start_main +
    245

    6    tmp9aaazwyu                        0x000055fb9f45dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let splitFruit = s.components(separatedBy: \" \")\n    var count\
    \ = 0\n    var fruit = 0\n    var orange = 0\n    if let fruit = Int(splitFruit[0])\
    \ {\n        count += fruit\n    }\n    if let orange = Int(splitFruit[2]) {\n\
    \        count += orange\n    }\n    let count1 = n - count\n    return count1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp3pnrxl5k.swift:17:24: error: value of type 'String' has no member\
    \ 'components'\n    let splitFruit = s.components(separatedBy: \" \")\n      \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruits = s.split(separator: \" \")\n    var num_apples = Int(fruits[0])!\n\
    \    var num_oranges = Int(fruits[3])!\n    var sum = num_apples + num_oranges\n\
    \    var num_mangoes = n - sum\n    return num_mangoes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var numberOfApples = 0\n    var numberOfOranges = 0\n    var numberOfMangoes\
    \ = 0\n    var stringArray = s.split(separator: \" \")\n    for value in stringArray\
    \ {\n        if (value.contains(\"apple\")) {\n            numberOfApples = Int(value.prefix(value.count\
    \ - 5))!\n        } else if (value.contains(\"orange\")) {\n            numberOfOranges\
    \ = Int(value.prefix(value.count - 6))!\n        }\n    }\n    let totalFruits\
    \ = numberOfApples + numberOfOranges\n    return n - totalFruits\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmphu3274vy/tmphu3274vy.swift:23: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aec4fbe3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec4f8da561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aec4f8da286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aec4f8da13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aec4f8d9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphu3274vy                        0x00005606829a534f <unavailable> + 9039

    6    tmphu3274vy                        0x00005606829a48cb <unavailable> + 6347

    7    libc.so.6                          0x00002aec4fdcf460 __libc_start_main +
    245

    8    tmphu3274vy                        0x00005606829a45c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apple_count = 0\n    var orange_count = 0\n    let fruit_arr\
    \ = s.split(separator: \" \")\n    for num in fruit_arr {\n        if num.contains(\"\
    apples\") {\n            let num_str = num.split(separator: \"a\")\n         \
    \   if let num_int = Int(num_str[0]) {\n                apple_count = num_int\n\
    \            }\n        } else if num.contains(\"oranges\") {\n            let\
    \ num_str = num.split(separator: \"o\")\n            if let num_int = Int(num_str[0])\
    \ {\n                orange_count = num_int\n            }\n        }\n    }\n\
    \    let total_fruits = apple_count + orange_count\n    let mango_count = n -\
    \ total_fruits\n    return mango_count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b3600431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3600128561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3600128286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b360012813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3600127bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b3600282e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b360028785c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b3600154920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b35ffe0fb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b35ffe0eb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b35ffe0fced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b35ffdf542d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b35ffdf3840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b35ffdf3e70 StringProtocol.contains(_:)
    + 64

    14   tmpfzk_aa9d                        0x0000562e1307505d <unavailable> + 8285

    15   tmpfzk_aa9d                        0x0000562e130747cb <unavailable> + 6091

    16   libc.so.6                          0x00002b360061d460 __libc_start_main +
    245

    17   tmpfzk_aa9d                        0x0000562e130744c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = 0\n    var mango = 0\n    var apple = 0\n    var\
    \ orange = 0\n    var fruits = s.split(separator: \" \")\n    let separator =\
    \ fruits.count - 1\n    for i in 0..<separator {\n        if fruits[i] == \"apples\"\
    \ {\n            apple = Int(fruits[i - 1])!\n        } else if fruits[i] == \"\
    oranges\" {\n            orange = Int(fruits[i - 1])!\n        }\n    }\n    result\
    \ = n - (apple + orange)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpconn9dgx/tmpconn9dgx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff33370c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff33067b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff33067988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff330667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpconn9dgx                        0x0000564817779859 <unavailable> + 6233

    5    libc.so.6                          0x00002aff3355c460 __libc_start_main +
    245

    6    tmpconn9dgx                        0x00005648177794d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    //TODO: Write your solution here\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpth2cwxf1/tmpth2cwxf1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b276130bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2761002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2761002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27610017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth2cwxf1                        0x0000560d08153269 <unavailable> + 4713

    5    libc.so.6                          0x00002b27614f7460 __libc_start_main +
    245

    6    tmpth2cwxf1                        0x0000560d08152ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    let num_oranges\
    \ = Int(arr[3])\n    let num_apples = Int(arr[0])\n    let tot_apples_oranges\
    \ = num_apples! + num_oranges!\n    return n - tot_apples_oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpw2v0bnwo.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // put your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmp41j7xgbg/tmp41j7xgbg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad689eaac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad689ba1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad689ba1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad689ba07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41j7xgbg                        0x000055e92d227269 <unavailable> + 4713

    5    libc.so.6                          0x00002ad68a096460 __libc_start_main +
    245

    6    tmp41j7xgbg                        0x000055e92d226ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    var fruit = s.split(separator: \"\
    \ \")\n    var num = n\n    if fruit[1] == \"apples\"{\n        num -= Int(fruit[0])!\n\
    \    }else{\n        num -= Int(fruit[3])!\n    }\n    return num\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpeptd2k0g/tmpeptd2k0g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79f5418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79f510fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79f510f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79f510e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeptd2k0g                        0x000055af085e9769 <unavailable> + 5993

    5    libc.so.6                          0x00002b79f5604460 __libc_start_main +
    245

    6    tmpeptd2k0g                        0x000055af085e93e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    /// print(\"Apples and oranges: \\(s)\")\n    /// print(\"Basket\
    \ size: \\(n)\")\n    var fruits = s.components(separatedBy: \" \")\n    if fruits.count\
    \ != 5 {\n        return -1\n    }\n    let oranges = Int(fruits[3])!\n    let\
    \ apples = Int(fruits[0])!\n    let total_fruits = oranges + apples\n    let mangoes\
    \ = n - total_fruits\n    /// print(\"Total fruits: \\(total_fruits)\")\n    ///\
    \ print(\"Mangoes: \\(mangoes)\")\n    return mangoes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpvhpusc1s.swift:19:20: error: value of type 'String' has no member\
    \ 'components'\n    var fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango: Int = 0\n    var apple: Int = 0\n    var orange: Int\
    \ = 0\n    var i: Int = 0\n    while(i < s.count) {\n        let c: Character\
    \ = s[s.index(s.startIndex, offsetBy: i)]\n        if(c == \"a\") {\n        \
    \    i += 8\n            var k: Int = 0\n            while(i < s.count) {\n  \
    \              let c: Character = s[s.index(s.startIndex, offsetBy: i)]\n    \
    \            if(c == \" \") {\n                    break\n                }\n\
    \                k *= 10\n                k += Int(String(c))!\n             \
    \   i += 1\n            }\n            apple = k\n        }\n        else if(c\
    \ == \"o\") {\n            i += 10\n            var k: Int = 0\n            while(i\
    \ < s.count) {\n                let c: Character = s[s.index(s.startIndex, offsetBy:\
    \ i)]\n                if(c == \" \") {\n                    break\n         \
    \       }\n                k *= 10\n                k += Int(String(c))!\n   \
    \             i += 1\n            }\n            orange = k\n        }\n     \
    \   i += 1\n    }\n    mango = n - apple - orange\n    return mango\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpsku06xoh/tmpsku06xoh.swift:32: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aabc635dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabc6054561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aabc6054286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aabc605413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aabc6053bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsku06xoh                        0x0000557cc560bf04 <unavailable> + 7940

    6    tmpsku06xoh                        0x0000557cc560b5db <unavailable> + 5595

    7    libc.so.6                          0x00002aabc6549460 __libc_start_main +
    245

    8    tmpsku06xoh                        0x0000557cc560b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here.\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpl251q92g/tmpl251q92g.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac359ddcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac359ad3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac359ad3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac359ad27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl251q92g                        0x0000559ec4232269 <unavailable> + 4713

    5    libc.so.6                          0x00002ac359fc8460 __libc_start_main +
    245

    6    tmpl251q92g                        0x0000559ec4231ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let distributionArray = s.split(separator: \" \")\n    var distributionNumArray\
    \ = [Int]()\n    for number in distributionArray {\n        let num = Int(number)\n\
    \        if num != nil {\n            distributionNumArray.append(num!)\n    \
    \    }\n    }\n    return n - distributionNumArray.reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.split(separator: \" \")\n    let orange = Int(s[3])!\n\
    \    let apple = Int(s[0])!\n    return n - (orange + apple)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    let fruits = s.split(separator: \" \")\n    let apples =\
    \ Int(fruits[0])!\n    let oranges = Int(fruits[2])!\n    let result = n - apples\
    \ - oranges\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpbuffvefi/tmpbuffvefi.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b233557dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2335274561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2335274286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b233527413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2335273bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbuffvefi                        0x000055b428d15ebd <unavailable> + 7869

    6    tmpbuffvefi                        0x000055b428d155fb <unavailable> + 5627

    7    libc.so.6                          0x00002b2335769460 __libc_start_main +
    245

    8    tmpbuffvefi                        0x000055b428d152f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var num1 = 0\n    var num2 = 0\n    for ch in s {\n        if\
    \ ch == \"a\" {\n            num1 += 1\n        } else if ch == \"o\" {\n    \
    \        num2 += 1\n        }\n    }\n    return n - (num1 + num2)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpvafv6vyj/tmpvafv6vyj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5904dfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5904af5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5904af5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5904af47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvafv6vyj                        0x0000560de03fc419 <unavailable> + 5145

    5    libc.so.6                          0x00002b5904fea460 __libc_start_main +
    245

    6    tmpvafv6vyj                        0x0000560de03fc099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apple_counter = 0\n    var orange_counter = 0\n    var apple_flag\
    \ = false\n    var orange_flag = false\n    for i in s {\n        if i == \"a\"\
    \ {\n            apple_flag = true\n        } else if i == \"o\" {\n         \
    \   orange_flag = true\n        } else if i == \" \" {\n            if apple_flag\
    \ {\n                apple_flag = false\n            } else if orange_flag {\n\
    \                orange_flag = false\n            }\n        } else if i.isNumber\
    \ {\n            if apple_flag {\n                apple_counter = i.wholeNumberValue!\n\
    \            } else if orange_flag {\n                orange_counter = i.wholeNumberValue!\n\
    \            }\n        }\n    }\n    return n - (apple_counter + orange_counter)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpsu48nhrk/tmpsu48nhrk.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29d500ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29d4d01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29d4d01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29d4d007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsu48nhrk                        0x00005593bbd60559 <unavailable> + 5465

    5    libc.so.6                          0x00002b29d51f6460 __libc_start_main +
    245

    6    tmpsu48nhrk                        0x00005593bbd601d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let split = s.split(separator: \" \")\n    let a = Int(split[0])!\n\
    \    let o = Int(split[2])!\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmph24xeumm/tmph24xeumm.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b983dbb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b983d8ab561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b983d8ab286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b983d8ab13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b983d8aabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph24xeumm                        0x0000560b30eaceaa <unavailable> + 7850

    6    tmph24xeumm                        0x0000560b30eac5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b983dda0460 __libc_start_main +
    245

    8    tmph24xeumm                        0x0000560b30eac2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let str = s.split(separator: \" \")\n    let oranges = Int(str[3])!\n\
    \    let apples = Int(str[0])!\n    let sum = oranges + apples\n    let mango\
    \ = n - sum\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    let str_arr = s.split(separator:\
    \ \" \")\n    var n_apples = 0\n    var n_oranges = 0\n    for i in 0..<str_arr.count\
    \ {\n        if str_arr[i] == \"apples\" {\n            n_apples = Int(str_arr[i-1])!\n\
    \        }\n        if str_arr[i] == \"oranges\" {\n            n_oranges = Int(str_arr[i-1])!\n\
    \        }\n    }\n    return n - n_apples - n_oranges\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var string = s.lowercased()\n    let apples_index = string.firstIndex(of:\
    \ \"a\")\n    let oranges_index = string.firstIndex(of: \"o\")\n    let mangoes_index\
    \ = string.firstIndex(of: \"m\")\n    var apples = \"\"\n    var oranges = \"\"\
    \n    var mangoes = \"\"\n    var i = apples_index!\n    while(string[i] != \"\
    \ \"){\n        apples.append(string[i])\n        i = string.index(after: i)\n\
    \    }\n    i = oranges_index!\n    while(string[i] != \" \"){\n        oranges.append(string[i])\n\
    \        i = string.index(after: i)\n    }\n    i = mangoes_index!\n    while(string[i]\
    \ != \" \"){\n        mangoes.append(string[i])\n        i = string.index(after:\
    \ i)\n    }\n    let fruit_sum = Int(apples)! + Int(oranges)! + Int(mangoes)!\n\
    \    return n - fruit_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ac793408c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7930ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7930ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7930ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7930febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac793232ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002ac7931eb660 String.subscript.getter
    + 34

    7    tmp6ui17lzl                        0x000056455d6e62b5 <unavailable> + 8885

    8    tmp6ui17lzl                        0x000056455d6e56ab <unavailable> + 5803

    9    libc.so.6                          0x00002ac7935f4460 __libc_start_main +
    245

    10   tmp6ui17lzl                        0x000056455d6e53a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var k = 0\n    var j = 0\n    var result = 0\n    let count =\
    \ n\n    var fruit = s\n    var number = 0\n    if fruit.contains(\"apples\")\
    \ {\n        var apples = fruit.components(separatedBy: \"apples\")\n        k\
    \ = Int(apples[0])!\n        fruit = apples[1]\n    }\n    if fruit.contains(\"\
    oranges\") {\n        var oranges = fruit.components(separatedBy: \"oranges\"\
    )\n        j = Int(oranges[0])!\n        number = k + j\n    }\n    result = count\
    \ - number\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmppst5q5wj.swift:24:28: error: value of type 'String' has no member\
    \ 'components'\n        var apples = fruit.components(separatedBy: \"apples\"\
    )\n                     ~~~~~ ^~~~~~~~~~\n/tmp/tmppst5q5wj.swift:29:29: error:\
    \ value of type 'String' has no member 'components'\n        var oranges = fruit.components(separatedBy:\
    \ \"oranges\")\n                      ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let numbers = s.components(separatedBy: CharacterSet.decimalDigits.inverted).compactMap\
    \ { Int($0) }\n    return n - numbers.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpnp6x3ho7.swift:17:45: error: cannot find 'CharacterSet' in scope\n\
    \    let numbers = s.components(separatedBy: CharacterSet.decimalDigits.inverted).compactMap\
    \ { Int($0) }\n                                            ^~~~~~~~~~~~\n/tmp/tmpnp6x3ho7.swift:17:21:\
    \ error: value of type 'String' has no member 'components'\n    let numbers =\
    \ s.components(separatedBy: CharacterSet.decimalDigits.inverted).compactMap {\
    \ Int($0) }\n                  ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])!\n\
    \    let oranges = Int(fruits[3])!\n    let total = apples + oranges\n    return\
    \ n - total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango: Int = 0\n    var apple: Int = 0\n    var orange: Int\
    \ = 0\n    var new = s.split(separator: \" \")\n    if new[1] == \"apples\" {\n\
    \        apple = Int(new[0])!\n    } else {\n        orange = Int(new[0])!\n \
    \   }\n    new = new[2].split(separator: \" \")\n    if new[1] == \"apples\" {\n\
    \        apple = Int(new[0])!\n    } else {\n        orange = Int(new[0])!\n \
    \   }\n    mango = n - (apple + orange)\n    return mango\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5fc226c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5fbf1d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab5fbf1d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab5fbf1d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab5fbf1cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab5fbf0648a <unavailable> + 1340554

    6    tmpdma4dynj                        0x000055e20a4073c5 <unavailable> + 9157

    7    tmpdma4dynj                        0x000055e20a40672b <unavailable> + 5931

    8    libc.so.6                          0x00002ab5fc412460 __libc_start_main +
    245

    9    tmpdma4dynj                        0x000055e20a406429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    for c in s {\n        if (c.isNumber) {\n \
    \           var num = Int(String(c))!\n            mango += num\n        }\n \
    \   }\n    return n - mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp61fuu2ou/tmp61fuu2ou.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1186e90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1186b87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1186b87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1186b867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61fuu2ou                        0x0000556a088cf96a <unavailable> + 6506

    5    libc.so.6                          0x00002b118707c460 __libc_start_main +
    245

    6    tmp61fuu2ou                        0x0000556a088cf189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let apples = s.components(separatedBy: \" apples \")\n    let\
    \ oranges = apples[1].components(separatedBy: \" oranges\")\n    let numApples\
    \ = Int(apples[0])\n    let numOranges = Int(oranges[0])\n    let mango = n -\
    \ (numApples! + numOranges!)\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpxs8rmg3b.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let apples = s.components(separatedBy: \" apples \")\n   \
    \              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var temp = \"\"\n    var count = 0\n    for char in s{\n     \
    \   if char.isNumber {\n            temp += \"\\(char)\"\n        }\n    }\n \
    \   let num = Int(temp)\n    count = n - num!\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfg4yasbv/tmpfg4yasbv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af57a05cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af579d53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af579d53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af579d527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfg4yasbv                        0x0000558669141819 <unavailable> + 6169

    5    libc.so.6                          0x00002af57a248460 __libc_start_main +
    245

    6    tmpfg4yasbv                        0x0000558669141499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var n = n\n    let s = s.lowercased()\n    let apples = s.components(separatedBy:\
    \ \" apples \")\n    n -= Int(apples[0])!\n    let oranges = apples[1].components(separatedBy:\
    \ \" oranges\")\n    n -= Int(oranges[0])!\n    return n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpepqg_q3c.swift:19:20: error: value of type 'String' has no member\
    \ 'components'\n    let apples = s.components(separatedBy: \" apples \")\n   \
    \              ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var numberOfMangoes = n\n    let input = s.split(separator: \"\
    \ \")\n    var temp: Int = 0\n    for i in input {\n        if Int(i) != nil {\n\
    \            temp = Int(i)!\n            numberOfMangoes -= temp\n        }\n\
    \    }\n    return numberOfMangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let totalFruits = (s.split(separator: \" \").filter { $0.contains(\"\
    apple\") || $0.contains(\"orange\")}).map { Int($0) ?? 0}\n    return totalFruits.count\
    \ > 0 ? n - totalFruits.reduce(0, +) : n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp1fxpof87/tmp1fxpof87.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b42c43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b4293ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b4293a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b429397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fxpof87                        0x0000560ff71a4839 <unavailable> + 6201

    5    libc.so.6                          0x00002b0b42e2f460 __libc_start_main +
    245

    6    tmp1fxpof87                        0x0000560ff71a44b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    return n - (Int(arr[0])!\
    \ + Int(arr[2])!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp02fmvf7w.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpk9fviikf/tmpk9fviikf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dbc005c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dbbcfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dbbcfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dbbcfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9fviikf                        0x0000555d20bdb269 <unavailable> + 4713

    5    libc.so.6                          0x00002b7dbc1f1460 __libc_start_main +
    245

    6    tmpk9fviikf                        0x0000555d20bdaee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // start coding here\n    var mango = 0\n    var apple = 0\n \
    \   var orange = 0\n    var total = 0\n    var sub = \"\"\n    var arr = [String]()\n\
    \    for i in s{\n        if i != \" \"{\n            sub += String(i)\n     \
    \   }else{\n            arr.append(sub)\n            sub = \"\"\n        }\n \
    \   }\n    arr.append(sub)\n    for i in 0...arr.count-1{\n        if i == 0{\n\
    \            apple = Int(arr[i])!\n        }else if i == 3{\n            orange\
    \ = Int(arr[i])!\n        }\n    }\n    total = apple + orange\n    mango = n\
    \ - total\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n\tlet totalFruits = n\n\tvar numberOfMangoes = 0\n\tvar numberOfApples\
    \ = 0\n\tvar numberOfOranges = 0\n\t\n\tlet fruits = s.components(separatedBy:\
    \ \" and \")\n\t\n\tlet firstFruit = fruits[0]\n\tlet firstFruitComponents = firstFruit.components(separatedBy:\
    \ \" \")\n\t\n\tlet secondFruit = fruits[1]\n\tlet secondFruitComponents = secondFruit.components(separatedBy:\
    \ \" \")\n\t\n\tlet apples = firstFruitComponents[0]\n\tlet oranges = secondFruitComponents[0]\n\
    \t\n\tnumberOfApples = Int(apples)!\n\tnumberOfOranges = Int(oranges)!\n\t\n\t\
    numberOfMangoes = totalFruits - (numberOfApples + numberOfOranges)\n\t\n\treturn\
    \ numberOfMangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpwukfre1x.swift:22:17: error: value of type 'String' has no member\
    \ 'components'\n        let fruits = s.components(separatedBy: \" and \")\n  \
    \                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    if let first =\
    \ Int(arr[0]), let second = Int(arr[2]) {\n        return n - first - second\n\
    \    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprkobrpmy.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var numbers = s.split(separator: \" \")\n    let apple = numbers[0]\n\
    \    let orange = numbers[2]\n    let totalFruit = n - (Int(apple)! + Int(orange)!)\n\
    \    return totalFruit\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwi0cn9as/tmpwi0cn9as.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1597907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15975fe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b15975fe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b15975fe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b15975fdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwi0cn9as                        0x0000564a02abbff9 <unavailable> + 8185

    6    tmpwi0cn9as                        0x0000564a02abb64b <unavailable> + 5707

    7    libc.so.6                          0x00002b1597af3460 __libc_start_main +
    245

    8    tmpwi0cn9as                        0x0000564a02abb349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    let fruits = s.split(separator: \" \")\n    let numApples\
    \ = Int(fruits[0])!\n    let numOranges = Int(fruits[3])!\n    let numTotalFruits\
    \ = numApples + numOranges\n    return n - numTotalFruits\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var num_apples = 0\n    var num_oranges\
    \ = 0\n    var num_mangoes = 0\n    for char in s{\n        if char == \"a\" {\n\
    \            num_apples += 1\n        }\n        else if char == \"o\" {\n   \
    \         num_oranges += 1\n        }\n    }\n    num_mangoes = n - (num_apples\
    \ + num_oranges)\n    return num_mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpolm31ulb/tmpolm31ulb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adba981cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adba9513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adba9513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adba95127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpolm31ulb                        0x0000557af8910419 <unavailable> + 5145

    5    libc.so.6                          0x00002adba9a08460 __libc_start_main +
    245

    6    tmpolm31ulb                        0x0000557af8910099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    /// [marker1]\n    let fruit_counts = s.split(separator:\
    \ \" \")\n    var orange_count = Int(fruit_counts[3])!\n    var apple_count =\
    \ Int(fruit_counts[0])!\n    let total_fruits = n\n    /// [marker1]\n    \n \
    \   /// [marker2]\n    let mango_count = total_fruits - orange_count - apple_count\n\
    \    /// [marker2]\n    \n    /// [marker3]\n    return mango_count\n    /// [marker3]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var i = 0\n    var apples = 0\n    var oranges = 0\n    while\
    \ (s[i] != \" \") {\n        apples = apples * 10 + Int(s[i])!\n        i += 1\n\
    \    }\n    while (s[i] != \" \") {\n        i += 1\n    }\n    i += 1\n    while\
    \ (s[i] != \" \") {\n        oranges = oranges * 10 + Int(s[i])!\n        i +=\
    \ 1\n    }\n    return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4puitjbh.swift:20:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    while (s[i] !=\
    \ \" \") {\n           ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp4puitjbh.swift:21:37: error: no exact matches\
    \ in call to subscript \n        apples = apples * 10 + Int(s[i])!\n         \
    \                           ^\nSwift.String:3:12: note: candidate expects value\
    \ of type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r:\
    \ Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23:\
    \ note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter\
    \ #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ())\
    \ -> Self.SubSequence { get }\n                      ^\n/tmp/tmp4puitjbh.swift:24:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    while (s[i] != \" \") {\n           ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4puitjbh.swift:28:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    while (s[i] != \" \") {\n           ^~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4puitjbh.swift:29:39:\
    \ error: no exact matches in call to subscript \n        oranges = oranges * 10\
    \ + Int(s[i])!\n                                      ^\nSwift.String:3:12: note:\
    \ candidate expects value of type 'Range<String.Index>' for parameter #1 (got\
    \ 'Int')\n    public subscript(r: Range<String.Index>) -> Substring { get }\n\
    \           ^\nSwift.Collection:3:23: note: candidate expects value of type '(UnboundedRange_)\
    \ -> ()' for parameter #1 (got 'Int')\n    @inlinable public subscript(x: (Unboun"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    let newString = s.replacingOccurrences(of: \"apples\", with:\
    \ \"\")\n    let newString1 = newString.replacingOccurrences(of: \"oranges\",\
    \ with: \"\")\n    let newString2 = newString1.replacingOccurrences(of: \"and\"\
    , with: \"\")\n    let newString3 = newString2.replacingOccurrences(of: \" \"\
    , with: \"\")\n    let newString4 = newString3.replacingOccurrences(of: \" \"\
    , with: \"\")\n    let StringArray = newString4.components(separatedBy: \"\")\n\
    \    let sumInt = StringArray.reduce(0, {\n        $0 + Int($1)!\n    })\n   \
    \ let mango = n - sumInt\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpl70dq21l.swift:18:23: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let newString = s.replacingOccurrences(of: \"apples\"\
    , with: \"\")\n                    ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let components = s.components(separatedBy: \" \")\n    let a =\
    \ Int(components[0]) ?? 0\n    let o = Int(components[2]) ?? 0\n    return n -\
    \ a - o\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmppjyyf_r6.swift:17:24: error: value of type 'String' has no member\
    \ 'components'\n    let components = s.components(separatedBy: \" \")\n      \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // code\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: '/tmp/tmp1be1g2gz.swift:18:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var num_apples = 0\n    var num_oranges = 0\n    var num_fruits\
    \ = 0\n    let all_text = s.components(separatedBy: \" and \")\n    let apples\
    \ = all_text[0].components(separatedBy: \" \")\n    let oranges = all_text[1].components(separatedBy:\
    \ \" \")\n    num_apples = Int(apples[0])!\n    num_oranges = Int(oranges[0])!\n\
    \    num_fruits = n - (num_apples + num_oranges)\n    return num_fruits\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpnrqike91.swift:20:22: error: value of type 'String' has no member\
    \ 'components'\n    let all_text = s.components(separatedBy: \" and \")\n    \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruits = s.split(separator: \" \")\n    var s = s.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let a = Int(fruits[0])!\n    let o = Int(fruits[2])!\n\
    \    let total_fruits = a + o\n    return n - total_fruits\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpanzbs9kh.swift:18:15: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    var s = s.replacingOccurrences(of: \" \", with:\
    \ \"\")\n            ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var n = n\n    var n1 = 0\n    var n2 = 0\n    var n3 = 0\n  \
    \  var c = 0\n    while c < s.count {\n        if s[c] == \"0\" {\n          \
    \  if s[c+1] == \"0\" {\n                if s[c+2] == \"0\" {\n              \
    \      if s[c+3] == \"0\" {\n                        if s[c+4] == \"0\" {\n  \
    \                          n1 = 100\n                        } else {\n      \
    \                      n1 = Int(String(s[c+4]))!\n                        }\n\
    \                    } else {\n                        n1 = Int(String(s[c+3]))!\
    \ * 10 + Int(String(s[c+4]))!\n                    }\n                } else {\n\
    \                    n1 = Int(String(s[c+2]))! * 100 + Int(String(s[c+3]))! *\
    \ 10 + Int(String(s[c+4]))!\n                }\n            } else {\n       \
    \         n1 = Int(String(s[c+1]))! * 1000 + Int(String(s[c+2]))! * 100 + Int(String(s[c+3]))!\
    \ * 10 + Int(String(s[c+4]))!\n            }\n        } else {\n            n1\
    \ = Int(String(s[c]))! * 10000 + Int(String(s[c+1]))! * 1000 + Int(String(s[c+2]))!\
    \ * 100 + Int(String(s[c+3]))! * 10 + Int(String(s[c+4]))!\n        }\n      \
    \  c += 7\n        if s[c] == \"0\" {\n            if s[c+1] == \"0\" {\n    \
    \            if s[c+2] == \"0\" {\n                    if s[c+3] == \"0\" {\n\
    \                        if s[c+4] == \"0\" {\n                            n2\
    \ = 100\n                        } else {\n                            n2 = Int(String(s[c+4]))!\n\
    \                        }\n                    } else {\n                   \
    \     n2 = Int(String(s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpqnayrt2k.swift:56:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpqnayrt2k.swift:55:40: note: to match this opening '('\n           \
    \             n2 = Int(String(s\n                                       ^\n/tmp/tmpqnayrt2k.swift:77:72:\
    \ error: expected '}' at end of brace statement\nassert(fruit_distribution(s:\
    \ \"1 apples and 100 oranges\", n: 120) == 19)\n                             \
    \                                          ^\n/tmp/tmpqnayrt2k.swift:47:34: note:\
    \ to match this opening '{'\n                if s[c+2] == \"0\" {\n          \
    \                       ^\n/tmp/tmpqnayrt2k.swift:77:72: error: expected '}' at\
    \ end of brace statement\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)\n                                                           \
    \            ^\n/tmp/tmpqnayrt2k.swift:46:30: note: to match this opening '{'\n\
    \            if s[c+1] == \"0\" {\n                             ^\n/tmp/tmpqnayrt2k.swift:77:72:\
    \ error: expected '}' at end of brace statement\nassert(fruit_distribution(s:\
    \ \"1 apples and 100 oranges\", n: 120) == 19)\n                             \
    \                                          ^\n/tmp/tmpqnayrt2k.swift:45:24: note:\
    \ to match this opening '{'\n        if s[c] == \"0\" {\n                    \
    \   ^\n/tmp/tmpqnayrt2k.swift:77:72: error: expected '}' at end of brace statement\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)\n  \
    \                                                                     ^\n/tmp/tmpqnayrt2k.swift:22:23:\
    \ note: to match this opening '{'\n    while c < s.count {\n                 \
    \     ^\n/tmp/tmpqnayrt2k.swift:77:72: error: expected '}' at end of brace statement\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)\n  \
    \                                                                     ^\n/tmp/tmpqnayrt2k.swift:16:51:\
    \ note: to match this opening '{'\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n                                                  ^\n/tmp/tmpqnayrt2k.swift:23:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscr"
  stdout: ''
  timestamp: 1659979715
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var totalApples = 0\n    var totalOranges\
    \ = 0\n    var totalMangoes = 0\n    var totalFruits = n\n    var splitFruits\
    \ = s.split(separator: \" \")\n    if splitFruits.count >= 5 {\n        if let\
    \ x = Int(splitFruits[0]) {\n            totalApples = x\n        }\n        if\
    \ let y = Int(splitFruits[2]) {\n            totalOranges = y\n        }\n   \
    \     totalFruits = totalFruits - (totalApples + totalOranges)\n        totalMangoes\
    \ = totalFruits\n    }\n    return totalMangoes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmphplpv6t0/tmphplpv6t0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b959427ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9593f75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9593f75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9593f747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphplpv6t0                        0x000055d1f9dc8639 <unavailable> + 5689

    5    libc.so.6                          0x00002b959446a460 __libc_start_main +
    245

    6    tmphplpv6t0                        0x000055d1f9dc82b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let array = s.split(separator: \" \")\n    let firstNumber = Int(array[0])!\n\
    \    let secondNumber = Int(array[3])!\n    return n - (firstNumber + secondNumber)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    /// Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpjf90_osn/tmpjf90_osn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94898a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b948959ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b948959a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94895997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf90_osn                        0x000056127cee8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b9489a8f460 __libc_start_main +
    245

    6    tmpjf90_osn                        0x000056127cee7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var stringArray = s.split(separator: \" \")\n    let numberOfApples\
    \ = Int(stringArray[0])!\n    let numberOfOranges = Int(stringArray[3])!\n   \
    \ return n - numberOfApples - numberOfOranges\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var a: Int = 0\n    var o: Int =\
    \ 0\n    var temp = s.split(separator: \" \")\n    for i in 0..<temp.count {\n\
    \        if temp[i] == \"apples\" {\n            a = Int(temp[i-1])!\n       \
    \ } else if temp[i] == \"oranges\" {\n            o = Int(temp[i-1])!\n      \
    \  }\n    }\n    return n - a - o\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpuu2ze7m7/tmpuu2ze7m7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9d0c09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9d0900b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9d0900988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9d08ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuu2ze7m7                        0x00005631290ae269 <unavailable> + 4713

    5    libc.so.6                          0x00002af9d0df5460 __libc_start_main +
    245

    6    tmpuu2ze7m7                        0x00005631290adee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    var mangoes = 0\n   \
    \ var totalFruits = 0\n    var fruits = \"\"\n    var index = s.index(of: \"a\"\
    )!\n    while index < s.endIndex {\n        if (s[index] == \"a\") {\n       \
    \     fruits += \"a\"\n        }\n        index = s.index(after: index)\n    }\n\
    \    apples = Int(fruits) ?? 0\n    fruits = \"\"\n    index = s.index(of: \"\
    o\")!\n    while index < s.endIndex {\n        if (s[index] == \"o\") {\n    \
    \        fruits += \"o\"\n        }\n        index = s.index(after: index)\n \
    \   }\n    oranges = Int(fruits) ?? 0\n    totalFruits = apples + oranges\n  \
    \  mangoes = n - totalFruits\n    return mangoes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpfhl6k5f_/tmpfhl6k5f_.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e3d84cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e3d543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e3d543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e3d5427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfhl6k5f_                        0x00005614604b9789 <unavailable> + 6025

    5    libc.so.6                          0x00002b8e3da38460 __libc_start_main +
    245

    6    tmpfhl6k5f_                        0x00005614604b9409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    let s_formatted = s.replacingOccurrences(of: \"apples\"\
    , with: \"\")\n        .replacingOccurrences(of: \" oranges\", with: \"\")\n \
    \       .replacingOccurrences(of: \"and\", with: \"\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"\")\n    \n    let s_split = s_formatted.split(separator: \"\
    ,\")\n    \n    let n_apples = Int(s_split[0]) ?? 0\n    let n_oranges = Int(s_split[1])\
    \ ?? 0\n    \n    let n_mangoes = n - (n_apples + n_oranges)\n    \n    return\
    \ n_mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmprk_fmlbz.swift:18:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let s_formatted = s.replacingOccurrences(of: \"\
    apples\", with: \"\")\n                      ~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmprk_fmlbz.swift:28:35:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    let n_mangoes = n - (n_apples + n_oranges)\n                            \
    \      ^\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n\treturn 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpk9fviikf/tmpk9fviikf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7dbc005c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7dbbcfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7dbbcfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7dbbcfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9fviikf                        0x0000555d20bdb269 <unavailable> + 4713

    5    libc.so.6                          0x00002b7dbc1f1460 __libc_start_main +
    245

    6    tmpk9fviikf                        0x0000555d20bdaee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // To be implemented\n    var orange: Int = 0\n    var apple:\
    \ Int = 0\n    let str = s.components(separatedBy: \" and \")\n    for item in\
    \ str {\n        if item.hasPrefix(\"orange\") {\n            let str1 = item.components(separatedBy:\
    \ \" oranges\")\n            orange = Int(str1[0])!\n        }\n        if item.hasPrefix(\"\
    apple\") {\n            let str1 = item.components(separatedBy: \" apples\")\n\
    \            apple = Int(str1[0])!\n        }\n    }\n    return n - (orange +\
    \ apple)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpe1ug_u2l.swift:20:17: error: value of type 'String' has no member\
    \ 'components'\n    let str = s.components(separatedBy: \" and \")\n         \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let filteredString = s.filter { $0 != \" \" }\n    let stringArray\
    \ = filteredString.components(separatedBy: \"and\")\n    let appleArray = stringArray[0].components(separatedBy:\
    \ \"apples\")\n    let orangeArray = stringArray[1].components(separatedBy: \"\
    oranges\")\n    let appleCount = Int(appleArray[0]) ?? 0\n    let orangeCount\
    \ = Int(orangeArray[0]) ?? 0\n    return n - (appleCount + orangeCount)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpyp28co5j.swift:18:38: error: value of type 'String' has no member\
    \ 'components'\n    let stringArray = filteredString.components(separatedBy: \"\
    and\")\n                      ~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpyp28co5j.swift:23:28:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    return n - (appleCount + orangeCount)\n                           ^\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n\tvar arr = s.split(separator: \" \")\n\tvar num1 = Int(arr[0])!\n\
    \tvar num2 = Int(arr[2])!\n\tvar num3 = n - num1 - num2\n\treturn num3\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmppcil7dz0/tmppcil7dz0.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b3ce29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b3cb20561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5b3cb20286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5b3cb2013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5b3cb1fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppcil7dz0                        0x000055cac1d3cfaa <unavailable> + 8106

    6    tmppcil7dz0                        0x000055cac1d3c64b <unavailable> + 5707

    7    libc.so.6                          0x00002b5b3d015460 __libc_start_main +
    245

    8    tmppcil7dz0                        0x000055cac1d3c349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let totalFruits = n \n    let nFruits = s.components(separatedBy:\
    \ \" \")\n    let apples = Int(nFruits[0]) ?? 0\n    let oranges = Int(nFruits[2])\
    \ ?? 0\n    let mangoes = totalFruits - apples - oranges\n    return mangoes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpiuv_2q0m.swift:18:21: error: value of type 'String' has no member\
    \ 'components'\n    let nFruits = s.components(separatedBy: \" \")\n         \
    \         ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var my_str = s.replacingOccurrences(of: \" apples\", with: \"\"\
    )\n    my_str = my_str.replacingOccurrences(of: \" oranges\", with: \"\")\n  \
    \  let fruits = my_str.split(separator: \" \")\n    let sum = Int(fruits[0])!\
    \ + Int(fruits[2])!\n    let mango = n - sum\n    return mango\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpc9bumhk5.swift:17:20: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    var my_str = s.replacingOccurrences(of: \" apples\"\
    , with: \"\")\n                 ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n\tlet str = s.components(separatedBy: \"and\")\n\tlet apples = Int(str[0].trimmingCharacters(in:\
    \ .whitespacesAndNewlines))!\n\tlet oranges = Int(str[1].trimmingCharacters(in:\
    \ .whitespacesAndNewlines))!\n\treturn n - apples - oranges\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpqlar1zzs.swift:17:14: error: value of type 'String' has no member\
    \ 'components'\n        let str = s.components(separatedBy: \"and\")\n       \
    \           ~ ^~~~~~~~~~\n/tmp/tmpqlar1zzs.swift:18:50: error: cannot infer contextual\
    \ base in reference to member 'whitespacesAndNewlines'\n        let apples = Int(str[0].trimmingCharacters(in:\
    \ .whitespacesAndNewlines))!\n                                               \
    \        ~^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqlar1zzs.swift:19:51: error: cannot\
    \ infer contextual base in reference to member 'whitespacesAndNewlines'\n    \
    \    let oranges = Int(str[1].trimmingCharacters(in: .whitespacesAndNewlines))!\n\
    \                                                        ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpsvpxrx8s/tmpsvpxrx8s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a969dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a966d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a966d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a966d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsvpxrx8s                        0x00005607c86aa269 <unavailable> + 4713

    5    libc.so.6                          0x00002b4a96bc8460 __libc_start_main +
    245

    6    tmpsvpxrx8s                        0x00005607c86a9ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return n - (Int(s.split(separator: \" \")[0])! + Int(s.split(separator:\
    \ \" \")[3])!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let numFruits = Int(fruits[0])!\
    \ + Int(fruits[3])!\n    return n - numFruits\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    /// Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpjf90_osn/tmpjf90_osn.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94898a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b948959ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b948959a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94895997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf90_osn                        0x000056127cee8269 <unavailable> + 4713

    5    libc.so.6                          0x00002b9489a8f460 __libc_start_main +
    245

    6    tmpjf90_osn                        0x000056127cee7ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n\t// Your code goes here\n\treturn 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpybljqf88/tmpybljqf88.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade6ce86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade6cb7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade6cb7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade6cb7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybljqf88                        0x000055f8e6ca7269 <unavailable> + 4713

    5    libc.so.6                          0x00002ade6d072460 __libc_start_main +
    245

    6    tmpybljqf88                        0x000055f8e6ca6ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var arr = s.split(separator: \" \")\n    let oranges = Int(arr[3])\n\
    \    let apples = Int(arr[0])\n    let sum = apples! + oranges!\n    return n\
    \ - sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var ret = 0\n    var total = 0\n    var string = \"\"\n    for\
    \ i in s {\n        if i != \" \" {\n            string += String(i)\n       \
    \ } else {\n            if string == \"apples\" {\n                ret += Int(string)!\n\
    \            } else if string == \"oranges\" {\n                ret += Int(string)!\n\
    \            }\n            string = \"\"\n        }\n    }\n    total = n - ret\n\
    \    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpb4j4xf86/tmpb4j4xf86.swift:25: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9399c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9396bd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba9396bd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba9396bd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba9396bcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb4j4xf86                        0x00005614320cce5f <unavailable> + 7775

    6    tmpb4j4xf86                        0x00005614320cc5db <unavailable> + 5595

    7    libc.so.6                          0x00002ba939bb2460 __libc_start_main +
    245

    8    tmpb4j4xf86                        0x00005614320cc2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var orange = 0\n    var apple = 0\n    let num = Int(s.components(separatedBy:\
    \ \" and \")[0])\n    orange = num!\n    let num1 = Int(s.components(separatedBy:\
    \ \" and \")[1])\n    apple = num1!\n    let mango = n - (orange + apple)\n  \
    \  return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpw8fhyyg4.swift:19:21: error: value of type 'String' has no member\
    \ 'components'\n    let num = Int(s.components(separatedBy: \" and \")[0])\n \
    \                 ~ ^~~~~~~~~~\n/tmp/tmpw8fhyyg4.swift:21:22: error: value of\
    \ type 'String' has no member 'components'\n    let num1 = Int(s.components(separatedBy:\
    \ \" and \")[1])\n                   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apple = 0\n    var orange = 0\n    var\
    \ ints = [Int]()\n    var sum = 0\n    var index = 0\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        if word == \"apples\" {\n         \
    \   apple = ints[index - 1]\n        }\n        if word == \"oranges\" {\n   \
    \         orange = ints[index - 1]\n        }\n        if let number = Int(word)\
    \ {\n            ints.append(number)\n            index += 1\n        }\n    }\n\
    \    sum = apple + orange\n    mango = n - sum\n    return mango\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let strArr = s.components(separatedBy: \" \")\n    let apple =\
    \ Int(strArr[0])!\n    let orange = Int(strArr[2])!\n    return n - apple - orange\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp73a951oq.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let strArr = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    //print(\"\\(s), \\(n)\")\n    // write your code here\n    let\
    \ charArr = Array(s)\n    var numStr: String = \"\"\n    var appleNum: Int = 0\n\
    \    var orangeNum: Int = 0\n    var count: Int = 0\n    for i in 0...charArr.count-1\
    \ {\n        if charArr[i] == \" \" {\n            if numStr != \"\" {\n     \
    \           if count == 0 {\n                    appleNum = Int(numStr)!\n   \
    \             }\n                else {\n                    orangeNum = Int(numStr)!\n\
    \                }\n                numStr = \"\"\n            }\n           \
    \ count += 1\n        }\n        else if charArr[i] == \"a\" {\n            if\
    \ numStr != \"\" {\n                if count == 0 {\n                    appleNum\
    \ = Int(numStr)!\n                }\n                else {\n                \
    \    orangeNum = Int(numStr)!\n                }\n                numStr = \"\"\
    \n            }\n            break\n        }\n        else {\n            numStr\
    \ += String(charArr[i])\n        }\n    }\n    return n - appleNum - orangeNum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpvjc_qrp8/tmpvjc_qrp8.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0de96d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0de93cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0de93cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0de93cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjc_qrp8                        0x00005579787a4859 <unavailable> + 6233

    5    libc.so.6                          0x00002b0de98c2460 __libc_start_main +
    245

    6    tmpvjc_qrp8                        0x00005579787a44d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var numberOfApples = 0\n    var numberOfOranges = 0\n    var totalFruits\
    \ = 0\n    var numberOfMangoes = 0\n    // find the number of apples and oranges\
    \ from the given string\n    var secondPart = s.split(separator: \" \")\n    let\
    \ firstPart = secondPart[0]\n    for digit in firstPart {\n        numberOfApples\
    \ = numberOfApples * 10 + Int(String(digit))!\n    }\n    secondPart.removeFirst()\n\
    \    secondPart.removeFirst()\n    secondPart.removeFirst()\n    let thirdPart\
    \ = secondPart[0]\n    for digit in thirdPart {\n        numberOfOranges = numberOfOranges\
    \ * 10 + Int(String(digit))!\n    }\n    // find the number of total fruits from\
    \ the given integer\n    totalFruits = n\n    // find the number of mangoes\n\
    \    numberOfMangoes = totalFruits - numberOfApples - numberOfOranges\n    return\
    \ numberOfMangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var array = s.components(separatedBy: \" \")\n    array = array.filter\
    \ { $0 != \"and\" }\n    var i = 0\n    var j = 0\n    while i < array.count {\n\
    \        if array[i].contains(\"apple\") {\n            j += Int(array[i].dropLast(6))!\n\
    \        } else {\n            j += Int(array[i].dropLast(7))!\n        }\n  \
    \      i += 1\n    }\n    return n - j\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp_q368q_c.swift:17:19: error: value of type 'String' has no member\
    \ 'components'\n    var array = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    var count = 0\n    while s.contains(\"and\") {\n\
    \        count += Int(s.split(separator: \"a\")[0])!\n        s = String(s.split(separator:\
    \ \" \")[4])\n    }\n    return n - count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmppqvovc6d/tmppqvovc6d.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aca93f8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca93c84561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aca93c84286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aca93c8413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aca93c83bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppqvovc6d                        0x000055c5900cff78 <unavailable> + 8056

    6    tmppqvovc6d                        0x000055c5900cf6fb <unavailable> + 5883

    7    libc.so.6                          0x00002aca94179460 __libc_start_main +
    245

    8    tmppqvovc6d                        0x000055c5900cf3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n\tvar sumOfFruits: Int = 0\n\tvar numberOfFruits: Int = 0\n\tfor fruit\
    \ in s.split(separator: \" \") {\n\t\tif fruit.contains(\"apples\") || fruit.contains(\"\
    oranges\") {\n\t\t\tnumberOfFruits += Int(fruit.replacingOccurrences(of: \"apples\"\
    , with: \"\").replacingOccurrences(of: \"oranges\", with: \"\"))!\n\t\t}\n\t}\n\
    \tsumOfFruits = n - numberOfFruits\n\treturn sumOfFruits\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp1xkbkq4x.swift:21:32: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'replacingOccurrences'\n                   \
    \     numberOfFruits += Int(fruit.replacingOccurrences(of: \"apples\", with: \"\
    \").replacingOccurrences(of: \"oranges\", with: \"\"))!\n                    \
    \                          ~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    var total = 0\n    var a = 0\n  \
    \  var o = 0\n    var result = \"\"\n    for i in s {\n        if i == \"a\" {\n\
    \            a += 1\n        } else if i == \"o\" {\n            o += 1\n    \
    \    } else if i == \" \" {\n            total += Int(result)!\n            result\
    \ = \"\"\n        } else {\n            result += String(i)\n        }\n    }\n\
    \    total += Int(result)!\n    var mango = n - total\n    return mango\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp5ri2mpcx/tmp5ri2mpcx.swift:28: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bf0b9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bf0896561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8bf0896286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8bf089613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8bf0895bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5ri2mpcx                        0x000055d07ed96e5f <unavailable> + 7775

    6    tmp5ri2mpcx                        0x000055d07ed9658b <unavailable> + 5515

    7    libc.so.6                          0x00002b8bf0d8b460 __libc_start_main +
    245

    8    tmp5ri2mpcx                        0x000055d07ed96289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango_num = 0\n    var apple_num = 0\n    var orange_num =\
    \ 0\n    var apple_string = \"\"\n    var orange_string = \"\"\n    var temp =\
    \ 0\n    var c = 0\n    while s[c] != \" \" {\n        apple_string.append(s[c])\n\
    \        c += 1\n    }\n    c += 5\n    while s[c] != \" \" {\n        orange_string.append(s[c])\n\
    \        c += 1\n    }\n    for i in apple_string {\n        temp = Int(String(i))!\n\
    \        apple_num = apple_num * 10 + temp\n    }\n    for i in orange_string\
    \ {\n        temp = Int(String(i))!\n        orange_num = orange_num * 10 + temp\n\
    \    }\n    mango_num = n - apple_num - orange_num\n    return mango_num\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpznfy983_.swift:24:11: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    while s[c] !=\
    \ \" \" {\n          ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpznfy983_.swift:25:29: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        apple_string.append(s[c])\n\
    \                            ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpznfy983_.swift:29:11: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    while s[c] != \" \" {\n          ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpznfy983_.swift:30:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        orange_string.append(s[c])\n                             ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let fruit = n - Int(arr[0])!\
    \ - Int(arr[2])!\n    return fruit\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpqrcvjlbe/tmpqrcvjlbe.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a613a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a61099561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1a61099286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1a6109913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1a61098bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqrcvjlbe                        0x000055d7c8e30ea5 <unavailable> + 7845

    6    tmpqrcvjlbe                        0x000055d7c8e305fb <unavailable> + 5627

    7    libc.so.6                          0x00002b1a6158e460 __libc_start_main +
    245

    8    tmpqrcvjlbe                        0x000055d7c8e302f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let myArr = s.components(separatedBy: \" \")\n    var i = 0\n\
    \    var sum = 0\n    while i < myArr.count {\n        sum += Int(myArr[i])!\n\
    \        i += 2\n    }\n    return n - sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp6gx0jymo.swift:17:19: error: value of type 'String' has no member\
    \ 'components'\n    let myArr = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n\tvar numOfMangos = 0\n\tvar numOfApples = 0\n\tvar numOfOranges =\
    \ 0\n\tlet arr = s.split(separator: \" \")\n\tfor i in 0..<arr.count {\n\t\tif\
    \ arr[i] == \"apples\" {\n\t\t\tnumOfApples = Int(arr[i-1])!\n\t\t} else if arr[i]\
    \ == \"oranges\" {\n\t\t\tnumOfOranges = Int(arr[i-1])!\n\t\t}\n\t}\n\tnumOfMangos\
    \ = n - (numOfApples + numOfOranges)\n\treturn numOfMangos\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let array = s.split(separator: \" \")\n    let mango = n - Int(array[0])!\
    \ - Int(array[4])!\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmph2_i0fz_/tmph2_i0fz_.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7bdfe0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7bdcd7561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad7bdcd7286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad7bdcd713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad7bdcd6bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph2_i0fz_                        0x0000558142d1bea5 <unavailable> + 7845

    6    tmph2_i0fz_                        0x0000558142d1b5fb <unavailable> + 5627

    7    libc.so.6                          0x00002ad7be1cc460 __libc_start_main +
    245

    8    tmph2_i0fz_                        0x0000558142d1b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // If n < 3 return n - 1 because all of the fruits will be mango\n\
    \    if n < 3 {\n        return n - 1\n    }\n    // get string that represents\
    \ the count of apples and oranges\n    let strOfFruits = String(s.split(separator:\
    \ \" \")[0..<2].joined())\n    // get string that represents the count of mango\n\
    \    let mangoCount = String(s.split(separator: \" \")[3...].joined())\n    //\
    \ get numbers of fruits\n    let numOfFruits = Int(strOfFruits) ?? 0\n    // get\
    \ number of mango\n    let mangoNum = Int(mangoCount) ?? 0\n    // if the number\
    \ of mango or fruits bigger than the number of fruits in the basket\n    // then\
    \ return 0 because the number of mango and fruits can't bigger than the number\
    \ of fruits in the basket\n    if mangoNum > n || numOfFruits > n {\n        return\
    \ 0\n    }\n    // if number of mango + the number of fruits is equal to the number\
    \ of fruits in the basket\n    // then the number of mango is equal to the number\
    \ of fruits in the basket\n    if mangoNum + numOfFruits == n {\n        return\
    \ n\n    }\n    // if the number of fruits is equal to the number of fruits in\
    \ the basket \n    // then return 0 because the number of mango will be equal\
    \ to 0\n    if numOfFruits == n {\n        return 0\n    }\n    // if the number\
    \ of mango is equal to the number of fruits in the basket \n    // then return\
    \ 0 because the number of mango will be equal to 0\n    if mangoNum == n {\n \
    \       return 0\n    }\n    // return the number of mango fruits \n    return\
    \ n - (mangoNum + numOfFruits)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpl0crepf7/tmpl0crepf7.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3103571c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3103268b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3103268988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31032677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0crepf7                        0x000055758a8d6949 <unavailable> + 6473

    5    libc.so.6                          0x00002b310375d460 __libc_start_main +
    245

    6    tmpl0crepf7                        0x000055758a8d65c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var total: Int = 0\n    var totalFruit\
    \ = n\n    var fruitCount: [Int] = []\n    var list: [String] = []\n    var list2:\
    \ [String] = []\n    var fruits: [String] = []\n    list = s.split(separator:\
    \ \" \").map(String.init)\n    for i in list {\n        if i.isInt {\n       \
    \     list2.append(i)\n        }\n    }\n    for j in list {\n        if j.isInt\
    \ == false {\n            fruits.append(j)\n        }\n    }\n    for i in 0..<list2.count\
    \ {\n        if list2[i].isInt {\n            fruitCount.append(Int(list2[i])!)\n\
    \        }\n    }\n    var index: Int = 0\n    while index < fruitCount.count\
    \ {\n        totalFruit -= fruitCount[index]\n        index += 1\n    }\n    return\
    \ totalFruit\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmptdobmmaw.swift:26:14: error: value of type 'String' has no member\
    \ 'isInt'\n        if i.isInt {\n           ~ ^~~~~\n/tmp/tmptdobmmaw.swift:31:14:\
    \ error: value of type 'String' has no member 'isInt'\n        if j.isInt == false\
    \ {\n           ~ ^~~~~\n/tmp/tmptdobmmaw.swift:36:21: error: value of type 'String'\
    \ has no member 'isInt'\n        if list2[i].isInt {\n           ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    if let a = Int(arr[0]),\
    \ let o = Int(arr[3]) {\n        return n - a - o\n    }\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var res = n\n    var to_split = \"\"\n    var next_split = \"\"\
    \n    var to_add = 0\n    for c in s {\n        if c != \" \" {\n            to_split.append(c)\n\
    \        } else {\n            next_split = \"\"\n            for char in to_split\
    \ {\n                if char == \"a\" || char == \"d\" || char == \"n\" || char\
    \ == \"g\" || char == \"o\" {\n                    next_split.append(char)\n \
    \               } else {\n                    to_add = Int(to_split)!\n      \
    \          }\n            }\n            to_split = next_split\n        }\n  \
    \  }\n    for char in to_split {\n        if char == \"a\" || char == \"d\" ||\
    \ char == \"n\" || char == \"g\" || char == \"o\" {\n            next_split.append(char)\n\
    \        } else {\n            to_add = Int(to_split)!\n        }\n    }\n   \
    \ res -= to_add\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp0_vncmc3/tmp0_vncmc3.swift:30: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d9c331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d9c028561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4d9c028286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4d9c02813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4d9c027bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0_vncmc3                        0x000055af1bb59142 <unavailable> + 8514

    6    tmp0_vncmc3                        0x000055af1bb5852b <unavailable> + 5419

    7    libc.so.6                          0x00002b4d9c51d460 __libc_start_main +
    245

    8    tmp0_vncmc3                        0x000055af1bb58229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.components(separatedBy: \" \")\n    let app_number =\
    \ Int(s[0])!\n    let ora_number = Int(s[2])!\n    return n - app_number - ora_number\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpv6yamapm.swift:17:15: error: value of type 'String' has no member\
    \ 'components'\n    let s = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    for i in s.lowercased()\
    \ {\n        if i == \"a\" {\n            apples += 1\n        } else if i ==\
    \ \"o\" {\n            oranges += 1\n        }\n    }\n    return n - (apples\
    \ + oranges)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpf5b_0929/tmpf5b_0929.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f8ba21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f8b718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f8b718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f8b7177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5b_0929                        0x000055a04094f479 <unavailable> + 5241

    5    libc.so.6                          0x00002b7f8bc0d460 __libc_start_main +
    245

    6    tmpf5b_0929                        0x000055a04094f0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpsqh9b0q2/tmpsqh9b0q2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0142180c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0141e77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0141e77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0141e767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsqh9b0q2                        0x0000562926bc9269 <unavailable> + 4713

    5    libc.so.6                          0x00002b014236c460 __libc_start_main +
    245

    6    tmpsqh9b0q2                        0x0000562926bc8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Enter your code between the two comment markers\n    let appAndOr\
    \ = s.split(separator: \" \")\n    var appStr = \"\"\n    var orStr = \"\"\n \
    \   var numberOfApples = 0\n    var numberOfOranges = 0\n    for i in appAndOr\
    \ {\n        if i.contains(\"apples\") {\n            appStr = String(i.split(separator:\
    \ \"a\")[0])\n        } else if i.contains(\"oranges\") {\n            orStr =\
    \ String(i.split(separator: \"o\")[0])\n        }\n    }\n    numberOfApples =\
    \ Int(appStr) ?? 0\n    numberOfOranges = Int(orStr) ?? 0\n    return n - (numberOfApples\
    \ + numberOfOranges)\n    // End code\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'Swift/Substring.swift:316: Fatal error: String index is out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b83b4af1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83b47e8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b83b47e8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b83b47e813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b83b47e7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b83b4942e40 Substring.index(_:offsetBy:)
    + 880

    6    libswiftCore.so                    0x00002b83b494785c <unavailable> + 2873436

    7    libswiftCore.so                    0x00002b83b4814920 Collection.formIndex(_:offsetBy:)
    + 116

    8    libswift_StringProcessing.so       0x00002b83b44cfb82 <unavailable> + 285570

    9    libswift_StringProcessing.so       0x00002b83b44ceb2f <unavailable> + 281391

    10   libswift_StringProcessing.so       0x00002b83b44cfced <unavailable> + 285933

    11   libswift_StringProcessing.so       0x00002b83b44b542d <unavailable> + 177197

    12   libswift_StringProcessing.so       0x00002b83b44b3840 BidirectionalCollection<>.firstRange<A>(of:)
    + 1517

    13   libswift_StringProcessing.so       0x00002b83b44b3e70 StringProtocol.contains(_:)
    + 64

    14   tmp_hnrdlot                        0x000055ed805980a1 <unavailable> + 8353

    15   tmp_hnrdlot                        0x000055ed8059780b <unavailable> + 6155

    16   libc.so.6                          0x00002b83b4cdd460 __libc_start_main +
    245

    17   tmp_hnrdlot                        0x000055ed80597509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let string = s.split(separator: \" \")\n    let number1 = Int(string[0])!\n\
    \    let number2 = Int(string[3])!\n    return n - number1 - number2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here.\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpl251q92g/tmpl251q92g.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac359ddcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac359ad3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac359ad3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac359ad27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl251q92g                        0x0000559ec4232269 <unavailable> + 4713

    5    libc.so.6                          0x00002ac359fc8460 __libc_start_main +
    245

    6    tmpl251q92g                        0x0000559ec4231ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let total = n - (s.components(separatedBy: \" \")[0] as NSString).integerValue\
    \ - (s.components(separatedBy: \" \")[2] as NSString).integerValue\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpjwqbvobe.swift:17:59: error: cannot find type 'NSString' in scope\n\
    \    let total = n - (s.components(separatedBy: \" \")[0] as NSString).integerValue\
    \ - (s.components(separatedBy: \" \")[2] as NSString).integerValue\n         \
    \                                                 ^~~~~~~~\n/tmp/tmpjwqbvobe.swift:17:122:\
    \ error: cannot find type 'NSString' in scope\n    let total = n - (s.components(separatedBy:\
    \ \" \")[0] as NSString).integerValue - (s.components(separatedBy: \" \")[2] as\
    \ NSString).integerValue\n                                                   \
    \                                                                      ^~~~~~~~\n\
    /tmp/tmpjwqbvobe.swift:17:24: error: value of type 'String' has no member 'components'\n\
    \    let total = n - (s.components(separatedBy: \" \")[0] as NSString).integerValue\
    \ - (s.components(separatedBy: \" \")[2] as NSString).integerValue\n         \
    \            ~ ^~~~~~~~~~\n/tmp/tmpjwqbvobe.swift:17:87: error: value of type\
    \ 'String' has no member 'components'\n    let total = n - (s.components(separatedBy:\
    \ \" \")[0] as NSString).integerValue - (s.components(separatedBy: \" \")[2] as\
    \ NSString).integerValue\n                                                   \
    \                                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var string: String = s\n    let orange: Character = \"o\"\n  \
    \  let apple: Character = \"a\"\n    var num_orange: Int = 0\n    var num_apple:\
    \ Int = 0\n    var i: Int = 0\n    let space: Character = \" \"\n    for char\
    \ in string {\n        if (char == space) {\n            string.remove(at: string.index(string.startIndex,\
    \ offsetBy: i))\n        }\n        i += 1\n    }\n    i = 0\n    while (string[string.index(string.startIndex,\
    \ offsetBy: i)] != orange) {\n        num_apple *= 10\n        num_apple += Int(String(string[string.index(string.startIndex,\
    \ offsetBy: i)]))!\n        i += 1\n    }\n    i += 1\n    while (string[string.index(string.startIndex,\
    \ offsetBy: i)] != orange) {\n        num_orange *= 10\n        num_orange +=\
    \ Int(String(string[string.index(string.startIndex, offsetBy: i)]))!\n       \
    \ i += 1\n    }\n    return n - num_apple - num_orange\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmp3aecna12/tmp3aecna12.swift:33: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afa083a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa0809f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa0809f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa0809f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa0809ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3aecna12                        0x000055c86d9f6227 <unavailable> + 8743

    6    tmp3aecna12                        0x000055c86d9f56ab <unavailable> + 5803

    7    libc.so.6                          0x00002afa08594460 __libc_start_main +
    245

    8    tmp3aecna12                        0x000055c86d9f53a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    var s = s.split(separator: \" \")\n    return n - Int(s[0])!\
    \ - Int(s[3])!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    let number = s.components(separatedBy: \" \")\n    var apples\
    \ = 0\n    var oranges = 0\n    for i in number {\n        if i == \"apples\"\
    \ {\n            apples = Int(number[number.index(of: \"apples\")! - 1])!\n  \
    \      } else if i == \"oranges\" {\n            oranges = Int(number[number.index(of:\
    \ \"oranges\")! - 1])!\n        }\n    }\n    let totalApplesAndOranges = apples\
    \ + oranges\n    let mango = n - totalApplesAndOranges\n    return mango\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp2f4alvly.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let number = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp9aaazwyu/tmp9aaazwyu.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e68a4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e68745b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e68745988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e687447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9aaazwyu                        0x000055fb9f45e269 <unavailable> + 4713

    5    libc.so.6                          0x00002b0e68c3a460 __libc_start_main +
    245

    6    tmp9aaazwyu                        0x000055fb9f45dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let components = s.components(separatedBy: \"and\")\n    let numbers\
    \ = components.map { Int($0.components(separatedBy: \" \")[0])! }\n    let total\
    \ = numbers.reduce(0, +)\n    return n - total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp52b9j2jx.swift:17:24: error: value of type 'String' has no member\
    \ 'components'\n    let components = s.components(separatedBy: \"and\")\n    \
    \                 ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    var result = 0\n    var apples =\
    \ 0\n    var oranges = 0\n    var arr = s.split(separator: \" \")\n    if arr[1]\
    \ == \"apples\" {\n        apples = Int(arr[0])!\n        oranges = Int(arr[3])!\n\
    \    }\n    else {\n        apples = Int(arr[3])!\n        oranges = Int(arr[0])!\n\
    \    }\n    result = n - (apples + oranges)\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruit = s.split(separator: \" \")\n    var apple = Int(fruit[0])!\n\
    \    var orange = Int(fruit[2])!\n    let sumOfFruit = apple + orange\n    if\
    \ sumOfFruit >= n {\n        return 0\n    } else {\n        return n - sumOfFruit\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s: \"\
    5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpo6cpm7k5/tmpo6cpm7k5.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002afc55c84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5597b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc5597b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc5597b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc5597abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpo6cpm7k5                        0x000055e5c5561eba <unavailable> + 7866

    6    tmpo6cpm7k5                        0x000055e5c55615fb <unavailable> + 5627

    7    libc.so.6                          0x00002afc55e70460 __libc_start_main +
    245

    8    tmpo6cpm7k5                        0x000055e5c55612f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var new_string = \"\"\n    for i in s {\n        if i == \"a\"\
    \ || i == \"e\" || i == \"i\" || i == \"o\" || i == \"u\" {\n            new_string\
    \ += \"\"\n        } else {\n            new_string += String(i)\n        }\n\
    \    }\n    let new_arr = new_string.split(separator: \" \")\n    let orange =\
    \ Int(new_arr[3])\n    let apple = Int(new_arr[0])\n    return n - (orange! +\
    \ apple!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let sArr = s.components(separatedBy: \" \")\n    let a = Int(sArr[0])\
    \ ?? 0\n    let o = Int(sArr[2]) ?? 0\n    return n - a - o\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpa962nkjv.swift:17:18: error: value of type 'String' has no member\
    \ 'components'\n    let sArr = s.components(separatedBy: \" \")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var total_fruits = n\n    var fruit_data = s.components(separatedBy:\
    \ \" \")\n    var remove_fruit_data = fruit_data.removeFirst(2)\n    remove_fruit_data\
    \ = fruit_data.removeLast(2)\n    for i in 0..<fruit_data.count{\n        total_fruits\
    \ -= Int(fruit_data[i])!\n    }\n    return total_fruits\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpvm7p9zcp.swift:18:24: error: value of type 'String' has no member\
    \ 'components'\n    var fruit_data = s.components(separatedBy: \" \")\n      \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var sum = 0\n    for i in s.split(separator: \" \") {\n      \
    \  if Int(i) != nil {\n            sum += Int(i)!\n        }\n    }\n    return\
    \ n - sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    /// returns the number of the mangoes in the basket\n  \
    \  /// - parameters:\n    ///     - s: a string that represents the number of\
    \ the oranges and apples in the basket\n    ///     - n: the total number of the\
    \ fruits in the basket\n    /// - returns: an integer that represents the number\
    \ of the mangoes in the basket\n    /// - postcondition: the number of the total\
    \ number of the fruits in the basket\n    ///                 will be equal to\
    \ the number of the oranges, apples, and mangoes\n    /// - performance: the performance\
    \ of this function is O(n)\n    /// - notes: this function doesn't accept a string\
    \ that has any character other than\n    ///         numbers, spaces, the words\
    \ \"apples\", \"oranges\", and \"mangoes\"\n    var total_fruit_count = 0\n  \
    \  var total_orange_count = 0\n    var total_apple_count = 0\n    var mango_count\
    \ = 0\n    var string_array = [String]()\n    var fruit_count_array = [Int]()\n\
    \    var fruit_type_array = [String]()\n    var fruit_count_string = \"\"\n  \
    \  var fruit_type_string = \"\"\n    var count = 0\n    while count < s.count\
    \ {\n        if s[s.index(s.startIndex, offsetBy: count)] == \" \" {\n       \
    \     string_array.append(fruit_count_string)\n            fruit_count_string\
    \ = \"\"\n            string_array.append(fruit_type_string)\n            fruit_type_string\
    \ = \"\"\n        } else if s[s.index(s.startIndex, offsetBy: count)] == \"a\"\
    \ {\n            fruit_type_string += String(s[s.index(s.startIndex, offsetBy:\
    \ count)])\n        } else if s[s.index(s.startIndex, offsetBy: count)] == \"\
    p\" {\n            fruit_type_string += String(s[s.index(s.startIndex, offsetBy:\
    \ count)])\n        } else if s[s.index(s.startIndex, offsetBy: count)] == \"\
    o\" {\n            fruit_type_string += String(s[s.index(s.startIndex, offsetBy:\
    \ count)])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpwfk137u0.swift:71:72: error: expected '}' at end of brace statement\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)\n  \
    \                                                                     ^\n/tmp/tmpwfk137u0.swift:38:27:\
    \ note: to match this opening '{'\n    while count < s.count {\n             \
    \             ^\n/tmp/tmpwfk137u0.swift:71:72: error: expected '}' at end of brace\
    \ statement\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)\n                                                                   \
    \    ^\n/tmp/tmpwfk137u0.swift:16:51: note: to match this opening '{'\nfunc fruit_distribution(s:\
    \ String, n: Int) -> Int {\n                                                 \
    \ ^\n/tmp/tmpwfk137u0.swift:53:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n/tmp/tmpwfk137u0.swift:28:9: warning: initialization of variable\
    \ 'total_fruit_count' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var total_fruit_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n \
    \   _\n/tmp/tmpwfk137u0.swift:29:9: warning: initialization of variable 'total_orange_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var total_orange_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwfk137u0.swift:30:9:\
    \ warning: initialization of variable 'total_apple_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var total_apple_count =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwfk137u0.swift:31:9: warning: initialization\
    \ of variable 'mango_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var mango_count = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpwfk137u0.swift:33:9: warning: initialization of variable 'fruit_count_array'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var fruit_count_array = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpwfk137u0.swift:34:9:\
    \ warning: initialization of variab"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ current = \"\"\n    var number = 0\n    for i in s {\n        if i == \" \"\
    \ {\n            if current == \"and\" {\n                mango = n - apples -\
    \ oranges\n                break\n            }\n            else if current ==\
    \ \"apples\" {\n                number = 0\n            }\n            else if\
    \ current == \"oranges\" {\n                number = 0\n            }\n      \
    \      else {\n                number = Int(current)!\n            }\n       \
    \     current = \"\"\n        }\n        else if i == \"a\" {\n            apples\
    \ = number\n            current += String(i)\n        }\n        else if i ==\
    \ \"r\" {\n            oranges = number\n            current += String(i)\n  \
    \      }\n        else {\n            current += String(i)\n        }\n    }\n\
    \    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpnfm3cqdm/tmpnfm3cqdm.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9efca53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9efc74ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9efc74a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9efc7497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfm3cqdm                        0x000055f9d6f78659 <unavailable> + 5721

    5    libc.so.6                          0x00002b9efcc3f460 __libc_start_main +
    245

    6    tmpnfm3cqdm                        0x000055f9d6f782d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    //your code here\n    let newArray = s.split(separator: \" \"\
    )\n    var apples = 0\n    var oranges = 0\n    for word in newArray {\n     \
    \   if word == \"apples\" {\n            if apples == 0 {\n                apples\
    \ = Int(newArray[0])!\n            } else {\n                apples += Int(newArray[2])!\n\
    \            }\n        } else if word == \"oranges\" {\n            if oranges\
    \ == 0 {\n                oranges = Int(newArray[0])!\n            } else {\n\
    \                oranges += Int(newArray[2])!\n            }\n        }\n    }\n\
    \    let apple = apples\n    let orange = oranges\n    let mango = n - (apple\
    \ + orange)\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpsjy82o3w/tmpsjy82o3w.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b842a6fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b842a3f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b842a3f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b842a3f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjy82o3w                        0x000055af60fc58d9 <unavailable> + 6361

    5    libc.so.6                          0x00002b842a8ea460 __libc_start_main +
    245

    6    tmpsjy82o3w                        0x000055af60fc5559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let splitStr = s.components(separatedBy:\
    \ \" \")\n    if (splitStr.count == 4) {\n        let numOfApples = Int(splitStr[0])\n\
    \        let numOfOranges = Int(splitStr[2])\n        if ((numOfApples != nil)\
    \ && (numOfOranges != nil)) {\n            let totalFruits = numOfApples! + numOfOranges!\n\
    \            if (totalFruits < n) {\n                return n - totalFruits\n\
    \            }\n        }\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp_j8ha5rf.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let splitStr = s.components(separatedBy: \" \")\n        \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mangos = 0\n    var apples = 0\n    var oranges = 0\n    var\
    \ sum = 0\n    var j = 0\n    var i = 0\n    var last = \"\"\n    while (i < s.count)\
    \ {\n        if (s[s.index(s.startIndex, offsetBy: i)] != \" \") {\n         \
    \   j = i\n            while (j < s.count && s[s.index(s.startIndex, offsetBy:\
    \ j)] != \" \") {\n                last += String(s[s.index(s.startIndex, offsetBy:\
    \ j)])\n                j += 1\n            }\n            if (last == \"apples\"\
    ) {\n                sum += apples\n                i = j\n                last\
    \ = \"\"\n            } else if (last == \"oranges\") {\n                sum +=\
    \ oranges\n                i = j\n                last = \"\"\n            } else\
    \ if (last == \"and\") {\n                i = j\n                last = \"\"\n\
    \            } else {\n                if (apples == 0) {\n                  \
    \  apples = Int(last)!\n                    last = \"\"\n                } else\
    \ {\n                    oranges = Int(last)!\n                    last = \"\"\
    \n                }\n                i = j\n            }\n        } else {\n\
    \            i += 1\n        }\n    }\n    mangos = n - sum\n    return mangos\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpxd6pe0ev/tmpxd6pe0ev.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5249cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5246c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5246c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5246c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxd6pe0ev                        0x000055955f16d861 <unavailable> + 6241

    5    libc.so.6                          0x00002ad524bbb460 __libc_start_main +
    245

    6    tmpxd6pe0ev                        0x000055955f16d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // write your code here\n    let array = s.split(separator: \"\
    \ \")\n    var sum = 0\n    for i in 0...1 {\n        sum += Int(array[i])!\n\
    \    }\n    return n - sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpul4kypel/tmpul4kypel.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a74de8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a74adf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a74adf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a74adf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a74adebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpul4kypel                        0x0000563744ebef1c <unavailable> + 7964

    6    tmpul4kypel                        0x0000563744ebe6fb <unavailable> + 5883

    7    libc.so.6                          0x00002b7a74fd4460 __libc_start_main +
    245

    8    tmpul4kypel                        0x0000563744ebe3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let numbers = s.split(separator: \" \").map { Int($0)! }\n   \
    \ return n - numbers.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpdigh7f5d/tmpdigh7f5d.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e3f581c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e3f278561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8e3f278286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8e3f27813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8e3f277bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdigh7f5d                        0x000055aff676bfd9 <unavailable> + 8153

    6    libswiftCore.so                    0x00002b8e3f260820 Collection.map<A>(_:)
    + 426

    7    tmpdigh7f5d                        0x000055aff676bd1d <unavailable> + 7453

    8    tmpdigh7f5d                        0x000055aff676b6cb <unavailable> + 5835

    9    libc.so.6                          0x00002b8e3f76d460 __libc_start_main +
    245

    10   tmpdigh7f5d                        0x000055aff676b3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let app = Int(fruits[0])!\n\
    \    let org = Int(fruits[2])!\n    return n - app - org\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpwf8p0dxx/tmpwf8p0dxx.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b96c0e52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96c0b49561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b96c0b49286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b96c0b4913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b96c0b48bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwf8p0dxx                        0x0000564c2b24ceaa <unavailable> + 7850

    6    tmpwf8p0dxx                        0x0000564c2b24c5fb <unavailable> + 5627

    7    libc.so.6                          0x00002b96c103e460 __libc_start_main +
    245

    8    tmpwf8p0dxx                        0x0000564c2b24c2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // your code here\n    let fruits = s.split(separator: \" \")\n\
    \    let mangoes = n - Int(fruits[0])! - Int(fruits[3])!\n    return mangoes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let s = s.replacingOccurrences(of: \" apples and \", with: \"\
    \ \")\n    let s = s.replacingOccurrences(of: \" oranges\", with: \"\")\n    let\
    \ arr = s.components(separatedBy: \" \")\n    let apples = Int(arr[0])\n    let\
    \ oranges = Int(arr[1])\n    return n - (apples! + oranges!)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp_m6aiwxz.swift:17:15: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let s = s.replacingOccurrences(of: \" apples and\
    \ \", with: \" \")\n            ~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var a = \"\"\n    var o = \"\"\n    for i in s {\n        if i.isNumber\
    \ {\n            if a == \"\" {\n                a.append(i)\n            } else\
    \ {\n                o.append(i)\n            }\n        }\n    }\n    let apples\
    \ = Int(a)!\n    let oranges = Int(o)!\n    return n - apples - oranges\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var arr = s.components(separatedBy: \" \")\n    var totalApples\
    \ = Int(arr[0])\n    var totalOranges = Int(arr[2])\n    var totalMangoes = n\
    \ - (totalApples! + totalOranges!)\n    return totalMangoes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpbpd6ys6o.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    var arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruits_numbers = s.split(separator: \" \")\n    var apples\
    \ = Int(fruits_numbers[0])!\n    var oranges = Int(fruits_numbers[2])!\n    var\
    \ mangoes = n - apples - oranges\n    return mangoes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpaedjc8aq/tmpaedjc8aq.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b35002b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34fffb0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b34fffb0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b34fffb013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b34fffafbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpaedjc8aq                        0x0000561c963effaa <unavailable> + 8106

    6    tmpaedjc8aq                        0x0000561c963ef64b <unavailable> + 5707

    7    libc.so.6                          0x00002b35004a5460 __libc_start_main +
    245

    8    tmpaedjc8aq                        0x0000561c963ef349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    var n = n\n    let a = s.components(separatedBy: \" \")\n\
    \    for i in a {\n        if i == \"apples\" {\n            n -= Int(a[a.firstIndex(of:\
    \ i)! - 1])!\n        }\n        if i == \"oranges\" {\n            n -= Int(a[a.firstIndex(of:\
    \ i)! - 1])!\n        }\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpx3v6z654.swift:19:15: error: value of type 'String' has no member\
    \ 'components'\n    let a = s.components(separatedBy: \" \")\n            ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let mangoFruits =\
    \ n - Int(fruits[0])! - Int(fruits[3])!\n    return mangoFruits\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var inputValues = s.split(separator: \" \")\n    var temp = inputValues[0]\n\
    \    temp.removeLast()\n    var apples = Int(temp)!\n    temp = inputValues[2]\n\
    \    temp.removeLast()\n    var oranges = Int(temp)!\n    var mango = n - apples\
    \ - oranges\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmprpktyt5q/tmprpktyt5q.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b43996ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43993e2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b43993e2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b43993e213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b43993e1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprpktyt5q                        0x00005631fb279f7b <unavailable> + 8059

    6    tmprpktyt5q                        0x00005631fb27973b <unavailable> + 5947

    7    libc.so.6                          0x00002b43998d7460 __libc_start_main +
    245

    8    tmprpktyt5q                        0x00005631fb279439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.components(separatedBy: \" \")\n    var apples\
    \ = 0\n    var oranges = 0\n    for fruit in fruits {\n        if fruit.elementsEqual(\"\
    apples\") {\n            apples = Int(fruits[fruits.index(of: fruit)! - 1])!\n\
    \        } else if fruit.elementsEqual(\"oranges\") {\n            oranges = Int(fruits[fruits.index(of:\
    \ fruit)! - 1])!\n        }\n    }\n    return n - apples - oranges\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpb7sx7dno.swift:17:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    //the magic code goes here\n    var magic = \"\"\n    var fn =\
    \ \"\"\n    var os = \"\"\n    for char in s {\n        if char != \" \" {\n \
    \           magic += String(char)\n        }\n    }\n    for char in magic {\n\
    \        if char == \"a\" {\n            fn += String(char)\n        } else if\
    \ char == \"n\" {\n            fn += String(char)\n        } else if char == \"\
    d\" {\n            fn += String(char)\n        } else if char == \"o\" {\n   \
    \         os += String(char)\n        } else if char == \"r\" {\n            os\
    \ += String(char)\n        } else if char == \"g\" {\n            os += String(char)\n\
    \        } else if char == \"e\" {\n            os += String(char)\n        }\
    \ else if char == \"s\" {\n            os += String(char)\n        } else {\n\
    \            continue\n        }\n    }\n    if fn == \"and\" {\n        var apple\
    \ = 0\n        var orange = 0\n        var number = \"\"\n        for i in magic\
    \ {\n            if i != \"a\" && i != \"n\" && i != \"d\" {\n               \
    \ number += String(i)\n            } else {\n                break\n         \
    \   }\n        }\n        for i in number {\n            if i != \"0\" && i !=\
    \ \"1\" && i != \"2\" && i != \"3\" && i != \"4\" && i != \"5\" && i != \"6\"\
    \ && i != \"7\" && i != \"8\" && i != \"9\" {\n                continue\n    \
    \        } else {\n                apple = Int(String(i))!\n            }\n  \
    \      }\n        number = \"\"\n        for i in magic {\n            if i !=\
    \ \"o\" && i != \"r\" && i != \"a\" && i != \"n\" && i != \"g\" && i != \"e\"\
    \ && i != \"s\" {\n                number += String(i)\n            } else {\n\
    \                break\n            }\n        }\n        for i in number {\n\
    \            if i != \"0\" && i != \"1\" && i != \"2\" && i != \"3\" && i\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp7kyybnvd.swift:74:65: error: expected '{' after 'if' condition\n\
    \            if i != \"0\" && i != \"1\" && i != \"2\" && i != \"3\" && i\n  \
    \                                                              ^\n/tmp/tmp7kyybnvd.swift:96:72:\
    \ error: expected '}' at end of brace statement\nassert(fruit_distribution(s:\
    \ \"1 apples and 100 oranges\", n: 120) == 19)\n                             \
    \                                          ^\n/tmp/tmp7kyybnvd.swift:47:20: note:\
    \ to match this opening '{'\n    if fn == \"and\" {\n                   ^\n/tmp/tmp7kyybnvd.swift:96:72:\
    \ error: expected '}' at end of brace statement\nassert(fruit_distribution(s:\
    \ \"1 apples and 100 oranges\", n: 120) == 19)\n                             \
    \                                          ^\n/tmp/tmp7kyybnvd.swift:16:51: note:\
    \ to match this opening '{'\nfunc fruit_distribution(s: String, n: Int) -> Int\
    \ {\n                                                  ^\n/tmp/tmp7kyybnvd.swift:74:64:\
    \ error: cannot convert value of type 'Character' to expected argument type 'Bool'\n\
    \            if i != \"0\" && i != \"1\" && i != \"2\" && i != \"3\" && i\n  \
    \                                                             ^\n/tmp/tmp7kyybnvd.swift:78:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let apples = 0\n    let oranges = 0\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp52epl37e/tmp52epl37e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1cef667c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1cef35eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1cef35e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1cef35d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52epl37e                        0x000056376b483269 <unavailable> + 4713

    5    libc.so.6                          0x00002b1cef853460 __libc_start_main +
    245

    6    tmp52epl37e                        0x000056376b482ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    let apple = \"apples\"\n    let orange = \"oranges\"\n \
    \   let mango = \"mangoes\"\n    \n    let items = s.split(separator: \" \")\n\
    \    let amount = n - (Int(items[0])! + Int(items[3])!)\n    \n    return amount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // get the number of apples \n    let apples = s.split(separator:\
    \ \" \")[0]\n    // get the number of oranges\n    let oranges = s.split(separator:\
    \ \" \")[4]\n    // get the numbers of fruits in the basket\n    let fruits_in_basket\
    \ = n\n    // compute the number of mango in the basket and return it\n    return\
    \ fruits_in_basket - (Int(apples)! + Int(oranges)!)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmp82xvu98w/tmp82xvu98w.swift:24: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac38e208c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac38deff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac38deff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac38deff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac38defebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp82xvu98w                        0x00005622708bb051 <unavailable> + 8273

    6    tmp82xvu98w                        0x00005622708ba5fb <unavailable> + 5627

    7    libc.so.6                          0x00002ac38e3f4460 __libc_start_main +
    245

    8    tmp82xvu98w                        0x00005622708ba2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var res = s.components(separatedBy: \" and \")\n    res[0] = res[0].replacingOccurrences(of:\
    \ \" apples\", with: \"\")\n    res[1] = res[1].replacingOccurrences(of: \" oranges\"\
    , with: \"\")\n    let app = Int(res[0])\n    let ora = Int(res[1])\n    return\
    \ n - (app! + ora!)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpkvi_s2t9.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    var res = s.components(separatedBy: \" and \")\n         \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mango_fruits = n\n    for item in s.split(separator: \" \"\
    ) {\n        if item.first?.isNumber == true {\n            mango_fruits -= Int(item)!\n\
    \        }\n    }\n    return mango_fruits\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let strArr = s.split(separator: \" \")\n    let total = Int(strArr[0])!\
    \ + Int(strArr[4])!\n    return n - total\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpsnaf4ug7/tmpsnaf4ug7.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2c16fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2c13f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae2c13f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae2c13f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae2c13f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsnaf4ug7                        0x000056040b645e90 <unavailable> + 7824

    6    tmpsnaf4ug7                        0x000056040b6455fb <unavailable> + 5627

    7    libc.so.6                          0x00002ae2c18ea460 __libc_start_main +
    245

    8    tmpsnaf4ug7                        0x000056040b6452f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var m: Int = 0\n    let arr = s.components(separatedBy: \" \"\
    )\n    m = n - (Int(arr[0])! + Int(arr[3])!)\n    return m\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpnwdwy8tk.swift:18:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // put your code here\n    var apples = 0\n    var oranges = 0\n\
    \    var n = n\n    let sArr = s.split(separator: \" \")\n    var i = 0\n    while\
    \ i < sArr.count {\n        if sArr[i] == \"apples\" {\n            apples = Int(sArr[i-1])!\n\
    \        } else if sArr[i] == \"oranges\" {\n            oranges = Int(sArr[i-1])!\n\
    \        }\n        i += 1\n    }\n    n -= apples + oranges\n    return n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var text = s.split(separator: \" \")\n    let apples = Int(text[0])\
    \ ?? 0\n    let oranges = Int(text[2]) ?? 0\n    let fruits = n - (apples + oranges)\n\
    \    return fruits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp_z2ukmv0/tmp_z2ukmv0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbb341ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbb3111b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbb3111988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbb31107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_z2ukmv0                        0x000055ed19028639 <unavailable> + 5689

    5    libc.so.6                          0x00002afbb3606460 __libc_start_main +
    245

    6    tmp_z2ukmv0                        0x000055ed190282b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let strArr = s.split(separator: \" \")\n    let a = Int(strArr[0])!\n\
    \    let o = Int(strArr[3])!\n    let m = n - a - o\n    return m\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var apples = 0\n    var oranges = 0\n    for char in s.characters\
    \ {\n        if char.isNumber {\n            if apples == 0 {\n              \
    \  apples = Int(String(char))!\n            } else {\n                oranges\
    \ = Int(String(char))!\n            }\n        }\n    }\n    return n - apples\
    \ - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmptdvo9w27.swift:19:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let parts = s.components(separatedBy: \" \")\n    let appleCount\
    \ = Int(parts[0])!\n    let orangeCount = Int(parts[2])!\n    return n - appleCount\
    \ - orangeCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpn9jdujjc.swift:17:19: error: value of type 'String' has no member\
    \ 'components'\n    let parts = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruit = s.components(separatedBy: \" \")\n    let apples =\
    \ Int(fruit[0])!\n    let oranges = Int(fruit[2])!\n    let mango = n - apples\
    \ - oranges\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpncx53pmo.swift:17:19: error: value of type 'String' has no member\
    \ 'components'\n    var fruit = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var sum = 0\n    var num_apples = 0\n    var num_oranges = 0\n\
    \    for ch in s {\n        if ch.isNumber {\n            sum = sum * 10 + Int(String(ch))!\n\
    \        }\n        if ch == \"a\" {\n            num_apples = sum\n        }\n\
    \        if ch == \"o\" {\n            num_oranges = sum\n        }\n    }\n \
    \   return n - num_apples - num_oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpigzm964h/tmpigzm964h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f60b54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f6084bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f6084b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f6084a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpigzm964h                        0x00005580dc6bf609 <unavailable> + 5641

    5    libc.so.6                          0x00002b4f60d40460 __libc_start_main +
    245

    6    tmpigzm964h                        0x00005580dc6bf289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let elements = s.components(separatedBy:\
    \ \" \")\n    if let firstNum = Int(elements[0]), let secondNum = Int(elements[2])\
    \ {\n        return n - firstNum - secondNum\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmplb54f13_.swift:18:22: error: value of type 'String' has no member\
    \ 'components'\n    let elements = s.components(separatedBy: \" \")\n        \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write Your Code Here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpwzz42l_j/tmpwzz42l_j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ea503c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ea1fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ea1fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ea1f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzz42l_j                        0x00005581546ce269 <unavailable> + 4713

    5    libc.so.6                          0x00002ab6ea6ef460 __libc_start_main +
    245

    6    tmpwzz42l_j                        0x00005581546cdee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arrayOfFruits = s.components(separatedBy: \" \")\n    let\
    \ numberOfApples = Int(arrayOfFruits[0])\n    let numberOfOranges = Int(arrayOfFruits[2])\n\
    \    let fruitsCount = numberOfApples! + numberOfOranges!\n    let numberOfMangoes\
    \ = n - fruitsCount\n    return numberOfMangoes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpad9ubdvh.swift:17:27: error: value of type 'String' has no member\
    \ 'components'\n    let arrayOfFruits = s.components(separatedBy: \" \")\n   \
    \                     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var fruitsArray = s.split(separator: \" \")\n    let numOfApples\
    \ = Int(fruitsArray[0])!\n    let numOfOranges = Int(fruitsArray[2])!\n    let\
    \ numOfMangoes = n - numOfApples - numOfOranges\n    return numOfMangoes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpllgsw0_e/tmpllgsw0_e.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae26e938c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae26e62f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae26e62f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae26e62f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae26e62ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpllgsw0_e                        0x000055afb01cafad <unavailable> + 8109

    6    tmpllgsw0_e                        0x000055afb01ca64b <unavailable> + 5707

    7    libc.so.6                          0x00002ae26eb24460 __libc_start_main +
    245

    8    tmpllgsw0_e                        0x000055afb01ca349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let index = s.firstIndex(of: \" \")!\n    let s1 = String(s[..<index])\n\
    \    let apples = Int(s1)!\n    let index2 = s.lastIndex(of: \" \")!\n    let\
    \ s2 = String(s[index2...])\n    let oranges = Int(s2)!\n    let mango = n - apples\
    \ - oranges\n    return mango\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpkp_bcb_m/tmpkp_bcb_m.swift:22: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7fdc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef7faba561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef7faba286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef7faba13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef7fab9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkp_bcb_m                        0x000055fffa4ac489 <unavailable> + 9353

    6    tmpkp_bcb_m                        0x000055fffa4ab7eb <unavailable> + 6123

    7    libc.so.6                          0x00002aef7ffaf460 __libc_start_main +
    245

    8    tmpkp_bcb_m                        0x000055fffa4ab4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    let pieces = s.split(separator: \"\
    \ \")\n    let apples = Int(pieces[0])!\n    let oranges = Int(pieces[3])!\n \
    \   return n - apples - oranges\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here.\n    let regex = try! NSRegularExpression(pattern:\
    \ \"(\\\\d)+\", options: .caseInsensitive)\n    let range = NSRange(location:\
    \ 0, length: s.count)\n    let numbers = regex.matches(in: s, options: [], range:\
    \ range)\n    guard numbers.count == 2 else { return 0 }\n    var i = 0\n    var\
    \ sum = 0\n    while i < numbers.count {\n        let range = numbers[i].range\n\
    \        let start = s.index(s.startIndex, offsetBy: range.location)\n       \
    \ let end = s.index(s.startIndex, offsetBy: range.location + range.length)\n \
    \       let sub = s[start..<end]\n        sum += Int(sub) ?? 0\n        i += 1\n\
    \    }\n    return n - sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp0_cxku9n.swift:18:22: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = try! NSRegularExpression(pattern: \"(\\\\d)+\", options:\
    \ .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp0_cxku9n.swift:18:71:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \    let regex = try! NSRegularExpression(pattern: \"(\\\\d)+\", options: .caseInsensitive)\n\
    \                                                                     ~^~~~~~~~~~~~~~~\n\
    /tmp/tmp0_cxku9n.swift:19:17: error: cannot find 'NSRange' in scope\n    let range\
    \ = NSRange(location: 0, length: s.count)\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return (n - s.components(separatedBy: \" \").filter { $0 != \"\
    and\" }.compactMap { Int($0) }.reduce(0, +))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpsr58uqlp.swift:17:19: error: value of type 'String' has no member\
    \ 'components'\n    return (n - s.components(separatedBy: \" \").filter { $0 !=\
    \ \"and\" }.compactMap { Int($0) }.reduce(0, +))\n                ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mangoCount = 0\n    var int = \"\"\n    for c in s {\n   \
    \     if c != \" \" && c != \"a\" && c != \"n\" && c != \"d\" && c != \"o\" &&\
    \ c != \"r\" && c != \"g\" && c != \"e\" && c != \"s\" {\n            int.append(c)\n\
    \        }\n    }\n    let newInt = Int(int)\n    mangoCount = n - newInt!\n \
    \   return mangoCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpj0b_rfy4/tmpj0b_rfy4.swift:25: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b51f3c61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51f3958561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b51f3958286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b51f395813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b51f3957bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpj0b_rfy4                        0x000055b157169426 <unavailable> + 9254

    6    tmpj0b_rfy4                        0x000055b15716852b <unavailable> + 5419

    7    libc.so.6                          0x00002b51f3e4d460 __libc_start_main +
    245

    8    tmpj0b_rfy4                        0x000055b157168229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpsqh9b0q2/tmpsqh9b0q2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0142180c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0141e77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0141e77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0141e767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsqh9b0q2                        0x0000562926bc9269 <unavailable> + 4713

    5    libc.so.6                          0x00002b014236c460 __libc_start_main +
    245

    6    tmpsqh9b0q2                        0x0000562926bc8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var remainingMangoes = n\n    for fruit in s.split(separator:\
    \ \" \") {\n        if fruit.contains(\"a\") {\n            remainingMangoes -=\
    \ Int(fruit)!\n        } else if fruit.contains(\"o\") {\n            remainingMangoes\
    \ -= Int(fruit)!\n        }\n    }\n    return remainingMangoes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmp9vz902wg/tmp9vz902wg.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002acdf95fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdf92f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acdf92f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acdf92f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acdf92f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9vz902wg                        0x00005595a4d7b0fa <unavailable> + 8442

    6    tmp9vz902wg                        0x00005595a4d7a7bb <unavailable> + 6075

    7    libc.so.6                          0x00002acdf97ea460 __libc_start_main +
    245

    8    tmp9vz902wg                        0x00005595a4d7a4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = n\n    let components = s.split(separator: \" \"\
    )\n    if components.count >= 3 {\n        var element1 = Int(components[0]) ??\
    \ 0\n        var element2 = Int(components[2]) ?? 0\n        if let index = components[1].firstIndex(of:\
    \ \"a\") {\n            element1 = Int(components[1][..<index]) ?? 0\n       \
    \ }\n        if let index = components[3].firstIndex(of: \"o\") {\n          \
    \  element2 = Int(components[3][..<index]) ?? 0\n        }\n        result -=\
    \ element1 + element2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpmhv1li41/tmpmhv1li41.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9601ebec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9601bb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9601bb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9601bb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhv1li41                        0x0000557d1103c889 <unavailable> + 6281

    5    libc.so.6                          0x00002b96020aa460 __libc_start_main +
    245

    6    tmpmhv1li41                        0x0000557d1103c509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let l = s.split(separator: \" \")\n    if let n1 = Int(l[0]),\
    \ let n2 = Int(l[2]) {\n        return n - n1 - n2\n    }\n    return 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpmxki_kad/tmpmxki_kad.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04d53ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04d50e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04d50e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04d50e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmxki_kad                        0x00005654dfc935e9 <unavailable> + 5609

    5    libc.so.6                          0x00002b04d55d7460 __libc_start_main +
    245

    6    tmpmxki_kad                        0x00005654dfc93269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    //Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmp00kg1v1z/tmp00kg1v1z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25b00b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25afda9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25afda9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25afda87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp00kg1v1z                        0x00005633c6ffb269 <unavailable> + 4713

    5    libc.so.6                          0x00002b25b029e460 __libc_start_main +
    245

    6    tmp00kg1v1z                        0x00005633c6ffaee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var totalFruits = 0\n    var orangeCount = 0\n    var appleCount\
    \ = 0\n    var tempTotalCount = \"\"\n    var tempAppleCount = \"\"\n    var tempOrangeCount\
    \ = \"\"\n    var isOrange = false\n    var isApple = false\n    var isOranges\
    \ = false\n    var isApples = false\n    var appendAppleCount = false\n    var\
    \ appendOrangeCount = false\n    for char in s {\n        if isApple == true {\n\
    \            tempAppleCount += String(char)\n        }\n        if isOrange ==\
    \ true {\n            tempOrangeCount += String(char)\n        }\n        if isOranges\
    \ == true {\n            tempTotalCount += String(char)\n        }\n        if\
    \ isApples == true {\n            tempTotalCount += String(char)\n        }\n\
    \        if char == \"o\" {\n            isOrange = true\n        }\n        if\
    \ char == \"a\" {\n            isApple = true\n        }\n        if char == \"\
    O\" {\n            isOranges = true\n        }\n        if char == \"A\" {\n \
    \           isApples = true\n        }\n        if char == \"r\" && isOrange ==\
    \ true {\n            isOrange = false\n            orangeCount = Int(tempOrangeCount)!\n\
    \            tempOrangeCount = \"\"\n        }\n        if char == \"l\" && isApple\
    \ == true {\n            isApple = false\n            appleCount = Int(tempAppleCount)!\n\
    \            tempAppleCount = \"\"\n        }\n        if char == \"n\" && isOranges\
    \ == true {\n            isOranges = false\n            orangeCount = Int(tempTotalCount)!\n\
    \            tempTotalCount = \"\"\n        }\n        if char == \"n\" && isApples\
    \ == true {\n            isApples = false\n            appleCount = Int(tempTotalCount)!\n\
    \            tempTotalCount = \"\"\n        }\n    }\n    totalFruits = n - orangeCount\
    \ - appleCount\n    return totalFruits\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp5yk76kp2/tmp5yk76kp2.swift:61: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b249bbf7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b249b8ee561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b249b8ee286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b249b8ee13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b249b8edbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5yk76kp2                        0x0000558bd7cc62c0 <unavailable> + 8896

    6    tmp5yk76kp2                        0x0000558bd7cc558b <unavailable> + 5515

    7    libc.so.6                          0x00002b249bde3460 __libc_start_main +
    245

    8    tmp5yk76kp2                        0x0000558bd7cc5289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here.\n    let arr = s.split(separator: \"\
    \ \")\n    let apple = Int(arr[0]) ?? 0\n    let orange = Int(arr[3]) ?? 0\n \
    \   return n - apple - orange\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.split(separator: \" \")\n    let numApples = Int(arr[0])\
    \ ?? 0\n    let numOranges = Int(arr[2]) ?? 0\n    let totalNum = numApples +\
    \ numOranges\n    return n - totalNum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpqtg5w11p/tmpqtg5w11p.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31db07fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31dad76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31dad76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31dad757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqtg5w11p                        0x000055f3e2acd5e9 <unavailable> + 5609

    5    libc.so.6                          0x00002b31db26b460 __libc_start_main +
    245

    6    tmpqtg5w11p                        0x000055f3e2acd269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let strArray = s.split(separator: \" \")\n    var numOfApples\
    \ = 0\n    var numOfOranges = 0\n    for i in 0..<strArray.count {\n        if\
    \ i % 2 == 0 {\n            numOfApples += Int(strArray[i])!\n        } else {\n\
    \            numOfOranges += Int(strArray[i])!\n        }\n    }\n    let totalNumOfApplesAndOranges\
    \ = numOfApples + numOfOranges\n    return n - totalNumOfApplesAndOranges\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpzmg5n5b4/tmpzmg5n5b4.swift:24: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b73bc74fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73bc446561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73bc446286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73bc44613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73bc445bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzmg5n5b4                        0x0000560cb8f271f4 <unavailable> + 8692

    6    tmpzmg5n5b4                        0x0000560cb8f266fb <unavailable> + 5883

    7    libc.so.6                          0x00002b73bc93b460 __libc_start_main +
    245

    8    tmpzmg5n5b4                        0x0000560cb8f263f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // your code goes here\n    let fruits = s.components(separatedBy:\
    \ \" and \")\n    let fruitsCount = fruits.map { Int($0.components(separatedBy:\
    \ \" \")[0])! }\n    let totalFruits = fruitsCount.reduce(0, +)\n    return n\
    \ - totalFruits\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpejz5g2sp.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let fruits = s.split(separator: \" \")\n    let apples = Int(fruits[0])\
    \ ?? 0\n    let oranges = Int(fruits[3]) ?? 0\n    return n - apples - oranges\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var str = s.components(separatedBy: \" and \")\n    for i in 0..<str.count\
    \ {\n        let index = str[i].firstIndex(of: \" \")\n        str[i] = String(str[i].prefix(upTo:\
    \ index!))\n    }\n    return n - (Int(str[0])! + Int(str[1])!)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpyuw9bfbx.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    var str = s.components(separatedBy: \" and \")\n         \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    let numberOfApples = countApples(s: s)\n    let numberOfOranges\
    \ = countOranges(s: s)\n    let numberOfMangoes = countMangoes(n: n, noOfApples:\
    \ numberOfApples, noOfOranges: numberOfOranges)\n    \n    return numberOfMangoes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpu135ixmc.swift:18:26: error: cannot find 'countApples' in scope\n\
    \    let numberOfApples = countApples(s: s)\n                         ^~~~~~~~~~~\n\
    /tmp/tmpu135ixmc.swift:19:27: error: cannot find 'countOranges' in scope\n   \
    \ let numberOfOranges = countOranges(s: s)\n                          ^~~~~~~~~~~~\n\
    /tmp/tmpu135ixmc.swift:20:27: error: cannot find 'countMangoes' in scope\n   \
    \ let numberOfMangoes = countMangoes(n: n, noOfApples: numberOfApples, noOfOranges:\
    \ numberOfOranges)\n                          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var ints = s.split(separator: \" \").compactMap { Int($0) }\n\
    \    var result = 0\n    result = ints[0] + ints[2]\n    return n - result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b40f6bf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40f68ea561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b40f68ea286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b40f68ea13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b40f68e9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b40f66e9e83 <unavailable> + 188035

    6    tmpyldrjj3t                        0x000056075953bd07 <unavailable> + 7431

    7    tmpyldrjj3t                        0x000056075953b62b <unavailable> + 5675

    8    libc.so.6                          0x00002b40f6ddf460 __libc_start_main +
    245

    9    tmpyldrjj3t                        0x000056075953b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var numbers = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\"]\n    var sum = 0\n    var sumString = \"\"\n    for ch in s{\n \
    \       if numbers.contains(String(ch)){\n            sumString.append(ch)\n \
    \       }\n    }\n    sum = Int(sumString)!\n    let mangoes = n - sum\n    return\
    \ mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmp4mn4oh61/tmp4mn4oh61.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b218da62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b218d759b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b218d759988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b218d7587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mn4oh61                        0x00005583b4ae56f9 <unavailable> + 5881

    5    libc.so.6                          0x00002b218dc4e460 __libc_start_main +
    245

    6    tmp4mn4oh61                        0x00005583b4ae5379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let components = s.components(separatedBy: \" \")\n    let numberOfApples\
    \ = Int(components[0])!\n    let numberOfOranges = Int(components[2])!\n    return\
    \ n - numberOfApples - numberOfOranges\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpmjlb0cto.swift:17:24: error: value of type 'String' has no member\
    \ 'components'\n    let components = s.components(separatedBy: \" \")\n      \
    \               ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var s = s\n    var apples = 0\n    var oranges = 0\n    var result\
    \ = 0\n    if let index = s.firstIndex(of: \"a\") {\n        s.remove(at: index)\n\
    \        s.remove(at: index)\n        s.remove(at: index)\n        s.remove(at:\
    \ index)\n        s.remove(at: index)\n        s.remove(at: index)\n        if\
    \ let index = s.firstIndex(of: \" \") {\n            s.remove(at: index)\n   \
    \         s.remove(at: index)\n            s.remove(at: index)\n            s.remove(at:\
    \ index)\n            s.remove(at: index)\n            s.remove(at: index)\n \
    \           s.remove(at: index)\n            s.remove(at: index)\n           \
    \ s.remove(at: index)\n            s.remove(at: index)\n            s.remove(at:\
    \ index)\n            s.remove(at: index)\n            if let index = s.firstIndex(of:\
    \ \" \") {\n                s.remove(at: index)\n                s.remove(at:\
    \ index)\n                s.remove(at: index)\n                s.remove(at: index)\n\
    \                s.remove(at: index)\n                s.remove(at: index)\n  \
    \              s.remove(at: index)\n                s.remove(at: index)\n    \
    \            s.remove(at: index)\n                s.remove(at: index)\n      \
    \          s.remove(at: index)\n                s.remove(at: index)\n        \
    \        if let index = s.firstIndex(of: \"o\") {\n                    s.remove(at:\
    \ index)\n                    s.remove(at: index)\n                    s.remove(at:\
    \ index)\n                    s.remove(at: index)\n                    s.remove(at:\
    \ index)\n                    s.remove(at: index)\n                    s.remove(at:\
    \ index)\n                    s.remove(at: index)\n                    s.remove(at:\
    \ index)\n                    s.remove(at: index)\n                    s.remove(at:\
    \ index)\n                    s.remove(at: index)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpal1l33um.swift:88:72: error: expected '}' at end of brace statement\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)\n  \
    \                                                                     ^\n/tmp/tmpal1l33um.swift:41:50:\
    \ note: to match this opening '{'\n            if let index = s.firstIndex(of:\
    \ \" \") {\n                                                 ^\n/tmp/tmpal1l33um.swift:88:72:\
    \ error: expected '}' at end of brace statement\nassert(fruit_distribution(s:\
    \ \"1 apples and 100 oranges\", n: 120) == 19)\n                             \
    \                                          ^\n/tmp/tmpal1l33um.swift:28:46: note:\
    \ to match this opening '{'\n        if let index = s.firstIndex(of: \" \") {\n\
    \                                             ^\n/tmp/tmpal1l33um.swift:88:72:\
    \ error: expected '}' at end of brace statement\nassert(fruit_distribution(s:\
    \ \"1 apples and 100 oranges\", n: 120) == 19)\n                             \
    \                                          ^\n/tmp/tmpal1l33um.swift:21:42: note:\
    \ to match this opening '{'\n    if let index = s.firstIndex(of: \"a\") {\n  \
    \                                       ^\n/tmp/tmpal1l33um.swift:88:72: error:\
    \ expected '}' at end of brace statement\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)\n                                        \
    \                               ^\n/tmp/tmpal1l33um.swift:16:51: note: to match\
    \ this opening '{'\nfunc fruit_distribution(s: String, n: Int) -> Int {\n    \
    \                                              ^\n/tmp/tmpal1l33um.swift:70:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpal1l33um.swift:18:9:\
    \ warning: initialization of variable 'apples' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var apples = 0\n    ~~~~^~~~~~\n\
    \    _\n/tmp/tmpal1l33um.swift:19:9: warning: initialization of variable 'oranges'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var oranges = 0\n    ~~"
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var numbers = [Int]()\n    var numberString = \"\"\n    for letter\
    \ in s {\n        if letter.isNumber {\n            numberString += String(letter)\n\
    \        } else {\n            if numberString != \"\" {\n                numbers.append(Int(numberString)!)\n\
    \                numberString = \"\"\n            }\n        }\n    }\n    if\
    \ numberString != \"\" {\n        numbers.append(Int(numberString)!)\n    }\n\
    \    return n - numbers.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    let fruits = s.components(separatedBy: \" and \")\n    let\
    \ number_apples = fruits[0].components(separatedBy: \" \")[0]\n    let number_oranges\
    \ = fruits[1].components(separatedBy: \" \")[0]\n    let total_fruit = Int(number_apples)!\
    \ + Int(number_oranges)!\n    let mango_fruits = n - total_fruit\n    return mango_fruits\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4nctthe8.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let fruits = s.components(separatedBy: \" and \")\n      \
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let arr = s.components(separatedBy: \" \")\n    var sum = 0\n\
    \    for i in 0...arr.count-1{\n        if i % 2 == 0{\n            sum += Int(arr[i])!\n\
    \        }\n    }\n    return n - sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp3mlt9tl3.swift:17:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpwtn7kv4l/tmpwtn7kv4l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1ff96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1fc8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1fc8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1fc8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwtn7kv4l                        0x00005592bd0a3269 <unavailable> + 4713

    5    libc.so.6                          0x00002b2b20182460 __libc_start_main +
    245

    6    tmpwtn7kv4l                        0x00005592bd0a2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let nums = s.components(separatedBy: \" \")\n    let orangeCount\
    \ = Int(nums[3])!\n    let appleCount = Int(nums[0])!\n    return n - orangeCount\
    \ - appleCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmphfpqc8ap.swift:17:18: error: value of type 'String' has no member\
    \ 'components'\n    let nums = s.components(separatedBy: \" \")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = 0\n    var splitS = s.components(separatedBy: \"\
    \ \")\n    result = n - (Int(splitS[0])! + Int(splitS[2])!)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\"\
    , n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21)\
    \ == 10)\nassert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\n\
    assert(fruit_distribution(s: \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"2 apples and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"\
    2 apples and 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples\
    \ and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpnx_yhus9.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    var splitS = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 0
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var sumApples = 0\n    var sumOranges = 0\n    var sumMangoes\
    \ = 0\n    var fruits = s.split(separator: \" \")\n    var index = 0\n    while\
    \ index < fruits.count {\n        if fruits[index] == \"apples\" {\n         \
    \   sumApples = Int(fruits[index - 1])!\n        } else if fruits[index] == \"\
    oranges\" {\n            sumOranges = Int(fruits[index - 1])!\n        }\n   \
    \     index += 1\n    }\n    sumMangoes = n - sumApples - sumOranges\n    return\
    \ sumMangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979669
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let elements = s.split(separator: \" \")\n    let count = elements.count\n\
    \    let first = Int(elements[0]) ?? 0\n    let second = Int(elements[count -\
    \ 1]) ?? 0\n    return n - (first + second)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmpx61gyegc/tmpx61gyegc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9750bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad974db2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad974db2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad974db17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx61gyegc                        0x000055b696c745e9 <unavailable> + 5609

    5    libc.so.6                          0x00002ad9752a7460 __libc_start_main +
    245

    6    tmpx61gyegc                        0x000055b696c74269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659979669
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Write your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpuu2ze7m7/tmpuu2ze7m7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af9d0c09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9d0900b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9d0900988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9d08ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuu2ze7m7                        0x00005631290ae269 <unavailable> + 4713

    5    libc.so.6                          0x00002af9d0df5460 __libc_start_main +
    245

    6    tmpuu2ze7m7                        0x00005631290adee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    let basket = s.components(separatedBy: \" \")\n    let apples\
    \ = Int(basket[0])!\n    let oranges = Int(basket[3])!\n    let mangoes = n -\
    \ apples - oranges\n    return mangoes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmpe6z__x7_.swift:18:20: error: value of type 'String' has no member\
    \ 'components'\n    let basket = s.components(separatedBy: \" \")\n          \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var app_num = 0\n    var ori_num = 0\n    var man_num = 0\n  \
    \  let sub_n1 = s.split(separator: \" \")\n    let sub_n2 = s.split(separator:\
    \ \"a\")\n    for i in sub_n1 {\n        if i == \"apples\" {\n            app_num\
    \ = Int(sub_n2[0])!\n        }\n        if i == \"oranges\" {\n            ori_num\
    \ = Int(sub_n2[2])!\n        }\n    }\n    man_num = n - (app_num + ori_num)\n\
    \    return man_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpcakjrp3i/tmpcakjrp3i.swift:24: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3041cb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30419ad561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b30419ad286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b30419ad13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b30419acbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpcakjrp3i                        0x000056400a9f7315 <unavailable> + 8981

    6    tmpcakjrp3i                        0x000056400a9f685b <unavailable> + 6235

    7    libc.so.6                          0x00002b3041ea2460 __libc_start_main +
    245

    8    tmpcakjrp3i                        0x000056400a9f6559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1659979669
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var str = \"\"\n    var num = \"\"\n    var apple = 0\n    var\
    \ orange = 0\n    for char in s{\n        if char == \" \"{\n            if num\
    \ != \"\"{\n                if str == \"apples\"{\n                    apple =\
    \ Int(num)!\n                }\n                else{\n                    orange\
    \ = Int(num)!\n                }\n                num = \"\"\n            }\n\
    \            str = \"\"\n        }\n        else if char == \"a\" || char == \"\
    o\" || char == \"d\" || char == \"n\" || char == \"e\" || char == \"r\" || char\
    \ == \"i\" || char == \"g\"{\n            str += String(char)\n        }\n   \
    \     else{\n            num += String(char)\n        }\n    }\n    return n -\
    \ (apple + orange)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: Exception
  stderr: 'tmpa1f_2nk5/tmpa1f_2nk5.swift:28: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af8d1e3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8d1b35561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af8d1b35286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af8d1b3513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af8d1b34bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpa1f_2nk5                        0x000055c322bf4fd6 <unavailable> + 8150

    6    tmpa1f_2nk5                        0x000055c322bf45db <unavailable> + 5595

    7    libc.so.6                          0x00002af8d202a460 __libc_start_main +
    245

    8    tmpa1f_2nk5                        0x000055c322bf42d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s: \"5 apples\
    \ and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0 apples and\
    \ 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples and 0 oranges\"\
    , n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\
    \ == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\", n: 5) == 0)\n\
    assert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120) == 19)"
  status: SyntaxError
  stderr: '/tmp/tmpq4g14g9v.swift:18:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    \n    // your code goes here\n    var total = 0\n    var t = \"\
    \"\n    for i in s{\n        if i != \" \" && i != \"a\" && i != \"n\" && i !=\
    \ \"d\" && i != \"o\" && i != \"r\"{\n            t += String(i)\n        }\n\
    \    }\n    total = n - Int(t)!\n    return total\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpqp61hd2a/tmpqp61hd2a.swift:26: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b3764842c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3764539561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3764539286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b376453913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3764538bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqp61hd2a                        0x000055fb5a1ea1e4 <unavailable> + 8676

    6    tmpqp61hd2a                        0x000055fb5a1e958b <unavailable> + 5515

    7    libc.so.6                          0x00002b3764a2e460 __libc_start_main +
    245

    8    tmpqp61hd2a                        0x000055fb5a1e9289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659979669
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var result = String()\n    var apples = 0\n    var oranges = 0\n\
    \    for i in s {\n        if i == \" \" {\n            break\n        }\n   \
    \     result += String(i)\n    }\n    for i in result {\n        if i == \"0\"\
    \ {\n            apples += 0\n        } else if i == \"1\" {\n            apples\
    \ += 1\n        } else if i == \"2\" {\n            apples += 2\n        } else\
    \ if i == \"3\" {\n            apples += 3\n        } else if i == \"4\" {\n \
    \           apples += 4\n        } else if i == \"5\" {\n            apples +=\
    \ 5\n        } else if i == \"6\" {\n            apples += 6\n        } else if\
    \ i == \"7\" {\n            apples += 7\n        } else if i == \"8\" {\n    \
    \        apples += 8\n        } else if i == \"9\" {\n            apples += 9\n\
    \        }\n    }\n    let count = s.count\n    result = String()\n    for i in\
    \ stride(from: count - 2, to: 0, by: -1) {\n        if s[s.index(s.startIndex,\
    \ offsetBy: i)] == \" \" {\n            break\n        }\n        result += String(s[s.index(s.startIndex,\
    \ offsetBy: i)])\n    }\n    for i in result {\n        if i == \"0\" {\n    \
    \        oranges += 0\n        } else if i == \"1\" {\n            oranges +=\
    \ 1\n        } else if i == \"2\" {\n            oranges += 2\n        } else\
    \ if i == \"3\" {\n            oranges += 3\n        } else if i == \"4\" {\n\
    \            oranges += 4\n        } else if i == \"5\" {\n            oranges\
    \ += 5\n        } else if i == \"6\" {\n            oranges += 6\n        } else\
    \ if i == \"7\" {\n            oranges += 7\n        } else if i == \"8\" {\n\
    \            oranges += 8\n        } else if i == \"9\" {\n            oranges\
    \ += 9\n        }\n    }\n    return n - (apples + oranges)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpz6kxayhv/tmpz6kxayhv.swift:96: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7d1347c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7d103eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7d103e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7d103d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6kxayhv                        0x0000562130145879 <unavailable> + 6265

    5    libc.so.6                          0x00002ad7d1533460 __libc_start_main +
    245

    6    tmpz6kxayhv                        0x00005621301454f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1659979669
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mangos = n\n    let words = s.split(separator: \" \")\n  \
    \  let num1 = Int(words[0])!\n    let num2 = Int(words[2])!\n    mangos -= num1\n\
    \    mangos -= num2\n    return mangos\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\nassert(fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s: \"0\
    \ apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: Exception
  stderr: 'tmp5um5ua77/tmp5um5ua77.swift:20: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b6db77a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6db7498561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6db7498286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6db749813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6db7497bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5um5ua77                        0x000055c259786ec1 <unavailable> + 7873

    6    tmp5um5ua77                        0x000055c2597865fb <unavailable> + 5627

    7    libc.so.6                          0x00002b6db798d460 __libc_start_main +
    245

    8    tmp5um5ua77                        0x000055c2597862f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    let words = s.split(separator: \" \")\n    let words2 = s.components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n    let words3 = words2.filter {\n   \
    \     !$0.isEmpty\n    }\n    let p1 = Int(words3[0])!\n    let p2 = Int(words3[1])!\n\
    \    let x = (n - (p1 + p2))\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19) == 8)\n\
    assert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\nassert(fruit_distribution(s:\
    \ \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"1 apples\
    \ and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples and 3\
    \ oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and 3 oranges\"\
    , n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\", n: 120)\
    \ == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp3wth5jb9.swift:18:44: error: cannot find 'CharacterSet' in scope\n\
    \    let words2 = s.components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \                                           ^~~~~~~~~~~~\n/tmp/tmp3wth5jb9.swift:18:20:\
    \ error: value of type 'String' has no member 'components'\n    let words2 = s.components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n                 ~ ^~~~~~~~~~\n/tmp/tmp3wth5jb9.swift:24:22:\
    \ error: cannot convert value of type 'String' to expected argument type 'Int'\n\
    \    let x = (n - (p1 + p2))\n                     ^\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: -4
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    // Put your code here\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: Exception
  stderr: 'tmpo31hfux4/tmpo31hfux4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65e9533c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65e922ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65e922a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65e92297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo31hfux4                        0x0000562c4e9e2269 <unavailable> + 4713

    5    libc.so.6                          0x00002b65e971f460 __libc_start_main +
    245

    6    tmpo31hfux4                        0x0000562c4e9e1ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "\n/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s:\
    \ \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"\
    0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples\
    \ and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int)\
    \ -> Int {\n    var mangoes = 0\n    var apples = 0\n    var oranges = 0\n   \
    \ var str = \"\"\n    for char in s {\n        if char == \" \" {\n          \
    \  break\n        }\n        str += String(char)\n    }\n    if let appleNumber\
    \ = Int(str) {\n        apples = appleNumber\n    }\n    str = \"\"\n    for index\
    \ in s.index(s.startIndex, offsetBy: 13)..<s.endIndex {\n        str += String(s[index])\n\
    \    }\n    if let orangeNumber = Int(str) {\n        oranges = orangeNumber\n\
    \    }\n    mangoes = n - apples - oranges\n    return mangoes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\
    \ == 8)\nassert(fruit_distribution(s: \"5 apples and 6 oranges\", n: 21) == 10)\n\
    assert(fruit_distribution(s: \"0 apples and 1 oranges\", n: 3) == 2)\nassert(fruit_distribution(s:\
    \ \"1 apples and 0 oranges\", n: 3) == 2)\nassert(fruit_distribution(s: \"2 apples\
    \ and 3 oranges\", n: 100) == 95)\nassert(fruit_distribution(s: \"2 apples and\
    \ 3 oranges\", n: 5) == 0)\nassert(fruit_distribution(s: \"1 apples and 100 oranges\"\
    , n: 120) == 19)"
  status: SyntaxError
  stderr: "/tmp/tmp4_9_zhnm.swift:31:53: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for index in s.index(s.startIndex,\
    \ offsetBy: 13)..<s.endIndex {\n                                             \
    \       ^\nSwift.Range:1:11: note: requirement from conditional conformance of\
    \ 'Range<String.Index>' to 'Sequence'\nextension Range : Sequence where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp4_9_zhnm.swift:31:53:\
    \ error: referencing instance method 'makeIterator()' on 'Range' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for index in s.index(s.startIndex,\
    \ offsetBy: 13)..<s.endIndex {\n                                             \
    \       ^\nSwift.Range:1:11: note: requirement from conditional conformance of\
    \ 'Range<String.Index>' to 'Collection'\nextension Range : Collection, BidirectionalCollection,\
    \ RandomAccessCollection where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n<unknown>:0: error: referencing instance method 'next()' on\
    \ 'Range' requires that 'String.Index' conform to 'Strideable'\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Collection'\n\
    extension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1659979669
