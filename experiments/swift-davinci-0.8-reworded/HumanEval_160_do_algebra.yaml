name: HumanEval_160_do_algebra
language: swift
prompt: "\n/// Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n/// the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n/// expression and return the evaluation of this\
  \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
  \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
  \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n\
  /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
  \ array is equal to the length of operand array minus one.\n/// Operand is an array\
  \ of of non-negative integers.\n/// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunc do_algebra(operator: [String],\
  \ operand: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"\
  +\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\",\
  \ \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"\
  *\"], operand: [7, 3, 4]) == 8)"
completions: ["    var total = operand[0]\n    for i in 0..<operator.count {\n   \
    \     if operator[i] == \"+\" {\n            total += operand[i+1]\n        }\
    \ else if operator[i] == \"-\" {\n            total -= operand[i+1]\n        }\
    \ else if operator[i] == \"*\" {\n            total *= operand[i+1]\n        }\
    \ else if operator[i] == \"//\" {\n            total /= operand[i+1]\n       \
    \ } else if operator[i] == \"**\" {\n            total = Int(pow(Double(total),\
    \ Double(operand[i+1])))\n        }\n    }\n    return total", "    var computed\
    \ = [Int]()\n    var count = 0\n    for index in 0..<operator.count {\n      \
    \  if operator[index] == \"*\" {\n            computed.append(operand[index] *\
    \ operand[index + 1])\n            count += 1\n        } else if operator[index]\
    \ == \"/\" {\n            computed.append(operand[index] / operand[index + 1])\n\
    \            count += 1\n        } else if operator[index] == \"-\" {\n      \
    \      computed.append(operand[index] - operand[index + 1])\n            count\
    \ += 1\n        } else if operator[index] == \"+\" {\n            computed.append(operand[index]\
    \ + operand[index + 1])\n            count += 1\n        } else if operator[index]\
    \ == \"^\" {\n            computed.append(operand[index] ^ operand[index + 1])\n\
    \            count += 1\n        }\n    }\n    var answer = 0\n    var index =\
    \ 0\n    if computed.count == 1 {\n        return computed[0]\n    }\n    while\
    \ count > 0 {\n        answer += computed[index]\n        index += 1\n       \
    \ count -= 1\n    }\n    return answer", "  var result = operand[0]\n  for i in\
    \ 0..<operator.count {\n    switch operator[i] {\n    case \"+\":\n      result\
    \ += operand[i + 1]\n    case \"-\":\n      result -= operand[i + 1]\n    case\
    \ \"*\":\n      result *= operand[i + 1]\n    case \"//\":\n      result /= operand[i\
    \ + 1]\n    case \"**\":\n      result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n    default:\n      break\n    }\n  }\n  return result", "    var result\
    \ = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i + 1]\n        case \"\
    -\":\n            result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result",
  "    var result = operand[0]\n    for i in 0 ..< operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i + 1]\n \
    \       case \"-\":\n            result -= operand[i + 1]\n        case \"*\"\
    :\n            result *= operand[i + 1]\n        case \"//\":\n            result\
    \ /= operand[i + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n        default:\n            break\n        }\n \
    \   }\n    return result", "    var res = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            res += operand[i+1]\n\
    \        case \"-\":\n            res -= operand[i+1]\n        case \"*\":\n \
    \           res *= operand[i+1]\n        case \"//\":\n            res /= operand[i+1]\n\
    \        case \"**\":\n            res = Int(pow(Double(res), Double(operand[i+1])))\n\
    \        default:\n            return -1\n        }\n    }\n    return res", " \
    \   var result = operand[0]\n    for index in 0..<operator.count {\n        switch\
    \ operator[index] {\n        case \"+\":\n            result += operand[index\
    \ + 1]\n        case \"-\":\n            result -= operand[index + 1]\n      \
    \  case \"*\":\n            result *= operand[index + 1]\n        case \"//\"\
    :\n            result /= operand[index + 1]\n        case \"**\":\n          \
    \  result = Int(pow(Double(result), Double(operand[index + 1])))\n        default:\n\
    \            break\n        }\n    }\n    return result", "    var operandStack:\
    \ [Int] = []\n    for index in 0..<operand.count {\n        if index == 0 {\n\
    \            operandStack.append(operand[index])\n        } else {\n         \
    \   let result = do_operation(operandStack.removeLast(), operand[index], operator[index\
    \ - 1])\n            operandStack.append(result)\n        }\n    }\n    return\
    \ operandStack.first!", '    return -1', "    var value = operand[0]\n    var\
    \ op_array = operator\n    var num_array = operand\n    while op_array.count >\
    \ 0 {\n        if op_array[0] == \"+\" {\n            value += num_array[1]\n\
    \        } else if op_array[0] == \"-\" {\n            value -= num_array[1]\n\
    \        } else if op_array[0] == \"*\" {\n            value *= num_array[1]\n\
    \        } else if op_array[0] == \"//\" {\n            value /= num_array[1]\n\
    \        } else if op_array[0] == \"**\" {\n            value = Int(pow(Double(value),\
    \ Double(num_array[1])))\n        }\n        op_array.removeFirst()\n        num_array.removeFirst()\n\
    \    }\n    return value", "    guard !operator.isEmpty && !operand.isEmpty else\
    \ { return 0 }\n    guard operator.count + 1 == operand.count else { return 0\
    \ }\n    var result = operand[0]\n    for i in 0..<operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i + 1]\n \
    \       case \"-\":\n            result -= operand[i + 1]\n        case \"*\"\
    :\n            result *= operand[i + 1]\n        case \"//\":\n            result\
    \ /= operand[i + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n        default:\n            break\n        }\n \
    \   }\n    return result", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n\
    \        case \"*\":\n            result *= operand[i + 1]\n        case \"//\"\
    :\n            result /= operand[i + 1]\n        case \"**\":\n            result\
    \ = Int(pow(Double(result), Double(operand[i + 1])))\n        default:\n     \
    \       break\n        }\n    }\n    return result", "\t\n\tvar result = operand[0]\n\
    \t\n\tfor i in 0..<operator.count {\n\t\tswitch operator[i] {\n\t\tcase \"+\"\
    :\n\t\t\tresult += operand[i+1]\n\t\tcase \"-\":\n\t\t\tresult -= operand[i+1]\n\
    \t\tcase \"*\":\n\t\t\tresult *= operand[i+1]\n\t\tcase \"//\":\n\t\t\tresult\
    \ /= operand[i+1]\n\t\tcase \"**\":\n\t\t\tresult = Int(pow(Double(result), Double(operand[i+1])))\n\
    \t\tdefault:\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\treturn result", "    if operator.count\
    \ == 0 || operand.count < 2 {\n        return 0\n    }\n    var result = operand[0]\n\
    \    for index in 0..<operator.count {\n        if operator[index] == \"+\" {\n\
    \            result += operand[index + 1]\n        } else if operator[index] ==\
    \ \"-\" {\n            result -= operand[index + 1]\n        } else if operator[index]\
    \ == \"*\" {\n            result *= operand[index + 1]\n        } else if operator[index]\
    \ == \"//\" {\n            result /= operand[index + 1]\n        } else if operator[index]\
    \ == \"**\" {\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        }\n    }\n    return result", "    if operand.count == 0 {\n\
    \        return 0\n    }\n    else if operand.count == 1 {\n        return operand[0]\n\
    \    }\n    else {\n        var result = operand[0]\n        for i in 0..<operator.count\
    \ {\n            switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \            default:\n                break\n            }\n        }\n     \
    \   return result\n    }", "  //TODO: implement your algorithm here\n  return\
    \ -1", "    var result = operand[0]\n    for (index, element) in operand.enumerated()\
    \ {\n        if index == 0 {\n            continue\n        }\n        let operation\
    \ = operator[index - 1]\n        switch operation {\n        case \"+\":\n   \
    \         result += element\n        case \"-\":\n            result -= element\n\
    \        case \"*\":\n            result *= element\n        case \"//\":\n  \
    \          result /= element\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(element)))\n        default:\n            break\n        }\n    }\n \
    \   return result", '    return 0', "    var result = operand[0]\n    var i =\
    \ 0\n    while i < operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i + 1]\n        case \"-\":\n        \
    \    result -= operand[i + 1]\n        case \"*\":\n            result *= operand[i\
    \ + 1]\n        case \"//\":\n            result /= operand[i + 1]\n        case\
    \ \"**\":\n            result = pow(result, operand[i + 1])\n        default:\n\
    \            break\n        }\n        i += 1\n    }\n    return result", "  \
    \  let equations = operand.reduce((0, []) as (Int, [Int]), {\n        (accumulator,\
    \ current) in\n        (current, accumulator.1 + [current])\n    }).1.reduce((0,\
    \ []) as (Int, [Int]), {\n        (accumulator, current) in\n        let operation\
    \ = operator.isEmpty ? \"\" : operator.remove(at: 0)\n        switch operation\
    \ {\n        case \"+\":\n            return (accumulator.0 + current, accumulator.1\
    \ + [accumulator.0 + current])\n        case \"-\":\n            return (accumulator.0\
    \ - current, accumulator.1 + [accumulator.0 - current])\n        case \"*\":\n\
    \            return (accumulator.0 * current, accumulator.1 + [accumulator.0 *\
    \ current])\n        case \"//\":\n            return (accumulator.0 / current,\
    \ accumulator.1 + [accumulator.0 / current])\n        case \"**\":\n         \
    \   return (Int(pow(Double(accumulator.0), Double(current))), accumulator.1 +\
    \ [Int(pow(Double(accumulator.0), Double(current)))])\n        default:\n    \
    \        return (current, accumulator.1 + [current])\n        }\n    }).1.last!\n\
    \    return equations", '    return 0', "    var result = operand[0]\n    var\
    \ operands = operand\n    operands.removeFirst()\n    for (index, op) in operator.enumerated()\
    \ {\n        switch op {\n        case \"+\":\n            result += operands[index]\n\
    \        case \"-\":\n            result -= operands[index]\n        case \"*\"\
    :\n            result *= operands[index]\n        case \"//\":\n            result\
    \ /= operands[index]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operands[index])))\n        default:\n            break\n        }\n\
    \    }\n    return result", "    var operands = operand\n    var operators = operator\n\
    \    var result = [operands.removeFirst()]\n    while !operators.isEmpty {\n \
    \       let op = operators.removeFirst()\n        let op2 = operands.removeFirst()\n\
    \        result.append(op)\n        result.append(op2)\n        switch op {\n\
    \        case \"+\":\n            result[result.count - 3] += op2\n        case\
    \ \"-\":\n            result[result.count - 3] -= op2\n        case \"*\":\n \
    \           result[result.count - 3] *= op2\n        case \"//\":\n          \
    \  result[result.count - 3] /= op2\n        case \"**\":\n            result[result.count\
    \ - 3] = Int(pow(Double(result[result.count - 3]), Double(op2)))\n        default:\n\
    \            break\n        }\n    }\n    return result.last!", "    var num =\
    \ operand[0]\n    for i in 0..<operator.count {\n        if operator[i] == \"\
    +\" {\n            num += operand[i+1]\n        } else if operator[i] == \"-\"\
    \ {\n            num -= operand[i+1]\n        } else if operator[i] == \"*\" {\n\
    \            num *= operand[i+1]\n        } else if operator[i] == \"//\" {\n\
    \            num /= operand[i+1]\n        } else if operator[i] == \"**\" {\n\
    \            num = Int(pow(Double(num), Double(operand[i+1])))\n        }\n  \
    \  }\n    return num", "    var x = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            x += operand[i+1]\n\
    \        case \"-\":\n            x -= operand[i+1]\n        case \"*\":\n   \
    \         x *= operand[i+1]\n        case \"//\":\n            x /= operand[i+1]\n\
    \        case \"**\":\n            x = Int(pow(Double(x), Double(operand[i+1])))\n\
    \        default:\n            return 0\n        }\n    }\n    return x", "  \
    \  var result = operand[0]\n    var counter = 0\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n\
    \        case \"*\":\n            result *= operand[i + 1]\n        case \"//\"\
    :\n            result /= operand[i + 1]\n        case \"**\":\n            counter\
    \ = operand[i + 1]\n            for _ in 0..<counter {\n                result\
    \ *= result\n            }\n        default:\n            result = 0\n       \
    \ }\n    }\n    return result", "    var operand = operand\n    var index = 0\n\
    \    while index < operator.count {\n        var op = operator[index]\n      \
    \  if op == \"*\" {\n            operand[index] *= operand[index + 1]\n      \
    \      operand.remove(at: index + 1)\n            operator.remove(at: index)\n\
    \        } else if op == \"/\" {\n            operand[index] /= operand[index\
    \ + 1]\n            operand.remove(at: index + 1)\n            operator.remove(at:\
    \ index)\n        } else if op == \"**\" {\n            operand[index] = Int(pow(Double(operand[index]),\
    \ Double(operand[index + 1])))\n            operand.remove(at: index + 1)\n  \
    \          operator.remove(at: index)\n        } else {\n            index +=\
    \ 1\n        }\n    }\n    index = 0\n    while index < operator.count {\n   \
    \     var op = operator[index]\n        if op == \"+\" {\n            operand[index]\
    \ += operand[index + 1]\n            operand.remove(at: index + 1)\n         \
    \   operator.remove(at: index)\n        } else if op == \"-\" {\n            operand[index]\
    \ -= operand[index + 1]\n            operand.remove(at: index + 1)\n         \
    \   operator.remove(at: index)\n        } else {\n            index += 1\n   \
    \     }\n    }\n    return operand[0]", "    var operand = operand.reversed()\n\
    \    var result = operand.popLast()!\n    for (idx, op) in operator.enumerated()\
    \ {\n        switch op {\n        case \"+\":\n            result += operand[idx]\n\
    \        case \"-\":\n            result -= operand[idx]\n        case \"*\":\n\
    \            result *= operand[idx]\n        case \"//\":\n            result\
    \ /= operand[idx]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[idx])))\n        default:\n            break\n        }\n   \
    \ }\n    return result", "  var result = operand[0]\n  for i in 0..<operator.count\
    \ {\n    switch operator[i] {\n    case \"+\":\n      result += operand[i + 1]\n\
    \    case \"-\":\n      result -= operand[i + 1]\n    case \"*\":\n      result\
    \ *= operand[i + 1]\n    case \"//\":\n      result /= operand[i + 1]\n    case\
    \ \"**\":\n      result = Int(pow(Double(result), Double(operand[i + 1])))\n \
    \   default:\n      result = 0\n    }\n  }\n  return result", "    var res = operand[0]\n\
    \    for i in 0..<operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            res += operand[i+1]\n        case \"-\":\n            res\
    \ -= operand[i+1]\n        case \"*\":\n            res *= operand[i+1]\n    \
    \    case \"//\":\n            res /= operand[i+1]\n        case \"**\":\n   \
    \         res = Int(pow(Double(res), Double(operand[i+1])))\n        default:\n\
    \            break\n        }\n    }\n    return res", "    var op = operator,\
    \ opnd = operand\n    var res = opnd.removeFirst()\n    while !op.isEmpty {\n\
    \        switch op.removeFirst() {\n        case \"+\": res += opnd.removeFirst()\n\
    \        case \"-\": res -= opnd.removeFirst()\n        case \"*\": res *= opnd.removeFirst()\n\
    \        case \"//\": res /= opnd.removeFirst()\n        case \"**\": res ^= opnd.removeFirst()\n\
    \        default: return 0\n        }\n    }\n    return res", "    var result\
    \ = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            break\n        }\n    }\n    return result", "\t\
    return 0", '    return 0', "    var result = operand[0]\n    var index = 0\n \
    \   while index < operator.count {\n        switch operator[index] {\n       \
    \ case \"+\":\n            result += operand[index + 1]\n        case \"-\":\n\
    \            result -= operand[index + 1]\n        case \"*\":\n            result\
    \ *= operand[index + 1]\n        case \"//\":\n            result /= operand[index\
    \ + 1]\n        case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n        index += 1\n\
    \    }\n    return result", "  var result = operand[0]\n  for i in 0..<operator.count\
    \ {\n    switch operator[i] {\n    case \"+\":\n      result += operand[i + 1]\n\
    \    case \"-\":\n      result -= operand[i + 1]\n    case \"*\":\n      result\
    \ *= operand[i + 1]\n    case \"//\":\n      result /= operand[i + 1]\n    case\
    \ \"**\":\n      result = Int(pow(Double(result), Double(operand[i + 1])))\n \
    \   default:\n      print(\"error\")\n    }\n  }\n  return result", "    var preValue\
    \ = operand[0]\n    var preOperand = operand[1]\n    var index = 1\n    while\
    \ index < operand.count - 1 {\n        let symbol = operator[index - 1]\n    \
    \    let value = operand[index + 1]\n        switch symbol {\n        case \"\
    +\":\n            preValue = preValue + preOperand\n            preOperand = value\n\
    \        case \"-\":\n            preValue = preValue - preOperand\n         \
    \   preOperand = value\n        case \"*\":\n            preValue = preValue *\
    \ preOperand\n            preOperand = value\n        case \"//\":\n         \
    \   preValue = preValue / preOperand\n            preOperand = value\n       \
    \ case \"**\":\n            preValue = Int(pow(Double(preValue), Double(preOperand)))\n\
    \            preOperand = value\n        default:\n            return 0\n    \
    \    }\n        index += 1\n    }\n    switch operator[index - 1] {\n    case\
    \ \"+\":\n        return preValue + preOperand\n    case \"-\":\n        return\
    \ preValue - preOperand\n    case \"*\":\n        return preValue * preOperand\n\
    \    case \"//\":\n        return preValue / preOperand\n    case \"**\":\n  \
    \      return Int(pow(Double(preValue), Double(preOperand)))\n    default:\n \
    \       return 0\n    }", '    return 0', "    let operators = operator\n    let\
    \ operands = operand\n    var result = 0\n    var index = 0\n    result = operands[0]\n\
    \    for i in 0..<operators.count {\n        switch operators[i] {\n        case\
    \ \"+\":\n            result += operands[i + 1]\n        case \"-\":\n       \
    \     result -= operands[i + 1]\n        case \"*\":\n            result *= operands[i\
    \ + 1]\n        case \"//\":\n            result /= operands[i + 1]\n        case\
    \ \"**\":\n            result = Int(pow(Double(result), Double(operands[i + 1])))\n\
    \        default:\n            print(\"Invalid Operator\")\n        }\n    }\n\
    \    return result", "    if operator.count + 1 != operand.count {\n        return\
    \ 0\n    }\n    var result = operand[0]\n    for i in 0..<operator.count {\n \
    \       switch operator[i] {\n        case \"+\":\n            result += operand[i\
    \ + 1]\n        case \"-\":\n            result -= operand[i + 1]\n        case\
    \ \"*\":\n            result *= operand[i + 1]\n        case \"//\":\n       \
    \     result /= operand[i + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n        default:\n            return 0\n        }\n\
    \    }\n    return result", "  // TODO\n  return -1", "    let op = operator.map\
    \ { get_operator($0) }\n    var stack = [Int]()\n    var current = operand[0]\n\
    \    for index in 1..<operand.count {\n        let o = op[index - 1]\n       \
    \ switch o {\n        case .add:\n            current += operand[index]\n    \
    \    case .sub:\n            current -= operand[index]\n        case .mul:\n \
    \           current *= operand[index]\n        case .div:\n            current\
    \ /= operand[index]\n        case .pow:\n            current = Int(pow(Double(current),\
    \ Double(operand[index])))\n        case .none:\n            current = operand[index]\n\
    \        }\n    }\n    return current", "    var result = operand[0]\n    var\
    \ i = 0\n    while i < operator.count {\n        if operator[i] == \"+\" {\n \
    \           result += operand[i + 1]\n        } else if operator[i] == \"-\" {\n\
    \            result -= operand[i + 1]\n        } else if operator[i] == \"*\"\
    \ {\n            result *= operand[i + 1]\n        } else if operator[i] == \"\
    //\" {\n            result /= operand[i + 1]\n        } else if operator[i] ==\
    \ \"**\" {\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n\
    \        }\n        i += 1\n    }\n    return result", "  var queue: [(String,\
    \ Int)] = []\n  var result = 0\n  var a, b = 0\n  for i in 0..<operand.count -\
    \ 1 {\n    queue.append((operator[i], operand[i]))\n    queue.append((operator[i\
    \ + 1], operand[i + 1]))\n    if i == 0 {\n      switch operator[i] {\n      case\
    \ \"+\":\n        result = operand[i] + operand[i + 1]\n      case \"-\":\n  \
    \      result = operand[i] - operand[i + 1]\n      case \"*\":\n        result\
    \ = operand[i] * operand[i + 1]\n      case \"//\":\n        result = operand[i]\
    \ / operand[i + 1]\n      case \"**\":\n        result = operand[i] ^ operand[i\
    \ + 1]\n      default:\n        break\n      }\n    } else {\n      let current\
    \ = queue.popLast()!\n      let previous = queue.popLast()!\n      switch current.0\
    \ {\n      case \"+\":\n        result = previous.1 + current.1\n      case \"\
    -\":\n        result = previous.1 - current.1\n      case \"*\":\n        result\
    \ = previous.1 * current.1\n      case \"//\":\n        result = previous.1 /\
    \ current.1\n      case \"**\":\n        result = previous.1 ^ current.1\n   \
    \   default:\n        break\n      }\n    }\n  }\n  return result", "    var ans\
    \ = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            ans += operand[i+1]\n        case \"-\"\
    :\n            ans -= operand[i+1]\n        case \"*\":\n            ans *= operand[i+1]\n\
    \        case \"//\":\n            ans /= operand[i+1]\n        case \"**\":\n\
    \            ans = Int(pow(Double(ans), Double(operand[i+1])))\n        default:\n\
    \            return 0\n        }\n    }\n    return ans", "    let newOperator\
    \ = operator.map { String($0) }\n    let newOperand = operand.map { String($0)\
    \ }\n    var result = \"\"\n    result += newOperand[0]\n    for i in 0..<newOperator.count\
    \ {\n        result += newOperator[i]\n        result += newOperand[i + 1]\n \
    \   }\n    return Int(result)!", "    // your code here\n    var result = operand[0]\n\
    \    var idx = 0\n    for ops in operator {\n        switch ops {\n        case\
    \ \"+\":\n            result += operand[idx + 1]\n        case \"-\":\n      \
    \      result -= operand[idx + 1]\n        case \"*\":\n            result *=\
    \ operand[idx + 1]\n        case \"//\":\n            result /= operand[idx +\
    \ 1]\n        case \"**\":\n            result = Int(pow(Double(result), Double(operand[idx\
    \ + 1])))\n        default:\n            return 0\n        }\n        idx += 1\n\
    \    }\n    return result", "\treturn 0", "\tlet operand = operand[0]\n\tlet operator\
    \ = operator[0]\n\tswitch operator {\n\tcase \"+\":\n\t\treturn operand + operand\n\
    \tcase \"-\":\n\t\treturn operand - operand\n\tcase \"*\":\n\t\treturn operand\
    \ * operand\n\tcase \"//\":\n\t\treturn operand / operand\n\tcase \"**\":\n\t\t\
    return operand * operand\n\tdefault:\n\t\treturn operand\n\t}", "    var result\
    \ = operand[0]\n    for i in 0..<operand.count - 1 {\n        if operator[i] ==\
    \ \"+\" {\n            result += operand[i + 1]\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1]\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1]\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1]\n        } else if operator[i]\
    \ == \"**\" {\n            result = Int(pow(Double(result), Double(operand[i +\
    \ 1])))\n        }\n    }\n    return result", '    return 0', "    guard operand.count\
    \ > 1 else {\n        return 0\n    }\n    var stringExpression = String(operand[0])\n\
    \    for i in 0 ..< operator.count {\n        stringExpression.append(operator[i])\n\
    \        stringExpression.append(String(operand[i + 1]))\n    }\n    print(stringExpression)\n\
    \    return Int(evaluateExpression(expression: stringExpression))", "    if operator.count\
    \ == 0 {\n        return operand[0]\n    } else {\n        var arr = operand\n\
    \        var calcArr = [Int]()\n        var opr = operator\n        while opr.count\
    \ > 0 {\n            var op = opr.removeFirst()\n            if op == \"**\" {\n\
    \                let num1 = arr.removeFirst()\n                let num2 = arr.removeFirst()\n\
    \                calcArr.append(num1 ** num2)\n            } else {\n        \
    \        let num1 = arr.removeFirst()\n                let num2 = arr.removeFirst()\n\
    \                var res = 0\n                switch op {\n                case\
    \ \"+\":\n                    res = num1 + num2\n                case \"-\":\n\
    \                    res = num1 - num2\n                case \"*\":\n        \
    \            res = num1 * num2\n                case \"//\":\n               \
    \     res = num1 / num2\n                default:\n                    break\n\
    \                }\n                calcArr.append(res)\n            }\n     \
    \   }\n        return calcArr.first!\n    }", "    var result = operand[0]\n \
    \   for i in 0..<operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            break\n        }\n    }\n    return result", "    var\
    \ a: Int = operand[0]\n    for i in 1..<operand.count {\n        switch operator[i-1]\
    \ {\n        case \"+\":\n            a += operand[i]\n        case \"-\":\n \
    \           a -= operand[i]\n        case \"*\":\n            a *= operand[i]\n\
    \        case \"//\":\n            a /= operand[i]\n        case \"**\":\n   \
    \         a = Int(pow(Double(a), Double(operand[i])))\n        default:\n    \
    \        break\n        }\n    }\n    return a", "    let stack: Stack<Int> =\
    \ Stack<Int>()\n    let opPriority: [String: Int] = [\"+\": 0, \"-\": 0, \"*\"\
    : 1, \"//\": 1, \"**\": 2]\n    let opDict: [String: (Int, Int) -> Int] = [\"\
    +\": (+), \"-\": (-), \"*\": (*), \"//\": (//), \"**\": (**)]\n    var res = 0\n\
    \    var idx = 0\n    stack.push(operand[idx])\n    idx += 1\n    for op in operator\
    \ {\n        if stack.top()! > operand[idx] {\n            if opPriority[op]!\
    \ > opPriority[operator[idx - 1]]! {\n                stack.push(operand[idx])\n\
    \                idx += 1\n            } else {\n                while let topOp\
    \ = stack.pop(), let _top = stack.pop() {\n                    res = opDict[operator[idx\
    \ - 1]]!(_top, topOp)\n                    stack.push(res)\n                 \
    \   break\n                }\n            }\n        } else {\n            stack.push(operand[idx])\n\
    \            idx += 1\n        }\n    }\n    while let topOp = stack.pop(), let\
    \ _top = stack.pop() {\n        res = opDict[operator[idx - 1]]!(_top, topOp)\n\
    \        stack.push(res)\n    }\n    return res", "    var result = operand[0]\n\
    \    var i = 0\n    for op in operator {\n        switch op {\n        case \"\
    +\":\n            result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            print(\"This operator was not recognized: \\(op)\"\
    )\n        }\n        i += 1\n    }\n    return result", "    var result = operand[0]\n\
    \    for i in 0..<operator.count {\n        if operator[i] == \"+\" {\n      \
    \      result += operand[i+1]\n        } else if operator[i] == \"-\" {\n    \
    \        result -= operand[i+1]\n        } else if operator[i] == \"*\" {\n  \
    \          result *= operand[i+1]\n        } else if operator[i] == \"//\" {\n\
    \            result /= operand[i+1]\n        } else if operator[i] == \"**\" {\n\
    \            result = result * result\n        }\n    }\n    return result", " \
    \   // Your code goes here.\n    return 0", "    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n\
    \        case \"*\":\n            result *= operand[i + 1]\n        case \"//\"\
    :\n            result /= operand[i + 1]\n        case \"**\":\n            result\
    \ = Int(pow(Double(result), Double(operand[i + 1])))\n        default:\n     \
    \       return 0\n        }\n    }\n    return result", "    var operatorIndex\
    \ = 0\n    var result = operand[0]\n    for operandIndex in 1..<operand.count\
    \ {\n        switch operator[operatorIndex] {\n        case \"+\":\n         \
    \   result += operand[operandIndex]\n        case \"-\":\n            result -=\
    \ operand[operandIndex]\n        case \"*\":\n            result *= operand[operandIndex]\n\
    \        case \"//\":\n            result /= operand[operandIndex]\n        case\
    \ \"**\":\n            result = pow(result, operand[operandIndex])\n        default:\n\
    \            break\n        }\n        operatorIndex += 1\n    }\n    return result",
  "    var stack = Stack<Int>()\n    for i in 0..<operand.count {\n        stack.push(operand[i])\n\
    \        if i < operator.count {\n            switch operator[i] {\n         \
    \   case \"+\":\n                let second = stack.pop()!\n                let\
    \ first = stack.pop()!\n                stack.push(first + second)\n         \
    \   case \"-\":\n                let second = stack.pop()!\n                let\
    \ first = stack.pop()!\n                stack.push(first - second)\n         \
    \   case \"*\":\n                let second = stack.pop()!\n                let\
    \ first = stack.pop()!\n                stack.push(first * second)\n         \
    \   case \"//\":\n                let second = stack.pop()!\n                let\
    \ first = stack.pop()!\n                stack.push(first / second)\n         \
    \   case \"**\":\n                let second = stack.pop()!\n                let\
    \ first = stack.pop()!\n                stack.push(first ^ second)\n         \
    \   default:\n                break\n            }\n        }\n    }\n    return\
    \ stack.pop()!", "    let initialValue = operand[0]\n    return zip(operator,\
    \ operand[1..<operand.count]).reduce(initialValue) { (result, operations) in\n\
    \        switch operations.0 {\n        case \"+\":\n            return result\
    \ + operations.1\n        case \"-\":\n            return result - operations.1\n\
    \        case \"*\":\n            return result * operations.1\n        case \"\
    //\":\n            return result / operations.1\n        case \"**\":\n      \
    \      return Int(pow(Double(result), Double(operations.1)))\n        default:\n\
    \            return result\n        }\n    }", "    var result = operand[0]\n\
    \    for i in 0 ..< operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i + 1]\n        case \"-\":\n        \
    \    result -= operand[i + 1]\n        case \"*\":\n            result *= operand[i\
    \ + 1]\n        case \"//\":\n            result /= operand[i + 1]\n        case\
    \ \"**\":\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var expression = operand[0]\n    for i in 0...(operator.count - 1) {\n   \
    \     switch operator[i] {\n        case \"+\":\n            expression += operand[i\
    \ + 1]\n        case \"-\":\n            expression -= operand[i + 1]\n      \
    \  case \"*\":\n            expression *= operand[i + 1]\n        case \"//\"\
    :\n            expression /= operand[i + 1]\n        case \"**\":\n          \
    \  expression = Int(pow(Double(expression), Double(operand[i + 1])))\n       \
    \ default:\n            break\n        }\n    }\n    return expression", '    return
    0', "    // Write your code here...\n    return 0", "    var r = 0\n    var s\
    \ = 0\n    var op = \"+\"\n    while s < operand.count {\n        let n = operand[s]\n\
    \        switch op {\n        case \"+\":\n            r += n\n        case \"\
    -\":\n            r -= n\n        case \"*\":\n            r *= n\n        case\
    \ \"//\":\n            r /= n\n        case \"**\":\n            r = Int(pow(Double(r),\
    \ Double(n)))\n        default:\n            break\n        }\n        if s +\
    \ 1 < operator.count {\n            op = operator[s]\n        }\n        s +=\
    \ 1\n    }\n    return r", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ Int(pow(Double(result), Double(operand[i+1])))\n        default:\n         \
    \   break\n        }\n    }\n    return result", "    var o = operand\n    for\
    \ i in 0..<operator.count {\n        if operator[i] == \"+\" {\n            o[i]\
    \ = o[i] + o[i+1]\n            o.remove(at: i+1)\n            return do_algebra(operator:\
    \ operator, operand: o)\n        } else if operator[i] == \"-\" {\n          \
    \  o[i] = o[i] - o[i+1]\n            o.remove(at: i+1)\n            return do_algebra(operator:\
    \ operator, operand: o)\n        } else if operator[i] == \"*\" {\n          \
    \  o[i] = o[i] * o[i+1]\n            o.remove(at: i+1)\n            return do_algebra(operator:\
    \ operator, operand: o)\n        } else if operator[i] == \"//\" {\n         \
    \   o[i] = o[i] / o[i+1]\n            o.remove(at: i+1)\n            return do_algebra(operator:\
    \ operator, operand: o)\n        } else if operator[i] == \"**\" {\n         \
    \   o[i] = Int(pow(Double(o[i]), Double(o[i+1])))\n            o.remove(at: i+1)\n\
    \            return do_algebra(operator: operator, operand: o)\n        }\n  \
    \  }\n    return o[0]", '    return 0', "    // Write your code here\n    return\
    \ 0", "    var result = operand[0]\n    var currentOperator = \"\"\n    var operandIndex\
    \ = 1\n    var operatorIndex = 0\n    while operandIndex < operand.count {\n \
    \       currentOperator = operator[operatorIndex]\n        switch currentOperator\
    \ {\n        case \"+\":\n            result += operand[operandIndex]\n      \
    \  case \"-\":\n            result -= operand[operandIndex]\n        case \"*\"\
    :\n            result *= operand[operandIndex]\n        case \"//\":\n       \
    \     result /= operand[operandIndex]\n        case \"**\":\n            result\
    \ = Int(pow(Double(result), Double(operand[operandIndex])))\n        default:\n\
    \            print(\"Error\")\n        }\n        operandIndex += 1\n        operatorIndex\
    \ += 1\n    }\n    return result", '    return 0', "    /// Good luck!\n    let\
    \ num = operand.count\n    var result = operand[0]\n    for i in 0..<num-1 {\n\
    \        if operator[i] == \"+\" {\n            result += operand[i+1]\n     \
    \   } else if operator[i] == \"-\" {\n            result -= operand[i+1]\n   \
    \     } else if operator[i] == \"*\" {\n            result *= operand[i+1]\n \
    \       } else if operator[i] == \"//\" {\n            result /= operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        }\n    }\n    return result", "  var result\
    \ = operand[0]\n  for (i, op) in operator.enumerated() {\n    switch op {\n  \
    \  case \"+\":\n      result += operand[i + 1]\n    case \"-\":\n      result\
    \ -= operand[i + 1]\n    case \"*\":\n      result *= operand[i + 1]\n    case\
    \ \"//\":\n      result /= operand[i + 1]\n    case \"**\":\n      result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n    default:\n      break\n    }\n  }\n  return result",
  '    return 0', "    var result = operand[0]\n    for i in 0..<operator.count {\n\
    \        if operator[i] == \"+\" {\n            result += operand[i+1]\n     \
    \   } else if operator[i] == \"-\" {\n            result -= operand[i+1]\n   \
    \     } else if operator[i] == \"*\" {\n            result *= operand[i+1]\n \
    \       } else if operator[i] == \"//\" {\n            result /= operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        }\n    }\n    return result", "  var stack:\
    \ [Int] = []\n  for i in operand {\n    stack.append(i)\n    if operator.count\
    \ == stack.count - 1 {\n      break\n    }\n    let op = operator.remove(at: 0)\n\
    \    stack.append(op)\n  }\n  var i = 0\n  while i < stack.count {\n    if let\
    \ op = stack[i] as? String {\n      switch op {\n      case \"+\":\n        let\
    \ res = stack[i - 2] + stack[i - 1]\n        stack[i - 2] = res\n        stack.remove(at:\
    \ i - 1)\n        stack.remove(at: i - 1)\n        i -= 1\n      case \"-\":\n\
    \        let res = stack[i - 2] - stack[i - 1]\n        stack[i - 2] = res\n \
    \       stack.remove(at: i - 1)\n        stack.remove(at: i - 1)\n        i -=\
    \ 1\n      case \"*\":\n        let res = stack[i - 2] * stack[i - 1]\n      \
    \  stack[i - 2] = res\n        stack.remove(at: i - 1)\n        stack.remove(at:\
    \ i - 1)\n        i -= 1\n      case \"//\":\n        let res = stack[i - 2] /\
    \ stack[i - 1]\n        stack[i - 2] = res\n        stack.remove(at: i - 1)\n\
    \        stack.remove(at: i - 1)\n        i -= 1\n      case \"**\":\n       \
    \ let res = stack[i - 2] ** stack[i - 1]\n        stack[i - 2] = res\n       \
    \ stack.remove(at: i - 1)\n        stack.remove(at: i - 1)\n        i -= 1\n \
    \     default:\n        break\n      }\n    }\n    i += 1\n  }\n  return stack[0]",
  "    var result = operand[0]\n    for index in 0..<operand.count - 1 {\n       \
    \ switch operator[index] {\n        case \"+\":\n            result += operand[index\
    \ + 1]\n        case \"-\":\n            result -= operand[index + 1]\n      \
    \  case \"*\":\n            result *= operand[index + 1]\n        case \"//\"\
    :\n            result /= operand[index + 1]\n        case \"**\":\n          \
    \  result = Int(pow(Double(result), Double(operand[index + 1])))\n        default:\n\
    \            result = 0\n        }\n    }\n    return result", "    var result\
    \ = operand[0]\n    for i in 0 ..< operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i + 1]\n        case \"\
    -\":\n            result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n        default:\n            return 0\n        }\n    }\n    return\
    \ result", "    var x = operand[0]\n    for i in 0..<operator.count {\n      \
    \  switch operator[i] {\n        case \"+\":\n            x += operand[i+1]\n\
    \        case \"-\":\n            x -= operand[i+1]\n        case \"*\":\n   \
    \         x *= operand[i+1]\n        case \"//\":\n            x /= operand[i+1]\n\
    \        case \"**\":\n            x = Int(pow(Double(x), Double(operand[i+1])))\n\
    \        default:\n            print(\"no operation available\")\n        }\n\
    \    }\n    return x", "    // Write your code here\n    ", "    var result =\
    \ operand[0]\n    for i in 0..<operator.count {\n        switch operator[i] {\n\
    \        case \"+\":\n            result += operand[i+1]\n        case \"-\":\n\
    \            result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   // Initialize our result.\n    var result = operand[0]\n    // For each operator\
    \ and operand pair, we will perform the operation and then set our\n    // result\
    \ to that new value.\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i + 1]\n        case \"\
    -\":\n            result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n        default:\n            // If we don't know the operator, then\
    \ exit the program.\n            fatalError(\"Unknown operator found.\")\n   \
    \     }\n    }\n    // Return the result.\n    return result", "    // please\
    \ write your code here\n    var value: Int = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            value += operand[i+1]\n\
    \        case \"-\":\n            value -= operand[i+1]\n        case \"*\":\n\
    \            value *= operand[i+1]\n        case \"//\":\n            value /=\
    \ operand[i+1]\n        case \"**\":\n            value = Int(pow(Double(value),\
    \ Double(operand[i+1])))\n        default:\n            return 0\n        }\n\
    \    }\n    return value", "  // Your code here!\n  return 0", "    var result\
    \ = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            result = 0\n        }\n    }\n    return result",
  "    var result = operand[0]\n    for i in 0..<operator.count {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i+1]\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i+1]\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i+1]\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i+1]\n        } else if operator[i]\
    \ == \"**\" {\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        }\n    }\n    return result", "    if operator.count == 0 || operand.count\
    \ < 2 {\n        return -1\n    }\n    if operator.count != operand.count - 1\
    \ {\n        return -1\n    }\n    let mutableOperand = operand\n    for i in\
    \ 0..<operator.count {\n        let opt = operator[i]\n        let temp = mutableOperand[i]\n\
    \        switch opt {\n        case \"+\":\n            mutableOperand[i+1] =\
    \ temp + mutableOperand[i+1]\n        case \"-\":\n            mutableOperand[i+1]\
    \ = temp - mutableOperand[i+1]\n        case \"*\":\n            mutableOperand[i+1]\
    \ = temp * mutableOperand[i+1]\n        case \"//\":\n            mutableOperand[i+1]\
    \ = temp / mutableOperand[i+1]\n        case \"**\":\n            mutableOperand[i+1]\
    \ = Int(pow(Double(temp), Double(mutableOperand[i+1])))\n        default:\n  \
    \          break\n        }\n    }\n    return mutableOperand[operator.count]",
  "    let exp = generate_exp(operator: operator, operand: operand)\n    let result\
    \ = do_math(exp: exp)\n    return result", "    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        let oper = operator[i]\n        let num = operand[i + 1]\n      \
    \  switch oper {\n        case \"+\":\n            result += num\n        case\
    \ \"-\":\n            result -= num\n        case \"*\":\n            result *=\
    \ num\n        case \"//\":\n            result /= num\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(num)))\n        default:\n\
    \            return 0\n        }\n    }\n    return result", "\tvar result = operand[0]\n\
    \tfor (index, _) in operand.enumerated() {\n\t\tif index == 0 {\n\t\t\tcontinue\n\
    \t\t}\n\t\tswitch operator[index - 1] {\n\t\tcase \"+\":\n\t\t\tresult += operand[index]\n\
    \t\tcase \"-\":\n\t\t\tresult -= operand[index]\n\t\tcase \"*\":\n\t\t\tresult\
    \ *= operand[index]\n\t\tcase \"//\":\n\t\t\tresult /= operand[index]\n\t\tcase\
    \ \"**\":\n\t\t\tresult = Int(pow(Double(result), Double(operand[index])))\n\t\
    \tdefault:\n\t\t\tprint(\"Unknown Operator: \\(operator[index - 1])\")\n\t\t}\n\
    \t}\n\treturn result", '    return 0', "  var result = operand[0]\n  for (i, op)\
    \ in operator.enumerated() {\n    switch op {\n    case \"+\":\n      result +=\
    \ operand[i + 1]\n    case \"-\":\n      result -= operand[i + 1]\n    case \"\
    *\":\n      result *= operand[i + 1]\n    case \"//\":\n      result /= operand[i\
    \ + 1]\n    case \"**\":\n      result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n    default:\n      break\n    }\n  }\n  return result", "    var sum\
    \ = operand[0]\n    var i = 0\n    while i < operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            sum += operand[i + 1]\n    \
    \    case \"-\":\n            sum -= operand[i + 1]\n        case \"*\":\n   \
    \         sum *= operand[i + 1]\n        case \"//\":\n            sum /= operand[i\
    \ + 1]\n        case \"**\":\n            sum = Int(pow(Double(sum), Double(operand[i\
    \ + 1])))\n        default:\n            break\n        }\n        i += 1\n  \
    \  }\n    return sum", "    var a = operand\n    for i in 0..<operator.count {\n\
    \        let num = (operator[i] == \"//\") ? a[i] / a[i + 1] : a[i] + a[i + 1]\n\
    \        a.insert(num, at: i)\n        a.removeSubrange(i + 1...i + 2)\n    }\n\
    \    return a[0]", "    let operand = operand.map { Int32($0) }\n    let operator\
    \ = operator.map { UnsafePointer<Int8>(strdup($0)) }\n    return Int(do_algebra_c(operand,\
    \ Int32(operand.count), operator, Int32(operator.count)))", '    // Your solution',
  "    let q = Queue<Int>()\n    let p = PriorityQueue<Int> { $0 > $1 }\n    for n\
    \ in operand {\n        q.enqueue(n)\n    }\n    for o in operator {\n       \
    \ switch o {\n        case \"+\":\n            let a = q.dequeue()!\n        \
    \    let b = q.dequeue()!\n            q.enqueue(a + b)\n        case \"-\":\n\
    \            let a = q.dequeue()!\n            let b = q.dequeue()!\n        \
    \    q.enqueue(a - b)\n        case \"*\":\n            let a = q.dequeue()!\n\
    \            let b = q.dequeue()!\n            q.enqueue(a * b)\n        case\
    \ \"//\":\n            let a = q.dequeue()!\n            let b = q.dequeue()!\n\
    \            q.enqueue(a / b)\n        case \"**\":\n            let a = q.dequeue()!\n\
    \            let b = q.dequeue()!\n            q.enqueue(Int(pow(Double(a), Double(b))))\n\
    \        default:\n            break\n        }\n    }\n    return q.dequeue()!",
  "\tvar stack = [Int]()\n\tfor i in 0..<operand.count {\n\t\tif i == 0 {\n\t\t\t\
    stack.append(operand[i])\n\t\t} else {\n\t\t\tif operator[i - 1] == \"+\" {\n\t\
    \t\t\tstack.append(stack.removeLast() + operand[i])\n\t\t\t} else if operator[i\
    \ - 1] == \"-\" {\n\t\t\t\tstack.append(stack.removeLast() - operand[i])\n\t\t\
    \t} else if operator[i - 1] == \"*\" {\n\t\t\t\tstack.append(stack.removeLast()\
    \ * operand[i])\n\t\t\t} else if operator[i - 1] == \"//\" {\n\t\t\t\tstack.append(stack.removeLast()\
    \ / operand[i])\n\t\t\t} else if operator[i - 1] == \"**\" {\n\t\t\t\tstack.append(Int(pow(Double(stack.removeLast()),\
    \ Double(operand[i]))))\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.last!", "    var\
    \ result = operand[0]\n    var index = 0\n    while index < operator.count {\n\
    \        switch operator[index] {\n        case \"+\":\n            result +=\
    \ operand[index + 1]\n        case \"-\":\n            result -= operand[index\
    \ + 1]\n        case \"*\":\n            result *= operand[index + 1]\n      \
    \  case \"//\":\n            result /= operand[index + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[index + 1])))\n\
    \        default:\n            break\n        }\n        index += 1\n    }\n \
    \   return result", "  var result = operand[0]\n  for (index, element) in operand.enumerated()\
    \ {\n    if index > 0 {\n      if operator[index - 1] == \"+\" {\n        result\
    \ += element\n      } else if operator[index - 1] == \"-\" {\n        result -=\
    \ element\n      } else if operator[index - 1] == \"*\" {\n        result *= element\n\
    \      } else if operator[index - 1] == \"//\" {\n        result /= element\n\
    \      } else if operator[index - 1] == \"**\" {\n        result = Int(pow(Double(result),\
    \ Double(element)))\n      }\n    }\n  }\n  return result", "    guard operator.count\
    \ == operand.count - 1 else { return 0 }\n    guard operator.count > 0 else {\
    \ return 0 }\n    guard operand.count > 1 else { return 0 }\n    \n    var sum\
    \ = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            sum += operand[i + 1]\n        case \"-\"\
    :\n            sum -= operand[i + 1]\n        case \"*\":\n            sum *=\
    \ operand[i + 1]\n        case \"//\":\n            sum /= operand[i + 1]\n  \
    \      case \"**\":\n            sum = Int(pow(Double(sum), Double(operand[i +\
    \ 1])))\n        default:\n            break\n        }\n    }\n    return sum",
  "    var res = operand[0]\n    var op1: Int\n    var op2: Int\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            op1 = res\n\
    \            op2 = operand[i+1]\n            res = op1 + op2\n        case \"\
    -\":\n            op1 = res\n            op2 = operand[i+1]\n            res =\
    \ op1 - op2\n        case \"*\":\n            op1 = res\n            op2 = operand[i+1]\n\
    \            res = op1 * op2\n        case \"//\":\n            op1 = res\n  \
    \          op2 = operand[i+1]\n            res = op1 / op2\n        case \"**\"\
    :\n            op1 = res\n            op2 = operand[i+1]\n            res = op1\
    \ ^ op2\n        default:\n            return 0\n        }\n    }\n    return\
    \ res", "    var operator = operator\n    var operand = operand\n    var result\
    \ = 0\n    let mult = operator.firstIndex(of: \"*\") ?? Int.max\n    let div =\
    \ operator.firstIndex(of: \"//\") ?? Int.max\n    let exp = operator.firstIndex(of:\
    \ \"**\") ?? Int.max\n    let operandIndex = min(mult, div, exp)\n    if operandIndex\
    \ != Int.max {\n        switch operator[operandIndex] {\n        case \"*\":\n\
    \            operand[operandIndex] *= operand[operandIndex + 1]\n        case\
    \ \"//\":\n            operand[operandIndex] /= operand[operandIndex + 1]\n  \
    \      case \"**\":\n            operand[operandIndex] = Int(pow(Double(operand[operandIndex]),\
    \ Double(operand[operandIndex + 1])))\n        default:\n            break\n \
    \       }\n        operand.remove(at: operandIndex + 1)\n        operator.remove(at:\
    \ operandIndex)\n    }\n    result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result = operand[0]\n    for i in 0..<operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i + 1]\n \
    \       case \"-\":\n            result -= operand[i + 1]\n        case \"*\"\
    :\n            result *= operand[i + 1]\n        case \"//\":\n            result\
    \ /= operand[i + 1]\n        case \"**\":\n            result = pow(result, operand[i\
    \ + 1])\n        default:\n            print(\"not an operator\")\n        }\n\
    \    }\n    return result", "\tvar operator = operator\n\tvar operand = operand\n\
    \tlet add = { $0 + $1 }\n\tlet sub = { $0 - $1 }\n\tlet mul = { $0 * $1 }\n\t\
    let div = { $0 / $1 }\n\tlet exp = { Int(pow(Double($0), Double($1))) }\n\t\n\t\
    var arr: [((Int, Int) -> Int)] = [add, sub, mul, div, exp]\n\t\n\tvar res = operand[0]\n\
    \t\n\tfor i in 0..<operator.count {\n\t\tswitch operator[i] {\n\t\tcase \"+\"\
    :\n\t\t\tres = arr[0](res, operand[i + 1])\n\t\tcase \"-\":\n\t\t\tres = arr[1](res,\
    \ operand[i + 1])\n\t\tcase \"*\":\n\t\t\tres = arr[2](res, operand[i + 1])\n\t\
    \tcase \"//\":\n\t\t\tres = arr[3](res, operand[i + 1])\n\t\tcase \"**\":\n\t\t\
    \tres = arr[4](res, operand[i + 1])\n\t\tdefault:\n\t\t\tbreak\n\t\t}\n\t}\n\t\
    return res", "    guard let op = operator.first else { return operand.first! }\n\
    \    var opr = Array(operator.dropFirst())\n    var ope = Array(operand.dropFirst())\n\
    \    switch op {\n    case \"+\":\n        return operand.first! + do_algebra(operator:\
    \ opr, operand: ope)\n    case \"-\":\n        return operand.first! - do_algebra(operator:\
    \ opr, operand: ope)\n    case \"*\":\n        return operand.first! * do_algebra(operator:\
    \ opr, operand: ope)\n    case \"//\":\n        return operand.first! / do_algebra(operator:\
    \ opr, operand: ope)\n    case \"**\":\n        return Int(pow(Double(operand.first!),\
    \ Double(do_algebra(operator: opr, operand: ope))))\n    default:\n        return\
    \ 0\n    }", "    var stack = Stack<Int>()\n    var op = operator\n    var oper\
    \ = operand\n    while op.count > 0 {\n        if let o = op.popLast() {\n   \
    \         let a = oper.popLast()!\n            let b = oper.popLast()!\n     \
    \       var result = 0\n            switch o {\n            case \"+\":\n    \
    \            result = a + b\n            case \"-\":\n                result =\
    \ b - a\n            case \"*\":\n                result = a * b\n           \
    \ case \"//\":\n                result = b / a\n            case \"**\":\n   \
    \             result = Int(pow(Double(b), Double(a)))\n            default:\n\
    \                print(\"error\")\n            }\n            oper.append(result)\n\
    \        }\n    }\n    return oper.popLast()!", "\tif operator.count != operand.count\
    \ - 1 {\n\t\treturn 0\n\t}\n\t\n\tif operator.count == 0 || operand.count == 0\
    \ {\n\t\treturn 0\n\t}\n\t\n\tvar result = operand[0]\n\tfor i in 0..<operator.count\
    \ {\n\t\tswitch operator[i] {\n\t\tcase \"+\":\n\t\t\tresult += operand[i + 1]\n\
    \t\tcase \"-\":\n\t\t\tresult -= operand[i + 1]\n\t\tcase \"*\":\n\t\t\tresult\
    \ *= operand[i + 1]\n\t\tcase \"//\":\n\t\t\tresult /= operand[i + 1]\n\t\tcase\
    \ \"**\":\n\t\t\tresult = Int(pow(Double(result), Double(operand[i + 1])))\n\t\
    \tdefault:\n\t\t\tresult = 0\n\t\t}\n\t}\n\treturn result", "    let operand =\
    \ operand.reduce(0) { (res, cur) -> Int in\n        return res * 10 + cur\n  \
    \  }\n    let operands = String(operand).flatMap { Int(String($0)) }\n    var\
    \ ans = operands[0]\n    for (i, op) in operator.enumerated() {\n        switch\
    \ op {\n        case \"+\":\n            ans += operands[i + 1]\n        case\
    \ \"-\":\n            ans -= operands[i + 1]\n        case \"*\":\n          \
    \  ans *= operands[i + 1]\n        case \"//\":\n            ans /= operands[i\
    \ + 1]\n        case \"**\":\n            ans = Int(pow(Double(ans), Double(operands[i\
    \ + 1])))\n        default:\n            return -1\n        }\n    }\n    return\
    \ ans", "    // your code here\n    return 0", "  var stack = [Int]()\n  for i\
    \ in 0 ..< operand.count {\n    if i > 0 {\n      if operator[i - 1] == \"+\"\
    \ {\n        stack.append(stack.removeLast() + operand[i])\n      } else if operator[i\
    \ - 1] == \"-\" {\n        stack.append(stack.removeLast() - operand[i])\n   \
    \   } else if operator[i - 1] == \"*\" {\n        stack.append(stack.removeLast()\
    \ * operand[i])\n      } else if operator[i - 1] == \"//\" {\n        stack.append(stack.removeLast()\
    \ / operand[i])\n      } else if operator[i - 1] == \"**\" {\n        stack.append(stack.removeLast()\
    \ ** operand[i])\n      }\n    } else {\n      stack.append(operand[i])\n    }\n\
    \  }\n  return stack.first!", "    var result = operand[0]\n    var i = 0\n  \
    \  while i < operator.count {\n        switch operator[i] {\n        case \"+\"\
    :\n            result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            print(\"Invalid operator\")\n        }\n        i\
    \ += 1\n    }\n    return result", "    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var operand = operand\n    var stack =\
    \ [operand.removeFirst()]\n    for (index, nextOperator) in operator.enumerated()\
    \ {\n        let right = operand[index]\n        var left = stack.removeLast()\n\
    \        if left == 0 && nextOperator == \"/\" {\n            return 0\n     \
    \   }\n        switch nextOperator {\n        case \"+\":\n            left +=\
    \ right\n        case \"-\":\n            left -= right\n        case \"*\":\n\
    \            left *= right\n        case \"/\":\n            left /= right\n \
    \       case \"**\":\n            left = Int(pow(Double(left), Double(right)))\n\
    \        default:\n            break\n        }\n        stack.append(left)\n\
    \    }\n    return stack.first ?? 0", "    var result = operand[0]\n    for (i,\
    \ op) in operator.enumerated() {\n        switch op {\n        case \"+\":\n \
    \           result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result", "   \
    \ var result = operand[0]\n    for i in 0..<operator.count {\n        let op =\
    \ operator[i]\n        let op1 = operand[i + 1]\n        switch op {\n       \
    \ case \"+\":\n            result += op1\n        case \"-\":\n            result\
    \ -= op1\n        case \"*\":\n            result *= op1\n        case \"//\"\
    :\n            result /= op1\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(op1)))\n        default:\n            continue\n        }\n    }\n  \
    \  return result", "    if operator.count == 0 {\n        return 0\n    }\n  \
    \  if operand.count == 0 {\n        return 0\n    }\n    var calcExpression =\
    \ \"\"\n    for (index, item) in operand.enumerated() {\n        calcExpression\
    \ += \"\\(item)\"\n        if index != operand.count - 1 {\n            calcExpression\
    \ += operator[index]\n        }\n    }\n    let result = eval(expression: calcExpression)\n\
    \    return result", "    if operand.count == 0 {\n        return 0\n    }\n \
    \   var result = operand[0]\n    for i in 0..<operator.count {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i + 1]\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i + 1]\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i + 1]\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i + 1]\n        } else if operator[i]\
    \ == \"**\" {\n            result = Int(pow(Double(result), Double(operand[i +\
    \ 1])))\n        }\n    }\n    return result", "    let num = operand.count\n\
    \    var result = operand[0]\n    for i in 0..<num-1 {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            print(\"Error\")\n        }\n    }\n    return\
    \ result", '    return 0', "\tvar result = operand[0]\n\tfor index in 0..<operator.count\
    \ {\n\t\tswitch operator[index] {\n\t\tcase \"+\":\n\t\t\tresult += operand[index\
    \ + 1]\n\t\tcase \"-\":\n\t\t\tresult -= operand[index + 1]\n\t\tcase \"*\":\n\
    \t\t\tresult *= operand[index + 1]\n\t\tcase \"//\":\n\t\t\tresult /= operand[index\
    \ + 1]\n\t\tcase \"**\":\n\t\t\tresult = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n\t\tdefault:\n\t\t\tbreak\n\t\t}\n\t}\n\treturn result", "    var operators\
    \ = operator\n    var operands = operand\n    while operators.count > 0 {\n  \
    \      if operators.contains(\"**\") {\n            do_exponentiation(&operators,\
    \ &operands)\n        } else if operators.contains(\"//\") {\n            do_floor_division(&operators,\
    \ &operands)\n        } else if operators.contains(\"*\") {\n            do_multiplication(&operators,\
    \ &operands)\n        } else if operators.contains(\"-\") {\n            do_subtraction(&operators,\
    \ &operands)\n        } else if operators.contains(\"+\") {\n            do_addition(&operators,\
    \ &operands)\n        }\n    }\n    return operands[0]", "    let opr = operator.joined(separator:\
    \ \"\")\n    let opd = operand.reduce(\"\") {$0 + \"\\($1)\"}\n    return Expression(opr\
    \ + opd).evaluate()!", "  if operator.count + 1 != operand.count {\n    return\
    \ 0\n  }\n  guard let first = operand.first else {\n    return 0\n  }\n  guard\
    \ let second = operand.dropFirst().first else {\n    return 0\n  }\n  guard let\
    \ op = operator.first else {\n    return 0\n  }\n  let newOperand = operand.dropFirst(2)\n\
    \  let newOperator = operator.dropFirst()\n  switch op {\n  case \"+\":\n    return\
    \ first + second + do_algebra(operator: newOperator, operand: newOperand)\n  case\
    \ \"-\":\n    return first - second + do_algebra(operator: newOperator, operand:\
    \ newOperand)\n  case \"*\":\n    return first * second + do_algebra(operator:\
    \ newOperator, operand: newOperand)\n  case \"//\":\n    return first / second\
    \ + do_algebra(operator: newOperator, operand: newOperand)\n  case \"**\":\n \
    \   return first * first + do_algebra(operator: newOperator, operand: newOperand)\n\
    \  default:\n    return 0\n  }", "    // your code here\n    return 0", "    if\
    \ operator.count == 0 || operand.count == 0 {\n        return 0\n    }\n    var\
    \ result = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i + 1]\n        case \"\
    -\":\n            result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result",
  "    let operators: [String: (Int, Int) -> Int] = [\n        \"+\": (+),\n     \
    \   \"-\": (-),\n        \"*\": (*),\n        \"//\": (/),\n        \"**\": (pow),\n\
    \    ]\n    var operandStack: [Int] = []\n    for i in 0..<operand.count {\n \
    \       if i < operand.count - 1 {\n            let result = operators[operator[i]]!(operandStack.popLast()\
    \ ?? 0, operand[i+1])\n            operandStack.append(result)\n        } else\
    \ {\n            operandStack.append(operand[i])\n        }\n    }\n    return\
    \ operandStack.reduce(0, +)", '    return 0', "    // Write your code here...\n\
    \    var result = operand[0]\n    for i in 0..<operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        default:\n            break\n        }\n   \
    \ }\n    return result", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        if operator[i] == \"+\" {\n            result += operand[i+1]\n \
    \       } else if operator[i] == \"-\" {\n            result -= operand[i+1]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i+1]\n\
    \        } else if operator[i] == \"//\" {\n            result /= operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        }\n    }\n    return result", "    var output\
    \ = operand[0]\n    for i in 0...operator.count - 1 {\n        switch operator[i]\
    \ {\n        case \"+\":\n            output += operand[i + 1]\n        case \"\
    -\":\n            output -= operand[i + 1]\n        case \"*\":\n            output\
    \ *= operand[i + 1]\n        case \"//\":\n            output /= operand[i + 1]\n\
    \        case \"**\":\n            output = output ^ operand[i + 1]\n        default:\n\
    \            break\n        }\n    }\n    return output", "  /// The length of\
    \ operator array is equal to the length of operand array minus one.\n  /// Operand\
    \ is an array of of non-negative integers.\n  /// Operator array has at least\
    \ one operator, and operand array has at least two operands.\n  guard operator.count\
    \ + 1 == operand.count else {\n    return 0\n  }\n  let op = operator.reversed()\n\
    \  let od = operand.reversed()\n  let suffix = Array(zip(op, od))\n  var stack\
    \ = [Int]()\n  var p: String = \"\"\n  var a: Int = 0\n  for (o, d) in suffix\
    \ {\n    switch o {\n    case \"+\":\n      stack.append(a + d)\n    case \"-\"\
    :\n      stack.append(a - d)\n    case \"*\":\n      stack.append(a * d)\n   \
    \ case \"//\":\n      stack.append(a / d)\n    case \"**\":\n      stack.append(a\
    \ ^ d)\n    default:\n      stack.append(d)\n    }\n    a = stack.removeLast()\n\
    \    p += String(describing: a) + o\n  }\n  // print(p)\n  return a", "    //\
    \ your code here\n    return 0", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ Int(pow(Double(result), Double(operand[i+1])))\n        default:\n         \
    \   break\n        }\n    }\n    return result", "    // Your code here.\n   \
    \ var result = operand[0]\n    for i in 0..<operator.count {\n        let op =\
    \ operator[i]\n        let num = operand[i+1]\n        switch op {\n        case\
    \ \"+\":\n            result += num\n        case \"-\":\n            result -=\
    \ num\n        case \"*\":\n            result *= num\n        case \"//\":\n\
    \            result /= num\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(num)))\n        default:\n            print(\"Unknown operator: \\(op)\"\
    )\n        }\n    }\n    return result", "    var result = operand[0]\n    for\
    \ i in 0..<operator.count {\n        switch operator[i] {\n        case \"+\"\
    :\n            result += operand[i+1]\n        case \"-\":\n            result\
    \ -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n \
    \       case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            break\n        }\n    }\n    return result", "    var\
    \ result = operand[0]\n    for i in 0 ..< operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i + 1]\n        case \"\
    -\":\n            result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result",
  "    var result = operand[0]\n    var i = 0\n    while i < operator.count {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i\
    \ + 1]\n        case \"-\":\n            result -= operand[i + 1]\n        case\
    \ \"*\":\n            result *= operand[i + 1]\n        case \"//\":\n       \
    \     result /= operand[i + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n        default:\n            return 0\n        }\n\
    \        i += 1\n    }\n    return result", "    var result = operand[0]\n   \
    \ for i in 0..<operator.count {\n        let sign = operator[i]\n        let value\
    \ = operand[i + 1]\n        switch sign {\n        case \"+\":\n            result\
    \ += value\n        case \"-\":\n            result -= value\n        case \"\
    *\":\n            result *= value\n        case \"//\":\n            result /=\
    \ value\n        case \"**\":\n            result = Int(pow(Double(result), Double(value)))\n\
    \        default:\n            break\n        }\n    }\n    return result", '    return
    1', '    return 0', "\tlet op: [String: (Int, Int) -> Int] = [\n\t\t\"+\": (+),\n\
    \t\t\"-\": (-),\n\t\t\"*\": (*),\n\t\t\"//\": (/)\n\t]\n\tvar acc = operand[0]\n\
    \tfor (i, o) in operator.enumerated() {\n\t\tlet v = operand[i + 1]\n\t\tacc =\
    \ op[o]!(acc, v)\n\t}\n\treturn acc", "    guard operator.count == operand.count\
    \ - 1 else { return 0 }\n    guard operand.count >= 2 else { return 0 }\n    var\
    \ operators = operator\n    var operands = operand\n    while operators.count\
    \ > 0 {\n        guard let (index, value) = operators.enumerated().first(where:\
    \ { $0.element == \"**\" }) else { break }\n        let result = operands[index]\
    \ ** operands[index + 1]\n        operands.remove(at: index)\n        operands.remove(at:\
    \ index)\n        operands.insert(result, at: index)\n        operators.remove(at:\
    \ index)\n    }\n    while operators.count > 0 {\n        guard let (index, value)\
    \ = operators.enumerated().first(where: { $0.element == \"//\" }) else { break\
    \ }\n        let result = operands[index] / operands[index + 1]\n        operands.remove(at:\
    \ index)\n        operands.remove(at: index)\n        operands.insert(result,\
    \ at: index)\n        operators.remove(at: index)\n    }\n    while operators.count\
    \ > 0 {\n        guard let (index, value) = operators.enumerated().first(where:\
    \ { $0.element == \"*\" }) else { break }\n        let result = operands[index]\
    \ * operands[index + 1]\n        operands.remove(at: index)\n        operands.remove(at:\
    \ index)\n        operands.insert(result, at: index)\n        operators.remove(at:\
    \ index)\n    }\n    while operators.count > 0 {\n        guard let (index, value)\
    \ = operators.enumerated().first(where: { $0.element == \"-\" }) else { break\
    \ }\n        let result = operands[index] - operands[index + 1]\n        operands.remove(at:\
    \ index)\n        operands.remove(at: index)\n        operands.insert(result,\
    \ at: index)\n        operators.remove(at: index)\n    }\n    while operators.count\
    \ > 0 {\n        guard let (index, value) = operators.enumerated().first(where:\
    \ { $", "    let op_count = operator.count\n    let operand_count = operand.count\n\
    \    if op_count == 0 || operand_count == 0 {\n        return 0\n    }\n    if\
    \ operand_count - op_count == 1 {\n        return operand[0]\n    } else {\n \
    \       var result = 0\n        for i in 0..<op_count {\n            switch operator[i]\
    \ {\n            case \"+\":\n                result = operand[i] + operand[i+1]\n\
    \            case \"-\":\n                result = operand[i] - operand[i+1]\n\
    \            case \"*\":\n                result = operand[i] * operand[i+1]\n\
    \            case \"//\":\n                result = operand[i] / operand[i+1]\n\
    \            case \"**\":\n                result = operand[i] * operand[i+1]\n\
    \            default:\n                print(\"Not a valid operator\")\n     \
    \       }\n        }\n        return result\n    }", "    let expressions = zip(operand,\
    \ operator).reduce([\"\\(operand[0])\"]) { result, next in\n        return result\
    \ + [\"\\(next.1)\", \"\\(next.0)\"]\n    }.joined(separator: \" \")\n    let\
    \ expr = Expression(expressions)\n    return expr.evaluate()", "  var stack =\
    \ Stack<Int>()\n  for i in 0..<operand.count {\n    if stack.isEmpty {\n     \
    \ stack.push(operand[i])\n    } else {\n      let temp = stack.pop()\n      if\
    \ operator[i - 1] == \"+\" {\n        stack.push(temp + operand[i])\n      } else\
    \ if operator[i - 1] == \"-\" {\n        stack.push(temp - operand[i])\n     \
    \ } else if operator[i - 1] == \"*\" {\n        stack.push(temp * operand[i])\n\
    \      } else if operator[i - 1] == \"//\" {\n        stack.push(temp / operand[i])\n\
    \      } else if operator[i - 1] == \"**\" {\n        stack.push(temp ^ operand[i])\n\
    \      }\n    }\n  }\n  return stack.pop()", "    var result = operand[0]\n  \
    \  for i in 0..<operator.count {\n        switch operator[i] {\n        case \"\
    +\":\n            result += operand[i+1]\n        case \"-\":\n            result\
    \ -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n \
    \       case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            break\n        }\n    }\n    return result", "  let\
    \ n = operand.count\n  let op = operator\n  var operands = operand\n  var nOperands\
    \ = n\n  var nOperators = n - 1\n  var index = 0\n  for i in 0..<nOperators {\n\
    \    if op[i] == \"**\" {\n      operands[index] = operands[index] ** operands[index\
    \ + 1]\n      index += 1\n      nOperands -= 1\n      nOperators -= 1\n    } else\
    \ {\n      index += 1\n    }\n  }\n  index = 0\n  for i in 0..<nOperators {\n\
    \    if op[i] == \"//\" {\n      operands[index] = operands[index] / operands[index\
    \ + 1]\n      index += 1\n      nOperands -= 1\n      nOperators -= 1\n    } else\
    \ {\n      index += 1\n    }\n  }\n  index = 0\n  for i in 0..<nOperators {\n\
    \    if op[i] == \"*\" {\n      operands[index] = operands[index] * operands[index\
    \ + 1]\n      index += 1\n      nOperands -= 1\n      nOperators -= 1\n    } else\
    \ {\n      index += 1\n    }\n  }\n  index = 0\n  for i in 0..<nOperators {\n\
    \    if op[i] == \"+\" {\n      operands[index] = operands[index] + operands[index\
    \ + 1]\n      index += 1\n      nOperands -= 1\n      nOperators -= 1\n    } else\
    \ {\n      index += 1\n    }\n  }\n  index = 0\n  for i in 0..<nOperators {\n\
    \    if op[i] == \"-\" {\n      operands[index] = operands[index] - operands[index\
    \ + 1]\n      index += 1\n      nOperands -= 1\n      nOperators -= 1\n    } else\
    \ {\n      index += 1\n    }\n  }\n  return operands[0]", '    return 0', "  \
    \  let operators = operator.map {\n        switch $0 {\n        case \"+\": return\
    \ +\n        case \"-\": return -\n        case \"*\": return *\n        case\
    \ \"//\": return /\n        case \"**\": return ^\n        default: return +\n\
    \        }\n    }\n    if operators.count + 1 != operand.count {\n        return\
    \ 0\n    }\n    var result = operand[0]\n    for i in 0..<operators.count {\n\
    \        result = operators[i](result, operand[i + 1])\n    }\n    return result",
  "    //    if operand.count - 1 == operator.count {\n    //        if operator.count\
    \ == 1 {\n    //            if operator[0] == \"+\" {\n    //                return\
    \ operand[0] + operand[1]\n    //            }\n    //            if operator[0]\
    \ == \"-\" {\n    //                return operand[0] - operand[1]\n    //   \
    \         }\n    //            if operator[0] == \"*\" {\n    //             \
    \   return operand[0] * operand[1]\n    //            }\n    //            if\
    \ operator[0] == \"//\" {\n    //                return operand[0] / operand[1]\n\
    \    //            }\n    //            if operator[0] == \"**\" {\n    //   \
    \             return Int(pow(Double(operand[0]), Double(operand[1])))\n    //\
    \            }\n    //        }\n    //        else {\n    //            if operator[0]\
    \ == \"+\" {\n    //                return operand[0] + do_algebra(operator: Array(operator[1..<operator.count]),\
    \ operand: Array(operand[1..<operand.count]))\n    //            }\n    //   \
    \         if operator[0] == \"-\" {\n    //                return operand[0] -\
    \ do_algebra(operator: Array(operator[1..<operator.count]), operand: Array(operand[1..<operand.count]))\n\
    \    //            }\n    //            if operator[0] == \"*\" {\n    //    \
    \            return operand[0] * do_algebra(operator: Array(operator[1..<operator.count]),\
    \ operand: Array(operand[1..<operand.count]))\n    //            }\n    //   \
    \         if operator[0] == \"//\" {\n    //                return operand[0]\
    \ / do_algebra(operator: Array(operator[1..<operator.count]), operand: Array(operand[1..<operand.count]))\n\
    \    //            }\n    //            if operator[0] == \"**\" {\n    //   \
    \             return Int(pow(Double(operand[0]), Double(do", "    var i = 0\n\
    \    var result = operand[i]\n    while i < operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i + 1]\n        case \"\
    -\":\n            result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n        default:\n            break\n        }\n        i += 1\n  \
    \  }\n    return result", "    // Insert your code here.\n    var result = operand[0]\n\
    \    var i = 0\n    for i in 1..<operand.count {\n        switch operator[i-1]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result = Int(pow(Double(result), Double(operand[i])))\n\
    \        default:\n            result = 0\n        }\n    }\n    return result",
  "  var expr: [String] = []\n  for i in 0..<operand.count - 1 {\n    expr.append(String(operand[i]))\n\
    \    expr.append(operator[i])\n  }\n  expr.append(String(operand[operand.count\
    \ - 1]))\n  return evaluate(str: expr.joined(separator: \" \"))", "    guard operator.count\
    \ == operand.count - 1 else {\n        return 0\n    }\n    var temp = operand\n\
    \    for (index, oper) in operator.enumerated() {\n        switch oper {\n   \
    \     case \"+\":\n            temp[index] = temp[index] + temp[index + 1]\n \
    \       case \"-\":\n            temp[index] = temp[index] - temp[index + 1]\n\
    \        case \"*\":\n            temp[index] = temp[index] * temp[index + 1]\n\
    \        case \"//\":\n            temp[index] = temp[index] / temp[index + 1]\n\
    \        case \"**\":\n            temp[index] = temp[index] ** temp[index + 1]\n\
    \        default:\n            break\n        }\n        temp.remove(at: index\
    \ + 1)\n    }\n    return temp[0]", "    let exp = operand.enumerated().map{ [$0.offset\
    \ > 0 ? operator[$0.offset - 1] : \"\", String($0.element)] }.flatMap{ $0 }.joined(separator:\
    \ \" \")\n    guard let expression = NSExpression(format: exp) else { return 0\
    \ }\n    guard let result = expression.expressionValue(with: nil, context: nil)\
    \ as? Int else { return 0 }\n    return result", "    var result = operand[0]\n\
    \    var index = 0\n    for op in operator {\n        switch op {\n        case\
    \ \"+\":\n            result += operand[index + 1]\n        case \"-\":\n    \
    \        result -= operand[index + 1]\n        case \"*\":\n            result\
    \ *= operand[index + 1]\n        case \"//\":\n            result /= operand[index\
    \ + 1]\n        case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n        index += 1\n\
    \    }\n    return result", '  return 0', "    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var i = 0\n    var numStack = [Int]()\n\
    \    var opStack = [String]()\n    numStack.append(operand[i])\n    i += 1\n \
    \   for ch in operator {\n        if ch == \"(\" {\n            opStack.append(ch)\n\
    \        } else if ch == \")\" {\n            while opStack.last != \"(\" {\n\
    \                numStack.append(evaluate(opStack.removeLast(), numStack.removeLast(),\
    \ numStack.removeLast()))\n            }\n            opStack.removeLast()\n \
    \       } else if opStack.count == 0 || opStack.last == \"(\" {\n            opStack.append(ch)\n\
    \        } else {\n            while opStack.count > 0 && priority(ch) <= priority(opStack.last!)\
    \ {\n                numStack.append(evaluate(opStack.removeLast(), numStack.removeLast(),\
    \ numStack.removeLast()))\n            }\n            opStack.append(ch)\n   \
    \     }\n        numStack.append(operand[i])\n        i += 1\n    }\n    while\
    \ opStack.count > 0 {\n        numStack.append(evaluate(opStack.removeLast(),\
    \ numStack.removeLast(), numStack.removeLast()))\n    }\n    return numStack.last!",
  "    var result = operand[0]\n    for i in 0..<operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i+1])))\n        default:\n            break\n        }\n   \
    \ }\n    return result", "    // write your code in Swift 4.2.1 (Linux)\n    var\
    \ result = operand[0]\n    for i in 0..<operand.count - 1 {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i + 1]\n        case \"\
    -\":\n            result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n        default:\n            return -1\n        }\n    }\n    return\
    \ result", "    var result = operand[0]\n    for (index, oper) in operator.enumerated()\
    \ {\n        let next_operand = operand[index + 1]\n        switch oper {\n  \
    \      case \"+\":\n            result += next_operand\n        case \"-\":\n\
    \            result -= next_operand\n        case \"*\":\n            result *=\
    \ next_operand\n        case \"//\":\n            result /= next_operand\n   \
    \     case \"**\":\n            result = Int(pow(Double(result), Double(next_operand)))\n\
    \        default:\n            print(\"error\")\n        }\n    }\n    return\
    \ result", "\tvar _operator = operator\n\tvar _operand = operand\n\tvar result\
    \ = 0\n\twhile _operator.count > 0 {\n\t\tif _operator.contains(\"**\") {\n\t\t\
    \tif let index = _operator.firstIndex(of: \"**\") {\n\t\t\t\t_operand[index] =\
    \ Int(pow(Double(_operand[index]), Double(_operand[index + 1])))\n\t\t\t\t_operand.remove(at:\
    \ index + 1)\n\t\t\t\t_operator.remove(at: index)\n\t\t\t}\n\t\t} else if _operator.contains(\"\
    //\") {\n\t\t\tif let index = _operator.firstIndex(of: \"//\") {\n\t\t\t\t_operand[index]\
    \ = _operand[index] / _operand[index + 1]\n\t\t\t\t_operand.remove(at: index +\
    \ 1)\n\t\t\t\t_operator.remove(at: index)\n\t\t\t}\n\t\t} else if _operator.contains(\"\
    *\") {\n\t\t\tif let index = _operator.firstIndex(of: \"*\") {\n\t\t\t\t_operand[index]\
    \ = _operand[index] * _operand[index + 1]\n\t\t\t\t_operand.remove(at: index +\
    \ 1)\n\t\t\t\t_operator.remove(at: index)\n\t\t\t}\n\t\t} else if _operator.contains(\"\
    -\") {\n\t\t\tif let index = _operator.firstIndex(of: \"-\") {\n\t\t\t\t_operand[index]\
    \ = _operand[index] - _operand[index + 1]\n\t\t\t\t_operand.remove(at: index +\
    \ 1)\n\t\t\t\t_operator.remove(at: index)\n\t\t\t}\n\t\t} else if _operator.contains(\"\
    +\") {\n\t\t\tif let index = _operator.firstIndex(of: \"+\") {\n\t\t\t\t_operand[index]\
    \ = _operand[index] + _operand[index + 1]\n\t\t\t\t_operand.remove(at: index +\
    \ 1)\n\t\t\t\t_", "  var result = operand[0]\n  for i in 0..<operator.count {\n\
    \    if operator[i] == \"+\" {\n      result += operand[i + 1]\n    } else if\
    \ operator[i] == \"-\" {\n      result -= operand[i + 1]\n    } else if operator[i]\
    \ == \"*\" {\n      result *= operand[i + 1]\n    } else if operator[i] == \"\
    //\" {\n      result /= operand[i + 1]\n    } else if operator[i] == \"**\" {\n\
    \      result = Int(pow(Double(result), Double(operand[i + 1])))\n    }\n  }\n\
    \  return result", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ Int(pow(Double(result), Double(operand[i+1])))\n        default:\n         \
    \   break\n        }\n    }\n    return result", "\tvar operator = operator\n\t\
    var operand = operand\n\t\n\twhile operand.count > 1 {\n\t\tvar tempOperand =\
    \ operand[1]\n\t\tswitch operator[0] {\n\t\tcase \"+\":\n\t\t\ttempOperand = operand[0]\
    \ + operand[1]\n\t\tcase \"-\":\n\t\t\ttempOperand = operand[0] - operand[1]\n\
    \t\tcase \"*\":\n\t\t\ttempOperand = operand[0] * operand[1]\n\t\tcase \"//\"\
    :\n\t\t\ttempOperand = operand[0] / operand[1]\n\t\tcase \"**\":\n\t\t\ttempOperand\
    \ = Int(pow(Double(operand[0]), Double(operand[1])))\n\t\tdefault:\n\t\t\tbreak\n\
    \t\t}\n\t\t\n\t\toperator.removeFirst()\n\t\toperand.removeFirst()\n\t\toperand[0]\
    \ = tempOperand\n\t}\n\t\n\treturn operand[0]", "    var output: Int = operand[0]\n\
    \    for i in 0...operator.count - 1 {\n        if operator[i] == \"+\" {\n  \
    \          output += operand[i + 1]\n        } else if operator[i] == \"-\" {\n\
    \            output -= operand[i + 1]\n        } else if operator[i] == \"*\"\
    \ {\n            output *= operand[i + 1]\n        } else if operator[i] == \"\
    //\" {\n            output /= operand[i + 1]\n        } else if operator[i] ==\
    \ \"**\" {\n            output = Int(pow(Double(output), Double(operand[i + 1])))\n\
    \        }\n    }\n    return output", "    var result = operand[0]\n    for i\
    \ in 0..<operator.count {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i+1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i+1]\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i+1]\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = Int(pow(Double(result), Double(operand[i+1])))\n        }\n    }\n    return\
    \ result", "    var result = operand[0]\n    for index in 0..<operator.count {\n\
    \        switch operator[index] {\n        case \"+\":\n            result +=\
    \ operand[index + 1]\n        case \"-\":\n            result -= operand[index\
    \ + 1]\n        case \"*\":\n            result *= operand[index + 1]\n      \
    \  case \"//\":\n            result /= operand[index + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[index + 1])))\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   guard operator.count > 0 && operand.count > 1 else { return 0 }\n    var operandStack\
    \ = [Int]()\n    var operatorStack = [String]()\n    for (i, n) in operand.enumerated()\
    \ {\n        operandStack.append(n)\n        if i < operator.count {\n       \
    \     if operator[i] == \"**\" {\n                operandStack.append(pow(operandStack.removeLast(),\
    \ operandStack.removeLast()))\n            } else {\n                operatorStack.append(operator[i])\n\
    \            }\n        }\n    }\n    while operatorStack.count > 0 {\n      \
    \  let op = operatorStack.removeLast()\n        let num2 = operandStack.removeLast()\n\
    \        let num1 = operandStack.removeLast()\n        operandStack.append(calculate(op,\
    \ num1, num2))\n    }\n    return operandStack.removeLast()", "    var result\
    \ = operand[0]\n    for i in 0..<operand.count-1 {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   guard operator.count == operand.count - 1 else { return 0 }\n    guard operand.count\
    \ >= 2 else { return 0 }\n    var answer = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            answer +=\
    \ operand[i + 1]\n        case \"-\":\n            answer -= operand[i + 1]\n\
    \        case \"*\":\n            answer *= operand[i + 1]\n        case \"//\"\
    :\n            answer /= operand[i + 1]\n        case \"**\":\n            answer\
    \ = answer.power(operand[i + 1])\n        default:\n            break\n      \
    \  }\n    }\n    return answer", "    var result = operand[0]\n    var index =\
    \ 0\n    while index < operator.count {\n        switch operator[index] {\n  \
    \      case \"+\":\n            result += operand[index + 1]\n        case \"\
    -\":\n            result -= operand[index + 1]\n        case \"*\":\n        \
    \    result *= operand[index + 1]\n        case \"//\":\n            result /=\
    \ operand[index + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[index + 1])))\n        default:\n            break\n        }\n\
    \        index += 1\n    }\n    return result", "  // Write your code here\n\n\
    \  return 0", "    var output = operand[0]\n    for i in 0..<operator.count {\n\
    \        switch operator[i] {\n        case \"+\":\n            output += operand[i+1]\n\
    \        case \"-\":\n            output -= operand[i+1]\n        case \"*\":\n\
    \            output *= operand[i+1]\n        case \"//\":\n            output\
    \ /= operand[i+1]\n        case \"**\":\n            output = Int(pow(Double(output),\
    \ Double(operand[i+1])))\n        default:\n            return 0\n        }\n\
    \    }\n    return output", "\tvar stack: [Int] = []\n\tvar operandIdx = 0\n\t\
    for op in operator {\n\t\tstack.append(operand[operandIdx])\n\t\toperandIdx +=\
    \ 1\n\t\twhile stack.count >= 2 {\n\t\t\tif stack.count < 2 {\n\t\t\t\treturn\
    \ 0\n\t\t\t}\n\t\t\tlet op1 = stack.removeLast()\n\t\t\tlet op2 = stack.removeLast()\n\
    \t\t\tif op == \"+\" {\n\t\t\t\tstack.append(op1 + op2)\n\t\t\t} else if op ==\
    \ \"-\" {\n\t\t\t\tstack.append(op1 - op2)\n\t\t\t} else if op == \"*\" {\n\t\t\
    \t\tstack.append(op1 * op2)\n\t\t\t} else if op == \"//\" {\n\t\t\t\tstack.append(op1\
    \ / op2)\n\t\t\t} else if op == \"**\" {\n\t\t\t\tstack.append(Int(pow(Double(op1),\
    \ Double(op2))))\n\t\t\t}\n\t\t}\n\t}\n\tstack.append(operand[operandIdx])\n\t\
    return stack.last!", "    if operator.count == 0 || operand.count == 0 {\n   \
    \     return 0\n    }\n    var value = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            value += operand[i\
    \ + 1]\n        case \"-\":\n            value -= operand[i + 1]\n        case\
    \ \"*\":\n            value *= operand[i + 1]\n        case \"//\":\n        \
    \    value /= operand[i + 1]\n        case \"**\":\n            value = Int(pow(Double(value),\
    \ Double(operand[i + 1])))\n        default:\n            print(\"Unknown operator:\
    \ \\(operator[i])\")\n        }\n    }\n    return value", "    var result = operand[0]\n\
    \    var index = 0\n    for _ in 1..<operand.count {\n        let op: String =\
    \ operator[index]\n        index += 1\n        if op == \"+\" {\n            result\
    \ += operand[index]\n        } else if op == \"-\" {\n            result -= operand[index]\n\
    \        } else if op == \"*\" {\n            result *= operand[index]\n     \
    \   } else if op == \"//\" {\n            result /= operand[index]\n        }\
    \ else if op == \"**\" {\n            result = Int(pow(Double(result), Double(operand[index])))\n\
    \        }\n    }\n    return result", "    let op = operator.reversed()\n   \
    \ var operand = operand\n    for i in 0..<op.count {\n        var num1 = operand.removeLast()\n\
    \        var num2 = operand.removeLast()\n        if op[i] == \"+\" {\n      \
    \      operand.append(num1 + num2)\n        } else if op[i] == \"-\" {\n     \
    \       operand.append(num1 - num2)\n        } else if op[i] == \"*\" {\n    \
    \        operand.append(num1 * num2)\n        } else if op[i] == \"//\" {\n  \
    \          operand.append(num1 / num2)\n        } else if op[i] == \"**\" {\n\
    \            operand.append(Int(pow(Double(num1), Double(num2))))\n        }\n\
    \    }\n    return operand[0]", "\treturn 0", "    guard operand.count > 2 else\
    \ {\n        return 0\n    }\n    var total = operand[0]\n    var operand = operand\n\
    \    for index in 0..<operator.count {\n        let op = operator[index]\n   \
    \     operand.removeFirst()\n        switch op {\n        case \"+\":\n      \
    \      total += operand[0]\n        case \"-\":\n            total -= operand[0]\n\
    \        case \"*\":\n            total *= operand[0]\n        case \"//\":\n\
    \            total /= operand[0]\n        case \"**\":\n            total = Int(pow(Double(total),\
    \ Double(operand[0])))\n        default:\n            break\n        }\n    }\n\
    \    return total", "    var i = 0\n    var result = operand[i]\n    while i <\
    \ operator.count {\n        switch operator[i] {\n        case \"+\":\n      \
    \      result += operand[i + 1]\n        case \"-\":\n            result -= operand[i\
    \ + 1]\n        case \"*\":\n            result *= operand[i + 1]\n        case\
    \ \"//\":\n            result /= operand[i + 1]\n        case \"**\":\n      \
    \      result = Int(pow(Double(result), Double(operand[i + 1])))\n        default:\n\
    \            break\n        }\n        i += 1\n    }\n    return result", '    return
    0', "    let operations = [\"+\", \"-\", \"*\", \"//\", \"**\"]\n    var number\
    \ = operand[0]\n    if !operations.contains(operator[0]) {\n        return 0\n\
    \    }\n    for i in 0..<operator.count {\n        if operator[i] == \"+\" {\n\
    \            number += operand[i + 1]\n        } else if operator[i] == \"-\"\
    \ {\n            number -= operand[i + 1]\n        } else if operator[i] == \"\
    *\" {\n            number *= operand[i + 1]\n        } else if operator[i] ==\
    \ \"//\" {\n            number /= operand[i + 1]\n        } else if operator[i]\
    \ == \"**\" {\n            number = Int(pow(Double(number), Double(operand[i +\
    \ 1])))\n        }\n    }\n    return number", "    var result = operand[0]\n\
    \    for i in 0..<operand.count-1 {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            break\n        }\n    }\n    return result", "    var\
    \ result = operand[0]\n    for i in 0..<operand.count-1 {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            result = 0\n        }\n    }\n    return result",
  "    guard !operator.isEmpty && operand.count > 1 else {\n        return 0\n   \
    \ }\n    var result = operand[0]\n    for i in 0 ..< operator.count {\n      \
    \  switch operator[i] {\n        case \"+\":\n            result += operand[i\
    \ + 1]\n        case \"-\":\n            result -= operand[i + 1]\n        case\
    \ \"*\":\n            result *= operand[i + 1]\n        case \"//\":\n       \
    \     result /= operand[i + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n        default:\n            return 0\n        }\n\
    \    }\n    return result", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        let op = operator[i]\n        let operand2 = operand[i+1]\n     \
    \   switch op {\n        case \"+\":\n            result += operand2\n       \
    \ case \"-\":\n            result -= operand2\n        case \"*\":\n         \
    \   result *= operand2\n        case \"//\":\n            result /= operand2\n\
    \        case \"**\":\n            result = result * result * operand2\n     \
    \   default:\n            break\n        }\n    }\n    return result", "    var\
    \ result = operand[0]\n    var index = 0\n    while index < operator.count {\n\
    \        switch operator[index] {\n        case \"+\":\n            result +=\
    \ operand[index + 1]\n        case \"-\":\n            result -= operand[index\
    \ + 1]\n        case \"*\":\n            result *= operand[index + 1]\n      \
    \  case \"//\":\n            result /= operand[index + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[index + 1])))\n\
    \        default:\n            break\n        }\n        index += 1\n    }\n \
    \   return result", "    var operand = operand\n    for op in operator {\n   \
    \     switch op {\n        case \"+\":\n            operand[0] += operand[1]\n\
    \            operand.remove(at: 1)\n        case \"-\":\n            operand[0]\
    \ -= operand[1]\n            operand.remove(at: 1)\n        case \"*\":\n    \
    \        operand[0] *= operand[1]\n            operand.remove(at: 1)\n       \
    \ case \"//\":\n            operand[0] /= operand[1]\n            operand.remove(at:\
    \ 1)\n        case \"**\":\n            operand[0] = Int(pow(Double(operand[0]),\
    \ Double(operand[1])))\n            operand.remove(at: 1)\n        default:\n\
    \            break\n        }\n    }\n    return operand[0]", "\treturn operator.reduce((operand.first\
    \ ?? 0, operand.dropFirst())) {\n\t\t($1 == \"+\" ? $0.0 + $0.1.first! :\n\t\t\
    \t$1 == \"-\" ? $0.0 - $0.1.first! :\n\t\t\t\t$1 == \"*\" ? $0.0 * $0.1.first!\
    \ :\n\t\t\t\t\t$1 == \"//\" ? $0.0 / $0.1.first! :\n\t\t\t\t\t\t$1 == \"**\" ?\
    \ Int(pow(Double($0.0), Double($0.1.first!))) :\n\t\t\t\t\t\t\t$0.0, $0.1.dropFirst())\n\
    \t}.0", "    var operand = operand\n    for i in 0..<operator.count {\n      \
    \  switch operator[i] {\n        case \"+\":\n            operand[i+1] = operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            operand[i+1] = operand[i] -\
    \ operand[i+1]\n        case \"*\":\n            operand[i+1] = operand[i] * operand[i+1]\n\
    \        case \"//\":\n            operand[i+1] = operand[i] / operand[i+1]\n\
    \        case \"**\":\n            operand[i+1] = Int(pow(Double(operand[i]),\
    \ Double(operand[i+1])))\n        default:\n            return 0\n        }\n\
    \    }\n    return operand[operand.count-1]", "    var result = operand[0]\n \
    \   for index in 0..<operator.count {\n        switch operator[index] {\n    \
    \    case \"+\":\n            result += operand[index + 1]\n        case \"-\"\
    :\n            result -= operand[index + 1]\n        case \"*\":\n           \
    \ result *= operand[index + 1]\n        case \"//\":\n            result /= operand[index\
    \ + 1]\n        case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result",
  "  var result = operand[0]\n  for i in 0..<operator.count {\n    switch operator[i]\
    \ {\n    case \"+\":\n      result += operand[i + 1]\n    case \"-\":\n      result\
    \ -= operand[i + 1]\n    case \"*\":\n      result *= operand[i + 1]\n    case\
    \ \"//\":\n      result /= operand[i + 1]\n    case \"**\":\n      result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n    default:\n      break\n    }\n  }\n  return result",
  "    if operator.count == operand.count - 1 {\n        var result = operand[0]\n\
    \        for i in 0...operator.count - 1 {\n            switch operator[i] {\n\
    \            case \"+\":\n                result += operand[i + 1]\n         \
    \   case \"-\":\n                result -= operand[i + 1]\n            case \"\
    *\":\n                result *= operand[i + 1]\n            case \"//\":\n   \
    \             result /= operand[i + 1]\n            case \"**\":\n           \
    \     result = Int(pow(Double(result), Double(operand[i + 1])))\n            default:\n\
    \                return 0\n            }\n        }\n        return result\n \
    \   }\n    return 0", "    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ Int(pow(Double(result), Double(operand[i+1])))\n        default:\n         \
    \   result = 0\n        }\n    }\n    return result", "    var result = operand[0]\n\
    \    for i in 0..<operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            return -1\n        }\n    }\n    return result", " \
    \   var result = operand[0]\n    for (index, oper) in operator.enumerated() {\n\
    \        switch oper {\n        case \"+\":\n            result += operand[index\
    \ + 1]\n        case \"-\":\n            result -= operand[index + 1]\n      \
    \  case \"*\":\n            result *= operand[index + 1]\n        case \"//\"\
    :\n            result /= operand[index + 1]\n        case \"**\":\n          \
    \  result = Int(pow(Double(result), Double(operand[index + 1])))\n        default:\n\
    \            break\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
