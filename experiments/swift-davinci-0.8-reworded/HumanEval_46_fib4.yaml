name: HumanEval_46_fib4
language: swift
prompt: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2) ->\
  \ 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  /// Please write a function to efficiently compute the n-th element of the fib4\
  \ number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n/// 4\n/// >>> fib4(n:\
  \ 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\n\
  assert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
completions: ["    let dp = Array(repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1]\
    \ = 0\n    dp[2] = 2\n    dp[3] = 0\n    for i in 4..<dp.count {\n        dp[i]\
    \ = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    }\n    return dp[n]", "    precondition(n\
    \ >= 0)\n    switch n {\n    case 0:\n        return 0\n    case 1:\n        return\
    \ 0\n    case 2:\n        return 2\n    case 3:\n        return 0\n    default:\n\
    \        var fibs = [Int](repeating: 0, count: n)\n        fibs[0] = 0\n     \
    \   fibs[1] = 0\n        fibs[2] = 2\n        fibs[3] = 0\n        for index in\
    \ 4..<n {\n            fibs[index] = fibs[index - 1] + fibs[index - 2] + fibs[index\
    \ - 3] + fibs[index - 4]\n        }\n        return fibs[n - 1]\n    }", "   \
    \ var arr = [0, 0, 2, 0]\n    if n <= 3 {\n        return arr[n]\n    }\n    var\
    \ index = 3\n    while index < n {\n        let new = arr[0] + arr[1] + arr[2]\
    \ + arr[3]\n        arr[0] = arr[1]\n        arr[1] = arr[2]\n        arr[2] =\
    \ arr[3]\n        arr[3] = new\n        index += 1\n    }\n    return arr[3]",
  "    var prev1 = 0\n    var prev2 = 0\n    var prev3 = 2\n    var prev4 = 0\n  \
    \  var current = 0\n    for _ in 4..<n {\n        current = prev1 + prev2 + prev3\
    \ + prev4\n        prev1 = prev2\n        prev2 = prev3\n        prev3 = prev4\n\
    \        prev4 = current\n    }\n    return current", '    return 0', "    var\
    \ a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 0..<n {\n \
    \       d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n  \
    \  return d", "    // FIXME: Implement\n    return -1", "    var n0 = 0\n    var\
    \ n1 = 0\n    var n2 = 2\n    var n3 = 0\n    var n4 = 0\n    if n < 4 {\n   \
    \     return n-1\n    }\n    for _ in 4...n {\n        n4 = n3 + n2 + n1 + n0\n\
    \        n0 = n1\n        n1 = n2\n        n2 = n3\n        n3 = n4\n    }\n \
    \   return n4", "    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n \
    \       return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ var twoStepsAgo = 0\n    var oneStepAgo = 0\n    var current = 2\n    for _\
    \ in 4...n {\n        twoStepsAgo = oneStepAgo\n        oneStepAgo = current\n\
    \        current = twoStepsAgo + oneStepAgo + current\n    }\n    return current",
  "    // TODO: Your solution here\n    return 0", "    var x = 0\n    var y = 0\n\
    \    var z = 2\n    var w = 0\n    if n < 3 {\n        return n\n    }\n    for\
    \ _ in 3...n {\n        w = x + y + z\n        x = y\n        y = z\n        z\
    \ = w\n    }\n    return w", "  var i = 1\n  var j = 2\n  var k = 0\n  var l =\
    \ 0\n  var result = 0\n  for _ in 0..<n {\n    result = j + k + l\n    l = k\n\
    \    k = j\n    j = result\n  }\n  return result", "    guard n > 0 else { return\
    \ 0 }\n    var i = 0\n    var j = 0\n    var k = 2\n    var l = 0\n    for _ in\
    \ 0..<n {\n        let temp = l\n        l = i + j + k + l\n        i = j\n  \
    \      j = k\n        k = temp\n    }\n    return l", "    var previousPrevious\
    \ = 0\n    var previous = 0\n    var current = 2\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 2\n    } else if n == 3 {\n        return 0\n    } else {\n        for\
    \ _ in 4...n {\n            let temp = current\n            current = previousPrevious\
    \ + previous + current\n            previousPrevious = previous\n            previous\
    \ = temp\n        }\n        return current\n    }", "    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var f1\
    \ = 0\n    var f2 = 0\n    var f3 = 2\n    var f4 = 0\n    var fn = 0\n    for\
    \ _ in 4...n {\n        fn = f1 + f2 + f3 + f4\n        f1 = f2\n        f2 =\
    \ f3\n        f3 = f4\n        f4 = fn\n    }\n    return fn", '    return 0',
  "  guard n > 3 else { return n - 1 }\n  var a = 0\n  var b = 0\n  var c = 2\n  var\
    \ d = 0\n  for _ in 4...n {\n    d = a + b + c\n    a = b\n    b = c\n    c =\
    \ d\n  }\n  return d", "    var a = 0\n    var b = 0\n    var c = 2\n    var d\
    \ = 0\n    var e = 0\n    if n < 4 {\n        return [0, 0, 2, 0][n]\n    }\n\
    \    for _ in 3..<n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e", "    var n1 = 0\n    var\
    \ n2 = 0\n    var n3 = 2\n    var n4 = 0\n    for _ in 3...n {\n        n4 = n1\
    \ + n2 + n3\n        n1 = n2\n        n2 = n3\n        n3 = n4\n    }\n    return\
    \ n4", "    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e\
    \ = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for i in 4...n {\n            e = a + b + c\
    \ + d\n            a = b\n            b = c\n            c = d\n            d\
    \ = e\n        }\n        return e\n    }", "    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var x = 0\n    var y\
    \ = 0\n    var z = 2\n    var w = 0\n    for _ in 4...n {\n        w = x + y +\
    \ z\n        x = y\n        y = z\n        z = w\n    }\n    return w", '  return
    0', '    return n', "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 0\n    }\n    var f0 = 0\n    var f1 = 0\n    var f2 = 2\n\
    \    var f3 = 0\n    var fn = 0\n    for _ in 4...n {\n        fn = f0 + f1 +\
    \ f2 + f3\n        f0 = f1\n        f1 = f2\n        f2 = f3\n        f3 = fn\n\
    \    }\n    return fn", "    //MARK: - Calculate\n    var value = 0\n    var prev\
    \ = 0\n    var prevPrev = 0\n    var prevPrevPrev = 0\n    var prevPrevPrevPrev\
    \ = 0\n    for i in 0..<n {\n        switch i {\n        case 0:\n           \
    \ value = 0\n        case 1:\n            value = 0\n        case 2:\n       \
    \     value = 2\n        case 3:\n            value = 0\n        default:\n  \
    \          value = prev + prevPrev + prevPrevPrev + prevPrevPrevPrev\n       \
    \ }\n        prevPrevPrevPrev = prevPrevPrev\n        prevPrevPrev = prevPrev\n\
    \        prevPrev = prev\n        prev = value\n    }\n    return value", "  \
    \  // TODO: please implement your solution below\n    if n < 3 {\n        return\
    \ n == 0 ? 0 : 2\n    }\n    var n1 = 2\n    var n2 = 0\n    var n3 = 0\n    var\
    \ n4 = 0\n    var sum = 0\n    for _ in 3...n {\n        sum = n1 + n2 + n3 +\
    \ n4\n        n4 = n3\n        n3 = n2\n        n2 = n1\n        n1 = sum\n  \
    \  }\n    return sum", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ if n == 3 {\n        return 0\n    }\n    var n_1 = 0\n    var n_2 = 0\n   \
    \ var n_3 = 2\n    var n_4 = 0\n    var fib = 0\n    for _ in 4...n {\n      \
    \  fib = n_1 + n_2 + n_3 + n_4\n        n_1 = n_2\n        n_2 = n_3\n       \
    \ n_3 = n_4\n        n_4 = fib\n    }\n    return fib", "    var a = 0\n    var\
    \ b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n        return 0\n   \
    \ } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 2\n    } else if n == 3 {\n        return 0\n    } else {\n        for _ in\
    \ 4...n {\n            d = a + b + c\n            a = b\n            b = c\n \
    \           c = d\n        }\n        return d\n    }", "    guard n > 3 else\
    \ { return n == 2 ? 2 : 0 }\n    var cache = [0, 0, 2, 0]\n    for i in 4...n\
    \ {\n        cache.append(cache[0] + cache[1] + cache[2] + cache[3])\n       \
    \ cache.removeFirst()\n    }\n    return cache.last!", "    // Hint #1: Don't\
    \ use recursion.\n    // Hint #2: Instead, use a table to store the intermediate\
    \ results and just look them up.\n    // Hint #3: Watch out for negative numbers!\n\
    \    var val = [0, 0, 2, 0]\n    if n <= 3 {\n        return val[n]\n    }\n \
    \   var i = 4\n    while i <= n {\n        let newNum = val[i-1] + val[i-2] +\
    \ val[i-3] + val[i-4]\n        val.append(newNum)\n        i += 1\n    }\n   \
    \ return val[n]", "    if n < 4 {\n        return n\n    }\n    var arr = [Int](repeating:\
    \ 0, count: n+1)\n    arr[4] = 4\n    for i in 4...n {\n        arr[i] = arr[i-1]\
    \ + arr[i-2] + arr[i-3] + arr[i-4]\n    }\n    return arr[n]", "    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    if n < 4 {\n        return n\n\
    \    }\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d", "    var a = 0\n    var b = 0\n  \
    \  var c = 2\n    var d = 0\n    var e = 0\n    for _ in 3...n {\n        e =\
    \ a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n\
    \    }\n    return e", "    // TODO: implement me\n    return 0", "    var sequence\
    \ = [0, 0, 2, 0]\n    if n < 4 {\n        return sequence[n]\n    }\n    for i\
    \ in 4...n {\n        sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3]\
    \ + sequence[i-4])\n    }\n    return sequence[n]", "    guard n > 3 else { return\
    \ n * 2 }\n    var cache = [0,0,2,0]\n    for i in 4...n {\n        cache.append(cache[i-1]\
    \ + cache[i-2] + cache[i-3] + cache[i-4])\n    }\n    return cache[n]", "    var\
    \ nMinusTwo = 0\n    var nMinusOne = 0\n    var nMinusThree = 0\n    var nMinusFour\
    \ = 0\n    var current = 0\n    if n == 0 {\n        return 0\n    } else if n\
    \ == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else\
    \ if n == 3 {\n        return 0\n    } else {\n        for _ in 4...n {\n    \
    \        nMinusFour = nMinusThree\n            nMinusThree = nMinusTwo\n     \
    \       nMinusTwo = nMinusOne\n            nMinusOne = current\n            current\
    \ = nMinusFour + nMinusThree + nMinusTwo + nMinusOne\n        }\n        return\
    \ current\n    }", "    \n    var result = 0\n    var prev1 = 0\n    var prev2\
    \ = 0\n    var prev3 = 0\n    var prev4 = 0\n    \n    if n == 0 {\n        result\
    \ = 0\n    } else if n == 1 {\n        result = 0\n    } else if n == 2 {\n  \
    \      result = 2\n    } else if n == 3 {\n        result = 0\n    } else {\n\
    \        result = 0\n        prev1 = 0\n        prev2 = 0\n        prev3 = 2\n\
    \        prev4 = 0\n        \n        for _ in 4...n {\n            result = prev1\
    \ + prev2 + prev3 + prev4\n            prev1 = prev2\n            prev2 = prev3\n\
    \            prev3 = prev4\n            prev4 = result\n        }\n    }\n   \
    \ \n    return result", "    var first = 0\n    var second = 0\n    var third\
    \ = 2\n    var fourth = 0\n    var next: Int\n    var count = 3\n    while count\
    \ <= n {\n        next = first + second + third + fourth\n        first = second\n\
    \        second = third\n        third = fourth\n        fourth = next\n     \
    \   count += 1\n    }\n    return fourth", '    return 0', '    return 0', " \
    \   \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n      \
    \  return 0\n    }\n    \n    if n == 2 {\n        return 2\n    }\n    \n   \
    \ if n == 3 {\n        return 0\n    }\n    \n    var a = 0\n    var b = 0\n \
    \   var c = 2\n    var d = 0\n    var e = 0\n    \n    for _ in 4...n {\n    \
    \    e = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d\
    \ = e\n    }\n    \n    return e", "    if n < 0 {\n        return -1\n    }\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var m1 = 0\n    var m2 = 0\n    var m3 = 2\n    var m4 = 0\n \
    \   var count = 4\n    var result = 0\n    while count <= n {\n        result\
    \ = m1 + m2 + m3 + m4\n        m1 = m2\n        m2 = m3\n        m3 = m4\n   \
    \     m4 = result\n        count += 1\n    }\n    return result", '    return
    0', "    var fib1 = 0\n    var fib2 = 0\n    var fib3 = 2\n    var fib4 = 0\n\
    \    if n <= 2 {\n        return n\n    }\n    for _ in 4...n {\n        fib4\
    \ = fib1 + fib2 + fib3\n        fib1 = fib2\n        fib2 = fib3\n        fib3\
    \ = fib4\n    }\n    return fib4", "    var nMinus4 = 0\n    var nMinus3 = 0\n\
    \    var nMinus2 = 2\n    var nMinus1 = 0\n    var n = 0\n    if n == 0 {\n  \
    \      return nMinus4\n    } else if n == 1 {\n        return nMinus3\n    } else\
    \ if n == 2 {\n        return nMinus2\n    } else if n == 3 {\n        return\
    \ nMinus1\n    } else {\n        for _ in 4...n {\n            n = nMinus4 + nMinus3\
    \ + nMinus2 + nMinus1\n            nMinus4 = nMinus3\n            nMinus3 = nMinus2\n\
    \            nMinus2 = nMinus1\n            nMinus1 = n\n        }\n        return\
    \ n\n    }", "    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n    \
    \    return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var\
    \ sum = 0\n    var arr = [Int](repeating: 0, count: n)\n    arr[0] = 0\n    arr[1]\
    \ = 0\n    arr[2] = 2\n    arr[3] = 0\n    for i in 4..<n {\n        arr[i] =\
    \ arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4]\n    }\n    return arr[n-1]", "  \
    \  precondition(n >= 0)\n    var arr = [0, 0, 2, 0]\n    guard n > 3 else { return\
    \ arr[n] }\n    for i in 4...n {\n        arr[i % 4] = arr[(i-1) % 4] + arr[(i-2)\
    \ % 4] + arr[(i-3) % 4] + arr[(i-4) % 4]\n    }\n    return arr[n % 4]", "   \
    \ var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n {\n\
    \        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n \
    \   return d", "    let fib4s = [0, 0, 2, 0]\n    guard n > 3 else { return fib4s[n]\
    \ }\n    var i = 4\n    var a = 2\n    var b = 0\n    var c = 0\n    var d = 0\n\
    \    while i <= n {\n        d = c\n        c = b\n        b = a\n        a =\
    \ d + c + b + a\n        i += 1\n    }\n    return a", "    if n < 0 {\n     \
    \   return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if\
    \ n == 3 {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var c =\
    \ 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a = b\n\
    \        b = c\n        c = d\n    }\n    return d", "    if n < 4 {\n       \
    \ return [0, 0, 2, 0][n]\n    }\n    var arr = [0, 0, 2, 0]\n    for i in 4...n\
    \ {\n        arr.append(arr[i-1] + arr[i-2] + arr[i-3] + arr[i-4])\n    }\n  \
    \  return arr[n]", "    if n == 0 {\n        return 0\n    }\n    var a = 0\n\
    \    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        a\
    \ = b\n        b = c\n        c = d\n        d = a + b + c\n    }\n    return\
    \ d", "  if n < 4 {\n    return n % 4\n  }\n\n  var last = Array(repeating: 0,\
    \ count: 4)\n  last[3] = 1\n\n  for _ in 0..<n-3 {\n    last = [last[1], last[2],\
    \ last[3], last[1] + last[2] + last[3]]\n  }\n\n  return last[3]", "    var a\
    \ = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var next = 0\n    if n\
    \ == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else\
    \ if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n  \
    \  } else {\n        for _ in 4...n {\n            next = a + b + c + d\n    \
    \        a = b\n            b = c\n            c = d\n            d = next\n \
    \       }\n        return next\n    }", "    if n == 0 {\n        return 0\n \
    \   }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    if n > 3 {\n       \
    \ var fib = [0, 0, 2, 0]\n        var i = 4\n        while i <= n {\n        \
    \    let newFib = fib[0] + fib[1] + fib[2] + fib[3]\n            fib.append(newFib)\n\
    \            fib.removeFirst()\n            i += 1\n        }\n        return\
    \ fib[3]\n    }\n    return 0", '    return 0', "  if n == 0 {\n    return 0\n\
    \  } else if n == 1 {\n    return 0\n  } else if n == 2 {\n    return 2\n  } else\
    \ if n == 3 {\n    return 0\n  } else {\n    var fib4 = [0, 0, 2, 0]\n    for\
    \ i in 4...n {\n      fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4])\n\
    \    }\n    return fib4[n]\n  }", "  var a = 0\n  var b = 0\n  var c = 2\n  var\
    \ d = 0\n  if n == 0 {\n    return 0\n  } else if n == 1 {\n    return 0\n  }\
    \ else if n == 2 {\n    return 2\n  } else if n == 3 {\n    return 0\n  } else\
    \ {\n    for _ in 3..<n {\n      d = a + b + c\n      a = b\n      b = c\n   \
    \   c = d\n    }\n    return d\n  }", "    \n    guard n >= 3 else {\n       \
    \ return fib4Terms[n]\n    }\n    \n    var n1 = 0\n    var n2 = 0\n    var n3\
    \ = 2\n    var n4 = 0\n    var total = 0\n    \n    for _ in 3...n {\n       \
    \ total = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n\
    \        n4 = total\n    }\n    \n    return total", "    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n\
    \        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var fibs\
    \ = [0, 0, 2, 0]\n    var index = 4\n    while index <= n {\n        fibs.append(fibs[index-1]\
    \ + fibs[index-2] + fibs[index-3] + fibs[index-4])\n        index += 1\n    }\n\
    \    return fibs[n]", "    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if\
    \ n == 3 {\n        return 0\n    }\n    var fib4s = [0, 0, 2, 0]\n    for index\
    \ in 4...n {\n        let fibNum = fib4s[3] + fib4s[2] + fib4s[1] + fib4s[0]\n\
    \        fib4s.removeFirst()\n        fib4s.append(fibNum)\n    }\n    return\
    \ fib4s[3]", '    return 0', "    // TODO: Please write your solution here.\n\
    \    // This is an O(n) solution because each element only needs to be calculated\
    \ once.\n    // You can use a memo to keep track of which indices have been calculated.\n\
    \    return -1", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 0\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n\
    \    var n4 = 0\n    var n5 = 0\n    for _ in 4...n {\n        n5 = n1 + n2 +\
    \ n3 + n4\n        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n5\n\
    \    }\n    return n5", "    let a = 0\n    let b = 0\n    let c = 2\n    let\
    \ d = 0\n    if n == 0 {\n        return a\n    } else if n == 1 {\n        return\
    \ b\n    } else if n == 2 {\n        return c\n    } else if n == 3 {\n      \
    \  return d\n    } else {\n        var fourth = d\n        var third = c\n   \
    \     var second = b\n        var first = a\n        for _ in 4...n {\n      \
    \      fourth = first + second + third + fourth\n            first = second\n\
    \            second = third\n            third = fourth\n        }\n        return\
    \ fourth\n    }", "    let arr = [0, 0, 2, 0]\n    if n < 4 {\n        return\
    \ arr[n]\n    }\n    var sum = 0\n    var i = 3\n    var j = 2\n    var k = 1\n\
    \    var l = 0\n    while i < n {\n        sum = arr[i] + arr[j] + arr[k] + arr[l]\n\
    \        arr[l] = arr[k]\n        arr[k] = arr[j]\n        arr[j] = arr[i]\n \
    \       arr[i] = sum\n        i += 1\n        j += 1\n        k += 1\n       \
    \ l += 1\n    }\n    return sum", "    var i = 2, fib1 = 0, fib2 = 2, fib3 = 0,\
    \ fib4 = 2\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n      \
    \  return 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n\
    \        return 0\n    } else {\n        while i < n {\n            fib1 = fib2\n\
    \            fib2 = fib3\n            fib3 = fib4\n            fib4 = fib1 + fib2\
    \ + fib3 + fib4\n            i += 1\n        }\n        return fib4\n    }", " \
    \   guard n > 2 else { return n }\n    var fib4 = [0, 0, 2, 0]\n    for i in 4...n\
    \ {\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4])\n    }\n\
    \    return fib4[n]", "    var a = 0\n    var b = 0\n    var c = 2\n    var d\
    \ = 0\n    var e = 0\n    var f = 0\n    if n < 3 {\n        return n * 2\n  \
    \  }\n    for _ in 3...n {\n        f = a + b + c + d\n        a = b\n       \
    \ b = c\n        c = d\n        d = f\n    }\n    return f", "    var f4 = [0,\
    \ 0, 2, 0]\n    if n <= 3 {\n        return f4[n]\n    }\n    for _ in 4...n {\n\
    \        f4.append(f4[3] + f4[2] + f4[1] + f4[0])\n        f4.removeFirst()\n\
    \    }\n    return f4[3]", '    return 0', "    // *********************************************\n\
    \    // Write your code below.\n    var previous = 0\n    var previous2 = 0\n\
    \    var previous3 = 0\n    var previous4 = 0\n    var current = 0\n    if n <=\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n   \
    \ if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n  \
    \  }\n    if n == 4 {\n        return 2\n    }\n    for i in 4..<n {\n       \
    \ current = previous + previous2 + previous3 + previous4\n        previous4 =\
    \ previous3\n        previous3 = previous2\n        previous2 = previous\n   \
    \     previous = current\n    }\n    return current\n    // *********************************************",
  "  if n == 0 {\n    return 0\n  } else if n == 1 {\n    return 0\n  } else if n\
    \ == 2 {\n    return 2\n  } else if n == 3 {\n    return 0\n  }\n  var prev1 =\
    \ 0\n  var prev2 = 0\n  var prev3 = 2\n  var prev4 = 0\n  var fib4 = prev1 + prev2\
    \ + prev3 + prev4\n  for _ in 4...n {\n    prev1 = prev2\n    prev2 = prev3\n\
    \    prev3 = prev4\n    prev4 = fib4\n    fib4 = prev1 + prev2 + prev3 + prev4\n\
    \  }\n  return fib4", "    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if\
    \ n == 3 {\n        return 0\n    }\n    var nMinusOne = 2\n    var nMinusTwo\
    \ = 0\n    var nMinusThree = 0\n    var nMinusFour = 0\n    var nMinusFive = 0\n\
    \    for i in 4..<n {\n        nMinusFive = nMinusFour\n        nMinusFour = nMinusThree\n\
    \        nMinusThree = nMinusTwo\n        nMinusTwo = nMinusOne\n        nMinusOne\
    \ = nMinusOne + nMinusTwo + nMinusThree + nMinusFour\n    }\n    return nMinusOne\
    \ + nMinusTwo + nMinusThree + nMinusFour", "    if n < 2 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    var fibArr = [0, 0, 2, 0]\n\
    \    for i in 3..<n {\n        let temp = fibArr[3]\n        fibArr[3] = fibArr[2]\
    \ + fibArr[1] + fibArr[0] + temp\n        fibArr[0] = fibArr[1]\n        fibArr[1]\
    \ = fibArr[2]\n        fibArr[2] = temp\n    }\n    return fibArr[3]", "    var\
    \ a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n    while\
    \ i <= n {\n        a = b\n        b = c\n        c = d\n        d = a + b + c\n\
    \        i += 1\n    }\n    return d", "    if n < 0 {\n        return -1\n  \
    \  }\n    if n < 3 {\n        return n * 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var n1 = 0\n    var n2 = 2\n    var n3 = 0\n    var n4 = 2\n \
    \   var ret = 4\n    for _ in 3..<n {\n        ret = n1 + n2 + n3 + n4\n     \
    \   n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = ret\n    }\n    return\
    \ ret", "    var last = 0\n    var secondToLast = 0\n    var thirdToLast = 0\n\
    \    var fourthToLast = 0\n    for i in 0...n {\n        if i == 0 {\n       \
    \     last = 0\n        } else if i == 1 {\n            secondToLast = 0\n   \
    \     } else if i == 2 {\n            thirdToLast = 2\n        } else if i ==\
    \ 3 {\n            fourthToLast = 0\n        } else {\n            let current\
    \ = last + secondToLast + thirdToLast + fourthToLast\n            fourthToLast\
    \ = thirdToLast\n            thirdToLast = secondToLast\n            secondToLast\
    \ = last\n            last = current\n        }\n    }\n    return last", "  var\
    \ f0 = 0\n  var f1 = 0\n  var f2 = 2\n  var f3 = 0\n  var sum = f2\n  for _ in\
    \ 4...n {\n    f3 = f2 + f1 + f0 + sum\n    f0 = f1\n    f1 = f2\n    f2 = f3\n\
    \    sum += f3\n  }\n  return f3", '    return 0', "  guard n > 2 else { return\
    \ n }\n  var a = 0\n  var b = 0\n  var c = 2\n  var d = 0\n  for _ in 3...n {\n\
    \    d = a + b + c\n    a = b\n    b = c\n    c = d\n  }\n  return d", "    var\
    \ previous = 0\n    var next = 0\n    var current = 0\n    for i in 0..<n {\n\
    \        current = next + previous + current\n        previous = next\n      \
    \  next = current\n    }\n    return current", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var dp = [Int](repeating:\
    \ 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n\
    \    for i in 4...n {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i\
    \ - 4]\n    }\n    return dp[n]", "  var a = [0, 0, 2, 0]\n  var index = 3\n \
    \ while index < n {\n    a.append(a[index] + a[index-1] + a[index-2] + a[index-3])\n\
    \    index += 1\n  }\n  return a[n]", "    var a = 0\n    var b = 0\n    var c\
    \ = 2\n    var d = 0\n    if n == 0 {\n        return 0\n    } else if n == 1\
    \ {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else if\
    \ n == 3 {\n        return 0\n    } else {\n        for _ in 4..<n {\n       \
    \     d = a + b + c\n            a = b\n            b = c\n            c = d\n\
    \        }\n        return d\n    }", "    var n = n\n    if n < 0 {\n       \
    \ return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n\
    \        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 0\n    }\n    var num_1 = 0\n    var num_2 = 2\n    var\
    \ num_3 = 0\n    var num_4 = 0\n    var sum = 0\n    for _ in 4...n {\n      \
    \  sum = num_1 + num_2 + num_3 + num_4\n        num_1 = num_2\n        num_2 =\
    \ num_3\n        num_3 = num_4\n        num_4 = sum\n    }\n    return sum", " \
    \   if n == 0 {\n        return 0\n    }\n    var n1 = 0\n    var n2 = 0\n   \
    \ var n3 = 2\n    var n4 = 0\n    for _ in 4...n {\n        n4 = n1 + n2 + n3\n\
    \        n1 = n2\n        n2 = n3\n        n3 = n4\n    }\n    return n4", '    return
    1', "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var n2 = 0\n    var n1 = 0\n    var n3 = 2\n    var n4\
    \ = 0\n    var result = 0\n    for i in 4...n {\n        result = n2 + n1 + n3\
    \ + n4\n        n2 = n1\n        n1 = n3\n        n3 = n4\n        n4 = result\n\
    \    }\n    return result", "    var i = 0\n    var j = 0\n    var k = 2\n   \
    \ var l = 0\n    var m = 0\n    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    var index = 3\n    while index\
    \ < n {\n        m = i + j + k + l\n        i = j\n        j = k\n        k =\
    \ l\n        l = m\n        index += 1\n    }\n    return m", "    if n == 0 {\n\
    \        return 0\n    }\n    var zero = 0\n    var one = 0\n    var two = 2\n\
    \    var three = 0\n    for i in 4...n {\n        let new = one + two + three\
    \ + zero\n        zero = one\n        one = two\n        two = three\n       \
    \ three = new\n    }\n    return one + two + three + zero", "    var a = 0\n \
    \   var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n        return 0\n\
    \    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return\
    \ 2\n    } else if n == 3 {\n        return 0\n    } else {\n        for _ in\
    \ 0..<n-3 {\n            d = a + b + c\n            a = b\n            b = c\n\
    \            c = d\n        }\n        return d\n    }", "    // YOUR CODE HERE\n\
    \    var nums = [0, 0, 2, 0]\n    if n < 4 {\n        return nums[n]\n    }\n\
    \    var i = 4\n    while i <= n {\n        let next = nums[3] + nums[2] + nums[1]\
    \ + nums[0]\n        nums[0] = nums[1]\n        nums[1] = nums[2]\n        nums[2]\
    \ = nums[3]\n        nums[3] = next\n        i += 1\n    }\n    return nums[3]",
  '    return 0', "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3\
    \ {\n        return 0\n    }\n    var arr = [0, 0, 2, 0]\n    for i in 4...n {\n\
    \        let val = arr[0] + arr[1] + arr[2] + arr[3]\n        arr.removeFirst()\n\
    \        arr.append(val)\n    }\n    return arr[3]", "    guard n > 2 else { return\
    \ n == 0 ? 0 : n == 1 ? 0 : 2 }\n    var result = 4\n    var lastVal0 = 0\n  \
    \  var lastVal1 = 0\n    var lastVal2 = 2\n    var lastVal3 = 0\n    for _ in\
    \ 4...n {\n        lastVal0 = lastVal1\n        lastVal1 = lastVal2\n        lastVal2\
    \ = lastVal3\n        lastVal3 = result\n        result = lastVal0 + lastVal1\
    \ + lastVal2 + lastVal3\n    }\n    return result", "    // TODO: Implement Fib4\n\
    \    return 0", "    guard n > 0 else { return 0 }\n    guard n > 1 else { return\
    \ 0 }\n    guard n > 2 else { return 2 }\n    guard n > 3 else { return 0 }\n\
    \    \n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i =\
    \ 3\n    while i < n {\n        d = a + b + c + d\n        a = b\n        b =\
    \ c\n        c = d\n        i += 1\n    }\n    return a + b + c + d", "    var\
    \ fibs = [0, 0, 2, 0]\n    for i in 4...n {\n        fibs.append(fibs[i-1] + fibs[i-2]\
    \ + fibs[i-3] + fibs[i-4])\n    }\n    return fibs[n]", "    if n == 0 {\n   \
    \     return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var\
    \ f1 = 0\n    var f2 = 0\n    var f3 = 2\n    var f4 = 0\n    var result = 0\n\
    \    for i in 4...n {\n        result = f1 + f2 + f3 + f4\n        f1 = f2\n \
    \       f2 = f3\n        f3 = f4\n        f4 = result\n    }\n    return result",
  "    if n == 0 {\n        return 0\n    }\n    var fibPrevPrevPrev = 0\n    var\
    \ fibPrevPrev = 0\n    var fibPrev = 0\n    var fibCurr = 2\n    var fibNext =\
    \ 0\n    var counter = 3\n    while counter <= n {\n        fibNext = fibCurr\
    \ + fibPrev + fibPrevPrev + fibPrevPrevPrev\n        fibPrevPrevPrev = fibPrevPrev\n\
    \        fibPrevPrev = fibPrev\n        fibPrev = fibCurr\n        fibCurr = fibNext\n\
    \        counter += 1\n    }\n    return fibNext", '    return 0', "    precondition(n\
    \ >= 0)\n    // TODO: implement me!\n    return 0", "    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    var i = 2\n    while i < n {\n      \
    \  d = a + b + c\n        a = b\n        b = c\n        c = d\n        i += 1\n\
    \    }\n    return d", "    var num1 = 0\n    var num2 = 0\n    var num3 = 2\n\
    \    var num4 = 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n\
    \        return 0\n    } else if n == 2 {\n        return 2\n    } else if n ==\
    \ 3 {\n        return 0\n    } else {\n        for _ in 4...n {\n            num4\
    \ = num1 + num2 + num3\n            num1 = num2\n            num2 = num3\n   \
    \         num3 = num4\n        }\n        return num4\n    }", "    guard n >\
    \ 2 else { return 2 * n }\n    var n1 = 4\n    var n2 = 8\n    var n3 = 14\n \
    \   var n4 = 24\n    for _ in 4..<n {\n        (n1, n2, n3, n4) = (n2, n3, n4,\
    \ n1 + n2 + n3 + n4)\n    }\n    return n4", "    var f4 = [0, 0, 2, 0]\n    for\
    \ i in 4...n {\n        f4.append(f4[i-1] + f4[i-2] + f4[i-3] + f4[i-4])\n   \
    \ }\n    return f4[n]", '    return 0', "    if n < 2 {\n        return 0\n  \
    \  }\n    if n == 2 {\n        return 2\n    }\n    var fn2 = 0\n    var fn1 =\
    \ 0\n    var fn = 2\n    for _ in 3...n {\n        let tmp = fn + fn1 + fn2\n\
    \        fn2 = fn1\n        fn1 = fn\n        fn = tmp\n    }\n    return fn",
  "    if n < 0 {\n        fatalError(\"fib4() should receive a positive number\"\
    )\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n      \
    \  return 0\n    }\n    var num = 0\n    var num1 = 0\n    var num2 = 2\n    var\
    \ num3 = 0\n    for _ in 4...n {\n        num = num1 + num2 + num3\n        num1\
    \ = num2\n        num2 = num3\n        num3 = num\n    }\n    return num", " \
    \ var current = 0\n  var pre = 0\n  var pre1 = 0\n  var pre2 = 0\n  var pre3 =\
    \ 0\n  for _ in 0...n {\n    current = pre + pre1 + pre2 + pre3\n    pre3 = pre2\n\
    \    pre2 = pre1\n    pre1 = pre\n    pre = current\n  }\n  return current", " \
    \ // YOUR CODE HERE\n  return 0", "    if n < 3 {\n        return (n == 0) ? 0\
    \ : 2\n    }\n    var nums = [0,0,2,0]\n    for _ in 3..<n {\n        nums[3]\
    \ = nums[0] + nums[1] + nums[2] + nums[3]\n        nums[0] = nums[1]\n       \
    \ nums[1] = nums[2]\n        nums[2] = nums[3]\n    }\n    return nums[3]", " \
    \   \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n      \
    \  return 0\n    }\n    \n    if n == 2 {\n        return 2\n    }\n    \n   \
    \ if n == 3 {\n        return 0\n    }\n    \n    var fib1 = 0\n    var fib2 =\
    \ 0\n    var fib3 = 2\n    var fib4 = 0\n    \n    for _ in 4...n {\n        fib4\
    \ = fib1 + fib2 + fib3\n        fib1 = fib2\n        fib2 = fib3\n        fib3\
    \ = fib4\n    }\n    \n    return fib4", "    if n < 3 {\n        return 0\n \
    \   }\n    if n == 3 {\n        return 2\n    }\n    var result: [Int] = [0, 0,\
    \ 2, 0]\n    for i in 4...n {\n        result.append(result[i-1] + result[i-2]\
    \ + result[i-3] + result[i-4])\n    }\n    return result[n]", "    // TODO: Implement\n\
    \    return 0", "    var p0 = 0\n    var p1 = 0\n    var p2 = 2\n    var p3 =\
    \ 0\n    var temp = 0\n    for _ in 4...n {\n        temp = p3\n        p3 = p2\
    \ + p1 + p0 + p3\n        p0 = p1\n        p1 = p2\n        p2 = temp\n    }\n\
    \    return p3", "    if n < 3 {\n        return n * 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var first = 0\n    var second = 2\n    var third\
    \ = 0\n    var fourth = 2\n    var sum = second + third + fourth\n    for _ in\
    \ 4...n {\n        first = second\n        second = third\n        third = fourth\n\
    \        fourth = sum\n        sum = first + second + third + fourth\n    }\n\
    \    return sum", '    return 0', "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b = 0\n\
    \    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b + c\n \
    \       a = b\n        b = c\n        c = d\n    }\n    return d", "  if n < 2\
    \ {\n    return 0\n  }\n  if n == 2 {\n    return 2\n  }\n  var result = 2\n \
    \ var first = 0\n  var second = 2\n  var third = 0\n  var fourth = 0\n  for _\
    \ in 3..<n {\n    fourth = first + second + third + result\n    first = second\n\
    \    second = third\n    third = result\n    result = fourth\n  }\n  return result",
  "    if n == 0 {\n        return 0\n    }\n    var previous1 = 0\n    var previous2\
    \ = 0\n    var previous3 = 2\n    var previous4 = 0\n    var sum = 0\n    for\
    \ _ in 4...n {\n        sum = previous1 + previous2 + previous3 + previous4\n\
    \        previous1 = previous2\n        previous2 = previous3\n        previous3\
    \ = previous4\n        previous4 = sum\n    }\n    return sum", "    if n == 0\
    \ {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if\
    \ n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n\
    \    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 2\n    var l: Int =\
    \ 0\n    var m: Int = 0\n    for _ in 4...n {\n        m = i + j + k + l\n   \
    \     i = j\n        j = k\n        k = l\n        l = m\n    }\n    return m",
  "  if n == 0 {\n    return 0\n  }\n  var a = 0\n  var b = 0\n  var c = 2\n  var\
    \ d = 0\n  for _ in 4...n {\n    d = a + b + c\n    a = b\n    b = c\n    c =\
    \ d\n  }\n  return d", "    if n == 0 {\n        return 0\n    }\n    var array\
    \ = [0, 0, 2, 0]\n    var index = 3\n    while index < n {\n        array[3] =\
    \ array[0] + array[1] + array[2] + array[3]\n        array[0] = array[1]\n   \
    \     array[1] = array[2]\n        array[2] = array[3]\n        index += 1\n \
    \   }\n    return array[3]", "    // TODO: Your solution here\n    return 0",
  "  var n1 = 0\n  var n2 = 0\n  var n3 = 2\n  var n4 = 0\n  var sum = 0\n  for _\
    \ in 4...n {\n    sum = n1 + n2 + n3 + n4\n    n1 = n2\n    n2 = n3\n    n3 =\
    \ n4\n    n4 = sum\n  }\n  return sum", "    if n < 3 {\n        return n * 2\n\
    \    } else if n == 3 {\n        return 0\n    } else {\n        var f1 = 0\n\
    \        var f2 = 0\n        var f3 = 2\n        var f4 = 2\n        var answer\
    \ = 0\n        for _ in 4...n {\n            answer = f1 + f2 + f3 + f4\n    \
    \        f1 = f2\n            f2 = f3\n            f3 = f4\n            f4 = answer\n\
    \        }\n        return answer\n    }", '    return 0', "    var a = 0\n  \
    \  var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n    if n == 0 {\n \
    \       return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for i in 4...n {\n            e = a + b + c + d\n            a =\
    \ b\n            b = c\n            c = d\n            d = e\n        }\n    \
    \    return e\n    }", "    if n < 2 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 2\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n  \
    \  var d = 0\n    for _ in 3...n {\n        d = a + b + c\n        a = b\n   \
    \     b = c\n        c = d\n    }\n    return d", "  // base cases\n  if n ==\
    \ 0 {\n    return 0\n  } else if n == 1 {\n    return 0\n  } else if n == 2 {\n\
    \    return 2\n  } else if n == 3 {\n    return 0\n  }\n  \n  // general cases\n\
    \  var a: Int = 0\n  var b: Int = 0\n  var c: Int = 2\n  var d: Int = 0\n  var\
    \ next: Int = 0\n  for _ in 4...n {\n    next = a + b + c + d\n    a = b\n   \
    \ b = c\n    c = d\n    d = next\n  }\n  return next", "    if n == 0 {\n    \
    \    return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var\
    \ a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n {\n \
    \       a = b\n        b = c\n        c = d\n        d = a + b + c\n    }\n  \
    \  return d", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3\
    \ {\n        return 0\n    }\n    var fib4 = [Int](repeating: 0, count: n+1)\n\
    \    fib4[0] = 0\n    fib4[1] = 0\n    fib4[2] = 2\n    fib4[3] = 0\n    for i\
    \ in 4..<n+1 {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4]\n\
    \    }\n    return fib4[n]", "    var a = 0\n    var b = 0\n    var c = 2\n  \
    \  var d = 0\n    if n < 4 {\n        return fib4(n: n - 1)\n    }\n    for _\
    \ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c =\
    \ d\n    }\n    return d", "    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    var e = 0\n    for _ in 3...n {\n        e = a + b + c + d\n    \
    \    a = b\n        b = c\n        c = d\n        d = e\n    }\n    return e",
  "    \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n       \
    \ return 0\n    }\n    \n    if n == 2 {\n        return 2\n    }\n    \n    if\
    \ n == 3 {\n        return 0\n    }\n    \n    var sum = 0\n    var first = 0\n\
    \    var second = 0\n    var third = 2\n    var fourth = 0\n    \n    for _ in\
    \ 4...n {\n        sum = first + second + third + fourth\n        first = second\n\
    \        second = third\n        third = fourth\n        fourth = sum\n    }\n\
    \    \n    return sum", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n   \
    \ if n == 3 {\n        return 0\n    }\n    var n2 = 0\n    var n1 = 0\n    var\
    \ n0 = 2\n    var n3 = 0\n    for _ in 4...n {\n        n3 = n2 + n1 + n0\n  \
    \      n2 = n1\n        n1 = n0\n        n0 = n3\n    }\n    return n3", "   \
    \ var f_k_minus_4 = 0\n    var f_k_minus_3 = 0\n    var f_k_minus_2 = 2\n    var\
    \ f_k_minus_1 = 0\n    var f_k = 0\n    \n    if n < 4 {\n        return n\n \
    \   }\n    \n    for i in 4...n {\n        f_k = f_k_minus_1 + f_k_minus_2 + f_k_minus_3\
    \ + f_k_minus_4\n        f_k_minus_4 = f_k_minus_3\n        f_k_minus_3 = f_k_minus_2\n\
    \        f_k_minus_2 = f_k_minus_1\n        f_k_minus_1 = f_k\n    }\n    \n \
    \   return f_k", "    var prev = Array(repeating: 0, count: 4)\n    prev[0] =\
    \ 0\n    prev[1] = 0\n    prev[2] = 2\n    prev[3] = 0\n    guard n > 3 else {\
    \ return prev[n] }\n    for _ in 4...n {\n        let temp = prev[3]\n       \
    \ prev[3] = prev[2] + prev[1] + prev[0] + prev[3]\n        prev[0] = prev[1]\n\
    \        prev[1] = prev[2]\n        prev[2] = temp\n    }\n    return prev[3]",
  "    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n   \
    \ if n <= 3 {\n        return fib(n: n)\n    }\n    for _ in 4...n {\n       \
    \ e = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d =\
    \ e\n    }\n    return e", "    var fib1 = 0\n    var fib2 = 0\n    var fib3 =\
    \ 2\n    var fib4 = 0\n    var currentFib = 0\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 2\n    } else if n == 3 {\n        return 0\n    } else {\n        for\
    \ _ in 4...n {\n            currentFib = fib1 + fib2 + fib3 + fib4\n         \
    \   fib1 = fib2\n            fib2 = fib3\n            fib3 = fib4\n          \
    \  fib4 = currentFib\n        }\n        return currentFib\n    }", "    \n  \
    \  if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return\
    \ 0\n    }\n    \n    if n == 2 {\n        return 2\n    }\n    \n    if n ==\
    \ 3 {\n        return 0\n    }\n    \n    var first = 0\n    var second = 0\n\
    \    var third = 2\n    var fourth = 0\n    var result = 0\n    \n    for _ in\
    \ 3...n {\n        result = first + second + third + fourth\n        first = second\n\
    \        second = third\n        third = fourth\n        fourth = result\n   \
    \ }\n    \n    return result", "    var fib4 = [0, 0, 2, 0]\n    if n <= 3 {\n\
    \        return fib4[n]\n    }\n    for i in 4...n {\n        fib4.append(fib4[i-1]\
    \ + fib4[i-2] + fib4[i-3] + fib4[i-4])\n    }\n    return fib4[n]", "  if n ==\
    \ 0 {\n    return 0\n  }\n  if n == 1 {\n    return 0\n  }\n  if n == 2 {\n  \
    \  return 2\n  }\n  if n == 3 {\n    return 0\n  }\n  if n == 4 {\n    return\
    \ 1\n  }\n  var i = 0\n  var j = 1\n  var k = 2\n  var l = 0\n  var sum = 0\n\
    \  for _ in 5...n {\n    sum = i + j + k + l\n    i = j\n    j = k\n    k = l\n\
    \    l = sum\n  }\n  return sum", "    var a = 0\n    var b = 0\n    var c = 2\n\
    \    var d = 0\n    var result = 0\n    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n  \
    \  } else if n == 3 {\n        return 0\n    } else {\n        for i in 4...n\
    \ {\n            result = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = result\n        }\n        return result\n\
    \    }", "    var i = 0\n    var first = 0\n    var second = 0\n    var third\
    \ = 2\n    var fourth = 0\n    var next = 0\n    while i < n {\n        next =\
    \ first + second + third + fourth\n        first = second\n        second = third\n\
    \        third = fourth\n        fourth = next\n        i += 1\n    }\n    return\
    \ first", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n       \
    \ return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var arr = [0, 0, 2, 0]\n    for i in 4..<n+1 {\n\
    \        let temp = arr[3] + arr[2] + arr[1] + arr[0]\n        arr[0] = arr[1]\n\
    \        arr[1] = arr[2]\n        arr[2] = arr[3]\n        arr[3] = temp\n   \
    \ }\n    return arr[3]", "    var lastFib4 = (1, 1, 2, 0)\n    for _ in 4..<n\
    \ {\n        lastFib4 = (lastFib4.1, lastFib4.2, lastFib4.3, lastFib4.0 + lastFib4.1\
    \ + lastFib4.2 + lastFib4.3)\n    }\n    return lastFib4.3", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n\
    \        let x = a + b + c + d\n        a = b\n        b = c\n        c = d\n\
    \        d = x\n    }\n    return d", "    \n    var fib = [0,0,2,0]\n    \n \
    \   for i in 4...n {\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\
    \    }\n    \n    return fib[n]", "    guard n > 2 else { return n }\n    return\
    \ (1...4).reduce(0) { n, acc in\n        n + fib4(n: n-acc)\n    }", "  let a\
    \ = [0, 0, 2, 0]\n  guard n > 3 else { return a[n] }\n  var fib4n1 = a[3]\n  var\
    \ fib4n2 = a[2]\n  var fib4n3 = a[1]\n  var fib4n4 = a[0]\n  var fib4n = fib4n1\
    \ + fib4n2 + fib4n3 + fib4n4\n  for _ in 4...n {\n    fib4n1 = fib4n2\n    fib4n2\
    \ = fib4n3\n    fib4n3 = fib4n4\n    fib4n4 = fib4n\n    fib4n = fib4n1 + fib4n2\
    \ + fib4n3 + fib4n4\n  }\n  return fib4n", "    var a = 0\n    var b = 0\n   \
    \ var c = 2\n    var d = 0\n    var k = 3\n    while k <= n {\n        d = a +\
    \ b + c\n        a = b\n        b = c\n        c = d\n        k += 1\n    }\n\
    \    return d", "    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n \
    \       return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n\
    \        d = c + b + a\n        a = b\n        b = c\n        c = d\n    }\n \
    \   return d", "    guard n > 3 else { return n - 1 }\n    var f4 = [0, 0, 2,\
    \ 0]\n    for _ in 4...n {\n        let last4 = f4.last!\n        f4.removeLast()\n\
    \        f4.insert(f4.reduce(0, +) + last4, at: 0)\n    }\n    return f4.reduce(0,\
    \ +)", "  var first = 0\n  var second = 0\n  var third = 2\n  var fourth = 0\n\
    \  var result = 0\n  if n == 0 {\n    return 0\n  } else if n == 1 {\n    return\
    \ 0\n  } else if n == 2 {\n    return 2\n  } else if n == 3 {\n    return 0\n\
    \  } else {\n    for _ in 4...n {\n      result = first + second + third + fourth\n\
    \      first = second\n      second = third\n      third = fourth\n      fourth\
    \ = result\n    }\n    return result\n  }", "  if n == 0 {\n    return 0\n  }\n\
    \  if n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return 2\n  }\n  if n ==\
    \ 3 {\n    return 0\n  }\n  var n1 = 0\n  var n2 = 0\n  var n3 = 2\n  var n4 =\
    \ 0\n  var i = 4\n  while i <= n {\n    n4 = n1 + n2 + n3 + n4\n    n1 = n2\n\
    \    n2 = n3\n    n3 = n4\n    i += 1\n  }\n  return n4", "    var first = 0\n\
    \    var second = 0\n    var third = 2\n    var fourth = 0\n    for _ in 3...n\
    \ {\n        fourth = first + second + third\n        first = second\n       \
    \ second = third\n        third = fourth\n    }\n    return fourth", "    var\
    \ n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var n5 = 0\n   \
    \ var count = 0\n    if n < 4 {\n        return n\n    }\n    while count < n\
    \ - 3 {\n        n5 = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n  \
    \      n3 = n4\n        n4 = n5\n        count += 1\n    }\n    return n5", " \
    \   \n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    \n    if\
    \ n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    }\
    \ else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n\
    \    } else {\n        for _ in 4...n {\n            d = a + b + c\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return d\n\
    \    }", '    return 0', "    var a = 0\n    var b = 0\n    var c = 2\n    var\
    \ d = 0\n    for _ in 3..<n {\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    }\n    return d", "  guard n > 0 else { return 0 }\n\
    \  guard n > 1 else { return 0 }\n  guard n > 2 else { return 2 }\n  guard n >\
    \ 3 else { return 0 }\n  var a = 0\n  var b = 0\n  var c = 2\n  var d = 0\n  for\
    \ _ in 4...n {\n    let t = a + b + c + d\n    a = b\n    b = c\n    c = d\n \
    \   d = t\n  }\n  return d", "    // This can be solved with an iterative solution\
    \ using a for loop.  The fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\
    \ relationship only requires 4 terms\n    // to compute the next term of the sequence.\
    \  For example, the 6th term of the sequence is computed as follows:\n    //\n\
    \    // fib4(6) -> fib4(5) + fib4(4) + fib4(3) + fib4(2)\n    //          -> fib4(5)\
    \ + fib4(4) + 0      + 2\n    //          -> (fib4(4) + fib4(3) + fib4(2) + fib4(1))\
    \ + (fib4(3) + fib4(2) + fib4(1) + fib4(0)) + (0 + 2 + 0 + 0)\n    //        \
    \  -> ((fib4(3) + fib4(2) + fib4(1) + fib4(0)) + (fib4(2) + fib4(1) + fib4(0)\
    \ + 0) + (0 + 0 + 0 + 0)) + ((fib4(2) + fib4(1) + fib4(0) + 0) + (0 + 0 + 0 +\
    \ 0) + (0 + 0 + 0 + 0)) + (0 + 2 + 0 + 0)\n    //          -> (((fib4(2) + fib4(1)\
    \ + fib4(0) + 0) + (0 + 0 + 0 + 0) + (0 + 0 + 0 + 0)) + ((0 + 0 + 0 + 0) + (0\
    \ + 0 + 0 + 0) + (0 + 0 + 0 + 0))) + (((0 + 0 + 0 + 0) + (0 + 0 + 0 + 0) + (0\
    \ + 0 + 0 + 0)) + ((0 + 0 + 0 + 0) + (0 + 0 + 0 + 0) + (0 + 0 + 0 + 0))) + (0\
    \ + 2 + 0 + 0)\n    //          -> 0 + 0 + 2 + 0\n    //          -> 2 + 2 + 0\n\
    \    //          -> 4 + 0\n    //          -> 4", "    if n < 0 {\n        return\
    \ -1\n    } else if n < 3 {\n        return n == 2 ? 2 : 0\n    } else if n ==\
    \ 3 {\n        return 0\n    }\n    \n    var nMinusFour = 0\n    var nMinusThree\
    \ = 0\n    var nMinusTwo = 2\n    var nMinusOne = 0\n    var nth: Int\n    \n\
    \    for _ in 3...n {\n        nth = nMinusFour + nMinusThree + nMinusTwo + nMinusOne\n\
    \        nMinusFour = nMinusThree\n        nMinusThree = nMinusTwo\n        nMinusTwo\
    \ = nMinusOne\n        nMinusOne = nth\n    }\n    \n    return nth", "    //\
    \ TODO: Implement fib4\n    return 0", "  guard n > 2 else { return 2 }\n  var\
    \ a = 0\n  var b = 0\n  var c = 2\n  var d = 0\n  for _ in 3..<n {\n    d = a\
    \ + b + c\n    a = b\n    b = c\n    c = d\n  }\n  return d", "    var n1 = 0\n\
    \    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 2\n    } else if n == 3 {\n        return 0\n    } else {\n        for\
    \ _ in 4...n {\n            n4 = n1 + n2 + n3\n            n1 = n2\n         \
    \   n2 = n3\n            n3 = n4\n        }\n        return n4\n    }", "    var\
    \ seq = [0, 0, 2, 0]\n    if n <= 3 {\n        return seq[n]\n    }\n    for i\
    \ in 4...n {\n        seq.append(seq[0] + seq[1] + seq[2] + seq[3])\n        seq.removeFirst()\n\
    \    }\n    return seq[3]", '    return fib4_recursive(n: n)', "    if n < 0 {\n\
    \        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n\
    \ == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n\
    \    if n == 3 {\n        return 0\n    }\n    var last2 = 0\n    var last1 =\
    \ 0\n    var last3 = 2\n    var last4 = 0\n    var next = 0\n    for _ in 4...n\
    \ {\n        next = last2 + last1 + last3 + last4\n        last4 = last3\n   \
    \     last3 = last2\n        last2 = last1\n        last1 = next\n    }\n    return\
    \ next", "    guard n > 3 else { return n - 2 }\n    var first = 0\n    var second\
    \ = 0\n    var third = 2\n    var fourth = 0\n    for _ in 4...n {\n        fourth\
    \ = first + second + third + fourth\n        first = second\n        second =\
    \ third\n        third = fourth\n    }\n    return fourth", "  if n == 0 {\n \
    \   return 0\n  }\n  if n == 1 {\n    return 0\n  }\n  if n == 2 {\n    return\
    \ 2\n  }\n  if n == 3 {\n    return 0\n  }\n  if n == 4 {\n    return 4\n  }\n\
    \  var arr = [0, 0, 2, 0, 4]\n  for i in 5...n {\n    let last = arr.last\n  \
    \  arr.removeFirst()\n    arr.append(last! + arr[0] + arr[1] + arr[2])\n  }\n\
    \  return arr.last!", "    assert(n >= 0)\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n0 = 0\n    var\
    \ n1 = 0\n    var n2 = 2\n    var n3 = 0\n    var nN = 0\n    for _ in 4...n {\n\
    \        nN = n0 + n1 + n2 + n3\n        n0 = n1\n        n1 = n2\n        n2\
    \ = n3\n        n3 = nN\n    }\n    return nN", "    var a = 0\n    var b = 0\n\
    \    var c = 2\n    var d = 0\n    var temp = 0\n    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n      \
    \  return 2\n    } else if n == 3 {\n        return 0\n    } else {\n        for\
    \ _ in 4...n {\n            temp = d\n            d = a + b + c + d\n        \
    \    a = b\n            b = c\n            c = temp\n        }\n        return\
    \ d\n    }", "    guard n > 3 else { return fib(n: n) }\n    var fn_1 = 0, fn_2\
    \ = 0, fn_3 = 2, fn_4 = 0\n    for _ in 4...n {\n        fn_4 = fn_1 + fn_2 +\
    \ fn_3 + fn_4\n        fn_1 = fn_2\n        fn_2 = fn_3\n        fn_3 = fn_4\n\
    \    }\n    return fn_4", '    return 0', "    if n == 0 {\n        return 0\n\
    \    }\n    var fibs: [Int] = [0, 0, 2, 0]\n    var i = 3\n    while i < n {\n\
    \        let fib4 = fibs[0] + fibs[1] + fibs[2] + fibs[3]\n        fibs[0] = fibs[1]\n\
    \        fibs[1] = fibs[2]\n        fibs[2] = fibs[3]\n        fibs[3] = fib4\n\
    \        i += 1\n    }\n    return fibs[3]", "    assert(n >= 0)\n    if n < 3\
    \ {\n        return n\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n  \
    \  var d = 0\n    for _ in 3...n {\n        d = a + b + c\n        a = b\n   \
    \     b = c\n        c = d\n    }\n    return d", "    guard n > 3 else { return\
    \ n + 1 }\n    return fib4(n: n - 1) + fib4(n: n - 2) + fib4(n: n - 3) + fib4(n:\
    \ n - 4)", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n\
    \        return 0\n    }\n    var f0 = 0\n    var f1 = 0\n    var f2 = 2\n   \
    \ var f3 = 0\n    var f4 = 0\n    for _ in 4...n {\n        f4 = f3 + f2 + f1\
    \ + f0\n        f0 = f1\n        f1 = f2\n        f2 = f3\n        f3 = f4\n \
    \   }\n    return f4", "    \n    var nums = [0, 0, 2, 0]\n    \n    for _ in\
    \ 4...n {\n        let a = nums[0]\n        let b = nums[1]\n        let c = nums[2]\n\
    \        let d = nums[3]\n        \n        nums = [b, c, d, a + b + c + d]\n\
    \    }\n    \n    return nums[3]", '    return 1', "    if n == 0 {\n        return\
    \ 0\n    }\n    var x0 = 0\n    var x1 = 0\n    var x2 = 2\n    var x3 = 0\n \
    \   for _ in 3...n {\n        let x4 = x0 + x1 + x2 + x3\n        x0 = x1\n  \
    \      x1 = x2\n        x2 = x3\n        x3 = x4\n    }\n    return x3", '    return
    -1', "    guard n > 0 else { return 0 }\n    guard n > 1 else { return 0 }\n \
    \   guard n > 2 else { return 2 }\n    guard n > 3 else { return 0 }\n    \n \
    \   var values = [0, 0, 2, 0]\n    for i in 4...n {\n        let newValue = values[0]\
    \ + values[1] + values[2] + values[3]\n        values[0] = values[1]\n       \
    \ values[1] = values[2]\n        values[2] = values[3]\n        values[3] = newValue\n\
    \    }\n    return values[3]", "    var result = 0\n    var fib = 0\n    var fib2\
    \ = 0\n    var fib3 = 0\n    var fib4 = 0\n    if n < 2 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else {\n        for i in 3...n\
    \ {\n            result = fib + fib2 + fib3 + fib4\n            fib4 = fib3\n\
    \            fib3 = fib2\n            fib2 = fib\n            fib = result\n \
    \       }\n    }\n    return result", "    var x = 0\n    var y = 0\n    var z\
    \ = 2\n    var w = 0\n    if n < 4 {\n        return fib4_helper(n: n)\n    }\n\
    \    for _ in 4...n {\n        w = x + y + z\n        x = y\n        y = z\n \
    \       z = w\n    }\n    return w", '    return 0', "  guard n > 2 else { return\
    \ n == 2 ? 2 : 0 }\n  var a = 0\n  var b = 0\n  var c = 2\n  var d = 0\n  for\
    \ _ in 3...n {\n    d = a + b + c\n    a = b\n    b = c\n    c = d\n  }\n  return\
    \ d", "    // TODO: Implement me!\n    return 0", '    return 0', "    var temp\
    \ = [0, 0, 2, 0]\n    for i in 4...n {\n        let a = temp[0]\n        let b\
    \ = temp[1]\n        let c = temp[2]\n        let d = temp[3]\n        temp[0]\
    \ = b\n        temp[1] = c\n        temp[2] = d\n        temp[3] = a + b + c +\
    \ d\n    }\n    return temp[3]", "    // your code here\n    return -1", "   \
    \ if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n   \
    \ }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in\
    \ 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    }\n    return d", "    var a = 0\n    var b = 0\n    var c = 2\n    var d\
    \ = 0\n    var n = n\n    while n > 0 {\n        a = b\n        b = c\n      \
    \  c = d\n        d = a + b + c\n        n -= 1\n    }\n    return d", "    var\
    \ memo = [0, 0, 2, 0]\n    if n <= 3 {\n        return memo[n]\n    }\n    var\
    \ nMinus1 = 3\n    var nMinus2 = 2\n    var nMinus3 = 0\n    var nMinus4 = 0\n\
    \    for i in 4...n {\n        nMinus4 = nMinus3\n        nMinus3 = nMinus2\n\
    \        nMinus2 = nMinus1\n        nMinus1 = memo[i-1]\n        memo.append(nMinus1\
    \ + nMinus2 + nMinus3 + nMinus4)\n    }\n    return memo[n]", "    var result\
    \ = 0\n    if n <= 2 {\n        result = 2\n    } else if n <= 3 {\n        result\
    \ = 0\n    } else {\n        var number0 = 0\n        var number1 = 0\n      \
    \  var number2 = 2\n        var number3 = 0\n        for _ in 4...n {\n      \
    \      result = number0 + number1 + number2 + number3\n            number0 = number1\n\
    \            number1 = number2\n            number2 = number3\n            number3\
    \ = result\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
