language: swift
name: HumanEval_88_sort_array
results:
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var result\
    \ = array\n    for index in 0..<array.count {\n        for j in 0..<(array.count\
    \ - index - 1) {\n            if result[j] < result[j + 1] {\n               \
    \ result.swapAt(j, j + 1)\n            }\n        }\n    }\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        return result\n    } else {\n        return\
    \ result.reversed()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7v4hp3aq/tmp7v4hp3aq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace9cecec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace9cbc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace9cbc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace9cbc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7v4hp3aq                        0x0000564010ef3be4 <unavailable> + 7140

    5    libc.so.6                          0x00002ace9d0ba460 __libc_start_main +
    245

    6    tmp7v4hp3aq                        0x0000564010ef3439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    let even =\
    \ array.count % 2 == 0\n    let sorted = array.sorted()\n    if even {\n     \
    \   return sorted.reversed()\n    } else {\n        return sorted\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpyqc8ccqz/tmpyqc8ccqz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fa1dfac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fa1af1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fa1af1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fa1af07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyqc8ccqz                        0x000056227e6067d6 <unavailable> + 6102

    5    libc.so.6                          0x00002b1fa1fe6460 __libc_start_main +
    245

    6    tmpyqc8ccqz                        0x000056227e6061b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var temp = array\n    let count = temp.count\n    if count ==\
    \ 0 {\n        return temp\n    }\n    let sum = temp[0] + temp[count - 1]\n \
    \   var flag = true\n    if sum % 2 == 0 {\n        flag = false\n    }\n    for\
    \ i in 0..<count {\n        for j in i..<count {\n            if flag {\n    \
    \            if temp[i] > temp[j] {\n                    let swap = temp[i]\n\
    \                    temp[i] = temp[j]\n                    temp[j] = swap\n \
    \               }\n            } else {\n                if temp[i] < temp[j]\
    \ {\n                    let swap = temp[i]\n                    temp[i] = temp[j]\n\
    \                    temp[j] = swap\n                }\n            }\n      \
    \  }\n    }\n    return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    let sum = array.first! + array.last!\n\
    \    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmprrshhp4h/tmprrshhp4h.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac133192c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac132e89561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac132e89286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac132e8913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac132e88bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprrshhp4h                        0x0000562026217f2d <unavailable> + 7981

    6    tmprrshhp4h                        0x000056202621750d <unavailable> + 5389

    7    libc.so.6                          0x00002ac13337e460 __libc_start_main +
    245

    8    tmprrshhp4h                        0x0000562026217219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd_array: [Int] = []\n    var even_array: [Int] = []\n\
    \    array.forEach { item in\n        if item % 2 == 0 {\n            even_array.append(item)\n\
    \        } else {\n            odd_array.append(item)\n        }\n    }\n    var\
    \ result_array: [Int] = []\n    if !odd_array.isEmpty {\n        odd_array.sort()\n\
    \        result_array.append(contentsOf: odd_array)\n    }\n    if !even_array.isEmpty\
    \ {\n        even_array.sort()\n        even_array.reverse()\n        result_array.append(contentsOf:\
    \ even_array)\n    }\n    return result_array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp73824cza/tmp73824cza.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab017a0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab017705b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab017705988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0177047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73824cza                        0x000056164c7f0a06 <unavailable> + 6662

    5    libc.so.6                          0x00002ab017bfa460 __libc_start_main +
    245

    6    tmp73824cza                        0x000056164c7f03e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count < 2 {\n        return\
    \ array\n    }\n    if array.count > 2 {\n        let sum = array[0] + array[array.count\
    \ - 1]\n        if sum.isMultiple(of: 2) {\n            array.sort(by: >)\n  \
    \      } else {\n            array.sort(by: <)\n        }\n    } else {\n    \
    \    if array[0] > array[1] {\n            let item = array[0]\n            array[0]\
    \ = array[1]\n            array[1] = item\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.first ?? 0 + array.last ?? 0\n    return sum\
    \ % 2 == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpog95hf47.swift:17:40: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let sum = array.first ?? 0 + array.last\
    \ ?? 0\n                                       ^\n/tmp/tmpog95hf47.swift:17:40:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let sum = array.first ?? 0 + array.last ?? 0\n                  \
    \                     ^\n                                 (          ?? <#default\
    \ value#>)\n/tmp/tmpog95hf47.swift:17:40: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    let sum = array.first ??\
    \ 0 + array.last ?? 0\n                                       ^\n            \
    \                               !\n"
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if array[0]\
    \ > array[1] {\n            return [array[1], array[0]]\n        }\n        return\
    \ array\n    }\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        return\
    \ sort_array(array: array[1..<array.count-1]) + [array[0]] + [array[array.count\
    \ - 1]]\n    }\n    return [array[array.count - 1]] + sort_array(array: array[1..<array.count-1])\
    \ + [array[0]]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmphlct57v5.swift:30:39: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n        return sort_array(array: array[1..<array.count-1])\
    \ + [array[0]] + [array[array.count - 1]]\n                                  \
    \    ^\n/tmp/tmphlct57v5.swift:32:62: error: cannot convert value of type 'ArraySlice<Int>'\
    \ to expected argument type '[Int]'\n    return [array[array.count - 1]] + sort_array(array:\
    \ array[1..<array.count-1]) + [array[0]]\n                                   \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n        return\
    \ array.sorted(by: >)\n    } else {\n        return array.sorted()\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013818
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    } else {\n \
    \       return array.sorted(by: { (left, right) -> Bool in\n            if (left\
    \ + right) % 2 == 0 {\n                return left > right\n            } else\
    \ {\n                return left < right\n            }\n        })\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpo57mrbe5/tmpo57mrbe5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6f319ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6f2e95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6f2e95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6f2e947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo57mrbe5                        0x000055b9d5853746 <unavailable> + 5958

    5    libc.so.6                          0x00002ae6f338a460 __libc_start_main +
    245

    6    tmpo57mrbe5                        0x000055b9d5853129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  guard array.count > 0 else { return array }\n  var results = array\n\
    \  let index = results.count / 2\n  if results[0] + results[results.count - 1]\
    \ % 2 == 0 {\n    for i in 1..<index {\n      let temp = results[i]\n      results[i]\
    \ = results[results.count - i]\n      results[results.count - i] = temp\n    }\n\
    \  }\n  return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpeu5y9kee/tmpeu5y9kee.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32f1ff8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32f1cefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32f1cef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32f1cee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeu5y9kee                        0x0000563a44109876 <unavailable> + 6262

    5    libc.so.6                          0x00002b32f21e4460 __libc_start_main +
    245

    6    tmpeu5y9kee                        0x0000563a44109259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sum = array[0] + array[array.count - 1]\n    let isOdd = sum % 2 == 1\n    var\
    \ tempArray = array\n    for i in 0..<tempArray.count - 1 {\n        for j in\
    \ (i + 1)..<tempArray.count {\n            if isOdd {\n                if tempArray[i]\
    \ > tempArray[j] {\n                    tempArray.swapAt(i, j)\n             \
    \   }\n            } else {\n                if tempArray[i] < tempArray[j] {\n\
    \                    tempArray.swapAt(i, j)\n                }\n            }\n\
    \        }\n    }\n    return tempArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    let ascending = sum % 2 == 0\n    var sorted =\
    \ array.sorted(by: { $0 < $1 })\n    if !ascending {\n        sorted = sorted.reversed()\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmproqdvsw6/tmproqdvsw6.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6234afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6231a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6231a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6231a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmproqdvsw6                        0x000055c9605dc7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ad62369b460 __libc_start_main +
    245

    6    tmproqdvsw6                        0x000055c9605dc1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    return array.enumerated().sorted\
    \ { (a, b) -> Bool in\n        let firstIndex = array[a.offset]\n        let lastIndex\
    \ = array[b.offset]\n        return firstIndex.addingReportingOverflow(lastIndex).partialValue\
    \ % 2 == 0 ? a.element > b.element : a.element < b.element\n    }.map { $0.element\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(array: [] as [Int])\
    \ == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp3ono7qpu/tmp3ono7qpu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23d4737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23d442eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23d442e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23d442d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ono7qpu                        0x0000563cd262c956 <unavailable> + 6486

    5    libc.so.6                          0x00002b23d4923460 __libc_start_main +
    245

    6    tmp3ono7qpu                        0x0000563cd262c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1s7xpewz/tmp1s7xpewz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a9673c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a936ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a936a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a93697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1s7xpewz                        0x0000560fca6e147d <unavailable> + 5245

    5    libc.so.6                          0x00002af5a985f460 __libc_start_main +
    245

    6    tmp1s7xpewz                        0x0000560fca6e0fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result: [Int] = array\n    if result.count > 0 {\n     \
    \   if (result[0] + result[result.count - 1]) % 2 == 0 {\n            result.sort\
    \ {\n                $0 > $1\n            }\n        } else {\n            result.sort\
    \ {\n                $0 < $1\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    for i in 0..<array.count - 1 {\n    \
    \    for j in (i + 1)..<array.count {\n            if array[i] % 2 == array[j]\
    \ % 2 {\n                if array[i] > array[j] {\n                    (array[i],\
    \ array[j]) = (array[j], array[i])\n                }\n            } else {\n\
    \                if array[i] % 2 == 0 {\n                    (array[i], array[j])\
    \ = (array[j], array[i])\n                }\n            }\n        }\n    }\n\
    \    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b60c5b95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60c588c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b60c588c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b60c588c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b60c588bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu6_5pzhi                        0x0000557b8e589fad <unavailable> + 8109

    6    tmpu6_5pzhi                        0x0000557b8e58954d <unavailable> + 5453

    7    libc.so.6                          0x00002b60c5d81460 __libc_start_main +
    245

    8    tmpu6_5pzhi                        0x0000557b8e589259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var result\
    \ = array\n    let firstIndex = array[0]\n    let lastIndex = array[array.count\
    \ - 1]\n    let totalIndex = firstIndex + lastIndex\n    let isOdd = totalIndex\
    \ % 2 == 1\n    if isOdd {\n        result.sort(by: <)\n    } else {\n       \
    \ result.sort(by: >)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var new_array = array\n    var range: CountableClosedRange<Int>\n\
    \    if array.count == 0 {\n        return array\n    }\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        range = (0...(array.count - 1)).reversed()\n    }\
    \ else {\n        range = 0...(array.count - 1)\n    }\n    for i in range {\n\
    \        if i % 2 == 1 {\n            new_array.insert(array[i], at: 0)\n    \
    \    }\n    }\n    return new_array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp_b76bst0.swift:23:41: error: no 'reversed' candidates produce the\
    \ expected contextual result type 'CountableClosedRange<Int>' (aka 'ClosedRange<Int>')\n\
    \        range = (0...(array.count - 1)).reversed()\n                        \
    \                ^\nSwift.BidirectionalCollection:2:40: note: 'reversed()' produces\
    \ 'ReversedCollection<(ClosedRange<Int>)>', not the expected contextual result\
    \ type 'CountableClosedRange<Int>' (aka 'ClosedRange<Int>')\n    @inlinable public\
    \ __consuming func reversed() -> ReversedCollection<Self>\n                  \
    \                     ^\nSwift.Sequence:2:40: note: 'reversed()' produces '[Int]',\
    \ not the expected contextual result type 'CountableClosedRange<Int>' (aka 'ClosedRange<Int>')\n\
    \    @inlinable public __consuming func reversed() -> [Self.Element]\n       \
    \                                ^\nSwift.BidirectionalCollection:2:40: note:\
    \ 'reversed()' produces 'ReversedCollection<(ClosedRange<Int>)>', not the expected\
    \ contextual result type 'CountableClosedRange<Int>' (aka 'ClosedRange<Int>')\n\
    \    @inlinable public __consuming func reversed() -> ReversedCollection<Self>\n\
    \                                       ^\nSwift.Sequence:2:40: note: 'reversed()'\
    \ produces '[Int]', not the expected contextual result type 'CountableClosedRange<Int>'\
    \ (aka 'ClosedRange<Int>')\n    @inlinable public __consuming func reversed()\
    \ -> [Self.Element]\n                                       ^\n"
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // Write your implementation here.\n    let result = array.filter{\
    \ $0 % 2 != 0 }.sorted(by: <) + array.filter{ $0 % 2 == 0 }.sorted(by: >)\n  \
    \  return array.enumerated().sorted(by: { $0.0 + $0.1 < $1.0 + $1.1 }).map{ result[$0.0]\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(array: [] as [Int])\
    \ == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfrkuspus/tmpfrkuspus.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b797c3a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b797c099b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b797c099988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b797c0987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrkuspus                        0x0000564193d3fa26 <unavailable> + 6694

    5    libc.so.6                          0x00002b797c58e460 __libc_start_main +
    245

    6    tmpfrkuspus                        0x0000564193d3f409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var temp =\
    \ array\n    let index = array.count - 1\n    if (array[0] + array[index]) % 2\
    \ == 0 {\n        temp.sort(by: >)\n    } else {\n        temp.sort(by: <)\n \
    \   }\n    return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        return\
    \ array.sorted()\n    }\n    let f: Int = array[0]\n    let l: Int = array[array.count\
    \ - 1]\n    if (f + l) % 2 == 0 {\n        return sort_descending(array: array)\n\
    \    } else {\n        return sort_ascending(array: array)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpvp1bju6j.swift:29:16: error: cannot find 'sort_descending' in scope\n\
    \        return sort_descending(array: array)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpvp1bju6j.swift:31:16: error: cannot find 'sort_ascending' in scope\n \
    \       return sort_ascending(array: array)\n               ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    if (array.first!\
    \ + array.last!) % 2 == 0 {\n        return array.sorted(by: >)\n    } else {\n\
    \        return array.sorted()\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ tempArray = array\n    var startIndex = 0\n    var endIndex = tempArray.count\
    \ - 1\n    var isAscending = true\n    let isLastEven = array.last! % 2 == 0\n\
    \    if isLastEven {\n        isAscending = false\n    }\n    while startIndex\
    \ < endIndex {\n        let startNum = tempArray[startIndex]\n        let endNum\
    \ = tempArray[endIndex]\n        let startIsEven = startNum % 2 == 0\n       \
    \ let endIsEven = endNum % 2 == 0\n        if (isAscending && startIsEven) ||\
    \ (!isAscending && !startIsEven) {\n            startIndex += 1\n        } else\
    \ if (isAscending && endIsEven) || (!isAscending && !endIsEven) {\n          \
    \  endIndex -= 1\n        } else {\n            tempArray.swapAt(startIndex, endIndex)\n\
    \            startIndex += 1\n            endIndex -= 1\n        }\n    }\n  \
    \  return isAscending ? tempArray.sorted() : tempArray.sorted(by: >)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_c7_hbfu/tmp_c7_hbfu.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73188ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73185e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73185e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73185e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_c7_hbfu                        0x000055bb15ddadc0 <unavailable> + 7616

    5    libc.so.6                          0x00002b7318ad8460 __libc_start_main +
    245

    6    tmp_c7_hbfu                        0x000055bb15dda359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let array = array.sorted()\n    if array.isEmpty {\n       \
    \ return array\n    }\n    var sortedArray = array\n    var firstIndex = 0\n \
    \   var lastIndex = array.count - 1\n    if (array[firstIndex] + array[lastIndex])\
    \ % 2 == 0 {\n        while firstIndex < lastIndex {\n            sortedArray[firstIndex]\
    \ = array[lastIndex]\n            sortedArray[lastIndex] = array[firstIndex]\n\
    \            firstIndex += 1\n            lastIndex -= 1\n        }\n    }\n \
    \   return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    guard array.count\
    \ > 1 else { return array }\n    var sortedArray = array\n    var begin = 0\n\
    \    var end = sortedArray.count - 1\n    let isOddSum = sortedArray[begin] +\
    \ sortedArray[end] % 2 == 1\n    while begin < end {\n        while isOddSum &&\
    \ sortedArray[begin] % 2 == 1 {\n            begin += 1\n        }\n        while\
    \ !isOddSum && sortedArray[end] % 2 == 0 {\n            end -= 1\n        }\n\
    \        if begin < end {\n            sortedArray.swapAt(begin, end)\n      \
    \  }\n    }\n    if isOddSum {\n        sortedArray.insert(contentsOf: sortedArray[begin...].sorted(by:\
    \ >), at: begin)\n        sortedArray.removeSubrange(begin + 1 ... end)\n    }\
    \ else {\n        sortedArray.insert(contentsOf: sortedArray[0...begin].sorted(by:\
    \ >), at: end + 1)\n        sortedArray.removeSubrange(0 ... begin)\n    }\n \
    \   return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014005
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: is_even(array: array))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpr548ebgx.swift:17:29: error: cannot find 'is_even' in scope\n \
    \   return array.sorted(by: is_even(array: array))\n                         \
    \   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var sortedArray\
    \ = array\n    let oddArray = sortedArray.filter { $0 % 2 != 0 }.sorted(by: <)\n\
    \    let evenArray = sortedArray.filter { $0 % 2 == 0 }.sorted(by: >)\n    let\
    \ combinationArray = oddArray + evenArray\n    for (index, number) in combinationArray.enumerated()\
    \ {\n        sortedArray[index] = number\n    }\n    return sortedArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9m1f4xsn/tmp9m1f4xsn.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66113a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b661109bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b661109b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b661109a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9m1f4xsn                        0x0000556fa28c4ad6 <unavailable> + 6870

    5    libc.so.6                          0x00002b6611590460 __libc_start_main +
    245

    6    tmp9m1f4xsn                        0x0000556fa28c44b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // Your code here.\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpyfb4hvli/tmpyfb4hvli.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35dff7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35dfc76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35dfc76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35dfc757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfb4hvli                        0x0000557068ed447d <unavailable> + 5245

    5    libc.so.6                          0x00002b35e016b460 __libc_start_main +
    245

    6    tmpyfb4hvli                        0x0000557068ed3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (lhs, rhs) -> Bool in\n        return\
    \ lhs + rhs.advanced(by: array.count - 1) % 2 == 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpqv4fg6rf/tmpqv4fg6rf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc0fa63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc0f75ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc0f75a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc0f7597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqv4fg6rf                        0x000055e76883b746 <unavailable> + 5958

    5    libc.so.6                          0x00002abc0fc4f460 __libc_start_main +
    245

    6    tmpqv4fg6rf                        0x000055e76883b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    guard array.count > 0 else { return array\
    \ }\n    guard array.count > 1 else { return array }\n    let sum = array[0] +\
    \ array[array.count - 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n \
    \   } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sorted\
    \ = array\n    var lo = 0\n    var hi = sorted.count - 1\n    var isAscending\
    \ = (sorted[lo] + sorted[hi]) % 2 == 1\n    while lo < hi {\n        let a = sorted[lo]\n\
    \        let b = sorted[hi]\n        if (a + b) % 2 == 1 {\n            if isAscending\
    \ {\n                sorted[lo] = min(a, b)\n                sorted[hi] = max(a,\
    \ b)\n            } else {\n                sorted[lo] = max(a, b)\n         \
    \       sorted[hi] = min(a, b)\n            }\n            isAscending = !isAscending\n\
    \        }\n        lo += 1\n        hi -= 1\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdrqwiu2c/tmpdrqwiu2c.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2b5aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2b579eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2b579e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2b579d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdrqwiu2c                        0x000055f3c95c2866 <unavailable> + 6246

    5    libc.so.6                          0x00002ae2b5c93460 __libc_start_main +
    245

    6    tmpdrqwiu2c                        0x000055f3c95c2249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        return\
    \ array[0] < array[1] ? array : array.reversed()\n    }\n    var array = array\n\
    \    var i = 0\n    var j = array.count - 1\n    while i < j {\n        while\
    \ i < j && i + j % 2 == 1 {\n            j -= 1\n        }\n        while i <\
    \ j && i + j % 2 == 0 {\n            i += 1\n        }\n        if i < j {\n \
    \           let temp = array[i]\n            array[i] = array[j]\n           \
    \ array[j] = temp\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014005
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sorted_array = array\n    let is_even = (array.first! +\
    \ array.last!) % 2 == 0\n    sorted_array.sort(by: { (a, b) -> Bool in\n     \
    \   if is_even {\n            return a > b\n        } else {\n            return\
    \ a < b\n        }\n    })\n    return sorted_array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpi19r_cl6/tmpi19r_cl6.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7177efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7174e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae7174e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae7174e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae7174e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpi19r_cl6                        0x000055eb56602ef9 <unavailable> + 7929

    6    tmpi19r_cl6                        0x000055eb5660250d <unavailable> + 5389

    7    libc.so.6                          0x00002ae7179db460 __libc_start_main +
    245

    8    tmpi19r_cl6                        0x000055eb56602219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // TODO: Write some code to solve this coding problem\n    let\
    \ sum = array.first! + array.last!\n    var result = array\n    if sum.isMultiple(of:\
    \ 2) {\n        result.sort()\n    } else {\n        result.sort(by: >)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpv_2k45tp/tmpv_2k45tp.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002adff6f74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adff6c6b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adff6c6b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adff6c6b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adff6c6abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpv_2k45tp                        0x000055adb2730119 <unavailable> + 8473

    6    tmpv_2k45tp                        0x000055adb272f72d <unavailable> + 5933

    7    libc.so.6                          0x00002adff7160460 __libc_start_main +
    245

    8    tmpv_2k45tp                        0x000055adb272f439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if (array.isEmpty) {\n        return array\n    }\n    if (array.count\
    \ == 1) {\n        return array\n    }\n    var sortArray = array\n    var isEven\
    \ = false\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n        isEven\
    \ = true\n    }\n    sortArray.sort { (a, b) -> Bool in\n        if isEven {\n\
    \            return a > b\n        } else {\n            return a < b\n      \
    \  }\n    }\n    return sortArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sum = array[0]\
    \ + array[array.count - 1]\n    var tempArray = array\n    if sum % 2 == 0 {\n\
    \        tempArray.sort(by: >)\n    } else {\n        tempArray.sort(by: <)\n\
    \    }\n    return tempArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ result = array\n    var temp: Int\n    for i in 0..<result.count {\n       \
    \ for j in 0..<result.count - 1 - i {\n            let sum_even_odd = (result[j]\
    \ + result[j + 1]) % 2\n            if sum_even_odd == 0 {\n                if\
    \ result[j] < result[j + 1] {\n                    temp = result[j]\n        \
    \            result[j] = result[j + 1]\n                    result[j + 1] = temp\n\
    \                }\n            } else {\n                if result[j] > result[j\
    \ + 1] {\n                    temp = result[j]\n                    result[j]\
    \ = result[j + 1]\n                    result[j + 1] = temp\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdt_ie5j8/tmpdt_ie5j8.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07a659fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07a6296b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07a6296988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07a62957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdt_ie5j8                        0x0000559b26bb6876 <unavailable> + 6262

    5    libc.so.6                          0x00002b07a678b460 __libc_start_main +
    245

    6    tmpdt_ie5j8                        0x0000559b26bb6259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    let first = array[0]\n    let last\
    \ = array[array.count - 1]\n    if (first + last) % 2 == 0 {\n        return array.sorted(by:\
    \ >)\n    } else {\n        return array.sorted(by: <)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    let oddArray\
    \ = array.filter { $0 % 2 == 1 }.sorted()\n    let evenArray = array.filter {\
    \ $0 % 2 == 0 }.sorted().reversed()\n    var result = [Int]()\n    for i in 0..<array.count\
    \ {\n        if array[i] % 2 == 1 {\n            result.append(oddArray[i])\n\
    \        } else {\n            result.append(evenArray[i])\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpm573s545.swift:27:37: error: cannot convert value of type 'Int'\
    \ to expected argument type 'ReversedCollection<[Int]>.Index'\n            result.append(evenArray[i])\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    guard array.count\
    \ > 1 else { return array }\n    var temp_array = array\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        temp_array.sort(by: >)\n    } else {\n        temp_array.sort(by:\
    \ <)\n    }\n    return temp_array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // your code here\n    return []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_ce07z2n/tmp_ce07z2n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6388bfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63888f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63888f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63888f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ce07z2n                        0x0000562e075aa47d <unavailable> + 5245

    5    libc.so.6                          0x00002b6388de9460 __libc_start_main +
    245

    6    tmp_ce07z2n                        0x0000562e075a9fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let sort =\
    \ array.sorted()\n    let sum = array.first! + array.last!\n    return sum % 2\
    \ == 0 ? sort.reversed() : sort\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    guard array.count > 0 else {\n        return array\n \
    \   }\n    \n    let array1 = array.sorted(by: <)\n    let array2 = array.sorted(by:\
    \ >)\n    \n    return array[0] + array[array.count - 1] % 2 == 0 ? array2 : array1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpqve75z0h/tmpqve75z0h.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3719d66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3719a5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3719a5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3719a5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqve75z0h                        0x0000560558404924 <unavailable> + 6436

    5    libc.so.6                          0x00002b3719f52460 __libc_start_main +
    245

    6    tmpqve75z0h                        0x0000560558404179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.count <= 1 ? array :\n        array.reduce((odd:\
    \ [Int](), even: [Int]())) { (result, item) in\n            return item % 2 ==\
    \ 0 ?\n                (result.odd, result.even + [item]) :\n                (result.odd\
    \ + [item], result.even)\n        }.reduce(([Int](), false)) { (result, item)\
    \ in\n            return result.1 ?\n                (result.0 + item.sorted(by:\
    \ <), true) :\n                (result.0 + item.sorted(by: >), false)\n      \
    \  }.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpd27y60id.swift:17:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return array.count <= 1 ? array :\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014314
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    if array.count < 2 {\n        return array\n    }\n  \
    \  \n    let sum = array[0] + array[array.count - 1]\n    let newArray = array.sorted\
    \ { (first, second) -> Bool in\n        if sum % 2 == 0 {\n            return\
    \ first > second\n        } else {\n            return first < second\n      \
    \  }\n    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted(by: { (a, b) -> Bool in\n        return\
    \ (a + b) % 2 == 0 ? a > b : a < b\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptl3a9gtz/tmptl3a9gtz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f5194dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f51644b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f51644988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f516437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl3a9gtz                        0x000055869ce366f6 <unavailable> + 5878

    5    libc.so.6                          0x00002b0f51b39460 __libc_start_main +
    245

    6    tmptl3a9gtz                        0x000055869ce360d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var temp_array = array\n    for i in 0 ..< temp_array.count\
    \ {\n        for j in 0 ..< temp_array.count - 1 {\n            if (i + j) % 2\
    \ == 0 {\n                if temp_array[j] > temp_array[j + 1] {\n           \
    \         let temp = temp_array[j]\n                    temp_array[j] = temp_array[j\
    \ + 1]\n                    temp_array[j + 1] = temp\n                }\n    \
    \        } else {\n                if temp_array[j] < temp_array[j + 1] {\n  \
    \                  let temp = temp_array[j]\n                    temp_array[j]\
    \ = temp_array[j + 1]\n                    temp_array[j + 1] = temp\n        \
    \        }\n            }\n        }\n    }\n    return temp_array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjq2yjnvi/tmpjq2yjnvi.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80dd64ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80dd341b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80dd341988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80dd3407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjq2yjnvi                        0x000055bc0b66b876 <unavailable> + 6262

    5    libc.so.6                          0x00002b80dd836460 __libc_start_main +
    245

    6    tmpjq2yjnvi                        0x000055bc0b66b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    let firstIndexValue = array.first ??\
    \ 0\n    let lastIndexValue = array.last ?? 0\n    // Check the sum( first index\
    \ value, last index value)\n    if (firstIndexValue + lastIndexValue) % 2 == 0\
    \ {\n        // Sort it in descending order\n        array.sort(by: >)\n    }\
    \ else {\n        // Sort it in ascending order\n        array.sort(by: <)\n \
    \   }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1ajossyp/tmp1ajossyp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c9d86ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c9d561b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c9d561988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c9d5607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ajossyp                        0x0000559b498045e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1c9da56460 __libc_start_main +
    245

    6    tmp1ajossyp                        0x0000559b49803fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    guard array.count\
    \ > 1 else { return array }\n    if (array[0] + array[array.count - 1]) % 2 ==\
    \ 0 {\n        return array.sorted(by: >)\n    } else {\n        return array.sorted()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var clonearray = array\n    for i in 0..<array.count {\n   \
    \     for j in 0..<array.count - 1 {\n            let ijSum = clonearray[i] +\
    \ clonearray[j]\n            if ijSum % 2 == 0 {\n                let temp = clonearray[i]\n\
    \                clonearray[i] = clonearray[j]\n                clonearray[j]\
    \ = temp\n            }\n        }\n    }\n    return clonearray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpkq0a26co/tmpkq0a26co.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0733cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0730c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0730c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0730c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkq0a26co                        0x0000560e3da60876 <unavailable> + 6262

    5    libc.so.6                          0x00002af0735ba460 __libc_start_main +
    245

    6    tmpkq0a26co                        0x0000560e3da60259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ array2 = array\n    var i = 0\n    var j = array.count - 1\n    var tmp = 0\n\
    \    if (array[0] + array[array.count - 1]) % 2 == 0 {\n        while i < j {\n\
    \            while array2[i] % 2 == 0 {\n                i += 1\n            }\n\
    \            while array2[j] % 2 == 1 {\n                j -= 1\n            }\n\
    \            if i < j {\n                tmp = array2[i]\n                array2[i]\
    \ = array2[j]\n                array2[j] = tmp\n            }\n        }\n   \
    \     array2.sort(by: >)\n    } else {\n        while i < j {\n            while\
    \ array2[i] % 2 == 1 {\n                i += 1\n            }\n            while\
    \ array2[j] % 2 == 0 {\n                j -= 1\n            }\n            if\
    \ i < j {\n                tmp = array2[i]\n                array2[i] = array2[j]\n\
    \                array2[j] = tmp\n            }\n        }\n        array2.sort(by:\
    \ <)\n    }\n    return array2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count <= 1 {\n        return\
    \ result\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n     \
    \   result.sort(by: >)\n    } else {\n        result.sort(by: <)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count >= 2 else { return array }\n    return array.enumerated().sorted(by:\
    \  {\n        if ($0.offset + array.count) % 2 == 1 && ($1.offset + array.count)\
    \ % 2 == 1 {\n            return $0.element < $1.element\n        } else if ($0.offset\
    \ + array.count) % 2 == 0 && ($1.offset + array.count) % 2 == 0 {\n          \
    \  return $0.element > $1.element\n        } else {\n            return $0.offset\
    \ < $1.offset\n        }\n    }).map{ $0.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp3hf_fp54/tmp3hf_fp54.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b743cc93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b743c98ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b743c98a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b743c9897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3hf_fp54                        0x0000557127400906 <unavailable> + 6406

    5    libc.so.6                          0x00002b743ce7f460 __libc_start_main +
    245

    6    tmp3hf_fp54                        0x00005571274002e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var myArray = array\n    var right = myArray.count - 1\n   \
    \ if right == 0 {\n        return myArray\n    }\n    if array[0] % 2 == array[right]\
    \ % 2 {\n        if array[0] % 2 == 0 {\n            myArray.sort(by: { $0 > $1\
    \ })\n        } else {\n            myArray.sort(by: { $0 < $1 })\n        }\n\
    \    }\n    return myArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b22fcb63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22fc85a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b22fc85a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b22fc85a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b22fc859bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b22fc659e83 <unavailable> + 188035

    6    tmpx8p8unmx                        0x000055c665e62e27 <unavailable> + 7719

    7    tmpx8p8unmx                        0x000055c665e6247d <unavailable> + 5245

    8    libc.so.6                          0x00002b22fcd4f460 __libc_start_main +
    245

    9    tmpx8p8unmx                        0x000055c665e62189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let isOdd =\
    \ (array.first! + array.last!) % 2 == 1\n    let sorted = array.sorted()\n   \
    \ if isOdd {\n        return sorted\n    } else {\n        return sorted.reversed()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: -1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var newArray = array\n    var index = 0\n    var lastIndex =\
    \ newArray.count - 1\n    var isOdd = false\n    if (newArray.count > 1) {\n \
    \       isOdd = (newArray[0] + newArray[lastIndex]) % 2 == 1\n    }\n    while\
    \ index < lastIndex {\n        while newArray[index] % 2 == 1 && isOdd {\n   \
    \         index += 1\n        }\n        while newArray[lastIndex] % 2 == 0 &&\
    \ isOdd {\n            lastIndex -= 1\n        }\n        if index < lastIndex\
    \ {\n            newArray.swapAt(index, lastIndex)\n        }\n    }\n    return\
    \ isOdd ? newArray.sorted() : newArray.sorted().reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014006
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sorted = array.sorted()\n    if array.count > 0 && (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        return sorted.reversed()\n   \
    \ }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count <= 1 {\n        return array\n    }\n    if array.reduce(0,\
    \ +) % 2 == 0 {\n        return array.sorted(by: >)\n    }\n    return array.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdd43w8hh/tmpdd43w8hh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3423804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34234fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34234fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34234fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdd43w8hh                        0x0000564d454529f4 <unavailable> + 6644

    5    libc.so.6                          0x00002b34239f0460 __libc_start_main +
    245

    6    tmpdd43w8hh                        0x0000564d45452249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count <= 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n            return [array[1],\
    \ array[0]]\n        } else {\n            return array\n        }\n    }\n  \
    \  var result: [Int] = []\n    if (array[0] + array[array.count - 1]) % 2 == 0\
    \ {\n        for i in stride(from: array.count - 1, through: 0, by: -1) {\n  \
    \          result.append(array[i])\n        }\n    } else {\n        for i in\
    \ 0..<array.count {\n            result.append(array[i])\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6rxlzemk/tmp6rxlzemk.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adca9dffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adca9af6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adca9af6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adca9af57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6rxlzemk                        0x0000558fc2c57aa6 <unavailable> + 6822

    5    libc.so.6                          0x00002adca9feb460 __libc_start_main +
    245

    6    tmp6rxlzemk                        0x0000558fc2c57489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let first =\
    \ array.first!\n    let last = array.last!\n    let isAscending = (first + last)\
    \ % 2 == 1\n    return (isAscending ? array.sorted() : array.sorted().reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var copy = array\n    for i in 0..<copy.count - 1 {\n      \
    \  for j in i..<copy.count {\n            if (copy[i] > copy[j] && (i + j) % 2\
    \ == 0) || (copy[i] < copy[j] && (i + j) % 2 == 1) {\n                let temp\
    \ = copy[i]\n                copy[i] = copy[j]\n                copy[j] = temp\n\
    \            }\n        }\n    }\n    return copy\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad684043c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad683d3a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad683d3a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad683d3a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad683d39bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprtc8fmrb                        0x000055b04bff5fc0 <unavailable> + 8128

    6    tmprtc8fmrb                        0x000055b04bff554d <unavailable> + 5453

    7    libc.so.6                          0x00002ad68422f460 __libc_start_main +
    245

    8    tmprtc8fmrb                        0x000055b04bff5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    // Insert your code here\n    var array = array\n    if\
    \ array.count > 0 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n\
    \            array.sort(by: >)\n        }\n        else {\n            array.sort(by:\
    \ <)\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    guard array.count\
    \ > 1 else { return array }\n    guard array.count > 2 else { return array[0]\
    \ > array[1] ? [array[1], array[0]] : array }\n    var new_array = array\n   \
    \ let first_index = 0\n    let last_index = array.count - 1\n    let sum = array[first_index]\
    \ + array[last_index]\n    if sum % 2 == 0 {\n        new_array.sort { $0 > $1\
    \ }\n    } else {\n        new_array.sort { $0 < $1 }\n    }\n    return new_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  return [(array.first ?? 0) + (array.last ?? 0)]\n    .filter {\
    \ $0.isEven }\n    .flatMap { _ in array.sorted(by: >) } ?? array.sorted()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpyp3de019.swift:18:18: error: value of type 'Int' has no member\
    \ 'isEven'\n    .filter { $0.isEven }\n              ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014015
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    var array =\
    \ array\n    let first = array.removeFirst()\n    let last = array.removeLast()\n\
    \    let sum = first + last\n    let sortedArray = sum % 2 == 0 ? array.sorted().reversed()\
    \ : array.sorted()\n    return sum % 2 == 0 ? [last] + sortedArray + [first] :\
    \ [first] + sortedArray + [last]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8759e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8756dc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad8756dc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad8756dc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad8756dbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ad8757ddc1d <unavailable> + 2489373

    6    tmpptvxvmdh                        0x0000559cc105c0a1 <unavailable> + 8353

    7    tmpptvxvmdh                        0x0000559cc105b77d <unavailable> + 6013

    8    libc.so.6                          0x00002ad875bd1460 __libc_start_main +
    245

    9    tmpptvxvmdh                        0x0000559cc105b399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    let sorted\
    \ = array.sorted()\n    var result = Array(repeating: 0, count: array.count)\n\
    \    for i in 0..<array.count {\n        result[i] = sorted[i/2]\n        if (i\
    \ % 2) == 0 {\n            result[i] = sorted[sorted.count - 1 - i/2]\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_2gsc1xf/tmp_2gsc1xf.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9c44fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9c41f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9c41f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9c41f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2gsc1xf                        0x000055ea22019986 <unavailable> + 6534

    5    libc.so.6                          0x00002ad9c46e9460 __libc_start_main +
    245

    6    tmp_2gsc1xf                        0x000055ea22019369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let isOdd: Bool = (array.first ?? 0) + (array.last ?? 0) % 2\
    \ != 0\n    let sorted = array.sorted(by: isOdd ? { $0 > $1 } : { $0 < $1 })\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_cmgrjq3/tmp_cmgrjq3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b100a40cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b100a103b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b100a103988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b100a1027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cmgrjq3                        0x0000563ae31db826 <unavailable> + 6182

    5    libc.so.6                          0x00002b100a5f8460 __libc_start_main +
    245

    6    tmp_cmgrjq3                        0x0000563ae31db209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd_numbers = [Int]()\n    var even_numbers = [Int]()\n\
    \    var result = [Int]()\n    for number in array {\n        if number % 2 ==\
    \ 0 {\n            even_numbers.append(number)\n        } else {\n           \
    \ odd_numbers.append(number)\n        }\n    }\n    odd_numbers.sort(by: <)\n\
    \    even_numbers.sort(by: >)\n    var index = 0\n    var index_1 = 0\n    var\
    \ index_2 = 0\n    while index < array.count {\n        if index % 2 == 0 {\n\
    \            result.append(odd_numbers[index_1])\n            index_1 += 1\n \
    \       } else {\n            result.append(even_numbers[index_2])\n         \
    \   index_2 += 1\n        }\n        index += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptnzmutmj/tmptnzmutmj.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf4fef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf4fbeeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf4fbee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf4fbed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnzmutmj                        0x0000561665ae09c6 <unavailable> + 6598

    5    libc.so.6                          0x00002acf500e3460 __libc_start_main +
    245

    6    tmptnzmutmj                        0x0000561665ae03a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  var result: [Int] = array\n  let isSumEven = (array.first ?? 0)\
    \ + (array.last ?? 0) % 2 == 0\n  result.sort(by: { (first: Int, second: Int)\
    \ -> Bool in\n    if isSumEven {\n      return first > second\n    } else {\n\
    \      return first < second\n    }\n  })\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpla6zra10/tmpla6zra10.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f1203fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f11d36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f11d36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f11d357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpla6zra10                        0x0000564efc04d9c4 <unavailable> + 6596

    5    libc.so.6                          0x00002b8f1222b460 __libc_start_main +
    245

    6    tmpla6zra10                        0x0000564efc04d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014004
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // TODO: Write some code to solve this challenge...\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(array: [] as [Int])\
    \ == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpttgj1jse/tmpttgj1jse.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b289c574c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b289c26bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b289c26b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b289c26a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpttgj1jse                        0x0000555ad8ac947d <unavailable> + 5245

    5    libc.so.6                          0x00002b289c760460 __libc_start_main +
    245

    6    tmpttgj1jse                        0x0000555ad8ac8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    for first in 0..<array.count {\n    \
    \    for second in 0..<array.count {\n            if first == second {\n     \
    \           continue\n            }\n            if array[first] + array[second]\
    \ % 2 == 0 {\n                array.swapAt(first, second)\n            }\n   \
    \     }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0o4cd58g/tmp0o4cd58g.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c5f617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c5f30eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c5f30e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c5f30d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0o4cd58g                        0x000055b9c02888c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b2c5f803460 __libc_start_main +
    245

    6    tmp0o4cd58g                        0x000055b9c02882a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let n = array.count\n    if n < 2 {\n        return array\n\
    \    }\n    var odd = [Int]()\n    var even = [Int]()\n    for i in 0..<n {\n\
    \        if array[i] % 2 == 0 {\n            even.append(array[i])\n        }\
    \ else {\n            odd.append(array[i])\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    var result = [Int]()\n    let oddCount = odd.count\n   \
    \ let evenCount = even.count\n    if oddCount + evenCount == 0 {\n        return\
    \ result\n    }\n    if (oddCount + evenCount) % 2 == 0 {\n        even.reverse()\n\
    \    }\n    if oddCount > 0 {\n        result.append(contentsOf: odd)\n    }\n\
    \    if evenCount > 0 {\n        result.append(contentsOf: even)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmdhplz5b/tmpmdhplz5b.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adde2f42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adde2c39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adde2c39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adde2c387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmdhplz5b                        0x0000556681bf3b06 <unavailable> + 6918

    5    libc.so.6                          0x00002adde312e460 __libc_start_main +
    245

    6    tmpmdhplz5b                        0x0000556681bf34e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  if array.count == 0 {\n    return array\n  }\n  if array.count\
    \ % 2 == 0 {\n    return quicksort(array: array, left: 0, right: array.count -\
    \ 1, isAscending: false)\n  } else {\n    return quicksort(array: array, left:\
    \ 0, right: array.count - 1, isAscending: true)\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp99kvsk3s.swift:21:12: error: cannot find 'quicksort' in scope\n\
    \    return quicksort(array: array, left: 0, right: array.count - 1, isAscending:\
    \ false)\n           ^~~~~~~~~\n/tmp/tmp99kvsk3s.swift:23:12: error: cannot find\
    \ 'quicksort' in scope\n    return quicksort(array: array, left: 0, right: array.count\
    \ - 1, isAscending: true)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sortedArray = array.sorted()\n    return (array.first! +\
    \ array.last!) % 2 == 0 ? sortedArray.reversed() : sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp5zlfexz9/tmp5zlfexz9.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d9f0f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d9edf0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1d9edf0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1d9edf013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1d9edefbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5zlfexz9                        0x00005650ba372fa0 <unavailable> + 8096

    6    tmp5zlfexz9                        0x00005650ba37258d <unavailable> + 5517

    7    libc.so.6                          0x00002b1d9f2e5460 __libc_start_main +
    245

    8    tmp5zlfexz9                        0x00005650ba372299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    if array.count\
    \ % 2 == 0 {\n        return array.sorted(by: {$0 < $1})\n    } else {\n     \
    \   return array.sorted(by: {$0 > $1})\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmie1axh0/tmpmie1axh0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b688655bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6886252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6886252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68862517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmie1axh0                        0x000055b770b65cf9 <unavailable> + 7417

    5    libc.so.6                          0x00002b6886747460 __libc_start_main +
    245

    6    tmpmie1axh0                        0x000055b770b65129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    var sorted = array\n    for _ in sorted\
    \ {\n        for i in 0..<sorted.count-1 {\n            if (sorted[i] + sorted[0])\
    \ % 2 == 0 {\n                if sorted[i] < sorted[i+1] {\n                 \
    \   let temp = sorted[i]\n                    sorted[i] = sorted[i+1]\n      \
    \              sorted[i+1] = temp\n                }\n            } else {\n \
    \               if sorted[i] > sorted[i+1] {\n                    let temp = sorted[i]\n\
    \                    sorted[i] = sorted[i+1]\n                    sorted[i+1]\
    \ = temp\n                }\n            }\n        }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmps0kp5jxq/tmps0kp5jxq.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fd6f45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fd6c3cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fd6c3c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fd6c3b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps0kp5jxq                        0x000055a156fbd9e6 <unavailable> + 6630

    5    libc.so.6                          0x00002b9fd7131460 __libc_start_main +
    245

    6    tmps0kp5jxq                        0x000055a156fbd3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var res = [Int]()\n    var done = false\n\
    \    if array.count > 1 {\n        if (array[0] + array[array.count - 1]) % 2\
    \ == 0 {\n            while !done {\n                var max = 0\n           \
    \     var index = 0\n                for i in 0..<array.count {\n            \
    \        if array[i] > max {\n                        max = array[i]\n       \
    \                 index = i\n                    }\n                }\n      \
    \          res.append(max)\n                array.remove(at: index)\n        \
    \        if array.count == 0 {\n                    done = true\n            \
    \    }\n            }\n        } else {\n            while !done {\n         \
    \       var min = Int.max\n                var index = 0\n                for\
    \ i in 0..<array.count {\n                    if array[i] < min {\n          \
    \              min = array[i]\n                        index = i\n           \
    \         }\n                }\n                res.append(min)\n            \
    \    array.remove(at: index)\n                if array.count == 0 {\n        \
    \            done = true\n                }\n            }\n        }\n    } else\
    \ {\n        return array\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    let sorted =\
    \ array.sorted()\n    let sum = array.first! + array.last!\n    return sum.isMultiple(of:\
    \ 2) ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let asc = array.reduce(0, +) % 2 == 0\n    let ordered = array.sorted(by:\
    \ { (a, b) -> Bool in\n        asc ? a > b : a < b\n    })\n    return ordered\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpxuqywdb_/tmpxuqywdb_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7294958c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b729464fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b729464f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b729464e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxuqywdb_                        0x000056042dcd58f4 <unavailable> + 6388

    5    libc.so.6                          0x00002b7294b44460 __libc_start_main +
    245

    6    tmpxuqywdb_                        0x000056042dcd5149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  let n = array.count\n  if n < 2 {\n    return array\n  }\n  let\
    \ pivot = array[0]\n  let left = sort_array(array: array.filter { $0 < pivot })\n\
    \  let right = sort_array(array: array.filter { $0 > pivot })\n  return left +\
    \ [pivot] + right\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjp15lai3/tmpjp15lai3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eb048ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2eb0185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2eb0185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2eb01847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjp15lai3                        0x000055fcefe11944 <unavailable> + 6468

    5    libc.so.6                          0x00002b2eb067a460 __libc_start_main +
    245

    6    tmpjp15lai3                        0x000055fcefe11199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    for i in 0..<array.count {\n        for\
    \ j in i+1..<array.count {\n            if array[i] > array[j] {\n           \
    \     if array[i] + array[j] % 2 == 0 {\n                    array.swapAt(i, j)\n\
    \                }\n            } else {\n                if array[i] + array[j]\
    \ % 2 != 0 {\n                    array.swapAt(i, j)\n                }\n    \
    \        }\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpjud4pbih/tmpjud4pbih.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01bf6aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01bf3a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01bf3a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01bf3a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjud4pbih                        0x000055a796e118c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b01bf89a460 __libc_start_main +
    245

    6    tmpjud4pbih                        0x000055a796e112a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 1 {\n        return array\n    }\n    let sum\
    \ = array[0] + array[array.count - 1]\n    let list = array.sorted {\n       \
    \ sum % 2 == 0 ? $0 > $1 : $0 < $1\n    }\n    return list\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    var result:\
    \ [Int] = array\n    result.sort(by: isOdd(a:b:))\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpum1f943r.swift:19:21: error: cannot find 'isOdd(a:b:)' in scope\n\
    \    result.sort(by: isOdd(a:b:))\n                    ^~~~~~~~~~~\n/tmp/tmpum1f943r.swift:19:21:\
    \ error: converting non-escaping value to '(Int, Int) throws -> Bool' may allow\
    \ it to escape\n    result.sort(by: isOdd(a:b:))\n                    ^\n"
  stdout: ''
  timestamp: 1660014001
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  guard array.count > 1 else { return array }\n  var array = array\n\
    \  let sum: Int = array[0] + array[array.count - 1]\n  let isAscending: Bool =\
    \ sum % 2 == 0\n  var front = 0\n  var back = array.count - 1\n  while front <\
    \ back {\n    while front < back && (isAscending ? array[front] < array[back]\
    \ : array[front] > array[back]) {\n      front += 1\n    }\n    swap(&array, front,\
    \ back)\n    while front < back && (isAscending ? array[front] < array[back] :\
    \ array[front] > array[back]) {\n      back -= 1\n    }\n    swap(&array, front,\
    \ back)\n  }\n  return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5xxs8uti.swift:27:25: error: extra argument in call\n    swap(&array,\
    \ front, back)\n        ~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmp5xxs8uti.swift:27:18: error:\
    \ cannot convert value of type 'Int' to expected argument type '[Int]'\n    swap(&array,\
    \ front, back)\n                 ^\n/tmp/tmp5xxs8uti.swift:31:25: error: extra\
    \ argument in call\n    swap(&array, front, back)\n        ~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmp5xxs8uti.swift:31:18: error: cannot convert value of type 'Int' to expected\
    \ argument type '[Int]'\n    swap(&array, front, back)\n                 ^\n"
  stdout: ''
  timestamp: 1660014001
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    for i in 0..<sortedArray.count\
    \ {\n        for j in (i+1)..<sortedArray.count {\n            if isOdd(a: sortedArray[i],\
    \ b: sortedArray[j]) && sortedArray[i] > sortedArray[j] {\n                let\
    \ tmp = sortedArray[i]\n                sortedArray[i] = sortedArray[j]\n    \
    \            sortedArray[j] = tmp\n            } else if !isOdd(a: sortedArray[i],\
    \ b: sortedArray[j]) && sortedArray[i] < sortedArray[j] {\n                let\
    \ tmp = sortedArray[i]\n                sortedArray[i] = sortedArray[j]\n    \
    \            sortedArray[j] = tmp\n            }\n        }\n    }\n    return\
    \ sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptmg6il4g.swift:20:16: error: cannot find 'isOdd' in scope\n   \
    \         if isOdd(a: sortedArray[i], b: sortedArray[j]) && sortedArray[i] > sortedArray[j]\
    \ {\n               ^~~~~\n/tmp/tmptmg6il4g.swift:24:24: error: cannot find 'isOdd'\
    \ in scope\n            } else if !isOdd(a: sortedArray[i], b: sortedArray[j])\
    \ && sortedArray[i] < sortedArray[j] {\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let index = array.count - 1\n    let\
    \ sum: Int = array[0] + array[index]\n    let odd = sum % 2 != 0\n    var left\
    \ = 0\n    var right = index\n    while left < right {\n        let leftValue\
    \ = result[left]\n        let rightValue = result[right]\n        if odd {\n \
    \           if leftValue < rightValue {\n                left += 1\n         \
    \   } else {\n                result.swapAt(left, right)\n                right\
    \ -= 1\n            }\n        } else {\n            if leftValue > rightValue\
    \ {\n                left += 1\n            } else {\n                result.swapAt(left,\
    \ right)\n                right -= 1\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5caeaf6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5cae7ed561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5cae7ed286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5cae7ed13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5cae7ecbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5cae5ece83 <unavailable> + 188035

    6    tmpndoem0f8                        0x000055ddab6ebe74 <unavailable> + 7796

    7    tmpndoem0f8                        0x000055ddab6eb49d <unavailable> + 5277

    8    libc.so.6                          0x00002b5caece2460 __libc_start_main +
    245

    9    tmpndoem0f8                        0x000055ddab6eb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  if array.count == 0 {\n    return array\n  }\n  if array.count\
    \ == 1 {\n    return array\n  }\n  if array.count == 2 {\n    if array[0] + array[1]\
    \ % 2 == 0 {\n      return [array[1], array[0]]\n    } else {\n      return array\n\
    \    }\n  }\n  var array = array\n  let count = array.count\n  let lastIndex =\
    \ count - 1\n  var temp = 0\n  for i in 0..<count {\n    if array[i] + array[lastIndex\
    \ - i] % 2 == 0 {\n      temp = array[i]\n      array[i] = array[lastIndex - i]\n\
    \      array[lastIndex - i] = temp\n    }\n  }\n  return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbffl_n7a/tmpbffl_n7a.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0aaa05cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0aa9d53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0aa9d53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0aa9d527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbffl_n7a                        0x000055b3ca73b876 <unavailable> + 6262

    5    libc.so.6                          0x00002b0aaa248460 __libc_start_main +
    245

    6    tmpbffl_n7a                        0x000055b3ca73b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    var mutable_array\
    \ = array\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n        for\
    \ i in 0..<array.count / 2 {\n            let temp = mutable_array[i]\n      \
    \      mutable_array[i] = mutable_array[array.count - 1 - i]\n            mutable_array[array.count\
    \ - 1 - i] = temp\n        }\n    }\n    return mutable_array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpx0nolgmq/tmpx0nolgmq.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd94836c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd9452db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd9452d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd9452c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx0nolgmq                        0x000055d6898be876 <unavailable> + 6262

    5    libc.so.6                          0x00002abd94a22460 __libc_start_main +
    245

    6    tmpx0nolgmq                        0x000055d6898be259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return [Int]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpamu9rah4/tmpamu9rah4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e34298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e33f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e33f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e33f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpamu9rah4                        0x000055e960f344dd <unavailable> + 5341

    5    libc.so.6                          0x00002b9e34484460 __libc_start_main +
    245

    6    tmpamu9rah4                        0x000055e960f34029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    var output =\
    \ array\n    var sortedIndexes = Array(output.indices)\n    if array.indices.contains(1)\
    \ {\n        sortedIndexes.sort { (i, j) -> Bool in\n            if i == 0 &&\
    \ j == array.indices.endIndex - 1 {\n                return array[i] < array[j]\n\
    \            } else if i == array.indices.endIndex - 1 && j == 0 {\n         \
    \       return array[i] > array[j]\n            } else {\n                return\
    \ i < j\n            }\n        }\n    }\n    for i in output.indices {\n    \
    \    output[i] = array[sortedIndexes[i]]\n    }\n    return output\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpy8ciyg62/tmpy8ciyg62.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b761e2d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b761dfc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b761dfc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b761dfc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8ciyg62                        0x0000561b7d02db26 <unavailable> + 6950

    5    libc.so.6                          0x00002b761e4bc460 __libc_start_main +
    245

    6    tmpy8ciyg62                        0x0000561b7d02d509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    var array = array\n    \n    if !array.isEmpty {\n   \
    \     if let first = array.first, let last = array.last, (first + last) % 2 ==\
    \ 0 {\n            array.sort()\n            array.reverse()\n        } else {\n\
    \            array.sort()\n        }\n    }\n    \n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1ajossyp/tmp1ajossyp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c9d86ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c9d561b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c9d561988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c9d5607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ajossyp                        0x0000559b498045e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1c9da56460 __libc_start_main +
    245

    6    tmp1ajossyp                        0x0000559b49803fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count > 1 {\n        let isEven\
    \ = (array[0] + array[array.count - 1]) % 2 == 0\n        for i in 0 ..< array.count\
    \ {\n            for j in (i + 1) ..< array.count {\n                if isEven\
    \ {\n                    if array[i] < array[j] {\n                        array.swapAt(i,\
    \ j)\n                    }\n                } else {\n                    if\
    \ array[i] > array[j] {\n                        array.swapAt(i, j)\n        \
    \            }\n                }\n            }\n        }\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count == 2 {\n        if (array[0]\
    \ + array[1]) % 2 == 0 {\n            return [array[1], array[0]]\n        } else\
    \ {\n            return array\n        }\n    }\n    let mid = array.count / 2\n\
    \    var left = [Int]()\n    var right = [Int]()\n    for i in 0..<mid {\n   \
    \     left.append(array[i])\n    }\n    for i in mid..<array.count {\n       \
    \ right.append(array[i])\n    }\n    left = sort_array(array: left)\n    right\
    \ = sort_array(array: right)\n    return merge(left: left, right: right)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpe3j7k6j_.swift:41:12: error: cannot find 'merge' in scope\n   \
    \ return merge(left: left, right: right)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var a = array\n    if a.count <= 1 {\n        return a\n   \
    \ }\n    let index = a.count / 2\n    let p = a[index]\n    a.remove(at: index)\n\
    \    var lo = a.filter { $0 < p }\n    var hi = a.filter { $0 >= p }\n    if index\
    \ % 2 == 0 {\n        lo = sort_array(array: lo)\n        hi = sort_array(array:\
    \ hi)\n    } else {\n        lo = sort_array(array: lo).reversed()\n        hi\
    \ = sort_array(array: hi).reversed()\n    }\n    return lo + [p] + hi\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpr9wqp_vq/tmpr9wqp_vq.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b57fa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b57c9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b57c9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b57c9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9wqp_vq                        0x000055d6e1ae1906 <unavailable> + 6406

    5    libc.so.6                          0x00002b0b58193460 __libc_start_main +
    245

    6    tmpr9wqp_vq                        0x000055d6e1ae12e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sortedOddArray = array.enumerated().filter({$0.element %\
    \ 2 != 0}).sorted { $0.element < $1.element }\n    let sortedEvenArray = array.enumerated().filter({$0.element\
    \ % 2 == 0}).sorted { $0.element > $1.element }\n    let sortedArray = sortedOddArray\
    \ + sortedEvenArray\n    return sortedArray.sorted { $0.offset < $1.offset }.map\
    \ { $0.element }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmppl2hgx0x/tmppl2hgx0x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecc2c09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecc2900b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecc2900988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecc28ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppl2hgx0x                        0x00005639542b6966 <unavailable> + 6502

    5    libc.so.6                          0x00002aecc2df5460 __libc_start_main +
    245

    6    tmppl2hgx0x                        0x00005639542b6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum_of_indexes = (array.first! + array.last!) % 2\n    var\
    \ sorted_array = array.sorted {\n        if sum_of_indexes == 1 {\n          \
    \  return $0 < $1\n        } else {\n            return $0 > $1\n        }\n \
    \   }\n    return sorted_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbxotcsgq/tmpbxotcsgq.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ba56a70bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba56a402561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba56a402286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba56a40213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba56a401bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbxotcsgq                        0x00005624b8b31ee3 <unavailable> + 7907

    6    tmpbxotcsgq                        0x00005624b8b314fd <unavailable> + 5373

    7    libc.so.6                          0x00002ba56a8f7460 __libc_start_main +
    245

    8    tmpbxotcsgq                        0x00005624b8b31209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    guard array.count\
    \ > 1 else { return array }\n    let left = array.filter { $0 % 2 == 0 }.sorted()\n\
    \    let right = array.filter { $0 % 2 == 1 }.sorted { $0 > $1 }\n    let result\
    \ = left + right\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9czo9_us/tmp9czo9_us.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ec81e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec7ed8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec7ed8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec7ed77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9czo9_us                        0x000055c5d79b39a6 <unavailable> + 6566

    5    libc.so.6                          0x00002b8ec83cd460 __libc_start_main +
    245

    6    tmp9czo9_us                        0x000055c5d79b3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // Only add code here\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp59fi4eoo/tmp59fi4eoo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3a1491c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3a1188b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3a1188988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3a11877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59fi4eoo                        0x000055b1ee0d05e6 <unavailable> + 5606

    5    libc.so.6                          0x00002ad3a167d460 __libc_start_main +
    245

    6    tmp59fi4eoo                        0x000055b1ee0cffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // Write your code below.\n    let sum_array: Int = array.count\
    \ - 1\n    var sorted_array: [Int] = []\n    for num in array {\n        if sum_array\
    \ == 0 {\n            sorted_array.append(num)\n        }\n        else if sum_array\
    \ % 2 == 0 {\n            sorted_array.insert(num, at: 0)\n        }\n       \
    \ else {\n            sorted_array.append(num)\n        }\n    }\n    return sorted_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp687ve7pm/tmp687ve7pm.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad48291dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad482614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad482614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4826137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp687ve7pm                        0x000055dd341128f6 <unavailable> + 6390

    5    libc.so.6                          0x00002ad482b09460 __libc_start_main +
    245

    6    tmp687ve7pm                        0x000055dd341122d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var a = array\n    var i = 0\n    var j = a.count - 1\n    while\
    \ i < j {\n        while i < j && (a[i] + a[j]) % 2 == 1 {\n            i += 1\n\
    \        }\n        while i < j && (a[i] + a[j]) % 2 == 0 {\n            j -=\
    \ 1\n        }\n        if i < j {\n            a.swapAt(i, j)\n        }\n  \
    \  }\n    a[i...].sort()\n    a[..<i].sort(by: >)\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpkmefh81s/tmpkmefh81s.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5bbd19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5bba10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5bba10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5bba0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmefh81s                        0x0000559e8b4f7b66 <unavailable> + 7014

    5    libc.so.6                          0x00002ad5bbf05460 __libc_start_main +
    245

    6    tmpkmefh81s                        0x0000559e8b4f7549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.isEmpty ? 0 : array[0] + array[array.count -\
    \ 1]\n    return array.sorted { (a, b) -> Bool in\n        return (sum % 2 ==\
    \ 0 ? a > b : a < b)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014001
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let odds = array.filter { $0 % 2 == 1 }.sorted()\n    var evens\
    \ = array.filter { $0 % 2 == 0 }.sorted()\n    if (array.first! + array.last!)\
    \ % 2 == 0 {\n        evens.reverse()\n    }\n    return array.enumerated().map\
    \ { $0.offset % 2 == 0 ? evens.removeFirst() : odds.removeFirst() }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpyhvopcte.swift:22:85: error: cannot use mutating member on immutable\
    \ value: 'odds' is a 'let' constant\n    return array.enumerated().map { $0.offset\
    \ % 2 == 0 ? evens.removeFirst() : odds.removeFirst() }\n                    \
    \                                                           ~~~~ ^\n/tmp/tmpyhvopcte.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let odds = array.filter\
    \ { $0 % 2 == 1 }.sorted()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014001
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var temp = array\n    if temp.count < 2 {\n        return temp\n\
    \    }\n    if (temp[0] + temp[temp.count - 1]) % 2 == 0 {\n        temp.sort(by:\
    \ >)\n    } else {\n        temp.sort(by: <)\n    }\n    return temp\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var temp = array\n    for i in 0..<array.count - 1 {\n     \
    \   for j in i + 1..<array.count {\n            if (i + j) % 2 == 0 {\n      \
    \          if temp[i] < temp[j] {\n                    temp.swapAt(i, j)\n   \
    \             }\n            } else {\n                if temp[i] > temp[j] {\n\
    \                    temp.swapAt(i, j)\n                }\n            }\n   \
    \     }\n    }\n    return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b220cddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b220cad2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b220cad2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b220cad213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b220cad1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph7je1zdf                        0x000055bdb3b02fcc <unavailable> + 8140

    6    tmph7je1zdf                        0x000055bdb3b0259d <unavailable> + 5533

    7    libc.so.6                          0x00002b220cfc7460 __libc_start_main +
    245

    8    tmph7je1zdf                        0x000055bdb3b022a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sortedArray = array\n    sortedArray.sort()\n    if array.count\
    \ % 2 == 0 {\n        return sortedArray.reversed()\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwwft18kf/tmpwwft18kf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4821aabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48217a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48217a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48217a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwft18kf                        0x000055adf303d856 <unavailable> + 6230

    5    libc.so.6                          0x00002b4821c97460 __libc_start_main +
    245

    6    tmpwwft18kf                        0x000055adf303d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var a = array\n    if array.count > 0 {\n        if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n            a.sort(by: >)\n        } else\
    \ {\n            a.sort(by: <)\n        }\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmph5fioiz7/tmph5fioiz7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5804e6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5804b61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5804b61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5804b607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5fioiz7                        0x000056437697f934 <unavailable> + 6452

    5    libc.so.6                          0x00002b5805056460 __libc_start_main +
    245

    6    tmph5fioiz7                        0x000056437697f189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    var\
    \ array = array\n    for index in 0..<array.count {\n        for i in index+1..<array.count\
    \ {\n            if array[index] > array[i] {\n                let temp = array[index]\n\
    \                array[index] = array[i]\n                array[i] = temp\n  \
    \          }\n        }\n    }\n    if ((array[0] + array[array.count-1]) % 2)\
    \ == 0 {\n        return array.reversed()\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var array\
    \ = array\n    let even = (array[0] + array[array.count - 1]) % 2 == 0\n    func\
    \ compare(_ lhs: Int, _ rhs: Int) -> Bool {\n        if even {\n            return\
    \ lhs > rhs\n        } else {\n            return lhs < rhs\n        }\n    }\n\
    \    for index in 1..<array.count {\n        var j = index\n        while j >\
    \ 0 && compare(array[j], array[j - 1]) {\n            array.swapAt(j, j - 1)\n\
    \            j -= 1\n        }\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sorted = array.sorted(by: >)\n    return array.isEmpty ||\
    \ array.count == 1 ? array : (array.first! + array.last!) % 2 == 0 ? sorted :\
    \ sorted.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    guard array.count > 1 else { return array }\n    \n  \
    \  var array = array\n    var result = [Int]()\n    \n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        for _ in array {\n            result.append(array.popLast()!)\n\
    \        }\n    } else {\n        for _ in array {\n            result.append(array.removeFirst())\n\
    \        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp51o9r0kp/tmp51o9r0kp.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e16122c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e15e19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e15e19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e15e187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp51o9r0kp                        0x000055b68e7eba86 <unavailable> + 6790

    5    libc.so.6                          0x00002b8e1630e460 __libc_start_main +
    245

    6    tmp51o9r0kp                        0x000055b68e7eb469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ arr = array.sorted()\n    let sum = arr[0] + arr[arr.count - 1]\n    var arrayToReturn\
    \ = [Int]()\n    if sum % 2 == 0 {\n        arrayToReturn = arr.reversed()\n \
    \   } else {\n        arrayToReturn = arr\n    }\n    return arrayToReturn\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    for i in 0..<array.count-1 {\n      \
    \  for j in 0..<array.count-1-i {\n            let sum = array[j] + array[array.count-1-j]\n\
    \            if sum % 2 == 0 {\n                if array[j] < array[j+1] {\n \
    \                   let temp = array[j]\n                    array[j] = array[j+1]\n\
    \                    array[j+1] = temp\n                }\n            } else\
    \ {\n                if array[j] > array[j+1] {\n                    let temp\
    \ = array[j]\n                    array[j] = array[j+1]\n                    array[j+1]\
    \ = temp\n                }\n            }\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae807316c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae80700d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae80700d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae80700d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae80700cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6qoza4pf                        0x00005607ce06efe6 <unavailable> + 8166

    6    tmp6qoza4pf                        0x00005607ce06e54d <unavailable> + 5453

    7    libc.so.6                          0x00002ae807502460 __libc_start_main +
    245

    8    tmp6qoza4pf                        0x00005607ce06e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.first! + array.last!\n    let sort = array.sorted()\n\
    \    return sum % 2 == 0 ? sort.reversed() : sort\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmph747rtss/tmph747rtss.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7cbe05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7cbafc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac7cbafc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac7cbafc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac7cbafbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmph747rtss                        0x0000557a4c2f7f7d <unavailable> + 8061

    6    tmph747rtss                        0x0000557a4c2f758d <unavailable> + 5517

    7    libc.so.6                          0x00002ac7cbff1460 __libc_start_main +
    245

    8    tmph747rtss                        0x0000557a4c2f7299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    // Check for empty Array\n    if array.isEmpty {\n   \
    \     return array\n    }\n    \n    // Check for a single element\n    if array.count\
    \ == 1 {\n        return array\n    }\n    \n    // Get the first and last element\
    \ of the array\n    let firstElement = array[0]\n    let lastElement = array[array.count\
    \ - 1]\n    \n    // Add the first and last element\n    let sum = firstElement\
    \ + lastElement\n    \n    // Set the operator as ascending\n    var operatorValue\
    \ = Operator.ascending\n    \n    // If the sum is even, set the operator as descending\n\
    \    if sum % 2 == 0 {\n        operatorValue = Operator.descending\n    }\n \
    \   \n    // Use the operator to sort the array\n    switch operatorValue {\n\
    \    case .ascending:\n        return array.sorted()\n    case .descending:\n\
    \        return array.sorted(by: >)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmputrtu_8f.swift:36:25: error: cannot find 'Operator' in scope\n\
    \    var operatorValue = Operator.ascending\n                        ^~~~~~~~\n\
    /tmp/tmputrtu_8f.swift:40:25: error: cannot find 'Operator' in scope\n       \
    \ operatorValue = Operator.descending\n                        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    var myArray\
    \ = array\n    let left = myArray.removeFirst()\n    let right = myArray.removeLast()\n\
    \    let isOdd = (left + right) % 2 == 1\n    let sorted = myArray.sorted(by:\
    \ isOdd ? > : <)\n    return [left] + sorted + [right]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpo1jfygyr.swift:22:45: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = myArray.sorted(by: isOdd ? > : <)\n     \
    \                                       ^~\n                                 \
    \            \n/tmp/tmpo1jfygyr.swift:22:47: error: expected expression after\
    \ '?' in ternary expression\n    let sorted = myArray.sorted(by: isOdd ? > : <)\n\
    \                                              ^\n/tmp/tmpo1jfygyr.swift:21:9:\
    \ warning: initialization of immutable value 'isOdd' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let isOdd = (left + right)\
    \ % 2 == 1\n    ~~~~^~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    var left = 0\n    var right = array.count\
    \ - 1\n    while left < right {\n        if (array[left] + array[right]) % 2 ==\
    \ 0 {\n            result[left] = array[right]\n            left += 1\n      \
    \  } else {\n            result[right] = array[left]\n            right -= 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpqg9ynv0h/tmpqg9ynv0h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e50d13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e50a0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e50a0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e50a097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqg9ynv0h                        0x000055da7af6a786 <unavailable> + 6022

    5    libc.so.6                          0x00002b2e50eff460 __libc_start_main +
    245

    6    tmpqg9ynv0h                        0x000055da7af6a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  guard array.count > 1 else { return array }\n  var res = array\n\
    \  let check = array[0] + array[array.count - 1]\n  let (res1, res2) = res.split\
    \ { $0 > res[0] }\n  res1.sort()\n  res2.sort()\n  res = res1 + res2\n  return\
    \ check % 2 == 0 ? res.reversed() : res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp6s7xuuba.swift:20:26: error: cannot convert value of type '[ArraySlice<Int>]'\
    \ to specified type '(_, _)'\n  let (res1, res2) = res.split { $0 > res[0] }\n\
    \                     ~~~~^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6s7xuuba.swift:23:14:\
    \ error: cannot assign value of type 'String' to type '[Int]'\n  res = res1 +\
    \ res2\n        ~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n            result.sort { (a, b) -> Bool\
    \ in\n                return a > b\n            }\n        } else {\n        \
    \    result.sort { (a, b) -> Bool in\n                return a < b\n         \
    \   }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count < 2 {\n        return\
    \ array\n    }\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        array.sort(by:\
    \ >)\n    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgbubota_/tmpgbubota_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab846ed7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab846bceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab846bce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab846bcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbubota_                        0x0000562d986d8934 <unavailable> + 6452

    5    libc.so.6                          0x00002ab8470c3460 __libc_start_main +
    245

    6    tmpgbubota_                        0x0000562d986d8189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var array =\
    \ array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        array.sort(by:\
    \ >)\n    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7gycj6av/tmp7gycj6av.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9f6f63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9f6c5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9f6c5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9f6c597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7gycj6av                        0x00005608949e6934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae9f714f460 __libc_start_main +
    245

    6    tmp7gycj6av                        0x00005608949e6189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // If there are no elements, the array is already sorted\n \
    \   guard array.count > 0 else { return array }\n    \n    // If the array only\
    \ has one element, then it is already sorted\n    guard array.count > 1 else {\
    \ return array }\n    \n    // Sort the array based on the sum of the first element\
    \ and the last element\n    let isEven = (array[0] + array[array.count - 1]) %\
    \ 2 == 0\n    return isEven ? array.sorted().reversed() : array.sorted()\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    guard array.count\
    \ > 1 else { return array }\n    guard array.count > 2 else { return array[0]\
    \ <= array[1] ? array : array.reversed() }\n    let sum = array[0] + array[array.count\
    \ - 1]\n    let sorted = sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var oddArray = [Int]()\n    var evenArray\
    \ = [Int]()\n    for num in array {\n        if num % 2 == 0 {\n            evenArray.append(num)\n\
    \        } else {\n            oddArray.append(num)\n        }\n    }\n    let\
    \ sum = array.first! + array.last!\n    var resultArray = [Int]()\n    let sortedOddArray\
    \ = oddArray.sorted(by: <)\n    let sortedEvenArray = evenArray.sorted(by: >)\n\
    \    if sum % 2 == 0 {\n        resultArray.append(contentsOf: sortedOddArray)\n\
    \        resultArray.append(contentsOf: sortedEvenArray)\n    } else {\n     \
    \   resultArray.append(contentsOf: sortedEvenArray)\n        resultArray.append(contentsOf:\
    \ sortedOddArray)\n    }\n    return resultArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwev9qont/tmpwev9qont.swift:27: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b31ab343c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31ab03a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b31ab03a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b31ab03a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b31ab039bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwev9qont                        0x00005586a3ba53b9 <unavailable> + 9145

    6    tmpwev9qont                        0x00005586a3ba474d <unavailable> + 5965

    7    libc.so.6                          0x00002b31ab52f460 __libc_start_main +
    245

    8    tmpwev9qont                        0x00005586a3ba4459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var index = 0\n    var newArray = array\n    var temp = 0\n\
    \    if array.count == 0 {\n        return array\n    }\n    if array.count ==\
    \ 1 {\n        return array\n    }\n    if array[0] + array[array.count - 1] %\
    \ 2 == 0 {\n        while index < array.count - 1 {\n            if array[index]\
    \ > array[index + 1] {\n                temp = array[index]\n                newArray[index]\
    \ = array[index + 1]\n                newArray[index + 1] = temp\n           \
    \     index = 0\n            } else {\n                index += 1\n          \
    \  }\n        }\n    } else {\n        while index < array.count - 1 {\n     \
    \       if array[index] < array[index + 1] {\n                temp = array[index]\n\
    \                newArray[index] = array[index + 1]\n                newArray[index\
    \ + 1] = temp\n                index = 0\n            } else {\n             \
    \   index += 1\n            }\n        }\n    }\n    return newArray\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014007
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // your code here\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpn4_r4wy9/tmpn4_r4wy9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ee81c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ee7ebeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ee7ebe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ee7ebd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn4_r4wy9                        0x000055fbaeff75e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b4ee83b3460 __libc_start_main +
    245

    6    tmpn4_r4wy9                        0x000055fbaeff6fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    var result\
    \ = array\n    let range = array.first! + array.last!\n    for x in 1 ..< array.count\
    \ {\n        for y in 0 ..< array.count - x {\n            if (array[y] + array[y\
    \ + 1]) % 2 != range % 2 {\n                result.swapAt(y, y + 1)\n        \
    \    }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphnst3dxh/tmphnst3dxh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae1e3c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae1e0beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae1e0be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae1e0bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphnst3dxh                        0x00005650d59329f6 <unavailable> + 6646

    5    libc.so.6                          0x00002aae1e5b3460 __libc_start_main +
    245

    6    tmphnst3dxh                        0x00005650d59323d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.count > 0 ? array[0] + array[array.count - 1]\
    \ : 0\n    let sorted = array.sorted()\n    if sum % 2 == 0 {\n        return\
    \ sorted.reversed()\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    let\
    \ sorted = array.sorted()\n    if sorted.first! + sorted.last! % 2 == 0 {\n  \
    \      return sorted.reversed()\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpcgtmjkdm/tmpcgtmjkdm.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f8ed71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f8ea68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f8ea68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f8ea677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgtmjkdm                        0x00005634b8e1dec9 <unavailable> + 7881

    5    libc.so.6                          0x00002b1f8ef5d460 __libc_start_main +
    245

    6    tmpcgtmjkdm                        0x00005634b8e1d2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let count = array.count\n    guard count > 1 else { return array\
    \ }\n    let sum = array[0] + array[count - 1]\n    let sorted = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp08hnzaj2.swift:20:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmp08hnzaj2.swift:20:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmp08hnzaj2.swift:19:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  var copy = array\n  if copy.count > 1 {\n    var pair = (lowerBound:\
    \ 0, upperBound: copy.count - 1)\n    while pair.lowerBound < pair.upperBound\
    \ {\n      if (pair.lowerBound + pair.upperBound) % 2 == 0 {\n        if copy[pair.lowerBound]\
    \ > copy[pair.upperBound] {\n          swap(&copy[pair.lowerBound], &copy[pair.upperBound])\n\
    \        }\n      } else {\n        if copy[pair.lowerBound] < copy[pair.upperBound]\
    \ {\n          swap(&copy[pair.lowerBound], &copy[pair.upperBound])\n        }\n\
    \      }\n      pair.lowerBound += 1\n      pair.upperBound -= 1\n    }\n  }\n\
    \  return copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpivp4_rre.swift:27:16: error: overlapping accesses to 'copy', but\
    \ modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \          swap(&copy[pair.lowerBound], &copy[pair.upperBound])\n          ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \          copy.swapAt(pair.lowerBound, pair.upperBound)\n/tmp/tmpivp4_rre.swift:27:40:\
    \ note: conflicting access is here\n          swap(&copy[pair.lowerBound], &copy[pair.upperBound])\n\
    \                                       ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpivp4_rre.swift:23:16:\
    \ error: overlapping accesses to 'copy', but modification requires exclusive access;\
    \ consider calling MutableCollection.swapAt(_:_:)\n          swap(&copy[pair.lowerBound],\
    \ &copy[pair.upperBound])\n          ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \          copy.swapAt(pair.lowerBound, pair.upperBound)\n/tmp/tmpivp4_rre.swift:23:40:\
    \ note: conflicting access is here\n          swap(&copy[pair.lowerBound], &copy[pair.upperBound])\n\
    \                                       ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp1ajossyp/tmp1ajossyp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c9d86ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c9d561b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c9d561988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c9d5607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ajossyp                        0x0000559b498045e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b1c9da56460 __libc_start_main +
    245

    6    tmp1ajossyp                        0x0000559b49803fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014000
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { $0 + array.count - 1 == $1 + array.count\
    \ - 1 ? $0 > $1 : $0 < $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6lnl9q7a/tmp6lnl9q7a.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57fff8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57ffc82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57ffc82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57ffc817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6lnl9q7a                        0x000055dd3a25c844 <unavailable> + 6212

    5    libc.so.6                          0x00002b5800177460 __libc_start_main +
    245

    6    tmp6lnl9q7a                        0x000055dd3a25c099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    if sum(array[0],\
    \ array[array.count - 1]) % 2 == 0 {\n        return sort_array_ascending(array:\
    \ array)\n    } else {\n        return sort_array_descending(array: array)\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpg88fz2jv.swift:18:8: error: cannot find 'sum' in scope\n    if\
    \ sum(array[0], array[array.count - 1]) % 2 == 0 {\n       ^~~\n/tmp/tmpg88fz2jv.swift:19:16:\
    \ error: cannot find 'sort_array_ascending' in scope\n        return sort_array_ascending(array:\
    \ array)\n               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg88fz2jv.swift:21:16: error:\
    \ cannot find 'sort_array_descending' in scope\n        return sort_array_descending(array:\
    \ array)\n               ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var a = array\n\
    \    let isEven = array.first! + array.last! % 2 == 0\n    for i in 0..<a.count-1\
    \ {\n        for j in 0..<a.count-1-i {\n            let isOdd = a[j] % 2 == 1\n\
    \            if isEven && isOdd {\n                if a[j] > a[j+1] {\n      \
    \              a.swapAt(j, j+1)\n                }\n            } else if !isEven\
    \ && !isOdd {\n                if a[j] < a[j+1] {\n                    a.swapAt(j,\
    \ j+1)\n                }\n            }\n        }\n    }\n    return a\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbrn2rsaa/tmpbrn2rsaa.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cf65e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cf62dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cf62da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cf62d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrn2rsaa                        0x0000563d570be9f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b7cf67cf460 __libc_start_main +
    245

    6    tmpbrn2rsaa                        0x0000563d570be3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var i = 0\n    var j = array.count -\
    \ 1\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if (array[0] + array[array.count -\
    \ 1]) % 2 == 0 {\n        while i < j {\n            while array[i] % 2 == 0 {\n\
    \                i += 1\n            }\n            while array[j] % 2 == 1 {\n\
    \                j -= 1\n            }\n            let tmp = array[i]\n     \
    \       array[i] = array[j]\n            array[j] = tmp\n            i += 1\n\
    \            j -= 1\n        }\n        for i in 0..<array.count {\n         \
    \   for j in i..<array.count {\n                if array[i] < array[j] {\n   \
    \                 let tmp = array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = tmp\n                }\n            }\n      \
    \  }\n    } else {\n        while i < j {\n            while array[i] % 2 == 1\
    \ {\n                i += 1\n            }\n            while array[j] % 2 ==\
    \ 0 {\n                j -= 1\n            }\n            let tmp = array[i]\n\
    \            array[i] = array[j]\n            array[j] = tmp\n            i +=\
    \ 1\n            j -= 1\n        }\n        for i in 0..<array.count {\n     \
    \       for j in i..<array.count {\n                if array[i] > array[j] {\n\
    \                    let tmp = array[i]\n                    array[i] = array[j]\n\
    \                    array[j] = tmp\n                }\n            }\n      \
    \  }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted { (lhs, rhs) -> Bool in\n        if array.isEmpty\
    \ {\n            return true\n        }\n        let sum = lhs + rhs\n       \
    \ return sum.isMultiple(of: 2) ? false : true\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp81nfmabx/tmp81nfmabx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b57709c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b57400b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b57400988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b573ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81nfmabx                        0x000055ed4b24a7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b3b578f5460 __libc_start_main +
    245

    6    tmp81nfmabx                        0x000055ed4b24a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    let newArray = array.sorted()\n   \
    \ if (newArray.first! + newArray.last!) % 2 == 0 {\n        return newArray.reversed()\n\
    \    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    var result =\
    \ array\n    if array.count > 1 {\n        let first = array.first!\n        let\
    \ last = array.last!\n        if first + last % 2 == 0 {\n            result.sort(by:\
    \ { $0 > $1 })\n        } else {\n            result.sort(by: { $0 < $1 })\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpm2ot70r5/tmpm2ot70r5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c0339ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c03095b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c03095988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c030947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm2ot70r5                        0x0000560bfeda7a74 <unavailable> + 6772

    5    libc.so.6                          0x00002b1c0358a460 __libc_start_main +
    245

    6    tmpm2ot70r5                        0x0000560bfeda72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var arr = array\n    var swap = false\n    for i in 0..<arr.count-1\
    \ {\n        if arr[i] > arr[i+1] {\n            swap = true\n            let\
    \ temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n\
    \        }\n    }\n    if swap {\n        return sort_array(array: arr)\n    }\n\
    \    return (arr.count % 2 == 0) ? Array(arr.reversed()) : arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af994a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af994760561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af994760286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af99476013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af99475fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpe12kzt0m                        0x000055dff71ed131 <unavailable> + 8497

    6    tmpe12kzt0m                        0x000055dff71ec6cd <unavailable> + 5837

    7    libc.so.6                          0x00002af994c55460 __libc_start_main +
    245

    8    tmpe12kzt0m                        0x000055dff71ec3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n            return [array[1],\
    \ array[0]]\n        } else {\n            return array\n        }\n    }\n  \
    \  var newArray = array\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n\
    \        let middle = array.count / 2\n        var i = 1\n        var j = array.count\
    \ - 2\n        while (i <= middle) {\n            if newArray[i] % 2 == 0 {\n\
    \                swap(&newArray[i], &newArray[j])\n                j -= 1\n  \
    \          }\n            i += 1\n        }\n        return newArray.sorted(by:\
    \ >)\n    } else {\n        let middle = array.count / 2\n        var i = 1\n\
    \        var j = array.count - 2\n        while (i <= middle) {\n            if\
    \ newArray[i] % 2 == 0 {\n                swap(&newArray[i], &newArray[j])\n \
    \               j -= 1\n            }\n            i += 1\n        }\n       \
    \ return newArray.sorted(by: <)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpdirzwtma.swift:46:22: error: overlapping accesses to 'newArray',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \                swap(&newArray[i], &newArray[j])\n                ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                newArray.swapAt(i, j)\n/tmp/tmpdirzwtma.swift:46:36: note: conflicting\
    \ access is here\n                swap(&newArray[i], &newArray[j])\n         \
    \                          ^~~~~~~~~~~~\n/tmp/tmpdirzwtma.swift:34:22: error:\
    \ overlapping accesses to 'newArray', but modification requires exclusive access;\
    \ consider calling MutableCollection.swapAt(_:_:)\n                swap(&newArray[i],\
    \ &newArray[j])\n                ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n          \
    \      newArray.swapAt(i, j)\n/tmp/tmpdirzwtma.swift:34:36: note: conflicting\
    \ access is here\n                swap(&newArray[i], &newArray[j])\n         \
    \                          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    return array.enumerated().sorted\
    \ { (n0, n1) -> Bool in\n        if (n0.offset + n1.offset).isMultiple(of: 2)\
    \ {\n            return n0.element > n1.element\n        } else {\n          \
    \  return n0.element < n1.element\n        }\n    }.map { $0.element }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0ggck6y3/tmp0ggck6y3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fdfeeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fdfbe5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fdfbe5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fdfbe47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ggck6y3                        0x000055f9f840d976 <unavailable> + 6518

    5    libc.so.6                          0x00002b5fe00da460 __libc_start_main +
    245

    6    tmp0ggck6y3                        0x000055f9f840d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    var first =\
    \ array[0]\n    var last = array[array.count - 1]\n    if (first + last) % 2 ==\
    \ 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n  \
    \  }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpija23hrq.swift:21:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort(by: >)\n        ~~~~~\
    \ ^\n/tmp/tmpija23hrq.swift:23:15: error: cannot use mutating member on immutable\
    \ value: 'array' is a 'let' constant\n        array.sort(by: <)\n        ~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    return zip(array,\
    \ array.indices)\n        .sorted { (a, b) in\n            let (a1, a2) = a\n\
    \            let (b1, b2) = b\n            let sum1 = a1 + a2\n            let\
    \ sum2 = b1 + b2\n            switch (sum1 % 2, sum2 % 2) {\n            case\
    \ (true, true):\n                return a1 < b1\n            case (false, false):\n\
    \                return a1 > b1\n            default:\n                return\
    \ sum1 % 2\n            }\n        }\n        .map { (a1, _) in a1 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpzm88bsm3.swift:30:29: error: type 'Int' cannot be used as a boolean;\
    \ test for '!= 0' instead\n                return sum1 % 2\n                 \
    \           ^\n                       ((      ) != 0)\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    return array.indices.reduce(array)\
    \ { (result, index) in\n        let sum = result[0] + result[result.count - 1]\n\
    \        if index == 0 || index == result.count - 1 {\n            return result\n\
    \        }\n        if sum % 2 == 0 {\n            if result[index] > result[index\
    \ - 1] {\n                return result\n            } else {\n              \
    \  return swap(result: result, i: index, j: index - 1)\n            }\n      \
    \  } else {\n            if result[index] < result[index - 1] {\n            \
    \    return result\n            } else {\n                return swap(result:\
    \ result, i: index, j: index - 1)\n            }\n        }\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpc7rzo_8m.swift:18:32: error: missing argument label 'into:' in\
    \ call\n    return array.indices.reduce(array) { (result, index) in\n        \
    \                       ^\n                                into: \n/tmp/tmpc7rzo_8m.swift:18:26:\
    \ error: cannot convert return expression of type '(_, _) -> _' to return type\
    \ '[Int]'\n    return array.indices.reduce(array) { (result, index) in\n     \
    \      ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var copyArray\
    \ = array\n    let first = copyArray.removeFirst()\n    let last = copyArray.removeLast()\n\
    \    if (first + last) % 2 == 0 {\n        copyArray.sort { (a, b) -> Bool in\n\
    \            return a > b\n        }\n    } else {\n        copyArray.sort { (a,\
    \ b) -> Bool in\n            return a < b\n        }\n    }\n    return [first]\
    \ + copyArray + [last]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpnor7i8lq/tmpnor7i8lq.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b72283c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b71f7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b71f7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b71f797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnor7i8lq                        0x0000563536f628f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b3b7246f460 __libc_start_main +
    245

    6    tmpnor7i8lq                        0x0000563536f622d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let array = array.sorted()\n    if array.count == 0 {\n    \
    \    return array\n    }\n    if array.first! + array.last! % 2 == 0 {\n     \
    \   return array.reversed()\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpx_86q0aw/tmpx_86q0aw.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b812df8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b812dc85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b812dc85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b812dc847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_86q0aw                        0x000055f07c77aec9 <unavailable> + 7881

    5    libc.so.6                          0x00002b812e17a460 __libc_start_main +
    245

    6    tmpx_86q0aw                        0x000055f07c77a2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  var result: [Int] = array\n  if result.count < 2 {\n    return\
    \ result\n  }\n  var start = 0\n  var end = result.count - 1\n  while start <\
    \ end {\n    let sum = result[start] + result[end]\n    if sum % 2 == 0 {\n  \
    \    result.swapAt(start, end)\n    }\n    start += 1\n    end -= 1\n  }\n  return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9k01plbw/tmp9k01plbw.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93287dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93284d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93284d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93284d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9k01plbw                        0x000055d7d13c97c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b93289c7460 __libc_start_main +
    245

    6    tmp9k01plbw                        0x000055d7d13c91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var arr = array\n    if arr.count > 1 {\n        let (left,\
    \ right) = arr.splitAt(arr.count/2)\n        return merge(left: sort_array(array:\
    \ left), right: sort_array(array: right))\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpiyw7k5mt.swift:19:33: error: value of type '[Int]' has no member\
    \ 'splitAt'\n        let (left, right) = arr.splitAt(arr.count/2)\n          \
    \                  ~~~ ^~~~~~~\n/tmp/tmpiyw7k5mt.swift:20:16: error: cannot find\
    \ 'merge' in scope\n        return merge(left: sort_array(array: left), right:\
    \ sort_array(array: right))\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array.sorted {\n        let (a, b) = (array.first!, array.last!)\n\
    \        return (a + b) % 2 == 0 ? $0 > $1 : $0 < $1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    } else if array.count\
    \ == 1 {\n        return array\n    } else {\n        let firstValue = array[0]\n\
    \        let lastValue = array[array.count - 1]\n        if firstValue + lastValue\
    \ % 2 == 0 {\n            return quickSort(array: array, start: 0, end: array.count\
    \ - 1, ascending: false)\n        } else {\n            return quickSort(array:\
    \ array, start: 0, end: array.count - 1, ascending: true)\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpofu1mhtq.swift:25:20: error: cannot find 'quickSort' in scope\n\
    \            return quickSort(array: array, start: 0, end: array.count - 1, ascending:\
    \ false)\n                   ^~~~~~~~~\n/tmp/tmpofu1mhtq.swift:27:20: error: cannot\
    \ find 'quickSort' in scope\n            return quickSort(array: array, start:\
    \ 0, end: array.count - 1, ascending: true)\n                   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count <= 1 {\n        return array\n    }\n    let\
    \ first = array[0]\n    let last = array[array.count - 1]\n    let sortedArray\
    \ = array.sorted(by: { $0 < $1 })\n    let sum = first + last\n    if sum % 2\
    \ == 0 {\n        return sortedArray.reversed()\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let a = array.enumerated().reduce(into: (0, [Int]())) { $0.1.append(($0.0,\
    \ $1)); $0.0 += $1 }\n    return a.1.sorted { (a: (Int, Int), b: (Int, Int)) ->\
    \ Bool in\n        a.0 + a.1 + b.0 + b.1 % 2 == 0 ? a.1 > b.1 : a.1 < b.1\n  \
    \  }.map { $0.1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpf9nqrf1_.swift:17:73: error: cannot convert value of type '(Int,\
    \ EnumeratedSequence<[Int]>.Iterator.Element)' (aka '(Int, (offset: Int, element:\
    \ Int))') to expected argument type 'Int'\n    let a = array.enumerated().reduce(into:\
    \ (0, [Int]())) { $0.1.append(($0.0, $1)); $0.0 += $1 }\n                    \
    \                                                    ^\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    \n    //Write your solution here\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpunhx6zae/tmpunhx6zae.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1bbcfbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1bbccb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1bbccb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1bbccb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunhx6zae                        0x000055bfbb1d547d <unavailable> + 5245

    5    libc.so.6                          0x00002b1bbd1ab460 __libc_start_main +
    245

    6    tmpunhx6zae                        0x000055bfbb1d4fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var sorted = array\n    if sorted.count > 1 {\n        if sorted[0]\
    \ % 2 == 0 && sorted[sorted.count - 1] % 2 == 0 {\n            sorted.sort(by:\
    \ >)\n        } else if sorted[0] % 2 != 0 && sorted[sorted.count - 1] % 2 !=\
    \ 0 {\n            sorted.sort(by: <)\n        } else {\n            for i in\
    \ sorted.indices {\n                let j = sorted.count - 1 - i\n           \
    \     if sorted[i] % 2 == 0 {\n                    var k = i\n               \
    \     while k < j {\n                        if sorted[k] > sorted[k + 1] {\n\
    \                            let swap = sorted[k]\n                          \
    \  sorted[k] = sorted[k + 1]\n                            sorted[k + 1] = swap\n\
    \                        }\n                        k += 1\n                 \
    \   }\n                } else {\n                    var k = j\n             \
    \       while k > i {\n                        if sorted[k] < sorted[k - 1] {\n\
    \                            let swap = sorted[k]\n                          \
    \  sorted[k] = sorted[k - 1]\n                            sorted[k - 1] = swap\n\
    \                        }\n                        k -= 1\n                 \
    \   }\n                }\n            }\n        }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpe06kl53m/tmpe06kl53m.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e92c4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e92944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e92944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e929437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe06kl53m                        0x0000562ce113c976 <unavailable> + 6518

    5    libc.so.6                          0x00002b1e92e39460 __libc_start_main +
    245

    6    tmpe06kl53m                        0x0000562ce113c359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    var start = 0\n    var end = array.count\
    \ - 1\n    while start < end {\n        while array[start]%2 == 1 {\n        \
    \    start += 1\n        }\n        while array[end]%2 == 0 {\n            end\
    \ -= 1\n        }\n        let temp = array[start]\n        array[start] = array[end]\n\
    \        array[end] = temp\n        start += 1\n        end -= 1\n    }\n    array\
    \ = merge_sort(array: array)\n    if (array.count <= 1) {\n        return array\n\
    \    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n        var start\
    \ = 0\n        var end = array.count - 1\n        while start < end {\n      \
    \      let temp = array[start]\n            array[start] = array[end]\n      \
    \      array[end] = temp\n            start += 1\n            end -= 1\n     \
    \   }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp10jtrs4q.swift:33:13: error: cannot find 'merge_sort' in scope\n\
    \    array = merge_sort(array: array)\n            ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 1 else { return array }\n    let middle\
    \ = (array.count + 1) / 2\n    let sorted = array.sorted()\n    var result = [Int]()\n\
    \    var right = sorted.count - 1\n    var left = 0\n    while right >= middle\
    \ {\n        result.append(sorted[right])\n        right -= 1\n    }\n    while\
    \ left < middle {\n        result.append(sorted[left])\n        left += 1\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9gxb_o8_/tmp9gxb_o8_.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89e9e37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89e9b2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89e9b2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89e9b2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9gxb_o8_                        0x000055eb5fe01886 <unavailable> + 6278

    5    libc.so.6                          0x00002b89ea023460 __libc_start_main +
    245

    6    tmp9gxb_o8_                        0x000055eb5fe01269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let sumOfIndex = array.indices.reduce(0,\
    \ +)\n    return result.sorted {\n        sumOfIndex % 2 == 0 ? $0 > $1 : $0 <\
    \ $1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpnivhb8r8/tmpnivhb8r8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4c5b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4c580ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4c580a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4c58097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnivhb8r8                        0x000055f9a52f2a44 <unavailable> + 6724

    5    libc.so.6                          0x00002ab4c5cff460 __libc_start_main +
    245

    6    tmpnivhb8r8                        0x000055f9a52f2299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if result.count == 0 {\n        return\
    \ []\n    }\n    if result.count % 2 == 0 {\n        for i in 0..<result.count\
    \ / 2 {\n            let temp = result[i]\n            result[i] = result[result.count\
    \ - 1 - i]\n            result[result.count - 1 - i] = temp\n        }\n    }\
    \ else {\n        for i in 0..<result.count / 2 {\n            let temp = result[i]\n\
    \            result[i] = result[result.count - 1 - i]\n            result[result.count\
    \ - 1 - i] = temp\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptb4tqcc9/tmptb4tqcc9.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29c086dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29c0564b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29c0564988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29c05637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb4tqcc9                        0x000055ab3d2a3876 <unavailable> + 6262

    5    libc.so.6                          0x00002b29c0a59460 __libc_start_main +
    245

    6    tmptb4tqcc9                        0x000055ab3d2a3259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    //return array.sorted()\n    if array.count == 0 {\n       \
    \ return array\n    }\n    var result = array\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        result.sort(by: <)\n    } else {\n    \
    \    result.sort(by: >)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwvuggb1v/tmpwvuggb1v.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23480dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2347dd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2347dd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2347dd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvuggb1v                        0x00005568b21457a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b23482c8460 __libc_start_main +
    245

    6    tmpwvuggb1v                        0x00005568b2145189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    let sum = array[0] + array[array.count\
    \ - 1]\n    var a = array\n    if sum % 2 == 0 {\n        a.sort(by: >)\n    }\
    \ else {\n        a.sort(by: <)\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var odd: [Int] = []\n    var even: [Int] = []\n    for item\
    \ in array {\n        if item % 2 == 0 {\n            even.append(item)\n    \
    \    } else {\n            odd.append(item)\n        }\n    }\n    odd.sort()\n\
    \    even.sort()\n    var result: [Int] = []\n    var oddIndex = 0\n    var evenIndex\
    \ = 0\n    for index in 0..<array.count {\n        if array[index] % 2 == 0 {\n\
    \            result.append(even[evenIndex])\n            evenIndex += 1\n    \
    \    } else {\n            result.append(odd[oddIndex])\n            oddIndex\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpju7z9f19/tmpju7z9f19.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4fd4bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4fd1b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4fd1b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4fd1b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpju7z9f19                        0x00005643040f7b06 <unavailable> + 6918

    5    libc.so.6                          0x00002af4fd6aa460 __libc_start_main +
    245

    6    tmpju7z9f19                        0x00005643040f74e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  guard array.count > 1 else { return array }\n  let pivot = array[0]\n\
    \  let left = array.filter { $0 < pivot }\n  let right = array.filter { $0 > pivot\
    \ }\n  return array.count % 2 == 0 ? sort_array(array: left) + [pivot] + sort_array(array:\
    \ right) : sort_array(array: right) + [pivot] + sort_array(array: left)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwab5thac/tmpwab5thac.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09fced2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09fcbc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09fcbc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09fcbc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwab5thac                        0x0000557aeb53e856 <unavailable> + 6230

    5    libc.so.6                          0x00002b09fd0be460 __libc_start_main +
    245

    6    tmpwab5thac                        0x0000557aeb53e239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    var sortedArray\
    \ = array\n    let firstIndexValue = array[0]\n    let lastIndexValue = array[array.count\
    \ - 1]\n    if (firstIndexValue + lastIndexValue) % 2 == 0 {\n        sortedArray.sort(by:\
    \ >)\n    } else {\n        sortedArray.sort(by: <)\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014003
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count == 0 {\n        return array\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if (array[0] + array[array.count -\
    \ 1]) % 2 == 0 {\n        var result: [Int] = [Int]()\n        result.append(contentsOf:\
    \ array.sorted(by: >))\n        return result\n    } else {\n        var result:\
    \ [Int] = [Int]()\n        result.append(contentsOf: array.sorted(by: <))\n  \
    \      return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014003
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  if array.count == 0 {\n    return array\n  }\n  var array = array\n\
    \  if (array[0] + array[array.count - 1]) % 2 == 0 {\n    array.sort(by: >)\n\
    \  } else {\n    array.sort(by: <)\n  }\n  return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // TODO:\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpnv_6b7a9/tmpnv_6b7a9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c7c458c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c7c14fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c7c14f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c7c14e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnv_6b7a9                        0x000055998f5c347d <unavailable> + 5245

    5    libc.so.6                          0x00002b3c7c644460 __libc_start_main +
    245

    6    tmpnv_6b7a9                        0x000055998f5c2fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n  let oddArray = array.filter { $0 % 2 != 0 }.sorted(by: <)\n  let\
    \ evenArray = array.filter { $0 % 2 == 0 }.sorted(by: >)\n  return zip(oddArray,\
    \ evenArray).flatMap { [$0, $1] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpb3hwl1_m/tmpb3hwl1_m.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72388f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72385f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72385f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72385ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3hwl1_m                        0x000055b5e65a571d <unavailable> + 5917

    5    libc.so.6                          0x00002b7238ae5460 __libc_start_main +
    245

    6    tmpb3hwl1_m                        0x000055b5e65a5269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count <= 1 {\n        return array\n    }\n    let\
    \ array = array.sorted(by: {\n        if let first = array.first, let last = array.last\
    \ {\n            if (first + last) % 2 == 0 {\n                return $0 > $1\n\
    \            } else {\n                return $0 < $1\n            }\n       \
    \ }\n        return false\n    })\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard array.count > 0 else { return array }\n    guard array.count\
    \ > 1 else { return array }\n    let odd = ((array.first ?? 0) + (array.last ??\
    \ 0)) % 2 == 1\n    let sorted = array.sorted(by: odd ? { $0 > $1 } : { $0 < $1\
    \ })\n    var res = sorted\n    let half = sorted.count / 2\n    var step = half\n\
    \    if sorted.count % 2 == 0 {\n        res[half] = sorted[half - 1]\n      \
    \  res[half - 1] = sorted[half]\n        step = half - 1\n    }\n    var left\
    \ = half - 1\n    var right = half + 1\n    while left >= 0, right < sorted.count\
    \ {\n        res[left] = sorted[right]\n        res[right] = sorted[left]\n  \
    \      left -= 1\n        right += 1\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp96o_vu3i/tmp96o_vu3i.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2be0f41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2be0c38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2be0c38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2be0c377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96o_vu3i                        0x000055ef22ec2926 <unavailable> + 6438

    5    libc.so.6                          0x00002b2be112d460 __libc_start_main +
    245

    6    tmp96o_vu3i                        0x000055ef22ec2309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014007
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count < 2 {\n        return array\n    }\n    var sorted\
    \ = array\n    var left = array[0]\n    var right = array[array.count - 1]\n \
    \   if left % 2 == 0 {\n        for i in 1..<array.count / 2 {\n            sorted[i]\
    \ = array[array.count - i - 1]\n            sorted[array.count - i - 1] = array[i]\n\
    \        }\n    } else {\n        for i in 1..<array.count / 2 {\n           \
    \ sorted[i] = array[i]\n            sorted[array.count - i - 1] = array[array.count\
    \ - i - 1]\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpg56lhzyj/tmpg56lhzyj.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62be616c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62be30db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62be30d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62be30c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg56lhzyj                        0x00005576ec2b0876 <unavailable> + 6262

    5    libc.so.6                          0x00002b62be802460 __libc_start_main +
    245

    6    tmpg56lhzyj                        0x00005576ec2b0259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    if array.count <= 1 {\n        return array\n    }\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        return [Int](array.reversed())\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpq52k1gvv/tmpq52k1gvv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dabc11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dab908b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dab908988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dab9077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq52k1gvv                        0x0000559cc7f1b8b6 <unavailable> + 6326

    5    libc.so.6                          0x00002b6dabdfd460 __libc_start_main +
    245

    6    tmpq52k1gvv                        0x0000559cc7f1b299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    for i in 0..<array.count {\n        for\
    \ j in 0..<array.count - 1 {\n            if (i + j) % 2 == 0 {\n            \
    \    if array[j] > array[j + 1] {\n                    array.swapAt(j, j + 1)\n\
    \                }\n            } else {\n                if array[j] < array[j\
    \ + 1] {\n                    array.swapAt(j, j + 1)\n                }\n    \
    \        }\n        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbt09qwe7/tmpbt09qwe7.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5ca52ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5ca225b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5ca225988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5ca2247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbt09qwe7                        0x000055a2b10048c6 <unavailable> + 6342

    5    libc.so.6                          0x00002ae5ca71a460 __libc_start_main +
    245

    6    tmpbt09qwe7                        0x000055a2b10042a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var array = array\n    if array.count < 2 {\n        return\
    \ array\n    }\n    if array.count % 2 == 0 {\n        // even number\n      \
    \  if array[0] + array[array.count - 1] % 2 == 0 {\n            // even + even\
    \ is even\n            for i in 0..<array.count/2 {\n                let a = array[i]\n\
    \                let b = array[array.count - 1 - i]\n                if a > b\
    \ {\n                    array[i] = b\n                    array[array.count -\
    \ 1 - i] = a\n                }\n            }\n        } else {\n           \
    \ // even + odd is odd\n            for i in 0..<array.count/2 {\n           \
    \     let a = array[i]\n                let b = array[array.count - 1 - i]\n \
    \               if a < b {\n                    array[i] = b\n               \
    \     array[array.count - 1 - i] = a\n                }\n            }\n     \
    \   }\n    } else {\n        // odd number\n        if array[0] + array[array.count\
    \ - 1] % 2 == 0 {\n            // even + even is even\n            for i in 0..<array.count/2\
    \ {\n                let a = array[i]\n                let b = array[array.count\
    \ - 1 - i]\n                if a > b {\n                    array[i] = b\n   \
    \                 array[array.count - 1 - i] = a\n                }\n        \
    \    }\n        } else {\n            // even + odd is odd\n            for i\
    \ in 0..<array.count/2 {\n                let a = array[i]\n                let\
    \ b = array[array.count - 1 - i]\n                if a < b {\n               \
    \     array[i] = b\n                    array[array.count - 1 - i] = a\n     \
    \           }\n            }\n        }\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp7lh9ryfv/tmp7lh9ryfv.swift:86: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56173f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56170efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56170ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56170ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lh9ryfv                        0x0000556c6b7a4876 <unavailable> + 6262

    5    libc.so.6                          0x00002b56175e4460 __libc_start_main +
    245

    6    tmp7lh9ryfv                        0x0000556c6b7a4259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    if array.count > 1 {\n        var left\
    \ = 0\n        var right = array.count - 1\n        while left < right {\n   \
    \         if (array[left] + array[right]) % 2 == 0 {\n                result[left]\
    \ = array[right]\n                result[right] = array[left]\n            }\n\
    \            left += 1\n            right -= 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgd2hcocb/tmpgd2hcocb.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1eb938dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1eb9084b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1eb9084988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1eb90837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgd2hcocb                        0x00005598407b5786 <unavailable> + 6022

    5    libc.so.6                          0x00002b1eb9579460 __libc_start_main +
    245

    6    tmpgd2hcocb                        0x00005598407b5169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    let sum = array.first! + array.last!\n    if sum % 2 == 0 {\n\
    \        return array.sorted(by: >)\n    } else {\n        return array.sorted()\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6rjsx2y1/tmp6rjsx2y1.swift:17: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b85bbdd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85bbaca561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b85bbaca286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b85bbaca13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b85bbac9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6rjsx2y1                        0x0000564fff118f7b <unavailable> + 8059

    6    tmp6rjsx2y1                        0x0000564fff11859d <unavailable> + 5533

    7    libc.so.6                          0x00002b85bbfbf460 __libc_start_main +
    245

    8    tmp6rjsx2y1                        0x0000564fff1182a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    guard !array.isEmpty else { return array }\n    return [array.first!].reduce(into:\
    \ Array(array.dropFirst())) { (result, _) in\n        guard !result.isEmpty else\
    \ { return }\n        let sum = result.first! + result.last!\n        if sum %\
    \ 2 == 0 {\n            result.sort { $0 > $1 }\n        } else {\n          \
    \  result.sort { $0 < $1 }\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9t0_yw3f/tmp9t0_yw3f.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6f403ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6f3d31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6f3d31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6f3d307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9t0_yw3f                        0x000055ffe46048fd <unavailable> + 6397

    5    libc.so.6                          0x00002ab6f4226460 __libc_start_main +
    245

    6    tmp9t0_yw3f                        0x000055ffe4604449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    // your code here\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpn4_r4wy9/tmpn4_r4wy9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ee81c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ee7ebeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ee7ebe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ee7ebd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn4_r4wy9                        0x000055fbaeff75e6 <unavailable> + 5606

    5    libc.so.6                          0x00002b4ee83b3460 __libc_start_main +
    245

    6    tmpn4_r4wy9                        0x000055fbaeff6fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660014002
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    var result = array\n    let count = array.count\n    for i in\
    \ 0..<count - 1 {\n        var min_j = i\n        for j in i + 1..<count {\n \
    \           if (i + j) % 2 == 1 && result[j] < result[min_j] {\n             \
    \   min_j = j\n            } else if (i + j) % 2 == 0 && result[j] > result[min_j]\
    \ {\n                min_j = j\n            }\n        }\n        if i != min_j\
    \ {\n            result.swapAt(i, min_j)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b04b18f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04b15eb561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b04b15eb286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b04b15eb13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b04b15eabb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpznlh4ene                        0x000055e5b19e0ff7 <unavailable> + 8183

    6    tmpznlh4ene                        0x000055e5b19e059d <unavailable> + 5533

    7    libc.so.6                          0x00002b04b1ae0460 __libc_start_main +
    245

    8    tmpznlh4ene                        0x000055e5b19e02a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014003
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpbpqw_lgu/tmpbpqw_lgu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acef9a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acef9779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acef9779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acef97787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbpqw_lgu                        0x00005577392b65e6 <unavailable> + 5606

    5    libc.so.6                          0x00002acef9c6e460 __libc_start_main +
    245

    6    tmpbpqw_lgu                        0x00005577392b5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6osmd47x/tmp6osmd47x.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae585ccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5859c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5859c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5859c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6osmd47x                        0x000055ef41ae647d <unavailable> + 5245

    5    libc.so.6                          0x00002ae585eb9460 __libc_start_main +
    245

    6    tmp6osmd47x                        0x000055ef41ae5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013819
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a coswift of the\
    \ given array after sorting,\n/// you will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\n/// or sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    /// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array:\
    \ [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n///\
    \ >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array:\
    \ [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int])\
    \ -> [Int] {\n    return [Int]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpamu9rah4/tmpamu9rah4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e34298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e33f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e33f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e33f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpamu9rah4                        0x000055e960f344dd <unavailable> + 5341

    5    libc.so.6                          0x00002b9e34484460 __libc_start_main +
    245

    6    tmpamu9rah4                        0x000055e960f34029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660014001
