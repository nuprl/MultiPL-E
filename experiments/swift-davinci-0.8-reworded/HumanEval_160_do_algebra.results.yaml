language: swift
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var total = operand[0]\n    for i in\
    \ 0..<operator.count {\n        if operator[i] == \"+\" {\n            total +=\
    \ operand[i+1]\n        } else if operator[i] == \"-\" {\n            total -=\
    \ operand[i+1]\n        } else if operator[i] == \"*\" {\n            total *=\
    \ operand[i+1]\n        } else if operator[i] == \"//\" {\n            total /=\
    \ operand[i+1]\n        } else if operator[i] == \"**\" {\n            total =\
    \ Int(pow(Double(total), Double(operand[i+1])))\n        }\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdnbywhzd.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpdnbywhzd.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpdnbywhzd.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmpdnbywhzd.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmpdnbywhzd.swift:25:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmpdnbywhzd.swift:25:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmpdnbywhzd.swift:27:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmpdnbywhzd.swift:27:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmpdnbywhzd.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmpdnbywhzd.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmpdnbywhzd.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmpdnbywhzd.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var computed = [Int]()\n    var count\
    \ = 0\n    for index in 0..<operator.count {\n        if operator[index] == \"\
    *\" {\n            computed.append(operand[index] * operand[index + 1])\n    \
    \        count += 1\n        } else if operator[index] == \"/\" {\n          \
    \  computed.append(operand[index] / operand[index + 1])\n            count +=\
    \ 1\n        } else if operator[index] == \"-\" {\n            computed.append(operand[index]\
    \ - operand[index + 1])\n            count += 1\n        } else if operator[index]\
    \ == \"+\" {\n            computed.append(operand[index] + operand[index + 1])\n\
    \            count += 1\n        } else if operator[index] == \"^\" {\n      \
    \      computed.append(operand[index] ^ operand[index + 1])\n            count\
    \ += 1\n        }\n    }\n    var answer = 0\n    var index = 0\n    if computed.count\
    \ == 1 {\n        return computed[0]\n    }\n    while count > 0 {\n        answer\
    \ += computed[index]\n        index += 1\n        count -= 1\n    }\n    return\
    \ answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpec9gtwoq.swift:23:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpec9gtwoq.swift:23:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpec9gtwoq.swift:24:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[index] == \"*\" {\n     \
    \      ^\n/tmp/tmpec9gtwoq.swift:24:20: error: '[' is not allowed in operator\
    \ names\n        if operator[index] == \"*\" {\n                   ^\n/tmp/tmpec9gtwoq.swift:27:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[index] == \"/\" {\n                  ^\n/tmp/tmpec9gtwoq.swift:27:27:\
    \ error: '[' is not allowed in operator names\n        } else if operator[index]\
    \ == \"/\" {\n                          ^\n/tmp/tmpec9gtwoq.swift:30:19: error:\
    \ expected expression, var, or let in 'if' condition\n        } else if operator[index]\
    \ == \"-\" {\n                  ^\n/tmp/tmpec9gtwoq.swift:30:27: error: '[' is\
    \ not allowed in operator names\n        } else if operator[index] == \"-\" {\n\
    \                          ^\n/tmp/tmpec9gtwoq.swift:33:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[index] == \"+\" {\n\
    \                  ^\n/tmp/tmpec9gtwoq.swift:33:27: error: '[' is not allowed\
    \ in operator names\n        } else if operator[index] == \"+\" {\n          \
    \                ^\n/tmp/tmpec9gtwoq.swift:36:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[index] == \"^\" {\n\
    \                  ^\n/tmp/tmpec9gtwoq.swift:36:27: error: '[' is not allowed\
    \ in operator names\n        } else if operator[index] == \"^\" {\n          \
    \                ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var result = operand[0]\n  for i in 0..<operator.count\
    \ {\n    switch operator[i] {\n    case \"+\":\n      result += operand[i + 1]\n\
    \    case \"-\":\n      result -= operand[i + 1]\n    case \"*\":\n      result\
    \ *= operand[i + 1]\n    case \"//\":\n      result /= operand[i + 1]\n    case\
    \ \"**\":\n      result = Int(pow(Double(result), Double(operand[i + 1])))\n \
    \   default:\n      break\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpus7kk8fi.swift:22:16: error: expected expression after operator\n\
    \  for i in 0..<operator.count {\n               ^\n/tmp/tmpus7kk8fi.swift:22:16:\
    \ error: expected '{' to start the body of for-each loop\n  for i in 0..<operator.count\
    \ {\n               ^\n/tmp/tmpus7kk8fi.swift:23:12: error: expected expression\
    \ in 'switch' statement\n    switch operator[i] {\n           ^\n/tmp/tmpus7kk8fi.swift:23:20:\
    \ error: '[' is not allowed in operator names\n    switch operator[i] {\n    \
    \               ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0 ..< operator.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfkecbw4f.swift:22:20: error: expected expression after operator\n\
    \    for i in 0 ..< operator.count {\n                   ^\n/tmp/tmpfkecbw4f.swift:22:20:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0 ..< operator.count\
    \ {\n                   ^\n/tmp/tmpfkecbw4f.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpfkecbw4f.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            res += operand[i+1]\n\
    \        case \"-\":\n            res -= operand[i+1]\n        case \"*\":\n \
    \           res *= operand[i+1]\n        case \"//\":\n            res /= operand[i+1]\n\
    \        case \"**\":\n            res = Int(pow(Double(res), Double(operand[i+1])))\n\
    \        default:\n            return -1\n        }\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_6vzcgsz.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp_6vzcgsz.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp_6vzcgsz.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp_6vzcgsz.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index + 1]\n        case \"-\":\n           \
    \ result -= operand[index + 1]\n        case \"*\":\n            result *= operand[index\
    \ + 1]\n        case \"//\":\n            result /= operand[index + 1]\n     \
    \   case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbda9c79u.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpbda9c79u.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpbda9c79u.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpbda9c79u.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operandStack: [Int] = []\n    for\
    \ index in 0..<operand.count {\n        if index == 0 {\n            operandStack.append(operand[index])\n\
    \        } else {\n            let result = do_operation(operandStack.removeLast(),\
    \ operand[index], operator[index - 1])\n            operandStack.append(result)\n\
    \        }\n    }\n    return operandStack.first!\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpr69ztgy0.swift:26:82: error: expected expression in list of expressions\n\
    \            let result = do_operation(operandStack.removeLast(), operand[index],\
    \ operator[index - 1])\n                                                     \
    \                            ^\n/tmp/tmpr69ztgy0.swift:26:81: error: consecutive\
    \ statements on a line must be separated by ';'\n            let result = do_operation(operandStack.removeLast(),\
    \ operand[index], operator[index - 1])\n                                     \
    \                                           ^\n                              \
    \                                                  ;\n/tmp/tmpr69ztgy0.swift:26:90:\
    \ error: '[' is not allowed in operator names\n            let result = do_operation(operandStack.removeLast(),\
    \ operand[index], operator[index - 1])\n                                     \
    \                                                    ^\n/tmp/tmpr69ztgy0.swift:26:26:\
    \ error: cannot find 'do_operation' in scope\n            let result = do_operation(operandStack.removeLast(),\
    \ operand[index], operator[index - 1])\n                         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp8s6qq16s/tmp8s6qq16s.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab814635c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab81432cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab81432c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab81432b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8s6qq16s                        0x000055f50f49247b <unavailable> + 5243

    5    libc.so.6                          0x00002ab814821460 __libc_start_main +
    245

    6    tmp8s6qq16s                        0x000055f50f492029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var value = operand[0]\n    var op_array\
    \ = operator\n    var num_array = operand\n    while op_array.count > 0 {\n  \
    \      if op_array[0] == \"+\" {\n            value += num_array[1]\n        }\
    \ else if op_array[0] == \"-\" {\n            value -= num_array[1]\n        }\
    \ else if op_array[0] == \"*\" {\n            value *= num_array[1]\n        }\
    \ else if op_array[0] == \"//\" {\n            value /= num_array[1]\n       \
    \ } else if op_array[0] == \"**\" {\n            value = Int(pow(Double(value),\
    \ Double(num_array[1])))\n        }\n        op_array.removeFirst()\n        num_array.removeFirst()\n\
    \    }\n    return value\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4f13i4ep.swift:22:20: error: expected initial value after '='\n\
    \    var op_array = operator\n                   ^\n/tmp/tmp4f13i4ep.swift:22:19:\
    \ error: consecutive statements on a line must be separated by ';'\n    var op_array\
    \ = operator\n                  ^\n                  ;\n/tmp/tmp4f13i4ep.swift:22:28:\
    \ error: expected operator name in operator declaration\n    var op_array = operator\n\
    \                           ^\n/tmp/tmp4f13i4ep.swift:34:25: error: cannot find\
    \ 'pow' in scope\n            value = Int(pow(Double(value), Double(num_array[1])))\n\
    \                        ^~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard !operator.isEmpty && !operand.isEmpty\
    \ else { return 0 }\n    guard operator.count + 1 == operand.count else { return\
    \ 0 }\n    var result = operand[0]\n    for i in 0..<operator.count {\n      \
    \  switch operator[i] {\n        case \"+\":\n            result += operand[i\
    \ + 1]\n        case \"-\":\n            result -= operand[i + 1]\n        case\
    \ \"*\":\n            result *= operand[i + 1]\n        case \"//\":\n       \
    \     result /= operand[i + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n        default:\n            break\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpqhb62_3n.swift:21:12: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard !operator.isEmpty && !operand.isEmpty else {\
    \ return 0 }\n           ^\n/tmp/tmpqhb62_3n.swift:21:20: error: '.' is not allowed\
    \ in operator names\n    guard !operator.isEmpty && !operand.isEmpty else { return\
    \ 0 }\n                   ^\n/tmp/tmpqhb62_3n.swift:22:11: error: expected expression,\
    \ var, let or case in 'guard' condition\n    guard operator.count + 1 == operand.count\
    \ else { return 0 }\n          ^\n/tmp/tmpqhb62_3n.swift:22:19: error: '.' is\
    \ not allowed in operator names\n    guard operator.count + 1 == operand.count\
    \ else { return 0 }\n                  ^\n/tmp/tmpqhb62_3n.swift:24:18: error:\
    \ expected expression after operator\n    for i in 0..<operator.count {\n    \
    \             ^\n/tmp/tmpqhb62_3n.swift:24:18: error: expected '{' to start the\
    \ body of for-each loop\n    for i in 0..<operator.count {\n                 ^\n\
    /tmp/tmpqhb62_3n.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpqhb62_3n.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpg60_blx1.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpg60_blx1.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpg60_blx1.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpg60_blx1.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\t\n\tvar result = operand[0]\n\t\n\tfor\
    \ i in 0..<operator.count {\n\t\tswitch operator[i] {\n\t\tcase \"+\":\n\t\t\t\
    result += operand[i+1]\n\t\tcase \"-\":\n\t\t\tresult -= operand[i+1]\n\t\tcase\
    \ \"*\":\n\t\t\tresult *= operand[i+1]\n\t\tcase \"//\":\n\t\t\tresult /= operand[i+1]\n\
    \t\tcase \"**\":\n\t\t\tresult = Int(pow(Double(result), Double(operand[i+1])))\n\
    \t\tdefault:\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprcbin4v1.swift:24:15: error: expected expression after operator\n\
    \        for i in 0..<operator.count {\n                     ^\n/tmp/tmprcbin4v1.swift:24:15:\
    \ error: expected '{' to start the body of for-each loop\n        for i in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmprcbin4v1.swift:25:10: error: expected expression\
    \ in 'switch' statement\n                switch operator[i] {\n              \
    \         ^\n/tmp/tmprcbin4v1.swift:25:18: error: '[' is not allowed in operator\
    \ names\n                switch operator[i] {\n                              \
    \ ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ < 2 {\n        return 0\n    }\n    var result = operand[0]\n    for index in\
    \ 0..<operator.count {\n        if operator[index] == \"+\" {\n            result\
    \ += operand[index + 1]\n        } else if operator[index] == \"-\" {\n      \
    \      result -= operand[index + 1]\n        } else if operator[index] == \"*\"\
    \ {\n            result *= operand[index + 1]\n        } else if operator[index]\
    \ == \"//\" {\n            result /= operand[index + 1]\n        } else if operator[index]\
    \ == \"**\" {\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgrshwfw_.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count < 2 {\n       ^\n\
    /tmp/tmpgrshwfw_.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count < 2 {\n               ^\n/tmp/tmpgrshwfw_.swift:25:22:\
    \ error: expected expression after operator\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpgrshwfw_.swift:25:22: error: expected '{'\
    \ to start the body of for-each loop\n    for index in 0..<operator.count {\n\
    \                     ^\n/tmp/tmpgrshwfw_.swift:26:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[index] == \"+\" {\n     \
    \      ^\n/tmp/tmpgrshwfw_.swift:26:20: error: '[' is not allowed in operator\
    \ names\n        if operator[index] == \"+\" {\n                   ^\n/tmp/tmpgrshwfw_.swift:28:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[index] == \"-\" {\n                  ^\n/tmp/tmpgrshwfw_.swift:28:27:\
    \ error: '[' is not allowed in operator names\n        } else if operator[index]\
    \ == \"-\" {\n                          ^\n/tmp/tmpgrshwfw_.swift:30:19: error:\
    \ expected expression, var, or let in 'if' condition\n        } else if operator[index]\
    \ == \"*\" {\n                  ^\n/tmp/tmpgrshwfw_.swift:30:27: error: '[' is\
    \ not allowed in operator names\n        } else if operator[index] == \"*\" {\n\
    \                          ^\n/tmp/tmpgrshwfw_.swift:32:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[index] == \"//\" {\n\
    \                  ^\n/tmp/tmpgrshwfw_.swift:32:27: error: '[' is not allowed\
    \ in operator names\n        } else if operator[index] == \"//\" {\n         \
    \                 ^\n/tmp/tmpgrshwfw_.swift:34:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[index] == \"**\" {\n\
    \                  ^\n/tmp/tmpgrshwfw_.swift:34:27: error: '[' is not allowed\
    \ in operator names\n        } else if operator[index] == \"**\" {\n         \
    \                 ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operand.count == 0 {\n        return\
    \ 0\n    }\n    else if operand.count == 1 {\n        return operand[0]\n    }\n\
    \    else {\n        var result = operand[0]\n        for i in 0..<operator.count\
    \ {\n            switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \            default:\n                break\n            }\n        }\n     \
    \   return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprlw3ifx3.swift:29:22: error: expected expression after operator\n\
    \        for i in 0..<operator.count {\n                     ^\n/tmp/tmprlw3ifx3.swift:29:22:\
    \ error: expected '{' to start the body of for-each loop\n        for i in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmprlw3ifx3.swift:30:20: error: expected expression\
    \ in 'switch' statement\n            switch operator[i] {\n                  \
    \ ^\n/tmp/tmprlw3ifx3.swift:30:28: error: '[' is not allowed in operator names\n\
    \            switch operator[i] {\n                           ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  //TODO: implement your algorithm here\n\
    \  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp7ajwaqb0/tmp7ajwaqb0.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c9e78ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c9e485b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c9e485988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c9e4847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ajwaqb0                        0x000055ab32ebb47b <unavailable> + 5243

    5    libc.so.6                          0x00002b0c9e97a460 __libc_start_main +
    245

    6    tmp7ajwaqb0                        0x000055ab32ebb029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for (index,\
    \ element) in operand.enumerated() {\n        if index == 0 {\n            continue\n\
    \        }\n        let operation = operator[index - 1]\n        switch operation\
    \ {\n        case \"+\":\n            result += element\n        case \"-\":\n\
    \            result -= element\n        case \"*\":\n            result *= element\n\
    \        case \"//\":\n            result /= element\n        case \"**\":\n \
    \           result = Int(pow(Double(result), Double(element)))\n        default:\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmpwcfsw7.swift:26:25: error: expected initial value after '='\n\
    \        let operation = operator[index - 1]\n                        ^\n/tmp/tmpmpwcfsw7.swift:26:24:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ operation = operator[index - 1]\n                       ^\n                \
    \       ;\n/tmp/tmpmpwcfsw7.swift:26:33: error: '[' is not allowed in operator\
    \ names\n        let operation = operator[index - 1]\n                       \
    \         ^\n/tmp/tmpmpwcfsw7.swift:37:26: error: cannot find 'pow' in scope\n\
    \            result = Int(pow(Double(result), Double(element)))\n            \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var i =\
    \ 0\n    while i < operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i + 1]\n        case \"-\":\n        \
    \    result -= operand[i + 1]\n        case \"*\":\n            result *= operand[i\
    \ + 1]\n        case \"//\":\n            result /= operand[i + 1]\n        case\
    \ \"**\":\n            result = pow(result, operand[i + 1])\n        default:\n\
    \            break\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9508adz1.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmp9508adz1.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let equations = operand.reduce((0, [])\
    \ as (Int, [Int]), {\n        (accumulator, current) in\n        (current, accumulator.1\
    \ + [current])\n    }).1.reduce((0, []) as (Int, [Int]), {\n        (accumulator,\
    \ current) in\n        let operation = operator.isEmpty ? \"\" : operator.remove(at:\
    \ 0)\n        switch operation {\n        case \"+\":\n            return (accumulator.0\
    \ + current, accumulator.1 + [accumulator.0 + current])\n        case \"-\":\n\
    \            return (accumulator.0 - current, accumulator.1 + [accumulator.0 -\
    \ current])\n        case \"*\":\n            return (accumulator.0 * current,\
    \ accumulator.1 + [accumulator.0 * current])\n        case \"//\":\n         \
    \   return (accumulator.0 / current, accumulator.1 + [accumulator.0 / current])\n\
    \        case \"**\":\n            return (Int(pow(Double(accumulator.0), Double(current))),\
    \ accumulator.1 + [Int(pow(Double(accumulator.0), Double(current)))])\n      \
    \  default:\n            return (current, accumulator.1 + [current])\n       \
    \ }\n    }).1.last!\n    return equations\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpktogsxsu.swift:26:25: error: expected initial value after '='\n\
    \        let operation = operator.isEmpty ? \"\" : operator.remove(at: 0)\n  \
    \                      ^\n/tmp/tmpktogsxsu.swift:26:24: error: consecutive statements\
    \ on a line must be separated by ';'\n        let operation = operator.isEmpty\
    \ ? \"\" : operator.remove(at: 0)\n                       ^\n                \
    \       ;\n/tmp/tmpktogsxsu.swift:26:33: error: '.' is not allowed in operator\
    \ names\n        let operation = operator.isEmpty ? \"\" : operator.remove(at:\
    \ 0)\n                                ^\n/tmp/tmpktogsxsu.swift:26:57: error:\
    \ '.' is not allowed in operator names\n        let operation = operator.isEmpty\
    \ ? \"\" : operator.remove(at: 0)\n                                          \
    \              ^\n/tmp/tmpktogsxsu.swift:37:25: error: cannot find 'pow' in scope\n\
    \            return (Int(pow(Double(accumulator.0), Double(current))), accumulator.1\
    \ + [Int(pow(Double(accumulator.0), Double(current)))])\n                    \
    \    ^~~\n/tmp/tmpktogsxsu.swift:37:92: error: cannot find 'pow' in scope\n  \
    \          return (Int(pow(Double(accumulator.0), Double(current))), accumulator.1\
    \ + [Int(pow(Double(accumulator.0), Double(current)))])\n                    \
    \                                                                       ^~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var operands\
    \ = operand\n    operands.removeFirst()\n    for (index, op) in operator.enumerated()\
    \ {\n        switch op {\n        case \"+\":\n            result += operands[index]\n\
    \        case \"-\":\n            result -= operands[index]\n        case \"*\"\
    :\n            result *= operands[index]\n        case \"//\":\n            result\
    \ /= operands[index]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operands[index])))\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprhsz_5x8.swift:24:24: error: expected Sequence expression for for-each\
    \ loop\n    for (index, op) in operator.enumerated() {\n                     \
    \  ^\n/tmp/tmprhsz_5x8.swift:24:24: error: expected '{' to start the body of for-each\
    \ loop\n    for (index, op) in operator.enumerated() {\n                     \
    \  ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operands = operand\n    var operators\
    \ = operator\n    var result = [operands.removeFirst()]\n    while !operators.isEmpty\
    \ {\n        let op = operators.removeFirst()\n        let op2 = operands.removeFirst()\n\
    \        result.append(op)\n        result.append(op2)\n        switch op {\n\
    \        case \"+\":\n            result[result.count - 3] += op2\n        case\
    \ \"-\":\n            result[result.count - 3] -= op2\n        case \"*\":\n \
    \           result[result.count - 3] *= op2\n        case \"//\":\n          \
    \  result[result.count - 3] /= op2\n        case \"**\":\n            result[result.count\
    \ - 3] = Int(pow(Double(result[result.count - 3]), Double(op2)))\n        default:\n\
    \            break\n        }\n    }\n    return result.last!\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp0ropx41a.swift:22:21: error: expected initial value after '='\n\
    \    var operators = operator\n                    ^\n/tmp/tmp0ropx41a.swift:22:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    var operators\
    \ = operator\n                   ^\n                   ;\n/tmp/tmp0ropx41a.swift:22:29:\
    \ error: expected operator name in operator declaration\n    var operators = operator\n\
    \                            ^\n/tmp/tmp0ropx41a.swift:39:44: error: cannot find\
    \ 'pow' in scope\n            result[result.count - 3] = Int(pow(Double(result[result.count\
    \ - 3]), Double(op2)))\n                                           ^~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var num = operand[0]\n    for i in 0..<operator.count\
    \ {\n        if operator[i] == \"+\" {\n            num += operand[i+1]\n    \
    \    } else if operator[i] == \"-\" {\n            num -= operand[i+1]\n     \
    \   } else if operator[i] == \"*\" {\n            num *= operand[i+1]\n      \
    \  } else if operator[i] == \"//\" {\n            num /= operand[i+1]\n      \
    \  } else if operator[i] == \"**\" {\n            num = Int(pow(Double(num), Double(operand[i+1])))\n\
    \        }\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp53cll8mu.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp53cll8mu.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp53cll8mu.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmp53cll8mu.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmp53cll8mu.swift:25:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmp53cll8mu.swift:25:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmp53cll8mu.swift:27:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmp53cll8mu.swift:27:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmp53cll8mu.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmp53cll8mu.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmp53cll8mu.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmp53cll8mu.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var x = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            x += operand[i+1]\n\
    \        case \"-\":\n            x -= operand[i+1]\n        case \"*\":\n   \
    \         x *= operand[i+1]\n        case \"//\":\n            x /= operand[i+1]\n\
    \        case \"**\":\n            x = Int(pow(Double(x), Double(operand[i+1])))\n\
    \        default:\n            return 0\n        }\n    }\n    return x\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpaby2ol3x.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpaby2ol3x.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpaby2ol3x.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpaby2ol3x.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var counter\
    \ = 0\n    for i in 0..<operator.count {\n        switch operator[i] {\n     \
    \   case \"+\":\n            result += operand[i + 1]\n        case \"-\":\n \
    \           result -= operand[i + 1]\n        case \"*\":\n            result\
    \ *= operand[i + 1]\n        case \"//\":\n            result /= operand[i + 1]\n\
    \        case \"**\":\n            counter = operand[i + 1]\n            for _\
    \ in 0..<counter {\n                result *= result\n            }\n        default:\n\
    \            result = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3v7dl1e1.swift:23:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp3v7dl1e1.swift:23:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp3v7dl1e1.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp3v7dl1e1.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operand = operand\n    var index\
    \ = 0\n    while index < operator.count {\n        var op = operator[index]\n\
    \        if op == \"*\" {\n            operand[index] *= operand[index + 1]\n\
    \            operand.remove(at: index + 1)\n            operator.remove(at: index)\n\
    \        } else if op == \"/\" {\n            operand[index] /= operand[index\
    \ + 1]\n            operand.remove(at: index + 1)\n            operator.remove(at:\
    \ index)\n        } else if op == \"**\" {\n            operand[index] = Int(pow(Double(operand[index]),\
    \ Double(operand[index + 1])))\n            operand.remove(at: index + 1)\n  \
    \          operator.remove(at: index)\n        } else {\n            index +=\
    \ 1\n        }\n    }\n    index = 0\n    while index < operator.count {\n   \
    \     var op = operator[index]\n        if op == \"+\" {\n            operand[index]\
    \ += operand[index + 1]\n            operand.remove(at: index + 1)\n         \
    \   operator.remove(at: index)\n        } else if op == \"-\" {\n            operand[index]\
    \ -= operand[index + 1]\n            operand.remove(at: index + 1)\n         \
    \   operator.remove(at: index)\n        } else {\n            index += 1\n   \
    \     }\n    }\n    return operand[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwld6ek8v.swift:23:19: error: expected expression after operator\n\
    \    while index < operator.count {\n                  ^\n/tmp/tmpwld6ek8v.swift:23:27:\
    \ error: '.' is not allowed in operator names\n    while index < operator.count\
    \ {\n                          ^\n/tmp/tmpwld6ek8v.swift:42:19: error: expected\
    \ expression after operator\n    while index < operator.count {\n            \
    \      ^\n/tmp/tmpwld6ek8v.swift:42:27: error: '.' is not allowed in operator\
    \ names\n    while index < operator.count {\n                          ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operand = operand.reversed()\n \
    \   var result = operand.popLast()!\n    for (idx, op) in operator.enumerated()\
    \ {\n        switch op {\n        case \"+\":\n            result += operand[idx]\n\
    \        case \"-\":\n            result -= operand[idx]\n        case \"*\":\n\
    \            result *= operand[idx]\n        case \"//\":\n            result\
    \ /= operand[idx]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[idx])))\n        default:\n            break\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvcuoc97p.swift:23:22: error: expected Sequence expression for for-each\
    \ loop\n    for (idx, op) in operator.enumerated() {\n                     ^\n\
    /tmp/tmpvcuoc97p.swift:23:22: error: expected '{' to start the body of for-each\
    \ loop\n    for (idx, op) in operator.enumerated() {\n                     ^\n\
    /tmp/tmpvcuoc97p.swift:22:18: error: referencing instance method 'popLast()' on\
    \ 'BidirectionalCollection' requires the types 'ReversedCollection<[Int]>' and\
    \ 'Slice<ReversedCollection<[Int]>>' be equivalent\n    var result = operand.popLast()!\n\
    \                 ^\nSwift.BidirectionalCollection:1:11: note: where 'Self' =\
    \ 'ReversedCollection<[Int]>', 'Self.SubSequence' = 'Slice<ReversedCollection<[Int]>>'\n\
    extension BidirectionalCollection where Self == Self.SubSequence {\n         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var result = operand[0]\n  for i in 0..<operator.count\
    \ {\n    switch operator[i] {\n    case \"+\":\n      result += operand[i + 1]\n\
    \    case \"-\":\n      result -= operand[i + 1]\n    case \"*\":\n      result\
    \ *= operand[i + 1]\n    case \"//\":\n      result /= operand[i + 1]\n    case\
    \ \"**\":\n      result = Int(pow(Double(result), Double(operand[i + 1])))\n \
    \   default:\n      result = 0\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfk0mtov9.swift:22:16: error: expected expression after operator\n\
    \  for i in 0..<operator.count {\n               ^\n/tmp/tmpfk0mtov9.swift:22:16:\
    \ error: expected '{' to start the body of for-each loop\n  for i in 0..<operator.count\
    \ {\n               ^\n/tmp/tmpfk0mtov9.swift:23:12: error: expected expression\
    \ in 'switch' statement\n    switch operator[i] {\n           ^\n/tmp/tmpfk0mtov9.swift:23:20:\
    \ error: '[' is not allowed in operator names\n    switch operator[i] {\n    \
    \               ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            res += operand[i+1]\n\
    \        case \"-\":\n            res -= operand[i+1]\n        case \"*\":\n \
    \           res *= operand[i+1]\n        case \"//\":\n            res /= operand[i+1]\n\
    \        case \"**\":\n            res = Int(pow(Double(res), Double(operand[i+1])))\n\
    \        default:\n            break\n        }\n    }\n    return res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_zjj69rl.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp_zjj69rl.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp_zjj69rl.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp_zjj69rl.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var op = operator, opnd = operand\n\
    \    var res = opnd.removeFirst()\n    while !op.isEmpty {\n        switch op.removeFirst()\
    \ {\n        case \"+\": res += opnd.removeFirst()\n        case \"-\": res -=\
    \ opnd.removeFirst()\n        case \"*\": res *= opnd.removeFirst()\n        case\
    \ \"//\": res /= opnd.removeFirst()\n        case \"**\": res ^= opnd.removeFirst()\n\
    \        default: return 0\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp90s7yiv_.swift:21:14: error: expected initial value after '='\n\
    \    var op = operator, opnd = operand\n             ^\n/tmp/tmp90s7yiv_.swift:21:13:\
    \ error: consecutive statements on a line must be separated by ';'\n    var op\
    \ = operator, opnd = operand\n            ^\n            ;\n/tmp/tmp90s7yiv_.swift:21:22:\
    \ error: ',' is not allowed in operator names\n    var op = operator, opnd = operand\n\
    \                     ^\n/tmp/tmp90s7yiv_.swift:22:15: error: cannot find 'opnd'\
    \ in scope\n    var res = opnd.removeFirst()\n              ^~~~\n/tmp/tmp90s7yiv_.swift:25:26:\
    \ error: cannot find 'opnd' in scope\n        case \"+\": res += opnd.removeFirst()\n\
    \                         ^~~~\n/tmp/tmp90s7yiv_.swift:26:26: error: cannot find\
    \ 'opnd' in scope\n        case \"-\": res -= opnd.removeFirst()\n           \
    \              ^~~~\n/tmp/tmp90s7yiv_.swift:27:26: error: cannot find 'opnd' in\
    \ scope\n        case \"*\": res *= opnd.removeFirst()\n                     \
    \    ^~~~\n/tmp/tmp90s7yiv_.swift:28:27: error: cannot find 'opnd' in scope\n\
    \        case \"//\": res /= opnd.removeFirst()\n                          ^~~~\n\
    /tmp/tmp90s7yiv_.swift:29:27: error: cannot find 'opnd' in scope\n        case\
    \ \"**\": res ^= opnd.removeFirst()\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\treturn 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpp5lex5j5/tmpp5lex5j5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2605978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b260566fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b260566f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b260566e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5lex5j5                        0x000055941fcab47b <unavailable> + 5243

    5    libc.so.6                          0x00002b2605b64460 __libc_start_main +
    245

    6    tmpp5lex5j5                        0x000055941fcab029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var index\
    \ = 0\n    while index < operator.count {\n        switch operator[index] {\n\
    \        case \"+\":\n            result += operand[index + 1]\n        case \"\
    -\":\n            result -= operand[index + 1]\n        case \"*\":\n        \
    \    result *= operand[index + 1]\n        case \"//\":\n            result /=\
    \ operand[index + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[index + 1])))\n        default:\n            break\n        }\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1jhfwy8h.swift:23:19: error: expected expression after operator\n\
    \    while index < operator.count {\n                  ^\n/tmp/tmp1jhfwy8h.swift:23:27:\
    \ error: '.' is not allowed in operator names\n    while index < operator.count\
    \ {\n                          ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var result = operand[0]\n  for i in 0..<operator.count\
    \ {\n    switch operator[i] {\n    case \"+\":\n      result += operand[i + 1]\n\
    \    case \"-\":\n      result -= operand[i + 1]\n    case \"*\":\n      result\
    \ *= operand[i + 1]\n    case \"//\":\n      result /= operand[i + 1]\n    case\
    \ \"**\":\n      result = Int(pow(Double(result), Double(operand[i + 1])))\n \
    \   default:\n      print(\"error\")\n    }\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7hhgr4_e.swift:22:16: error: expected expression after operator\n\
    \  for i in 0..<operator.count {\n               ^\n/tmp/tmp7hhgr4_e.swift:22:16:\
    \ error: expected '{' to start the body of for-each loop\n  for i in 0..<operator.count\
    \ {\n               ^\n/tmp/tmp7hhgr4_e.swift:23:12: error: expected expression\
    \ in 'switch' statement\n    switch operator[i] {\n           ^\n/tmp/tmp7hhgr4_e.swift:23:20:\
    \ error: '[' is not allowed in operator names\n    switch operator[i] {\n    \
    \               ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var preValue = operand[0]\n    var preOperand\
    \ = operand[1]\n    var index = 1\n    while index < operand.count - 1 {\n   \
    \     let symbol = operator[index - 1]\n        let value = operand[index + 1]\n\
    \        switch symbol {\n        case \"+\":\n            preValue = preValue\
    \ + preOperand\n            preOperand = value\n        case \"-\":\n        \
    \    preValue = preValue - preOperand\n            preOperand = value\n      \
    \  case \"*\":\n            preValue = preValue * preOperand\n            preOperand\
    \ = value\n        case \"//\":\n            preValue = preValue / preOperand\n\
    \            preOperand = value\n        case \"**\":\n            preValue =\
    \ Int(pow(Double(preValue), Double(preOperand)))\n            preOperand = value\n\
    \        default:\n            return 0\n        }\n        index += 1\n    }\n\
    \    switch operator[index - 1] {\n    case \"+\":\n        return preValue +\
    \ preOperand\n    case \"-\":\n        return preValue - preOperand\n    case\
    \ \"*\":\n        return preValue * preOperand\n    case \"//\":\n        return\
    \ preValue / preOperand\n    case \"**\":\n        return Int(pow(Double(preValue),\
    \ Double(preOperand)))\n    default:\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbxgeae4b.swift:25:22: error: expected initial value after '='\n\
    \        let symbol = operator[index - 1]\n                     ^\n/tmp/tmpbxgeae4b.swift:25:21:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ symbol = operator[index - 1]\n                    ^\n                    ;\n\
    /tmp/tmpbxgeae4b.swift:25:30: error: '[' is not allowed in operator names\n  \
    \      let symbol = operator[index - 1]\n                             ^\n/tmp/tmpbxgeae4b.swift:48:12:\
    \ error: expected expression in 'switch' statement\n    switch operator[index\
    \ - 1] {\n           ^\n/tmp/tmpbxgeae4b.swift:48:20: error: '[' is not allowed\
    \ in operator names\n    switch operator[index - 1] {\n                   ^\n\
    /tmp/tmpbxgeae4b.swift:41:28: error: cannot find 'pow' in scope\n            preValue\
    \ = Int(pow(Double(preValue), Double(preOperand)))\n                         \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let operators = operator\n    let operands\
    \ = operand\n    var result = 0\n    var index = 0\n    result = operands[0]\n\
    \    for i in 0..<operators.count {\n        switch operators[i] {\n        case\
    \ \"+\":\n            result += operands[i + 1]\n        case \"-\":\n       \
    \     result -= operands[i + 1]\n        case \"*\":\n            result *= operands[i\
    \ + 1]\n        case \"//\":\n            result /= operands[i + 1]\n        case\
    \ \"**\":\n            result = Int(pow(Double(result), Double(operands[i + 1])))\n\
    \        default:\n            print(\"Invalid Operator\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzaj56i2q.swift:21:21: error: expected initial value after '='\n\
    \    let operators = operator\n                    ^\n/tmp/tmpzaj56i2q.swift:21:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    let operators\
    \ = operator\n                   ^\n                   ;\n/tmp/tmpzaj56i2q.swift:21:29:\
    \ error: expected operator name in operator declaration\n    let operators = operator\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count + 1 != operand.count\
    \ {\n        return 0\n    }\n    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n\
    \        case \"*\":\n            result *= operand[i + 1]\n        case \"//\"\
    :\n            result /= operand[i + 1]\n        case \"**\":\n            result\
    \ = Int(pow(Double(result), Double(operand[i + 1])))\n        default:\n     \
    \       return 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpy1o2ez5_.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count + 1 != operand.count {\n       ^\n/tmp/tmpy1o2ez5_.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count + 1 != operand.count\
    \ {\n               ^\n/tmp/tmpy1o2ez5_.swift:25:18: error: expected expression\
    \ after operator\n    for i in 0..<operator.count {\n                 ^\n/tmp/tmpy1o2ez5_.swift:25:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpy1o2ez5_.swift:26:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpy1o2ez5_.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  // TODO\n  return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpe0gux3o_/tmpe0gux3o_.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36d2966c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36d265db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36d265d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36d265c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0gux3o_                        0x000056048487c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b36d2b52460 __libc_start_main +
    245

    6    tmpe0gux3o_                        0x000056048487c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let op = operator.map { get_operator($0)\
    \ }\n    var stack = [Int]()\n    var current = operand[0]\n    for index in 1..<operand.count\
    \ {\n        let o = op[index - 1]\n        switch o {\n        case .add:\n \
    \           current += operand[index]\n        case .sub:\n            current\
    \ -= operand[index]\n        case .mul:\n            current *= operand[index]\n\
    \        case .div:\n            current /= operand[index]\n        case .pow:\n\
    \            current = Int(pow(Double(current), Double(operand[index])))\n   \
    \     case .none:\n            current = operand[index]\n        }\n    }\n  \
    \  return current\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpt87hf692.swift:21:14: error: expected initial value after '='\n\
    \    let op = operator.map { get_operator($0) }\n             ^\n/tmp/tmpt87hf692.swift:21:13:\
    \ error: consecutive statements on a line must be separated by ';'\n    let op\
    \ = operator.map { get_operator($0) }\n            ^\n            ;\n/tmp/tmpt87hf692.swift:21:22:\
    \ error: '.' is not allowed in operator names\n    let op = operator.map { get_operator($0)\
    \ }\n                     ^\n/tmp/tmpt87hf692.swift:36:27: error: cannot find\
    \ 'pow' in scope\n            current = Int(pow(Double(current), Double(operand[index])))\n\
    \                          ^~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var i =\
    \ 0\n    while i < operator.count {\n        if operator[i] == \"+\" {\n     \
    \       result += operand[i + 1]\n        } else if operator[i] == \"-\" {\n \
    \           result -= operand[i + 1]\n        } else if operator[i] == \"*\" {\n\
    \            result *= operand[i + 1]\n        } else if operator[i] == \"//\"\
    \ {\n            result /= operand[i + 1]\n        } else if operator[i] == \"\
    **\" {\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprsn2pkiy.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmprsn2pkiy.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var queue: [(String, Int)] = []\n  var\
    \ result = 0\n  var a, b = 0\n  for i in 0..<operand.count - 1 {\n    queue.append((operator[i],\
    \ operand[i]))\n    queue.append((operator[i + 1], operand[i + 1]))\n    if i\
    \ == 0 {\n      switch operator[i] {\n      case \"+\":\n        result = operand[i]\
    \ + operand[i + 1]\n      case \"-\":\n        result = operand[i] - operand[i\
    \ + 1]\n      case \"*\":\n        result = operand[i] * operand[i + 1]\n    \
    \  case \"//\":\n        result = operand[i] / operand[i + 1]\n      case \"**\"\
    :\n        result = operand[i] ^ operand[i + 1]\n      default:\n        break\n\
    \      }\n    } else {\n      let current = queue.popLast()!\n      let previous\
    \ = queue.popLast()!\n      switch current.0 {\n      case \"+\":\n        result\
    \ = previous.1 + current.1\n      case \"-\":\n        result = previous.1 - current.1\n\
    \      case \"*\":\n        result = previous.1 * current.1\n      case \"//\"\
    :\n        result = previous.1 / current.1\n      case \"**\":\n        result\
    \ = previous.1 ^ current.1\n      default:\n        break\n      }\n    }\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_uf49460.swift:25:19: error: expected expression in list of expressions\n\
    \    queue.append((operator[i], operand[i]))\n                  ^\n/tmp/tmp_uf49460.swift:25:27:\
    \ error: '[' is not allowed in operator names\n    queue.append((operator[i],\
    \ operand[i]))\n                          ^\n/tmp/tmp_uf49460.swift:28:14: error:\
    \ expected expression in 'switch' statement\n      switch operator[i] {\n    \
    \         ^\n/tmp/tmp_uf49460.swift:28:22: error: '[' is not allowed in operator\
    \ names\n      switch operator[i] {\n                     ^\n/tmp/tmp_uf49460.swift:23:7:\
    \ error: type annotation missing in pattern\n  var a, b = 0\n      ^\n/tmp/tmp_uf49460.swift:25:18:\
    \ error: cannot convert value of type '()' to expected argument type '(String,\
    \ Int)'\n    queue.append((operator[i], operand[i]))\n                 ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var ans = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            ans += operand[i+1]\n\
    \        case \"-\":\n            ans -= operand[i+1]\n        case \"*\":\n \
    \           ans *= operand[i+1]\n        case \"//\":\n            ans /= operand[i+1]\n\
    \        case \"**\":\n            ans = Int(pow(Double(ans), Double(operand[i+1])))\n\
    \        default:\n            return 0\n        }\n    }\n    return ans\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1waxnyod.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp1waxnyod.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp1waxnyod.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp1waxnyod.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let newOperator = operator.map { String($0)\
    \ }\n    let newOperand = operand.map { String($0) }\n    var result = \"\"\n\
    \    result += newOperand[0]\n    for i in 0..<newOperator.count {\n        result\
    \ += newOperator[i]\n        result += newOperand[i + 1]\n    }\n    return Int(result)!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkibe2pnw.swift:21:23: error: expected initial value after '='\n\
    \    let newOperator = operator.map { String($0) }\n                      ^\n\
    /tmp/tmpkibe2pnw.swift:21:22: error: consecutive statements on a line must be\
    \ separated by ';'\n    let newOperator = operator.map { String($0) }\n      \
    \               ^\n                     ;\n/tmp/tmpkibe2pnw.swift:21:31: error:\
    \ '.' is not allowed in operator names\n    let newOperator = operator.map { String($0)\
    \ }\n                              ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // your code here\n    var result =\
    \ operand[0]\n    var idx = 0\n    for ops in operator {\n        switch ops {\n\
    \        case \"+\":\n            result += operand[idx + 1]\n        case \"\
    -\":\n            result -= operand[idx + 1]\n        case \"*\":\n          \
    \  result *= operand[idx + 1]\n        case \"//\":\n            result /= operand[idx\
    \ + 1]\n        case \"**\":\n            result = Int(pow(Double(result), Double(operand[idx\
    \ + 1])))\n        default:\n            return 0\n        }\n        idx += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpv9lclpvc.swift:24:16: error: expected Sequence expression for for-each\
    \ loop\n    for ops in operator {\n               ^\n/tmp/tmpv9lclpvc.swift:24:16:\
    \ error: expected '{' to start the body of for-each loop\n    for ops in operator\
    \ {\n               ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\treturn 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpp5lex5j5/tmpp5lex5j5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2605978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b260566fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b260566f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b260566e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5lex5j5                        0x000055941fcab47b <unavailable> + 5243

    5    libc.so.6                          0x00002b2605b64460 __libc_start_main +
    245

    6    tmpp5lex5j5                        0x000055941fcab029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tlet operand = operand[0]\n\tlet operator\
    \ = operator[0]\n\tswitch operator {\n\tcase \"+\":\n\t\treturn operand + operand\n\
    \tcase \"-\":\n\t\treturn operand - operand\n\tcase \"*\":\n\t\treturn operand\
    \ * operand\n\tcase \"//\":\n\t\treturn operand / operand\n\tcase \"**\":\n\t\t\
    return operand * operand\n\tdefault:\n\t\treturn operand\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpb_tmaqgx.swift:22:6: error: keyword 'operator' cannot be used as\
    \ an identifier here\n        let operator = operator[0]\n            ^\n/tmp/tmpb_tmaqgx.swift:22:6:\
    \ note: if this name is unavoidable, use backticks to escape it\n        let operator\
    \ = operator[0]\n            ^~~~~~~~\n            `operator`\n/tmp/tmpb_tmaqgx.swift:22:17:\
    \ error: expected initial value after '='\n        let operator = operator[0]\n\
    \                       ^\n/tmp/tmpb_tmaqgx.swift:22:16: error: consecutive statements\
    \ on a line must be separated by ';'\n        let operator = operator[0]\n   \
    \                   ^\n                      ;\n/tmp/tmpb_tmaqgx.swift:22:25:\
    \ error: '[' is not allowed in operator names\n        let operator = operator[0]\n\
    \                               ^\n/tmp/tmpb_tmaqgx.swift:23:9: error: expected\
    \ expression in 'switch' statement\n        switch operator {\n              \
    \ ^\n/tmp/tmpb_tmaqgx.swift:23:18: error: expected operator name in operator declaration\n\
    \        switch operator {\n                        ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operand.count - 1 {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i + 1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i + 1]\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i + 1]\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i + 1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = Int(pow(Double(result), Double(operand[i + 1])))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpi90228bm.swift:23:12: error: expected expression, var, or let in\
    \ 'if' condition\n        if operator[i] == \"+\" {\n           ^\n/tmp/tmpi90228bm.swift:23:20:\
    \ error: '[' is not allowed in operator names\n        if operator[i] == \"+\"\
    \ {\n                   ^\n/tmp/tmpi90228bm.swift:25:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"-\" {\n  \
    \                ^\n/tmp/tmpi90228bm.swift:25:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"-\" {\n                 \
    \         ^\n/tmp/tmpi90228bm.swift:27:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"*\" {\n          \
    \        ^\n/tmp/tmpi90228bm.swift:27:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"*\" {\n                          ^\n\
    /tmp/tmpi90228bm.swift:29:19: error: expected expression, var, or let in 'if'\
    \ condition\n        } else if operator[i] == \"//\" {\n                  ^\n\
    /tmp/tmpi90228bm.swift:29:27: error: '[' is not allowed in operator names\n  \
    \      } else if operator[i] == \"//\" {\n                          ^\n/tmp/tmpi90228bm.swift:31:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"**\" {\n                  ^\n/tmp/tmpi90228bm.swift:31:27:\
    \ error: '[' is not allowed in operator names\n        } else if operator[i] ==\
    \ \"**\" {\n                          ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operand.count > 1 else {\n   \
    \     return 0\n    }\n    var stringExpression = String(operand[0])\n    for\
    \ i in 0 ..< operator.count {\n        stringExpression.append(operator[i])\n\
    \        stringExpression.append(String(operand[i + 1]))\n    }\n    print(stringExpression)\n\
    \    return Int(evaluateExpression(expression: stringExpression))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpsqrglroy.swift:25:20: error: expected expression after operator\n\
    \    for i in 0 ..< operator.count {\n                   ^\n/tmp/tmpsqrglroy.swift:25:20:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0 ..< operator.count\
    \ {\n                   ^\n/tmp/tmpsqrglroy.swift:26:33: error: expected expression\
    \ in list of expressions\n        stringExpression.append(operator[i])\n     \
    \                           ^\n/tmp/tmpsqrglroy.swift:26:41: error: '[' is not\
    \ allowed in operator names\n        stringExpression.append(operator[i])\n  \
    \                                      ^\n/tmp/tmpsqrglroy.swift:30:16: error:\
    \ cannot find 'evaluateExpression' in scope\n    return Int(evaluateExpression(expression:\
    \ stringExpression))\n               ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 {\n        return\
    \ operand[0]\n    } else {\n        var arr = operand\n        var calcArr = [Int]()\n\
    \        var opr = operator\n        while opr.count > 0 {\n            var op\
    \ = opr.removeFirst()\n            if op == \"**\" {\n                let num1\
    \ = arr.removeFirst()\n                let num2 = arr.removeFirst()\n        \
    \        calcArr.append(num1 ** num2)\n            } else {\n                let\
    \ num1 = arr.removeFirst()\n                let num2 = arr.removeFirst()\n   \
    \             var res = 0\n                switch op {\n                case \"\
    +\":\n                    res = num1 + num2\n                case \"-\":\n   \
    \                 res = num1 - num2\n                case \"*\":\n           \
    \         res = num1 * num2\n                case \"//\":\n                  \
    \  res = num1 / num2\n                default:\n                    break\n  \
    \              }\n                calcArr.append(res)\n            }\n       \
    \ }\n        return calcArr.first!\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpf9g6yafi.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 {\n       ^\n/tmp/tmpf9g6yafi.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count == 0 {\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var a: Int = operand[0]\n    for i in\
    \ 1..<operand.count {\n        switch operator[i-1] {\n        case \"+\":\n \
    \           a += operand[i]\n        case \"-\":\n            a -= operand[i]\n\
    \        case \"*\":\n            a *= operand[i]\n        case \"//\":\n    \
    \        a /= operand[i]\n        case \"**\":\n            a = Int(pow(Double(a),\
    \ Double(operand[i])))\n        default:\n            break\n        }\n    }\n\
    \    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbh4a2ppu.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i-1] {\n               ^\n/tmp/tmpbh4a2ppu.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i-1] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let stack: Stack<Int> = Stack<Int>()\n\
    \    let opPriority: [String: Int] = [\"+\": 0, \"-\": 0, \"*\": 1, \"//\": 1,\
    \ \"**\": 2]\n    let opDict: [String: (Int, Int) -> Int] = [\"+\": (+), \"-\"\
    : (-), \"*\": (*), \"//\": (//), \"**\": (**)]\n    var res = 0\n    var idx =\
    \ 0\n    stack.push(operand[idx])\n    idx += 1\n    for op in operator {\n  \
    \      if stack.top()! > operand[idx] {\n            if opPriority[op]! > opPriority[operator[idx\
    \ - 1]]! {\n                stack.push(operand[idx])\n                idx += 1\n\
    \            } else {\n                while let topOp = stack.pop(), let _top\
    \ = stack.pop() {\n                    res = opDict[operator[idx - 1]]!(_top,\
    \ topOp)\n                    stack.push(res)\n                    break\n   \
    \             }\n            }\n        } else {\n            stack.push(operand[idx])\n\
    \            idx += 1\n        }\n    }\n    while let topOp = stack.pop(), let\
    \ _top = stack.pop() {\n        res = opDict[operator[idx - 1]]!(_top, topOp)\n\
    \        stack.push(res)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3t61r1cu.swift:24:5: error: expected expression in list of expressions\n\
    \    var res = 0\n    ^\n/tmp/tmp3t61r1cu.swift:28:15: error: expected Sequence\
    \ expression for for-each loop\n    for op in operator {\n              ^\n/tmp/tmp3t61r1cu.swift:28:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n/tmp/tmp3t61r1cu.swift:30:45: error: expected expression\
    \ in list of expressions\n            if opPriority[op]! > opPriority[operator[idx\
    \ - 1]]! {\n                                            ^\n/tmp/tmp3t61r1cu.swift:30:53:\
    \ error: '[' is not allowed in operator names\n            if opPriority[op]!\
    \ > opPriority[operator[idx - 1]]! {\n                                       \
    \             ^\n/tmp/tmp3t61r1cu.swift:46:22: error: expected expression in list\
    \ of expressions\n        res = opDict[operator[idx - 1]]!(_top, topOp)\n    \
    \                 ^\n/tmp/tmp3t61r1cu.swift:46:30: error: '[' is not allowed in\
    \ operator names\n        res = opDict[operator[idx - 1]]!(_top, topOp)\n    \
    \                         ^\n/tmp/tmp3t61r1cu.swift:21:16: error: cannot find\
    \ type 'Stack' in scope\n    let stack: Stack<Int> = Stack<Int>()\n          \
    \     ^~~~~\n/tmp/tmp3t61r1cu.swift:23:84: error: cannot convert value of type\
    \ '()' to expected dictionary value type '(Int, Int) -> Int'\n    let opDict:\
    \ [String: (Int, Int) -> Int] = [\"+\": (+), \"-\": (-), \"*\": (*), \"//\": (//),\
    \ \"**\": (**)]\n                                                            \
    \                       ^\n/tmp/tmp3t61r1cu.swift:46:21: error: missing argument\
    \ for parameter #1 in call\n        res = opDict[operator[idx - 1]]!(_top, topOp)\n\
    \                    ^\n                    <#Dictionary<String, (Int, Int) ->\
    \ Int>.Index#>\nSwift.Dictionary:8:23: note: 'subscript(_:)' declared here\n \
    \   @inlinable public subscript(position: Dictionary<Key, Value>.Index) -> Dictionary<Key,\
    \ Value>.Element { get }\n                      ^\n/tmp/tmp3t61r1cu.swift:46:21:\
    \ error: no 'subscript' candidates produce the expected contextual result type\
    \ 'Int'\n        res = opD"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var i =\
    \ 0\n    for op in operator {\n        switch op {\n        case \"+\":\n    \
    \        result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            print(\"This operator was not recognized: \\(op)\"\
    )\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpajvy9t3e.swift:23:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmpajvy9t3e.swift:23:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i+1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i+1]\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i+1]\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = result * result\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvbiby64n.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpvbiby64n.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpvbiby64n.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmpvbiby64n.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmpvbiby64n.swift:25:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmpvbiby64n.swift:25:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmpvbiby64n.swift:27:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmpvbiby64n.swift:27:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmpvbiby64n.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmpvbiby64n.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmpvbiby64n.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmpvbiby64n.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Your code goes here.\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"**\"\
    , \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"\
    +\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpv47fg789/tmpv47fg789.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c56e96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c56b8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c56b8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c56b8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv47fg789                        0x000055ac6f08147b <unavailable> + 5243

    5    libc.so.6                          0x00002b7c57082460 __libc_start_main +
    245

    6    tmpv47fg789                        0x000055ac6f081029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n\
    \        case \"*\":\n            result *= operand[i + 1]\n        case \"//\"\
    :\n            result /= operand[i + 1]\n        case \"**\":\n            result\
    \ = Int(pow(Double(result), Double(operand[i + 1])))\n        default:\n     \
    \       return 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpot1q8tic.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count == 0 {\n       ^\n\
    /tmp/tmpot1q8tic.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count == 0 {\n               ^\n/tmp/tmpot1q8tic.swift:25:18:\
    \ error: expected expression after operator\n    for i in 0..<operator.count {\n\
    \                 ^\n/tmp/tmpot1q8tic.swift:25:18: error: expected '{' to start\
    \ the body of for-each loop\n    for i in 0..<operator.count {\n             \
    \    ^\n/tmp/tmpot1q8tic.swift:26:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpot1q8tic.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operatorIndex = 0\n    var result\
    \ = operand[0]\n    for operandIndex in 1..<operand.count {\n        switch operator[operatorIndex]\
    \ {\n        case \"+\":\n            result += operand[operandIndex]\n      \
    \  case \"-\":\n            result -= operand[operandIndex]\n        case \"*\"\
    :\n            result *= operand[operandIndex]\n        case \"//\":\n       \
    \     result /= operand[operandIndex]\n        case \"**\":\n            result\
    \ = pow(result, operand[operandIndex])\n        default:\n            break\n\
    \        }\n        operatorIndex += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpq0gdc_9b.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[operatorIndex] {\n               ^\n/tmp/tmpq0gdc_9b.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[operatorIndex]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var stack = Stack<Int>()\n    for i\
    \ in 0..<operand.count {\n        stack.push(operand[i])\n        if i < operator.count\
    \ {\n            switch operator[i] {\n            case \"+\":\n             \
    \   let second = stack.pop()!\n                let first = stack.pop()!\n    \
    \            stack.push(first + second)\n            case \"-\":\n           \
    \     let second = stack.pop()!\n                let first = stack.pop()!\n  \
    \              stack.push(first - second)\n            case \"*\":\n         \
    \       let second = stack.pop()!\n                let first = stack.pop()!\n\
    \                stack.push(first * second)\n            case \"//\":\n      \
    \          let second = stack.pop()!\n                let first = stack.pop()!\n\
    \                stack.push(first / second)\n            case \"**\":\n      \
    \          let second = stack.pop()!\n                let first = stack.pop()!\n\
    \                stack.push(first ^ second)\n            default:\n          \
    \      break\n            }\n        }\n    }\n    return stack.pop()!\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp5m_0cyxf.swift:24:16: error: expected expression after operator\n\
    \        if i < operator.count {\n               ^\n/tmp/tmp5m_0cyxf.swift:24:24:\
    \ error: '.' is not allowed in operator names\n        if i < operator.count {\n\
    \                       ^\n/tmp/tmp5m_0cyxf.swift:21:17: error: cannot find 'Stack'\
    \ in scope\n    var stack = Stack<Int>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let initialValue = operand[0]\n    return\
    \ zip(operator, operand[1..<operand.count]).reduce(initialValue) { (result, operations)\
    \ in\n        switch operations.0 {\n        case \"+\":\n            return result\
    \ + operations.1\n        case \"-\":\n            return result - operations.1\n\
    \        case \"*\":\n            return result * operations.1\n        case \"\
    //\":\n            return result / operations.1\n        case \"**\":\n      \
    \      return Int(pow(Double(result), Double(operations.1)))\n        default:\n\
    \            return result\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp79zee4bj.swift:22:16: error: expected expression in list of expressions\n\
    \    return zip(operator, operand[1..<operand.count]).reduce(initialValue) { (result,\
    \ operations) in\n               ^\n/tmp/tmp79zee4bj.swift:22:24: error: ',' is\
    \ not allowed in operator names\n    return zip(operator, operand[1..<operand.count]).reduce(initialValue)\
    \ { (result, operations) in\n                       ^\n/tmp/tmp79zee4bj.swift:22:15:\
    \ error: missing arguments for parameters #1, #2 in call\n    return zip(operator,\
    \ operand[1..<operand.count]).reduce(initialValue) { (result, operations) in\n\
    \              ^\n               <#_#>, <#_#>\nSwift.zip:1:24: note: 'zip' declared\
    \ here\n@inlinable public func zip<Sequence1, Sequence2>(_ sequence1: Sequence1,\
    \ _ sequence2: Sequence2) -> Zip2Sequence<Sequence1, Sequence2> where Sequence1\
    \ : Sequence, Sequence2 : Sequence\n                       ^\n/tmp/tmp79zee4bj.swift:22:12:\
    \ error: cannot convert return expression of type 'Zip2Sequence<Sequence1, Sequence2>'\
    \ to return type 'Int'\n    return zip(operator, operand[1..<operand.count]).reduce(initialValue)\
    \ { (result, operations) in\n           ^~~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0 ..< operator.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfkecbw4f.swift:22:20: error: expected expression after operator\n\
    \    for i in 0 ..< operator.count {\n                   ^\n/tmp/tmpfkecbw4f.swift:22:20:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0 ..< operator.count\
    \ {\n                   ^\n/tmp/tmpfkecbw4f.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpfkecbw4f.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var expression = operand[0]\n    for\
    \ i in 0...(operator.count - 1) {\n        switch operator[i] {\n        case\
    \ \"+\":\n            expression += operand[i + 1]\n        case \"-\":\n    \
    \        expression -= operand[i + 1]\n        case \"*\":\n            expression\
    \ *= operand[i + 1]\n        case \"//\":\n            expression /= operand[i\
    \ + 1]\n        case \"**\":\n            expression = Int(pow(Double(expression),\
    \ Double(operand[i + 1])))\n        default:\n            break\n        }\n \
    \   }\n    return expression\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpumxbelf2.swift:22:19: error: expected expression in list of expressions\n\
    \    for i in 0...(operator.count - 1) {\n                  ^\n/tmp/tmpumxbelf2.swift:22:19:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0...(operator.count\
    \ - 1) {\n                  ^\n/tmp/tmpumxbelf2.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpumxbelf2.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n/tmp/tmpumxbelf2.swift:22:18: error: cannot convert\
    \ value of type '()' to expected argument type 'Int'\n    for i in 0...(operator.count\
    \ - 1) {\n                 ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here...\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"**\"\
    , \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"\
    +\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpumfj6yre/tmpumfj6yre.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a1c9cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a1c6c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a1c6c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a1c6c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumfj6yre                        0x000055762646947b <unavailable> + 5243

    5    libc.so.6                          0x00002b9a1cbb6460 __libc_start_main +
    245

    6    tmpumfj6yre                        0x0000557626469029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var r = 0\n    var s = 0\n    var op\
    \ = \"+\"\n    while s < operand.count {\n        let n = operand[s]\n       \
    \ switch op {\n        case \"+\":\n            r += n\n        case \"-\":\n\
    \            r -= n\n        case \"*\":\n            r *= n\n        case \"\
    //\":\n            r /= n\n        case \"**\":\n            r = Int(pow(Double(r),\
    \ Double(n)))\n        default:\n            break\n        }\n        if s +\
    \ 1 < operator.count {\n            op = operator[s]\n        }\n        s +=\
    \ 1\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpan_qp2p4.swift:40:20: error: expected expression after operator\n\
    \        if s + 1 < operator.count {\n                   ^\n/tmp/tmpan_qp2p4.swift:40:28:\
    \ error: '.' is not allowed in operator names\n        if s + 1 < operator.count\
    \ {\n                           ^\n/tmp/tmpan_qp2p4.swift:36:21: error: cannot\
    \ find 'pow' in scope\n            r = Int(pow(Double(r), Double(n)))\n      \
    \              ^~~\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var o = operand\n    for i in 0..<operator.count\
    \ {\n        if operator[i] == \"+\" {\n            o[i] = o[i] + o[i+1]\n   \
    \         o.remove(at: i+1)\n            return do_algebra(operator: operator,\
    \ operand: o)\n        } else if operator[i] == \"-\" {\n            o[i] = o[i]\
    \ - o[i+1]\n            o.remove(at: i+1)\n            return do_algebra(operator:\
    \ operator, operand: o)\n        } else if operator[i] == \"*\" {\n          \
    \  o[i] = o[i] * o[i+1]\n            o.remove(at: i+1)\n            return do_algebra(operator:\
    \ operator, operand: o)\n        } else if operator[i] == \"//\" {\n         \
    \   o[i] = o[i] / o[i+1]\n            o.remove(at: i+1)\n            return do_algebra(operator:\
    \ operator, operand: o)\n        } else if operator[i] == \"**\" {\n         \
    \   o[i] = Int(pow(Double(o[i]), Double(o[i+1])))\n            o.remove(at: i+1)\n\
    \            return do_algebra(operator: operator, operand: o)\n        }\n  \
    \  }\n    return o[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpd9_sif8i.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpd9_sif8i.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpd9_sif8i.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmpd9_sif8i.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmpd9_sif8i.swift:27:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmpd9_sif8i.swift:27:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmpd9_sif8i.swift:31:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmpd9_sif8i.swift:31:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmpd9_sif8i.swift:35:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmpd9_sif8i.swift:35:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmpd9_sif8i.swift:39:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmpd9_sif8i.swift:39:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"**\"\
    , \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"\
    +\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpxw0_1sp5/tmpxw0_1sp5.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee8b393c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee8b08ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee8b08a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee8b0897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxw0_1sp5                        0x000056503c72847b <unavailable> + 5243

    5    libc.so.6                          0x00002aee8b57f460 __libc_start_main +
    245

    6    tmpxw0_1sp5                        0x000056503c728029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var currentOperator\
    \ = \"\"\n    var operandIndex = 1\n    var operatorIndex = 0\n    while operandIndex\
    \ < operand.count {\n        currentOperator = operator[operatorIndex]\n     \
    \   switch currentOperator {\n        case \"+\":\n            result += operand[operandIndex]\n\
    \        case \"-\":\n            result -= operand[operandIndex]\n        case\
    \ \"*\":\n            result *= operand[operandIndex]\n        case \"//\":\n\
    \            result /= operand[operandIndex]\n        case \"**\":\n         \
    \   result = Int(pow(Double(result), Double(operand[operandIndex])))\n       \
    \ default:\n            print(\"Error\")\n        }\n        operandIndex += 1\n\
    \        operatorIndex += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmps74tp5tv.swift:26:27: error: expected expression in assignment\n\
    \        currentOperator = operator[operatorIndex]\n                         \
    \ ^\n/tmp/tmps74tp5tv.swift:26:35: error: '[' is not allowed in operator names\n\
    \        currentOperator = operator[operatorIndex]\n                         \
    \         ^\n/tmp/tmps74tp5tv.swift:37:26: error: cannot find 'pow' in scope\n\
    \            result = Int(pow(Double(result), Double(operand[operandIndex])))\n\
    \                         ^~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    /// Good luck!\n    let num = operand.count\n\
    \    var result = operand[0]\n    for i in 0..<num-1 {\n        if operator[i]\
    \ == \"+\" {\n            result += operand[i+1]\n        } else if operator[i]\
    \ == \"-\" {\n            result -= operand[i+1]\n        } else if operator[i]\
    \ == \"*\" {\n            result *= operand[i+1]\n        } else if operator[i]\
    \ == \"//\" {\n            result /= operand[i+1]\n        } else if operator[i]\
    \ == \"**\" {\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpci5w82ds.swift:25:12: error: expected expression, var, or let in\
    \ 'if' condition\n        if operator[i] == \"+\" {\n           ^\n/tmp/tmpci5w82ds.swift:25:20:\
    \ error: '[' is not allowed in operator names\n        if operator[i] == \"+\"\
    \ {\n                   ^\n/tmp/tmpci5w82ds.swift:27:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"-\" {\n  \
    \                ^\n/tmp/tmpci5w82ds.swift:27:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"-\" {\n                 \
    \         ^\n/tmp/tmpci5w82ds.swift:29:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"*\" {\n          \
    \        ^\n/tmp/tmpci5w82ds.swift:29:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"*\" {\n                          ^\n\
    /tmp/tmpci5w82ds.swift:31:19: error: expected expression, var, or let in 'if'\
    \ condition\n        } else if operator[i] == \"//\" {\n                  ^\n\
    /tmp/tmpci5w82ds.swift:31:27: error: '[' is not allowed in operator names\n  \
    \      } else if operator[i] == \"//\" {\n                          ^\n/tmp/tmpci5w82ds.swift:33:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"**\" {\n                  ^\n/tmp/tmpci5w82ds.swift:33:27:\
    \ error: '[' is not allowed in operator names\n        } else if operator[i] ==\
    \ \"**\" {\n                          ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var result = operand[0]\n  for (i, op)\
    \ in operator.enumerated() {\n    switch op {\n    case \"+\":\n      result +=\
    \ operand[i + 1]\n    case \"-\":\n      result -= operand[i + 1]\n    case \"\
    *\":\n      result *= operand[i + 1]\n    case \"//\":\n      result /= operand[i\
    \ + 1]\n    case \"**\":\n      result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n    default:\n      break\n    }\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbg21t25w.swift:22:18: error: expected Sequence expression for for-each\
    \ loop\n  for (i, op) in operator.enumerated() {\n                 ^\n/tmp/tmpbg21t25w.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n  for (i, op) in operator.enumerated()\
    \ {\n                 ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i+1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i+1]\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i+1]\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = Int(pow(Double(result), Double(operand[i+1])))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppavkufge.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmppavkufge.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmppavkufge.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmppavkufge.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmppavkufge.swift:25:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmppavkufge.swift:25:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmppavkufge.swift:27:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmppavkufge.swift:27:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmppavkufge.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmppavkufge.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmppavkufge.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmppavkufge.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var stack: [Int] = []\n  for i in operand\
    \ {\n    stack.append(i)\n    if operator.count == stack.count - 1 {\n      break\n\
    \    }\n    let op = operator.remove(at: 0)\n    stack.append(op)\n  }\n  var\
    \ i = 0\n  while i < stack.count {\n    if let op = stack[i] as? String {\n  \
    \    switch op {\n      case \"+\":\n        let res = stack[i - 2] + stack[i\
    \ - 1]\n        stack[i - 2] = res\n        stack.remove(at: i - 1)\n        stack.remove(at:\
    \ i - 1)\n        i -= 1\n      case \"-\":\n        let res = stack[i - 2] -\
    \ stack[i - 1]\n        stack[i - 2] = res\n        stack.remove(at: i - 1)\n\
    \        stack.remove(at: i - 1)\n        i -= 1\n      case \"*\":\n        let\
    \ res = stack[i - 2] * stack[i - 1]\n        stack[i - 2] = res\n        stack.remove(at:\
    \ i - 1)\n        stack.remove(at: i - 1)\n        i -= 1\n      case \"//\":\n\
    \        let res = stack[i - 2] / stack[i - 1]\n        stack[i - 2] = res\n \
    \       stack.remove(at: i - 1)\n        stack.remove(at: i - 1)\n        i -=\
    \ 1\n      case \"**\":\n        let res = stack[i - 2] ** stack[i - 1]\n    \
    \    stack[i - 2] = res\n        stack.remove(at: i - 1)\n        stack.remove(at:\
    \ i - 1)\n        i -= 1\n      default:\n        break\n      }\n    }\n    i\
    \ += 1\n  }\n  return stack[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpqs2fzcvb.swift:24:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == stack.count - 1 {\n       ^\n/tmp/tmpqs2fzcvb.swift:24:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count == stack.count\
    \ - 1 {\n               ^\n/tmp/tmpqs2fzcvb.swift:27:14: error: expected initial\
    \ value after '='\n    let op = operator.remove(at: 0)\n             ^\n/tmp/tmpqs2fzcvb.swift:27:13:\
    \ error: consecutive statements on a line must be separated by ';'\n    let op\
    \ = operator.remove(at: 0)\n            ^\n            ;\n/tmp/tmpqs2fzcvb.swift:27:22:\
    \ error: '.' is not allowed in operator names\n    let op = operator.remove(at:\
    \ 0)\n                     ^\n/tmp/tmpqs2fzcvb.swift:32:26: warning: cast from\
    \ 'Int' to unrelated type 'String' always fails\n    if let op = stack[i] as?\
    \ String {\n                ~~~~~~~~ ^   ~~~~~~\n/tmp/tmpqs2fzcvb.swift:59:32:\
    \ error: cannot find operator '**' in scope\n        let res = stack[i - 2] **\
    \ stack[i - 1]\n                               ^~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for index\
    \ in 0..<operand.count - 1 {\n        switch operator[index] {\n        case \"\
    +\":\n            result += operand[index + 1]\n        case \"-\":\n        \
    \    result -= operand[index + 1]\n        case \"*\":\n            result *=\
    \ operand[index + 1]\n        case \"//\":\n            result /= operand[index\
    \ + 1]\n        case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            result = 0\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpm2mhahuq.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index] {\n               ^\n/tmp/tmpm2mhahuq.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index]\
    \ {\n                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0 ..< operator.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            return 0\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmplwjvwkxk.swift:22:20: error: expected expression after operator\n\
    \    for i in 0 ..< operator.count {\n                   ^\n/tmp/tmplwjvwkxk.swift:22:20:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0 ..< operator.count\
    \ {\n                   ^\n/tmp/tmplwjvwkxk.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmplwjvwkxk.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var x = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            x += operand[i+1]\n\
    \        case \"-\":\n            x -= operand[i+1]\n        case \"*\":\n   \
    \         x *= operand[i+1]\n        case \"//\":\n            x /= operand[i+1]\n\
    \        case \"**\":\n            x = Int(pow(Double(x), Double(operand[i+1])))\n\
    \        default:\n            print(\"no operation available\")\n        }\n\
    \    }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp2sqkbqih.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp2sqkbqih.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp2sqkbqih.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp2sqkbqih.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here\n    \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: '/tmp/tmpdb6f1xfl.swift:23:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Initialize our result.\n    var result\
    \ = operand[0]\n    // For each operator and operand pair, we will perform the\
    \ operation and then set our\n    // result to that new value.\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n\
    \        case \"*\":\n            result *= operand[i + 1]\n        case \"//\"\
    :\n            result /= operand[i + 1]\n        case \"**\":\n            result\
    \ = Int(pow(Double(result), Double(operand[i + 1])))\n        default:\n     \
    \       // If we don't know the operator, then exit the program.\n           \
    \ fatalError(\"Unknown operator found.\")\n        }\n    }\n    // Return the\
    \ result.\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpq71bxyye.swift:25:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpq71bxyye.swift:25:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpq71bxyye.swift:26:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpq71bxyye.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // please write your code here\n   \
    \ var value: Int = operand[0]\n    for i in 0..<operator.count {\n        switch\
    \ operator[i] {\n        case \"+\":\n            value += operand[i+1]\n    \
    \    case \"-\":\n            value -= operand[i+1]\n        case \"*\":\n   \
    \         value *= operand[i+1]\n        case \"//\":\n            value /= operand[i+1]\n\
    \        case \"**\":\n            value = Int(pow(Double(value), Double(operand[i+1])))\n\
    \        default:\n            return 0\n        }\n    }\n    return value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzam77dmi.swift:23:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpzam77dmi.swift:23:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpzam77dmi.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpzam77dmi.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  // Your code here!\n  return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp8u84bkla/tmp8u84bkla.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adddf1edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adddeee4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adddeee4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adddeee37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8u84bkla                        0x0000563f94e4547b <unavailable> + 5243

    5    libc.so.6                          0x00002adddf3d9460 __libc_start_main +
    245

    6    tmp8u84bkla                        0x0000563f94e45029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            result = 0\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3c0zo5bv.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp3c0zo5bv.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp3c0zo5bv.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp3c0zo5bv.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i+1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i+1]\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i+1]\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = Int(pow(Double(result), Double(operand[i+1])))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppavkufge.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmppavkufge.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmppavkufge.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmppavkufge.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmppavkufge.swift:25:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmppavkufge.swift:25:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmppavkufge.swift:27:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmppavkufge.swift:27:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmppavkufge.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmppavkufge.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmppavkufge.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmppavkufge.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ < 2 {\n        return -1\n    }\n    if operator.count != operand.count - 1\
    \ {\n        return -1\n    }\n    let mutableOperand = operand\n    for i in\
    \ 0..<operator.count {\n        let opt = operator[i]\n        let temp = mutableOperand[i]\n\
    \        switch opt {\n        case \"+\":\n            mutableOperand[i+1] =\
    \ temp + mutableOperand[i+1]\n        case \"-\":\n            mutableOperand[i+1]\
    \ = temp - mutableOperand[i+1]\n        case \"*\":\n            mutableOperand[i+1]\
    \ = temp * mutableOperand[i+1]\n        case \"//\":\n            mutableOperand[i+1]\
    \ = temp / mutableOperand[i+1]\n        case \"**\":\n            mutableOperand[i+1]\
    \ = Int(pow(Double(temp), Double(mutableOperand[i+1])))\n        default:\n  \
    \          break\n        }\n    }\n    return mutableOperand[operator.count]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpcvvmd9c4.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count < 2 {\n       ^\n\
    /tmp/tmpcvvmd9c4.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count < 2 {\n               ^\n/tmp/tmpcvvmd9c4.swift:24:8:\
    \ error: expected expression, var, or let in 'if' condition\n    if operator.count\
    \ != operand.count - 1 {\n       ^\n/tmp/tmpcvvmd9c4.swift:24:16: error: '.' is\
    \ not allowed in operator names\n    if operator.count != operand.count - 1 {\n\
    \               ^\n/tmp/tmpcvvmd9c4.swift:28:18: error: expected expression after\
    \ operator\n    for i in 0..<operator.count {\n                 ^\n/tmp/tmpcvvmd9c4.swift:28:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpcvvmd9c4.swift:29:19: error: expected initial\
    \ value after '='\n        let opt = operator[i]\n                  ^\n/tmp/tmpcvvmd9c4.swift:29:18:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ opt = operator[i]\n                 ^\n                 ;\n/tmp/tmpcvvmd9c4.swift:29:27:\
    \ error: '[' is not allowed in operator names\n        let opt = operator[i]\n\
    \                          ^\n/tmp/tmpcvvmd9c4.swift:46:27: error: expected expression\
    \ in list of expressions\n    return mutableOperand[operator.count]\n        \
    \                  ^\n/tmp/tmpcvvmd9c4.swift:46:35: error: '.' is not allowed\
    \ in operator names\n    return mutableOperand[operator.count]\n             \
    \                     ^\n/tmp/tmpcvvmd9c4.swift:46:26: error: missing argument\
    \ for parameter #1 in call\n    return mutableOperand[operator.count]\n      \
    \                   ^\n                         <#Int#>\nSwift.Array:16:23: note:\
    \ 'subscript(_:)' declared here\n    @inlinable public subscript(index: Int) ->\
    \ Element { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let exp = generate_exp(operator: operator,\
    \ operand: operand)\n    let result = do_math(exp: exp)\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpal7jw0ox.swift:21:38: error: expected expression in list of expressions\n\
    \    let exp = generate_exp(operator: operator, operand: operand)\n          \
    \                           ^\n/tmp/tmpal7jw0ox.swift:21:37: error: consecutive\
    \ statements on a line must be separated by ';'\n    let exp = generate_exp(operator:\
    \ operator, operand: operand)\n                                    ^\n       \
    \                             ;\n/tmp/tmpal7jw0ox.swift:21:46: error: ',' is not\
    \ allowed in operator names\n    let exp = generate_exp(operator: operator, operand:\
    \ operand)\n                                             ^\n/tmp/tmpal7jw0ox.swift:21:15:\
    \ error: cannot find 'generate_exp' in scope\n    let exp = generate_exp(operator:\
    \ operator, operand: operand)\n              ^~~~~~~~~~~~\n/tmp/tmpal7jw0ox.swift:22:18:\
    \ error: cannot find 'do_math' in scope\n    let result = do_math(exp: exp)\n\
    \                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        let oper = operator[i]\n        let num = operand[i + 1]\n      \
    \  switch oper {\n        case \"+\":\n            result += num\n        case\
    \ \"-\":\n            result -= num\n        case \"*\":\n            result *=\
    \ num\n        case \"//\":\n            result /= num\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(num)))\n        default:\n\
    \            return 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprhmtor9t.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count == 0 {\n       ^\n\
    /tmp/tmprhmtor9t.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count == 0 {\n               ^\n/tmp/tmprhmtor9t.swift:25:18:\
    \ error: expected expression after operator\n    for i in 0..<operator.count {\n\
    \                 ^\n/tmp/tmprhmtor9t.swift:25:18: error: expected '{' to start\
    \ the body of for-each loop\n    for i in 0..<operator.count {\n             \
    \    ^\n/tmp/tmprhmtor9t.swift:26:20: error: expected initial value after '='\n\
    \        let oper = operator[i]\n                   ^\n/tmp/tmprhmtor9t.swift:26:19:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ oper = operator[i]\n                  ^\n                  ;\n/tmp/tmprhmtor9t.swift:26:28:\
    \ error: '[' is not allowed in operator names\n        let oper = operator[i]\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tvar result = operand[0]\n\tfor (index,\
    \ _) in operand.enumerated() {\n\t\tif index == 0 {\n\t\t\tcontinue\n\t\t}\n\t\
    \tswitch operator[index - 1] {\n\t\tcase \"+\":\n\t\t\tresult += operand[index]\n\
    \t\tcase \"-\":\n\t\t\tresult -= operand[index]\n\t\tcase \"*\":\n\t\t\tresult\
    \ *= operand[index]\n\t\tcase \"//\":\n\t\t\tresult /= operand[index]\n\t\tcase\
    \ \"**\":\n\t\t\tresult = Int(pow(Double(result), Double(operand[index])))\n\t\
    \tdefault:\n\t\t\tprint(\"Unknown Operator: \\(operator[index - 1])\")\n\t\t}\n\
    \t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjsesjyxj.swift:26:10: error: expected expression in 'switch' statement\n\
    \                switch operator[index - 1] {\n                       ^\n/tmp/tmpjsesjyxj.swift:26:18:\
    \ error: '[' is not allowed in operator names\n                switch operator[index\
    \ - 1] {\n                               ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var result = operand[0]\n  for (i, op)\
    \ in operator.enumerated() {\n    switch op {\n    case \"+\":\n      result +=\
    \ operand[i + 1]\n    case \"-\":\n      result -= operand[i + 1]\n    case \"\
    *\":\n      result *= operand[i + 1]\n    case \"//\":\n      result /= operand[i\
    \ + 1]\n    case \"**\":\n      result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n    default:\n      break\n    }\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbg21t25w.swift:22:18: error: expected Sequence expression for for-each\
    \ loop\n  for (i, op) in operator.enumerated() {\n                 ^\n/tmp/tmpbg21t25w.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n  for (i, op) in operator.enumerated()\
    \ {\n                 ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var sum = operand[0]\n    var i = 0\n\
    \    while i < operator.count {\n        switch operator[i] {\n        case \"\
    +\":\n            sum += operand[i + 1]\n        case \"-\":\n            sum\
    \ -= operand[i + 1]\n        case \"*\":\n            sum *= operand[i + 1]\n\
    \        case \"//\":\n            sum /= operand[i + 1]\n        case \"**\"\
    :\n            sum = Int(pow(Double(sum), Double(operand[i + 1])))\n        default:\n\
    \            break\n        }\n        i += 1\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpc8pfbg1h.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpc8pfbg1h.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var a = operand\n    for i in 0..<operator.count\
    \ {\n        let num = (operator[i] == \"//\") ? a[i] / a[i + 1] : a[i] + a[i\
    \ + 1]\n        a.insert(num, at: i)\n        a.removeSubrange(i + 1...i + 2)\n\
    \    }\n    return a[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_or1lkfn.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp_or1lkfn.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp_or1lkfn.swift:23:20: error: expected expression\
    \ in list of expressions\n        let num = (operator[i] == \"//\") ? a[i] / a[i\
    \ + 1] : a[i] + a[i + 1]\n                   ^\n/tmp/tmp_or1lkfn.swift:23:20:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ num = (operator[i] == \"//\") ? a[i] / a[i + 1] : a[i] + a[i + 1]\n        \
    \           ^\n                   ;\n/tmp/tmp_or1lkfn.swift:23:28: error: '['\
    \ is not allowed in operator names\n        let num = (operator[i] == \"//\")\
    \ ? a[i] / a[i + 1] : a[i] + a[i + 1]\n                           ^\n/tmp/tmp_or1lkfn.swift:23:13:\
    \ warning: constant 'num' inferred to have type '()', which may be unexpected\n\
    \        let num = (operator[i] == \"//\") ? a[i] / a[i + 1] : a[i] + a[i + 1]\n\
    \            ^\n/tmp/tmp_or1lkfn.swift:23:13: note: add an explicit type annotation\
    \ to silence this warning\n        let num = (operator[i] == \"//\") ? a[i] /\
    \ a[i + 1] : a[i] + a[i + 1]\n            ^\n               : ()\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let operand = operand.map { Int32($0)\
    \ }\n    let operator = operator.map { UnsafePointer<Int8>(strdup($0)) }\n   \
    \ return Int(do_algebra_c(operand, Int32(operand.count), operator, Int32(operator.count)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpx781ewd6.swift:22:9: error: keyword 'operator' cannot be used as\
    \ an identifier here\n    let operator = operator.map { UnsafePointer<Int8>(strdup($0))\
    \ }\n        ^\n/tmp/tmpx781ewd6.swift:22:9: note: if this name is unavoidable,\
    \ use backticks to escape it\n    let operator = operator.map { UnsafePointer<Int8>(strdup($0))\
    \ }\n        ^~~~~~~~\n        `operator`\n/tmp/tmpx781ewd6.swift:22:20: error:\
    \ expected initial value after '='\n    let operator = operator.map { UnsafePointer<Int8>(strdup($0))\
    \ }\n                   ^\n/tmp/tmpx781ewd6.swift:22:19: error: consecutive statements\
    \ on a line must be separated by ';'\n    let operator = operator.map { UnsafePointer<Int8>(strdup($0))\
    \ }\n                  ^\n                  ;\n/tmp/tmpx781ewd6.swift:22:28: error:\
    \ '.' is not allowed in operator names\n    let operator = operator.map { UnsafePointer<Int8>(strdup($0))\
    \ }\n                           ^\n/tmp/tmpx781ewd6.swift:23:60: error: expected\
    \ expression in list of expressions\n    return Int(do_algebra_c(operand, Int32(operand.count),\
    \ operator, Int32(operator.count)))\n                                        \
    \                   ^\n/tmp/tmpx781ewd6.swift:23:68: error: ',' is not allowed\
    \ in operator names\n    return Int(do_algebra_c(operand, Int32(operand.count),\
    \ operator, Int32(operator.count)))\n                                        \
    \                           ^\n/tmp/tmpx781ewd6.swift:23:16: error: cannot find\
    \ 'do_algebra_c' in scope\n    return Int(do_algebra_c(operand, Int32(operand.count),\
    \ operator, Int32(operator.count)))\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Your solution\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: '/tmp/tmpuealhmia.swift:22:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let q = Queue<Int>()\n    let p = PriorityQueue<Int>\
    \ { $0 > $1 }\n    for n in operand {\n        q.enqueue(n)\n    }\n    for o\
    \ in operator {\n        switch o {\n        case \"+\":\n            let a =\
    \ q.dequeue()!\n            let b = q.dequeue()!\n            q.enqueue(a + b)\n\
    \        case \"-\":\n            let a = q.dequeue()!\n            let b = q.dequeue()!\n\
    \            q.enqueue(a - b)\n        case \"*\":\n            let a = q.dequeue()!\n\
    \            let b = q.dequeue()!\n            q.enqueue(a * b)\n        case\
    \ \"//\":\n            let a = q.dequeue()!\n            let b = q.dequeue()!\n\
    \            q.enqueue(a / b)\n        case \"**\":\n            let a = q.dequeue()!\n\
    \            let b = q.dequeue()!\n            q.enqueue(Int(pow(Double(a), Double(b))))\n\
    \        default:\n            break\n        }\n    }\n    return q.dequeue()!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp837kjcxy.swift:26:14: error: expected Sequence expression for for-each\
    \ loop\n    for o in operator {\n             ^\n/tmp/tmp837kjcxy.swift:26:14:\
    \ error: expected '{' to start the body of for-each loop\n    for o in operator\
    \ {\n             ^\n/tmp/tmp837kjcxy.swift:21:13: error: cannot find 'Queue'\
    \ in scope\n    let q = Queue<Int>()\n            ^~~~~\n/tmp/tmp837kjcxy.swift:22:13:\
    \ error: cannot find 'PriorityQueue' in scope\n    let p = PriorityQueue<Int>\
    \ { $0 > $1 }\n            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tvar stack = [Int]()\n\tfor i in 0..<operand.count\
    \ {\n\t\tif i == 0 {\n\t\t\tstack.append(operand[i])\n\t\t} else {\n\t\t\tif operator[i\
    \ - 1] == \"+\" {\n\t\t\t\tstack.append(stack.removeLast() + operand[i])\n\t\t\
    \t} else if operator[i - 1] == \"-\" {\n\t\t\t\tstack.append(stack.removeLast()\
    \ - operand[i])\n\t\t\t} else if operator[i - 1] == \"*\" {\n\t\t\t\tstack.append(stack.removeLast()\
    \ * operand[i])\n\t\t\t} else if operator[i - 1] == \"//\" {\n\t\t\t\tstack.append(stack.removeLast()\
    \ / operand[i])\n\t\t\t} else if operator[i - 1] == \"**\" {\n\t\t\t\tstack.append(Int(pow(Double(stack.removeLast()),\
    \ Double(operand[i]))))\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.last!\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp6sfxj3gq.swift:26:7: error: expected expression, var, or let in\
    \ 'if' condition\n                        if operator[i - 1] == \"+\" {\n    \
    \                       ^\n/tmp/tmp6sfxj3gq.swift:26:15: error: '[' is not allowed\
    \ in operator names\n                        if operator[i - 1] == \"+\" {\n \
    \                                  ^\n/tmp/tmp6sfxj3gq.swift:28:14: error: expected\
    \ expression, var, or let in 'if' condition\n                        } else if\
    \ operator[i - 1] == \"-\" {\n                                  ^\n/tmp/tmp6sfxj3gq.swift:28:22:\
    \ error: '[' is not allowed in operator names\n                        } else\
    \ if operator[i - 1] == \"-\" {\n                                          ^\n\
    /tmp/tmp6sfxj3gq.swift:30:14: error: expected expression, var, or let in 'if'\
    \ condition\n                        } else if operator[i - 1] == \"*\" {\n  \
    \                                ^\n/tmp/tmp6sfxj3gq.swift:30:22: error: '[' is\
    \ not allowed in operator names\n                        } else if operator[i\
    \ - 1] == \"*\" {\n                                          ^\n/tmp/tmp6sfxj3gq.swift:32:14:\
    \ error: expected expression, var, or let in 'if' condition\n                \
    \        } else if operator[i - 1] == \"//\" {\n                             \
    \     ^\n/tmp/tmp6sfxj3gq.swift:32:22: error: '[' is not allowed in operator names\n\
    \                        } else if operator[i - 1] == \"//\" {\n             \
    \                             ^\n/tmp/tmp6sfxj3gq.swift:34:14: error: expected\
    \ expression, var, or let in 'if' condition\n                        } else if\
    \ operator[i - 1] == \"**\" {\n                                  ^\n/tmp/tmp6sfxj3gq.swift:34:22:\
    \ error: '[' is not allowed in operator names\n                        } else\
    \ if operator[i - 1] == \"**\" {\n                                          ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var index\
    \ = 0\n    while index < operator.count {\n        switch operator[index] {\n\
    \        case \"+\":\n            result += operand[index + 1]\n        case \"\
    -\":\n            result -= operand[index + 1]\n        case \"*\":\n        \
    \    result *= operand[index + 1]\n        case \"//\":\n            result /=\
    \ operand[index + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[index + 1])))\n        default:\n            break\n        }\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1jhfwy8h.swift:23:19: error: expected expression after operator\n\
    \    while index < operator.count {\n                  ^\n/tmp/tmp1jhfwy8h.swift:23:27:\
    \ error: '.' is not allowed in operator names\n    while index < operator.count\
    \ {\n                          ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var result = operand[0]\n  for (index,\
    \ element) in operand.enumerated() {\n    if index > 0 {\n      if operator[index\
    \ - 1] == \"+\" {\n        result += element\n      } else if operator[index -\
    \ 1] == \"-\" {\n        result -= element\n      } else if operator[index - 1]\
    \ == \"*\" {\n        result *= element\n      } else if operator[index - 1] ==\
    \ \"//\" {\n        result /= element\n      } else if operator[index - 1] ==\
    \ \"**\" {\n        result = Int(pow(Double(result), Double(element)))\n     \
    \ }\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp624ydc27.swift:24:10: error: expected expression, var, or let in\
    \ 'if' condition\n      if operator[index - 1] == \"+\" {\n         ^\n/tmp/tmp624ydc27.swift:24:18:\
    \ error: '[' is not allowed in operator names\n      if operator[index - 1] ==\
    \ \"+\" {\n                 ^\n/tmp/tmp624ydc27.swift:26:17: error: expected expression,\
    \ var, or let in 'if' condition\n      } else if operator[index - 1] == \"-\"\
    \ {\n                ^\n/tmp/tmp624ydc27.swift:26:25: error: '[' is not allowed\
    \ in operator names\n      } else if operator[index - 1] == \"-\" {\n        \
    \                ^\n/tmp/tmp624ydc27.swift:28:17: error: expected expression,\
    \ var, or let in 'if' condition\n      } else if operator[index - 1] == \"*\"\
    \ {\n                ^\n/tmp/tmp624ydc27.swift:28:25: error: '[' is not allowed\
    \ in operator names\n      } else if operator[index - 1] == \"*\" {\n        \
    \                ^\n/tmp/tmp624ydc27.swift:30:17: error: expected expression,\
    \ var, or let in 'if' condition\n      } else if operator[index - 1] == \"//\"\
    \ {\n                ^\n/tmp/tmp624ydc27.swift:30:25: error: '[' is not allowed\
    \ in operator names\n      } else if operator[index - 1] == \"//\" {\n       \
    \                 ^\n/tmp/tmp624ydc27.swift:32:17: error: expected expression,\
    \ var, or let in 'if' condition\n      } else if operator[index - 1] == \"**\"\
    \ {\n                ^\n/tmp/tmp624ydc27.swift:32:25: error: '[' is not allowed\
    \ in operator names\n      } else if operator[index - 1] == \"**\" {\n       \
    \                 ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operator.count == operand.count\
    \ - 1 else { return 0 }\n    guard operator.count > 0 else { return 0 }\n    guard\
    \ operand.count > 1 else { return 0 }\n    \n    var sum = operand[0]\n    for\
    \ i in 0..<operator.count {\n        switch operator[i] {\n        case \"+\"\
    :\n            sum += operand[i + 1]\n        case \"-\":\n            sum -=\
    \ operand[i + 1]\n        case \"*\":\n            sum *= operand[i + 1]\n   \
    \     case \"//\":\n            sum /= operand[i + 1]\n        case \"**\":\n\
    \            sum = Int(pow(Double(sum), Double(operand[i + 1])))\n        default:\n\
    \            break\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnx3lu4sz.swift:21:11: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard operator.count == operand.count - 1 else { return\
    \ 0 }\n          ^\n/tmp/tmpnx3lu4sz.swift:21:19: error: '.' is not allowed in\
    \ operator names\n    guard operator.count == operand.count - 1 else { return\
    \ 0 }\n                  ^\n/tmp/tmpnx3lu4sz.swift:22:11: error: expected expression,\
    \ var, let or case in 'guard' condition\n    guard operator.count > 0 else { return\
    \ 0 }\n          ^\n/tmp/tmpnx3lu4sz.swift:22:19: error: '.' is not allowed in\
    \ operator names\n    guard operator.count > 0 else { return 0 }\n           \
    \       ^\n/tmp/tmpnx3lu4sz.swift:26:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpnx3lu4sz.swift:26:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpnx3lu4sz.swift:27:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpnx3lu4sz.swift:27:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res = operand[0]\n    var op1: Int\n\
    \    var op2: Int\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            op1 = res\n            op2 = operand[i+1]\n\
    \            res = op1 + op2\n        case \"-\":\n            op1 = res\n   \
    \         op2 = operand[i+1]\n            res = op1 - op2\n        case \"*\"\
    :\n            op1 = res\n            op2 = operand[i+1]\n            res = op1\
    \ * op2\n        case \"//\":\n            op1 = res\n            op2 = operand[i+1]\n\
    \            res = op1 / op2\n        case \"**\":\n            op1 = res\n  \
    \          op2 = operand[i+1]\n            res = op1 ^ op2\n        default:\n\
    \            return 0\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppwzc4lcp.swift:24:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmppwzc4lcp.swift:24:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmppwzc4lcp.swift:25:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmppwzc4lcp.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operator = operator\n    var operand\
    \ = operand\n    var result = 0\n    let mult = operator.firstIndex(of: \"*\"\
    ) ?? Int.max\n    let div = operator.firstIndex(of: \"//\") ?? Int.max\n    let\
    \ exp = operator.firstIndex(of: \"**\") ?? Int.max\n    let operandIndex = min(mult,\
    \ div, exp)\n    if operandIndex != Int.max {\n        switch operator[operandIndex]\
    \ {\n        case \"*\":\n            operand[operandIndex] *= operand[operandIndex\
    \ + 1]\n        case \"//\":\n            operand[operandIndex] /= operand[operandIndex\
    \ + 1]\n        case \"**\":\n            operand[operandIndex] = Int(pow(Double(operand[operandIndex]),\
    \ Double(operand[operandIndex + 1])))\n        default:\n            break\n \
    \       }\n        operand.remove(at: operandIndex + 1)\n        operator.remove(at:\
    \ operandIndex)\n    }\n    result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmp_dy9ck.swift:21:9: error: keyword 'operator' cannot be used as\
    \ an identifier here\n    var operator = operator\n        ^\n/tmp/tmpmp_dy9ck.swift:21:9:\
    \ note: if this name is unavoidable, use backticks to escape it\n    var operator\
    \ = operator\n        ^~~~~~~~\n        `operator`\n/tmp/tmpmp_dy9ck.swift:21:20:\
    \ error: expected initial value after '='\n    var operator = operator\n     \
    \              ^\n/tmp/tmpmp_dy9ck.swift:21:19: error: consecutive statements\
    \ on a line must be separated by ';'\n    var operator = operator\n          \
    \        ^\n                  ;\n/tmp/tmpmp_dy9ck.swift:21:28: error: expected\
    \ operator name in operator declaration\n    var operator = operator\n       \
    \                    ^\n/tmp/tmpmp_dy9ck.swift:24:16: error: expected initial\
    \ value after '='\n    let mult = operator.firstIndex(of: \"*\") ?? Int.max\n\
    \               ^\n/tmp/tmpmp_dy9ck.swift:24:15: error: consecutive statements\
    \ on a line must be separated by ';'\n    let mult = operator.firstIndex(of: \"\
    *\") ?? Int.max\n              ^\n              ;\n/tmp/tmpmp_dy9ck.swift:24:24:\
    \ error: '.' is not allowed in operator names\n    let mult = operator.firstIndex(of:\
    \ \"*\") ?? Int.max\n                       ^\n/tmp/tmpmp_dy9ck.swift:25:15: error:\
    \ expected initial value after '='\n    let div = operator.firstIndex(of: \"//\"\
    ) ?? Int.max\n              ^\n/tmp/tmpmp_dy9ck.swift:25:14: error: consecutive\
    \ statements on a line must be separated by ';'\n    let div = operator.firstIndex(of:\
    \ \"//\") ?? Int.max\n             ^\n             ;\n/tmp/tmpmp_dy9ck.swift:25:23:\
    \ error: '.' is not allowed in operator names\n    let div = operator.firstIndex(of:\
    \ \"//\") ?? Int.max\n                      ^\n/tmp/tmpmp_dy9ck.swift:26:15: error:\
    \ expected initial value after '='\n    let exp = operator.firstIndex(of: \"**\"\
    ) ?? Int.max\n              ^\n/tmp/tmpmp_dy9ck.swift:26:14: error: consecutive\
    \ statements on a line must be separated by ';'\n    let exp = operator.firstIndex(of:\
    \ \"**\") ?? Int.max\n             ^\n             ;\n/tmp/tmpmp_dy9ck.swift:26:23:\
    \ error: '.' is not allowed in operator"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i + 1]\n        case \"-\":\n            result -=\
    \ operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = pow(result, operand[i + 1])\n        default:\n      \
    \      print(\"not an operator\")\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppj6zibt_.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmppj6zibt_.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmppj6zibt_.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmppj6zibt_.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tvar operator = operator\n\tvar operand\
    \ = operand\n\tlet add = { $0 + $1 }\n\tlet sub = { $0 - $1 }\n\tlet mul = { $0\
    \ * $1 }\n\tlet div = { $0 / $1 }\n\tlet exp = { Int(pow(Double($0), Double($1)))\
    \ }\n\t\n\tvar arr: [((Int, Int) -> Int)] = [add, sub, mul, div, exp]\n\t\n\t\
    var res = operand[0]\n\t\n\tfor i in 0..<operator.count {\n\t\tswitch operator[i]\
    \ {\n\t\tcase \"+\":\n\t\t\tres = arr[0](res, operand[i + 1])\n\t\tcase \"-\"\
    :\n\t\t\tres = arr[1](res, operand[i + 1])\n\t\tcase \"*\":\n\t\t\tres = arr[2](res,\
    \ operand[i + 1])\n\t\tcase \"//\":\n\t\t\tres = arr[3](res, operand[i + 1])\n\
    \t\tcase \"**\":\n\t\t\tres = arr[4](res, operand[i + 1])\n\t\tdefault:\n\t\t\t\
    break\n\t\t}\n\t}\n\treturn res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4nv75sjv.swift:21:6: error: keyword 'operator' cannot be used as\
    \ an identifier here\n        var operator = operator\n            ^\n/tmp/tmp4nv75sjv.swift:21:6:\
    \ note: if this name is unavoidable, use backticks to escape it\n        var operator\
    \ = operator\n            ^~~~~~~~\n            `operator`\n/tmp/tmp4nv75sjv.swift:21:17:\
    \ error: expected initial value after '='\n        var operator = operator\n \
    \                      ^\n/tmp/tmp4nv75sjv.swift:21:16: error: consecutive statements\
    \ on a line must be separated by ';'\n        var operator = operator\n      \
    \                ^\n                      ;\n/tmp/tmp4nv75sjv.swift:21:25: error:\
    \ expected operator name in operator declaration\n        var operator = operator\n\
    \                               ^\n/tmp/tmp4nv75sjv.swift:33:15: error: expected\
    \ expression after operator\n        for i in 0..<operator.count {\n         \
    \            ^\n/tmp/tmp4nv75sjv.swift:33:15: error: expected '{' to start the\
    \ body of for-each loop\n        for i in 0..<operator.count {\n             \
    \        ^\n/tmp/tmp4nv75sjv.swift:34:10: error: expected expression in 'switch'\
    \ statement\n                switch operator[i] {\n                       ^\n\
    /tmp/tmp4nv75sjv.swift:34:18: error: '[' is not allowed in operator names\n  \
    \              switch operator[i] {\n                               ^\n/tmp/tmp4nv75sjv.swift:23:17:\
    \ error: ambiguous use of operator '+'\n        let add = { $0 + $1 }\n      \
    \                 ^\nSwift.String:2:35: note: found this candidate\n    @inlinable\
    \ public static func + (lhs: String, rhs: String) -> String\n                \
    \                  ^\nSwift.Duration:6:24: note: found this candidate\n    public\
    \ static func + (lhs: Duration, rhs: Duration) -> Duration\n                 \
    \      ^\nSwift.Float16:3:24: note: found this candidate\n    public static func\
    \ + (lhs: Float16, rhs: Float16) -> Float16\n                       ^\nSwift.Float:2:24:\
    \ note: found this candidate\n    public static func + (lhs: Float, rhs: Float)\
    \ -> Float\n                       ^\nSwift.Double:2:24: note: found this candidat"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard let op = operator.first else {\
    \ return operand.first! }\n    var opr = Array(operator.dropFirst())\n    var\
    \ ope = Array(operand.dropFirst())\n    switch op {\n    case \"+\":\n       \
    \ return operand.first! + do_algebra(operator: opr, operand: ope)\n    case \"\
    -\":\n        return operand.first! - do_algebra(operator: opr, operand: ope)\n\
    \    case \"*\":\n        return operand.first! * do_algebra(operator: opr, operand:\
    \ ope)\n    case \"//\":\n        return operand.first! / do_algebra(operator:\
    \ opr, operand: ope)\n    case \"**\":\n        return Int(pow(Double(operand.first!),\
    \ Double(do_algebra(operator: opr, operand: ope))))\n    default:\n        return\
    \ 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfe5alrc4.swift:21:20: error: expected expression after '=' in conditional\
    \ binding\n    guard let op = operator.first else { return operand.first! }\n\
    \                   ^\n/tmp/tmpfe5alrc4.swift:21:20: error: expected 'else' after\
    \ 'guard' condition\n    guard let op = operator.first else { return operand.first!\
    \ }\n                   ^\n/tmp/tmpfe5alrc4.swift:21:19: error: consecutive statements\
    \ on a line must be separated by ';'\n    guard let op = operator.first else {\
    \ return operand.first! }\n                  ^\n                  ;\n/tmp/tmpfe5alrc4.swift:21:28:\
    \ error: '.' is not allowed in operator names\n    guard let op = operator.first\
    \ else { return operand.first! }\n                           ^\n/tmp/tmpfe5alrc4.swift:22:21:\
    \ error: expected expression in list of expressions\n    var opr = Array(operator.dropFirst())\n\
    \                    ^\n/tmp/tmpfe5alrc4.swift:22:21: error: consecutive statements\
    \ on a line must be separated by ';'\n    var opr = Array(operator.dropFirst())\n\
    \                    ^\n                    ;\n/tmp/tmpfe5alrc4.swift:22:29: error:\
    \ '.' is not allowed in operator names\n    var opr = Array(operator.dropFirst())\n\
    \                            ^\n/tmp/tmpfe5alrc4.swift:22:15: error: generic parameter\
    \ 'Element' could not be inferred\n    var opr = Array(operator.dropFirst())\n\
    \              ^\n/tmp/tmpfe5alrc4.swift:22:15: note: explicitly specify the generic\
    \ arguments to fix this issue\n    var opr = Array(operator.dropFirst())\n   \
    \           ^\n                   <Any>\n/tmp/tmpfe5alrc4.swift:34:20: error:\
    \ cannot find 'pow' in scope\n        return Int(pow(Double(operand.first!), Double(do_algebra(operator:\
    \ opr, operand: ope))))\n                   ^~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var stack = Stack<Int>()\n    var op\
    \ = operator\n    var oper = operand\n    while op.count > 0 {\n        if let\
    \ o = op.popLast() {\n            let a = oper.popLast()!\n            let b =\
    \ oper.popLast()!\n            var result = 0\n            switch o {\n      \
    \      case \"+\":\n                result = a + b\n            case \"-\":\n\
    \                result = b - a\n            case \"*\":\n                result\
    \ = a * b\n            case \"//\":\n                result = b / a\n        \
    \    case \"**\":\n                result = Int(pow(Double(b), Double(a)))\n \
    \           default:\n                print(\"error\")\n            }\n      \
    \      oper.append(result)\n        }\n    }\n    return oper.popLast()!\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpx0qvurez.swift:22:14: error: expected initial value after '='\n\
    \    var op = operator\n             ^\n/tmp/tmpx0qvurez.swift:22:13: error: consecutive\
    \ statements on a line must be separated by ';'\n    var op = operator\n     \
    \       ^\n            ;\n/tmp/tmpx0qvurez.swift:22:22: error: expected operator\
    \ name in operator declaration\n    var op = operator\n                     ^\n\
    /tmp/tmpx0qvurez.swift:21:17: error: cannot find 'Stack' in scope\n    var stack\
    \ = Stack<Int>()\n                ^~~~~\n/tmp/tmpx0qvurez.swift:39:30: error:\
    \ cannot find 'pow' in scope\n                result = Int(pow(Double(b), Double(a)))\n\
    \                             ^~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tif operator.count != operand.count - 1\
    \ {\n\t\treturn 0\n\t}\n\t\n\tif operator.count == 0 || operand.count == 0 {\n\
    \t\treturn 0\n\t}\n\t\n\tvar result = operand[0]\n\tfor i in 0..<operator.count\
    \ {\n\t\tswitch operator[i] {\n\t\tcase \"+\":\n\t\t\tresult += operand[i + 1]\n\
    \t\tcase \"-\":\n\t\t\tresult -= operand[i + 1]\n\t\tcase \"*\":\n\t\t\tresult\
    \ *= operand[i + 1]\n\t\tcase \"//\":\n\t\t\tresult /= operand[i + 1]\n\t\tcase\
    \ \"**\":\n\t\t\tresult = Int(pow(Double(result), Double(operand[i + 1])))\n\t\
    \tdefault:\n\t\t\tresult = 0\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpa6m27znn.swift:21:5: error: expected expression, var, or let in\
    \ 'if' condition\n        if operator.count != operand.count - 1 {\n         \
    \  ^\n/tmp/tmpa6m27znn.swift:21:13: error: '.' is not allowed in operator names\n\
    \        if operator.count != operand.count - 1 {\n                   ^\n/tmp/tmpa6m27znn.swift:25:5:\
    \ error: expected expression, var, or let in 'if' condition\n        if operator.count\
    \ == 0 || operand.count == 0 {\n           ^\n/tmp/tmpa6m27znn.swift:25:13: error:\
    \ '.' is not allowed in operator names\n        if operator.count == 0 || operand.count\
    \ == 0 {\n                   ^\n/tmp/tmpa6m27znn.swift:30:15: error: expected\
    \ expression after operator\n        for i in 0..<operator.count {\n         \
    \            ^\n/tmp/tmpa6m27znn.swift:30:15: error: expected '{' to start the\
    \ body of for-each loop\n        for i in 0..<operator.count {\n             \
    \        ^\n/tmp/tmpa6m27znn.swift:31:10: error: expected expression in 'switch'\
    \ statement\n                switch operator[i] {\n                       ^\n\
    /tmp/tmpa6m27znn.swift:31:18: error: '[' is not allowed in operator names\n  \
    \              switch operator[i] {\n                               ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let operand = operand.reduce(0) { (res,\
    \ cur) -> Int in\n        return res * 10 + cur\n    }\n    let operands = String(operand).flatMap\
    \ { Int(String($0)) }\n    var ans = operands[0]\n    for (i, op) in operator.enumerated()\
    \ {\n        switch op {\n        case \"+\":\n            ans += operands[i +\
    \ 1]\n        case \"-\":\n            ans -= operands[i + 1]\n        case \"\
    *\":\n            ans *= operands[i + 1]\n        case \"//\":\n            ans\
    \ /= operands[i + 1]\n        case \"**\":\n            ans = Int(pow(Double(ans),\
    \ Double(operands[i + 1])))\n        default:\n            return -1\n       \
    \ }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpimwpavxo.swift:26:20: error: expected Sequence expression for for-each\
    \ loop\n    for (i, op) in operator.enumerated() {\n                   ^\n/tmp/tmpimwpavxo.swift:26:20:\
    \ error: expected '{' to start the body of for-each loop\n    for (i, op) in operator.enumerated()\
    \ {\n                   ^\n/tmp/tmpimwpavxo.swift:24:36: warning: 'flatMap' is\
    \ deprecated: Please use compactMap(_:) for the case where closure returns an\
    \ optional value\n    let operands = String(operand).flatMap { Int(String($0))\
    \ }\n                                   ^\n/tmp/tmpimwpavxo.swift:24:36: note:\
    \ use 'compactMap(_:)' instead\n    let operands = String(operand).flatMap { Int(String($0))\
    \ }\n                                   ^~~~~~~\n                            \
    \       compactMap\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // your code here\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpl8ri5i32/tmpl8ri5i32.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8514b3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8514834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8514834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85148337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8ri5i32                        0x000055dc0314647b <unavailable> + 5243

    5    libc.so.6                          0x00002b8514d29460 __libc_start_main +
    245

    6    tmpl8ri5i32                        0x000055dc03146029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var stack = [Int]()\n  for i in 0 ..<\
    \ operand.count {\n    if i > 0 {\n      if operator[i - 1] == \"+\" {\n     \
    \   stack.append(stack.removeLast() + operand[i])\n      } else if operator[i\
    \ - 1] == \"-\" {\n        stack.append(stack.removeLast() - operand[i])\n   \
    \   } else if operator[i - 1] == \"*\" {\n        stack.append(stack.removeLast()\
    \ * operand[i])\n      } else if operator[i - 1] == \"//\" {\n        stack.append(stack.removeLast()\
    \ / operand[i])\n      } else if operator[i - 1] == \"**\" {\n        stack.append(stack.removeLast()\
    \ ** operand[i])\n      }\n    } else {\n      stack.append(operand[i])\n    }\n\
    \  }\n  return stack.first!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpn5znx1v3.swift:24:10: error: expected expression, var, or let in\
    \ 'if' condition\n      if operator[i - 1] == \"+\" {\n         ^\n/tmp/tmpn5znx1v3.swift:24:18:\
    \ error: '[' is not allowed in operator names\n      if operator[i - 1] == \"\
    +\" {\n                 ^\n/tmp/tmpn5znx1v3.swift:26:17: error: expected expression,\
    \ var, or let in 'if' condition\n      } else if operator[i - 1] == \"-\" {\n\
    \                ^\n/tmp/tmpn5znx1v3.swift:26:25: error: '[' is not allowed in\
    \ operator names\n      } else if operator[i - 1] == \"-\" {\n               \
    \         ^\n/tmp/tmpn5znx1v3.swift:28:17: error: expected expression, var, or\
    \ let in 'if' condition\n      } else if operator[i - 1] == \"*\" {\n        \
    \        ^\n/tmp/tmpn5znx1v3.swift:28:25: error: '[' is not allowed in operator\
    \ names\n      } else if operator[i - 1] == \"*\" {\n                        ^\n\
    /tmp/tmpn5znx1v3.swift:30:17: error: expected expression, var, or let in 'if'\
    \ condition\n      } else if operator[i - 1] == \"//\" {\n                ^\n\
    /tmp/tmpn5znx1v3.swift:30:25: error: '[' is not allowed in operator names\n  \
    \    } else if operator[i - 1] == \"//\" {\n                        ^\n/tmp/tmpn5znx1v3.swift:32:17:\
    \ error: expected expression, var, or let in 'if' condition\n      } else if operator[i\
    \ - 1] == \"**\" {\n                ^\n/tmp/tmpn5znx1v3.swift:32:25: error: '['\
    \ is not allowed in operator names\n      } else if operator[i - 1] == \"**\"\
    \ {\n                        ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var i =\
    \ 0\n    while i < operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i + 1]\n        case \"-\":\n        \
    \    result -= operand[i + 1]\n        case \"*\":\n            result *= operand[i\
    \ + 1]\n        case \"//\":\n            result /= operand[i + 1]\n        case\
    \ \"**\":\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n\
    \        default:\n            print(\"Invalid operator\")\n        }\n      \
    \  i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp8k49npck.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmp8k49npck.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var operand = operand\n    var stack =\
    \ [operand.removeFirst()]\n    for (index, nextOperator) in operator.enumerated()\
    \ {\n        let right = operand[index]\n        var left = stack.removeLast()\n\
    \        if left == 0 && nextOperator == \"/\" {\n            return 0\n     \
    \   }\n        switch nextOperator {\n        case \"+\":\n            left +=\
    \ right\n        case \"-\":\n            left -= right\n        case \"*\":\n\
    \            left *= right\n        case \"/\":\n            left /= right\n \
    \       case \"**\":\n            left = Int(pow(Double(left), Double(right)))\n\
    \        default:\n            break\n        }\n        stack.append(left)\n\
    \    }\n    return stack.first ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvg_rm7h0.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count == 0 {\n       ^\n\
    /tmp/tmpvg_rm7h0.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count == 0 {\n               ^\n/tmp/tmpvg_rm7h0.swift:26:34:\
    \ error: expected Sequence expression for for-each loop\n    for (index, nextOperator)\
    \ in operator.enumerated() {\n                                 ^\n/tmp/tmpvg_rm7h0.swift:26:34:\
    \ error: expected '{' to start the body of for-each loop\n    for (index, nextOperator)\
    \ in operator.enumerated() {\n                                 ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for (i,\
    \ op) in operator.enumerated() {\n        switch op {\n        case \"+\":\n \
    \           result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpx79g6_yd.swift:22:20: error: expected Sequence expression for for-each\
    \ loop\n    for (i, op) in operator.enumerated() {\n                   ^\n/tmp/tmpx79g6_yd.swift:22:20:\
    \ error: expected '{' to start the body of for-each loop\n    for (i, op) in operator.enumerated()\
    \ {\n                   ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        let op = operator[i]\n        let op1 = operand[i\
    \ + 1]\n        switch op {\n        case \"+\":\n            result += op1\n\
    \        case \"-\":\n            result -= op1\n        case \"*\":\n       \
    \     result *= op1\n        case \"//\":\n            result /= op1\n       \
    \ case \"**\":\n            result = Int(pow(Double(result), Double(op1)))\n \
    \       default:\n            continue\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmposw8be83.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmposw8be83.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmposw8be83.swift:23:18: error: expected initial\
    \ value after '='\n        let op = operator[i]\n                 ^\n/tmp/tmposw8be83.swift:23:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[i]\n                ^\n                ;\n/tmp/tmposw8be83.swift:23:26:\
    \ error: '[' is not allowed in operator names\n        let op = operator[i]\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 {\n        return\
    \ 0\n    }\n    if operand.count == 0 {\n        return 0\n    }\n    var calcExpression\
    \ = \"\"\n    for (index, item) in operand.enumerated() {\n        calcExpression\
    \ += \"\\(item)\"\n        if index != operand.count - 1 {\n            calcExpression\
    \ += operator[index]\n        }\n    }\n    let result = eval(expression: calcExpression)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpk8hl1ynn.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 {\n       ^\n/tmp/tmpk8hl1ynn.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count == 0 {\n\
    \               ^\n/tmp/tmpk8hl1ynn.swift:31:31: error: expected expression after\
    \ operator\n            calcExpression += operator[index]\n                  \
    \            ^\n/tmp/tmpk8hl1ynn.swift:31:39: error: '[' is not allowed in operator\
    \ names\n            calcExpression += operator[index]\n                     \
    \                 ^\n/tmp/tmpk8hl1ynn.swift:34:18: error: cannot find 'eval' in\
    \ scope\n    let result = eval(expression: calcExpression)\n                 ^~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operand.count == 0 {\n        return\
    \ 0\n    }\n    var result = operand[0]\n    for i in 0..<operator.count {\n \
    \       if operator[i] == \"+\" {\n            result += operand[i + 1]\n    \
    \    } else if operator[i] == \"-\" {\n            result -= operand[i + 1]\n\
    \        } else if operator[i] == \"*\" {\n            result *= operand[i + 1]\n\
    \        } else if operator[i] == \"//\" {\n            result /= operand[i +\
    \ 1]\n        } else if operator[i] == \"**\" {\n            result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp87uundxs.swift:25:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp87uundxs.swift:25:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp87uundxs.swift:26:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmp87uundxs.swift:26:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmp87uundxs.swift:28:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmp87uundxs.swift:28:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmp87uundxs.swift:30:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmp87uundxs.swift:30:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmp87uundxs.swift:32:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmp87uundxs.swift:32:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmp87uundxs.swift:34:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmp87uundxs.swift:34:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let num = operand.count\n    var result\
    \ = operand[0]\n    for i in 0..<num-1 {\n        switch operator[i] {\n     \
    \   case \"+\":\n            result += operand[i+1]\n        case \"-\":\n   \
    \         result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i+1])))\n     \
    \   default:\n            print(\"Error\")\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkas2e6vm.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpkas2e6vm.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tvar result = operand[0]\n\tfor index in\
    \ 0..<operator.count {\n\t\tswitch operator[index] {\n\t\tcase \"+\":\n\t\t\t\
    result += operand[index + 1]\n\t\tcase \"-\":\n\t\t\tresult -= operand[index +\
    \ 1]\n\t\tcase \"*\":\n\t\t\tresult *= operand[index + 1]\n\t\tcase \"//\":\n\t\
    \t\tresult /= operand[index + 1]\n\t\tcase \"**\":\n\t\t\tresult = Int(pow(Double(result),\
    \ Double(operand[index + 1])))\n\t\tdefault:\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvi7ivhbm.swift:22:19: error: expected expression after operator\n\
    \        for index in 0..<operator.count {\n                         ^\n/tmp/tmpvi7ivhbm.swift:22:19:\
    \ error: expected '{' to start the body of for-each loop\n        for index in\
    \ 0..<operator.count {\n                         ^\n/tmp/tmpvi7ivhbm.swift:23:10:\
    \ error: expected expression in 'switch' statement\n                switch operator[index]\
    \ {\n                       ^\n/tmp/tmpvi7ivhbm.swift:23:18: error: '[' is not\
    \ allowed in operator names\n                switch operator[index] {\n      \
    \                         ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operators = operator\n    var operands\
    \ = operand\n    while operators.count > 0 {\n        if operators.contains(\"\
    **\") {\n            do_exponentiation(&operators, &operands)\n        } else\
    \ if operators.contains(\"//\") {\n            do_floor_division(&operators, &operands)\n\
    \        } else if operators.contains(\"*\") {\n            do_multiplication(&operators,\
    \ &operands)\n        } else if operators.contains(\"-\") {\n            do_subtraction(&operators,\
    \ &operands)\n        } else if operators.contains(\"+\") {\n            do_addition(&operators,\
    \ &operands)\n        }\n    }\n    return operands[0]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmx4gg4pe.swift:21:21: error: expected initial value after '='\n\
    \    var operators = operator\n                    ^\n/tmp/tmpmx4gg4pe.swift:21:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    var operators\
    \ = operator\n                   ^\n                   ;\n/tmp/tmpmx4gg4pe.swift:21:29:\
    \ error: expected operator name in operator declaration\n    var operators = operator\n\
    \                            ^\n/tmp/tmpmx4gg4pe.swift:25:13: error: cannot find\
    \ 'do_exponentiation' in scope\n            do_exponentiation(&operators, &operands)\n\
    \            ^~~~~~~~~~~~~~~~~\n/tmp/tmpmx4gg4pe.swift:27:13: error: cannot find\
    \ 'do_floor_division' in scope\n            do_floor_division(&operators, &operands)\n\
    \            ^~~~~~~~~~~~~~~~~\n/tmp/tmpmx4gg4pe.swift:29:13: error: cannot find\
    \ 'do_multiplication' in scope\n            do_multiplication(&operators, &operands)\n\
    \            ^~~~~~~~~~~~~~~~~\n/tmp/tmpmx4gg4pe.swift:31:13: error: cannot find\
    \ 'do_subtraction' in scope\n            do_subtraction(&operators, &operands)\n\
    \            ^~~~~~~~~~~~~~\n/tmp/tmpmx4gg4pe.swift:33:13: error: cannot find\
    \ 'do_addition' in scope\n            do_addition(&operators, &operands)\n   \
    \         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let opr = operator.joined(separator:\
    \ \"\")\n    let opd = operand.reduce(\"\") {$0 + \"\\($1)\"}\n    return Expression(opr\
    \ + opd).evaluate()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7g6o2a94.swift:21:15: error: expected initial value after '='\n\
    \    let opr = operator.joined(separator: \"\")\n              ^\n/tmp/tmp7g6o2a94.swift:21:14:\
    \ error: consecutive statements on a line must be separated by ';'\n    let opr\
    \ = operator.joined(separator: \"\")\n             ^\n             ;\n/tmp/tmp7g6o2a94.swift:21:23:\
    \ error: '.' is not allowed in operator names\n    let opr = operator.joined(separator:\
    \ \"\")\n                      ^\n/tmp/tmp7g6o2a94.swift:23:12: error: cannot\
    \ find 'Expression' in scope\n    return Expression(opr + opd).evaluate()!\n \
    \          ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  if operator.count + 1 != operand.count\
    \ {\n    return 0\n  }\n  guard let first = operand.first else {\n    return 0\n\
    \  }\n  guard let second = operand.dropFirst().first else {\n    return 0\n  }\n\
    \  guard let op = operator.first else {\n    return 0\n  }\n  let newOperand =\
    \ operand.dropFirst(2)\n  let newOperator = operator.dropFirst()\n  switch op\
    \ {\n  case \"+\":\n    return first + second + do_algebra(operator: newOperator,\
    \ operand: newOperand)\n  case \"-\":\n    return first - second + do_algebra(operator:\
    \ newOperator, operand: newOperand)\n  case \"*\":\n    return first * second\
    \ + do_algebra(operator: newOperator, operand: newOperand)\n  case \"//\":\n \
    \   return first / second + do_algebra(operator: newOperator, operand: newOperand)\n\
    \  case \"**\":\n    return first * first + do_algebra(operator: newOperator,\
    \ operand: newOperand)\n  default:\n    return 0\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmplsg2dya0.swift:21:6: error: expected expression, var, or let in\
    \ 'if' condition\n  if operator.count + 1 != operand.count {\n     ^\n/tmp/tmplsg2dya0.swift:21:14:\
    \ error: '.' is not allowed in operator names\n  if operator.count + 1 != operand.count\
    \ {\n             ^\n/tmp/tmplsg2dya0.swift:30:18: error: expected expression\
    \ after '=' in conditional binding\n  guard let op = operator.first else {\n \
    \                ^\n/tmp/tmplsg2dya0.swift:30:18: error: expected 'else' after\
    \ 'guard' condition\n  guard let op = operator.first else {\n                \
    \ ^\n/tmp/tmplsg2dya0.swift:30:17: error: consecutive statements on a line must\
    \ be separated by ';'\n  guard let op = operator.first else {\n              \
    \  ^\n                ;\n/tmp/tmplsg2dya0.swift:30:26: error: '.' is not allowed\
    \ in operator names\n  guard let op = operator.first else {\n                \
    \         ^\n/tmp/tmplsg2dya0.swift:34:21: error: expected initial value after\
    \ '='\n  let newOperator = operator.dropFirst()\n                    ^\n/tmp/tmplsg2dya0.swift:34:20:\
    \ error: consecutive statements on a line must be separated by ';'\n  let newOperator\
    \ = operator.dropFirst()\n                   ^\n                   ;\n/tmp/tmplsg2dya0.swift:34:29:\
    \ error: '.' is not allowed in operator names\n  let newOperator = operator.dropFirst()\n\
    \                            ^\n/tmp/tmplsg2dya0.swift:37:72: error: cannot convert\
    \ value of type 'ArraySlice<Int>' to expected argument type '[Int]'\n    return\
    \ first + second + do_algebra(operator: newOperator, operand: newOperand)\n  \
    \                                                                     ^\n/tmp/tmplsg2dya0.swift:39:72:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n    return first - second + do_algebra(operator: newOperator, operand:\
    \ newOperand)\n                                                              \
    \         ^\n/tmp/tmplsg2dya0.swift:41:72: error: cannot convert value of type\
    \ 'ArraySlice<Int>' to expected argument type '[Int]'\n    return first * second\
    \ + do_algebra(operator: newOperator, op"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // your code here\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpl8ri5i32/tmpl8ri5i32.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8514b3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8514834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8514834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85148337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8ri5i32                        0x000055dc0314647b <unavailable> + 5243

    5    libc.so.6                          0x00002b8514d29460 __libc_start_main +
    245

    6    tmpl8ri5i32                        0x000055dc03146029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i + 1]\n        case \"-\":\n            result -= operand[i + 1]\n\
    \        case \"*\":\n            result *= operand[i + 1]\n        case \"//\"\
    :\n            result /= operand[i + 1]\n        case \"**\":\n            result\
    \ = Int(pow(Double(result), Double(operand[i + 1])))\n        default:\n     \
    \       break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_nwpgb87.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count == 0 {\n       ^\n\
    /tmp/tmp_nwpgb87.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count == 0 {\n               ^\n/tmp/tmp_nwpgb87.swift:25:18:\
    \ error: expected expression after operator\n    for i in 0..<operator.count {\n\
    \                 ^\n/tmp/tmp_nwpgb87.swift:25:18: error: expected '{' to start\
    \ the body of for-each loop\n    for i in 0..<operator.count {\n             \
    \    ^\n/tmp/tmp_nwpgb87.swift:26:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmp_nwpgb87.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let operators: [String: (Int, Int) ->\
    \ Int] = [\n        \"+\": (+),\n        \"-\": (-),\n        \"*\": (*),\n  \
    \      \"//\": (/),\n        \"**\": (pow),\n    ]\n    var operandStack: [Int]\
    \ = []\n    for i in 0..<operand.count {\n        if i < operand.count - 1 {\n\
    \            let result = operators[operator[i]]!(operandStack.popLast() ?? 0,\
    \ operand[i+1])\n            operandStack.append(result)\n        } else {\n \
    \           operandStack.append(operand[i])\n        }\n    }\n    return operandStack.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"**\"\
    , \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"\
    +\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprbc7e5vu.swift:31:36: error: expected expression in list of expressions\n\
    \            let result = operators[operator[i]]!(operandStack.popLast() ?? 0,\
    \ operand[i+1])\n                                   ^\n/tmp/tmprbc7e5vu.swift:31:36:\
    \ error: consecutive statements on a line must be separated by ';'\n         \
    \   let result = operators[operator[i]]!(operandStack.popLast() ?? 0, operand[i+1])\n\
    \                                   ^\n                                   ;\n\
    /tmp/tmprbc7e5vu.swift:31:44: error: '[' is not allowed in operator names\n  \
    \          let result = operators[operator[i]]!(operandStack.popLast() ?? 0, operand[i+1])\n\
    \                                           ^\n/tmp/tmprbc7e5vu.swift:26:16: error:\
    \ cannot find 'pow' in scope\n        \"**\": (pow),\n               ^~~\n/tmp/tmprbc7e5vu.swift:31:35:\
    \ error: missing argument for parameter #1 in call\n            let result = operators[operator[i]]!(operandStack.popLast()\
    \ ?? 0, operand[i+1])\n                                  ^\n                 \
    \                 <#Dictionary<String, (Int, Int) -> Int>.Index#>\nSwift.Dictionary:8:23:\
    \ note: 'subscript(_:)' declared here\n    @inlinable public subscript(position:\
    \ Dictionary<Key, Value>.Index) -> Dictionary<Key, Value>.Element { get }\n  \
    \                    ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Write your code here...\n    var\
    \ result = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i+1])))\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3in1_d38.swift:23:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp3in1_d38.swift:23:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp3in1_d38.swift:24:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp3in1_d38.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i+1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i+1]\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i+1]\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = Int(pow(Double(result), Double(operand[i+1])))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppavkufge.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmppavkufge.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmppavkufge.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmppavkufge.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmppavkufge.swift:25:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmppavkufge.swift:25:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmppavkufge.swift:27:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmppavkufge.swift:27:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmppavkufge.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmppavkufge.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmppavkufge.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmppavkufge.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var output = operand[0]\n    for i in\
    \ 0...operator.count - 1 {\n        switch operator[i] {\n        case \"+\":\n\
    \            output += operand[i + 1]\n        case \"-\":\n            output\
    \ -= operand[i + 1]\n        case \"*\":\n            output *= operand[i + 1]\n\
    \        case \"//\":\n            output /= operand[i + 1]\n        case \"**\"\
    :\n            output = output ^ operand[i + 1]\n        default:\n          \
    \  break\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp372_u70z.swift:22:18: error: expected expression after operator\n\
    \    for i in 0...operator.count - 1 {\n                 ^\n/tmp/tmp372_u70z.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0...operator.count\
    \ - 1 {\n                 ^\n/tmp/tmp372_u70z.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp372_u70z.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  /// The length of operator array is equal\
    \ to the length of operand array minus one.\n  /// Operand is an array of of non-negative\
    \ integers.\n  /// Operator array has at least one operator, and operand array\
    \ has at least two operands.\n  guard operator.count + 1 == operand.count else\
    \ {\n    return 0\n  }\n  let op = operator.reversed()\n  let od = operand.reversed()\n\
    \  let suffix = Array(zip(op, od))\n  var stack = [Int]()\n  var p: String = \"\
    \"\n  var a: Int = 0\n  for (o, d) in suffix {\n    switch o {\n    case \"+\"\
    :\n      stack.append(a + d)\n    case \"-\":\n      stack.append(a - d)\n   \
    \ case \"*\":\n      stack.append(a * d)\n    case \"//\":\n      stack.append(a\
    \ / d)\n    case \"**\":\n      stack.append(a ^ d)\n    default:\n      stack.append(d)\n\
    \    }\n    a = stack.removeLast()\n    p += String(describing: a) + o\n  }\n\
    \  // print(p)\n  return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpimlbl783.swift:24:9: error: expected expression, var, let or case\
    \ in 'guard' condition\n  guard operator.count + 1 == operand.count else {\n \
    \       ^\n/tmp/tmpimlbl783.swift:24:17: error: '.' is not allowed in operator\
    \ names\n  guard operator.count + 1 == operand.count else {\n                ^\n\
    /tmp/tmpimlbl783.swift:27:12: error: expected initial value after '='\n  let op\
    \ = operator.reversed()\n           ^\n/tmp/tmpimlbl783.swift:27:11: error: consecutive\
    \ statements on a line must be separated by ';'\n  let op = operator.reversed()\n\
    \          ^\n          ;\n/tmp/tmpimlbl783.swift:27:20: error: '.' is not allowed\
    \ in operator names\n  let op = operator.reversed()\n                   ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // your code here\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpl8ri5i32/tmpl8ri5i32.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8514b3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8514834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8514834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85148337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8ri5i32                        0x000055dc0314647b <unavailable> + 5243

    5    libc.so.6                          0x00002b8514d29460 __libc_start_main +
    245

    6    tmpl8ri5i32                        0x000055dc03146029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Your code here.\n    var result =\
    \ operand[0]\n    for i in 0..<operator.count {\n        let op = operator[i]\n\
    \        let num = operand[i+1]\n        switch op {\n        case \"+\":\n  \
    \          result += num\n        case \"-\":\n            result -= num\n   \
    \     case \"*\":\n            result *= num\n        case \"//\":\n         \
    \   result /= num\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(num)))\n        default:\n            print(\"Unknown operator: \\(op)\"\
    )\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp5anaiml4.swift:23:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp5anaiml4.swift:23:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp5anaiml4.swift:24:18: error: expected initial\
    \ value after '='\n        let op = operator[i]\n                 ^\n/tmp/tmp5anaiml4.swift:24:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[i]\n                ^\n                ;\n/tmp/tmp5anaiml4.swift:24:26:\
    \ error: '[' is not allowed in operator names\n        let op = operator[i]\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0 ..< operator.count {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfkecbw4f.swift:22:20: error: expected expression after operator\n\
    \    for i in 0 ..< operator.count {\n                   ^\n/tmp/tmpfkecbw4f.swift:22:20:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0 ..< operator.count\
    \ {\n                   ^\n/tmp/tmpfkecbw4f.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpfkecbw4f.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var i =\
    \ 0\n    while i < operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i + 1]\n        case \"-\":\n        \
    \    result -= operand[i + 1]\n        case \"*\":\n            result *= operand[i\
    \ + 1]\n        case \"//\":\n            result /= operand[i + 1]\n        case\
    \ \"**\":\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n\
    \        default:\n            return 0\n        }\n        i += 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpqby0dw6j.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpqby0dw6j.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        let sign = operator[i]\n        let value = operand[i\
    \ + 1]\n        switch sign {\n        case \"+\":\n            result += value\n\
    \        case \"-\":\n            result -= value\n        case \"*\":\n     \
    \       result *= value\n        case \"//\":\n            result /= value\n \
    \       case \"**\":\n            result = Int(pow(Double(result), Double(value)))\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp2xj2kyx8.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp2xj2kyx8.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp2xj2kyx8.swift:23:20: error: expected initial\
    \ value after '='\n        let sign = operator[i]\n                   ^\n/tmp/tmp2xj2kyx8.swift:23:19:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ sign = operator[i]\n                  ^\n                  ;\n/tmp/tmp2xj2kyx8.swift:23:28:\
    \ error: '[' is not allowed in operator names\n        let sign = operator[i]\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpcbr6dqsd/tmpcbr6dqsd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34a3e59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34a3b50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34a3b50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34a3b4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbr6dqsd                        0x0000557bccce547b <unavailable> + 5243

    5    libc.so.6                          0x00002b34a4045460 __libc_start_main +
    245

    6    tmpcbr6dqsd                        0x0000557bccce5029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tlet op: [String: (Int, Int) -> Int] =\
    \ [\n\t\t\"+\": (+),\n\t\t\"-\": (-),\n\t\t\"*\": (*),\n\t\t\"//\": (/)\n\t]\n\
    \tvar acc = operand[0]\n\tfor (i, o) in operator.enumerated() {\n\t\tlet v = operand[i\
    \ + 1]\n\t\tacc = op[o]!(acc, v)\n\t}\n\treturn acc\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxzbqn6aa.swift:28:16: error: expected Sequence expression for for-each\
    \ loop\n        for (i, o) in operator.enumerated() {\n                      ^\n\
    /tmp/tmpxzbqn6aa.swift:28:16: error: expected '{' to start the body of for-each\
    \ loop\n        for (i, o) in operator.enumerated() {\n                      ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operator.count == operand.count\
    \ - 1 else { return 0 }\n    guard operand.count >= 2 else { return 0 }\n    var\
    \ operators = operator\n    var operands = operand\n    while operators.count\
    \ > 0 {\n        guard let (index, value) = operators.enumerated().first(where:\
    \ { $0.element == \"**\" }) else { break }\n        let result = operands[index]\
    \ ** operands[index + 1]\n        operands.remove(at: index)\n        operands.remove(at:\
    \ index)\n        operands.insert(result, at: index)\n        operators.remove(at:\
    \ index)\n    }\n    while operators.count > 0 {\n        guard let (index, value)\
    \ = operators.enumerated().first(where: { $0.element == \"//\" }) else { break\
    \ }\n        let result = operands[index] / operands[index + 1]\n        operands.remove(at:\
    \ index)\n        operands.remove(at: index)\n        operands.insert(result,\
    \ at: index)\n        operators.remove(at: index)\n    }\n    while operators.count\
    \ > 0 {\n        guard let (index, value) = operators.enumerated().first(where:\
    \ { $0.element == \"*\" }) else { break }\n        let result = operands[index]\
    \ * operands[index + 1]\n        operands.remove(at: index)\n        operands.remove(at:\
    \ index)\n        operands.insert(result, at: index)\n        operators.remove(at:\
    \ index)\n    }\n    while operators.count > 0 {\n        guard let (index, value)\
    \ = operators.enumerated().first(where: { $0.element == \"-\" }) else { break\
    \ }\n        let result = operands[index] - operands[index + 1]\n        operands.remove(at:\
    \ index)\n        operands.remove(at: index)\n        operands.insert(result,\
    \ at: index)\n        operators.remove(at: index)\n    }\n    while operators.count\
    \ > 0 {\n        guard let (index, value) = operators.enumerated().first(where:\
    \ { $\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1j79cfpn.swift:21:11: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard operator.count == operand.count - 1 else { return\
    \ 0 }\n          ^\n/tmp/tmp1j79cfpn.swift:21:19: error: '.' is not allowed in\
    \ operator names\n    guard operator.count == operand.count - 1 else { return\
    \ 0 }\n                  ^\n/tmp/tmp1j79cfpn.swift:23:21: error: expected initial\
    \ value after '='\n    var operators = operator\n                    ^\n/tmp/tmp1j79cfpn.swift:23:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    var operators\
    \ = operator\n                   ^\n                   ;\n/tmp/tmp1j79cfpn.swift:23:29:\
    \ error: expected operator name in operator declaration\n    var operators = operator\n\
    \                            ^\n/tmp/tmp1j79cfpn.swift:58:74: error: '$' is not\
    \ an identifier; use backticks to escape it\n        guard let (index, value)\
    \ = operators.enumerated().first(where: { $\n                                \
    \                                         ^\n                                \
    \                                         `$`\n/tmp/tmp1j79cfpn.swift:62:1: error:\
    \ expected ')' in expression list\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n^\n/tmp/tmp1j79cfpn.swift:58:64: note: to match this opening '('\n\
    \        guard let (index, value) = operators.enumerated().first(where: { $\n\
    \                                                               ^\n/tmp/tmp1j79cfpn.swift:59:2:\
    \ error: expected 'else' after 'guard' condition\n}\n ^\n/tmp/tmp1j79cfpn.swift:76:67:\
    \ error: expected '}' at end of brace statement\nassert(do_algebra(operator: [\"\
    //\", \"*\"], operand: [7, 3, 4]) == 8)\n                                    \
    \                              ^\n/tmp/tmp1j79cfpn.swift:57:31: note: to match\
    \ this opening '{'\n    while operators.count > 0 {\n                        \
    \      ^\n/tmp/tmp1j79cfpn.swift:76:67: error: expected '}' at end of brace statement\n\
    assert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)\n     \
    \                                                             ^\n/tmp/tmp1j7"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let op_count = operator.count\n    let\
    \ operand_count = operand.count\n    if op_count == 0 || operand_count == 0 {\n\
    \        return 0\n    }\n    if operand_count - op_count == 1 {\n        return\
    \ operand[0]\n    } else {\n        var result = 0\n        for i in 0..<op_count\
    \ {\n            switch operator[i] {\n            case \"+\":\n             \
    \   result = operand[i] + operand[i+1]\n            case \"-\":\n            \
    \    result = operand[i] - operand[i+1]\n            case \"*\":\n           \
    \     result = operand[i] * operand[i+1]\n            case \"//\":\n         \
    \       result = operand[i] / operand[i+1]\n            case \"**\":\n       \
    \         result = operand[i] * operand[i+1]\n            default:\n         \
    \       print(\"Not a valid operator\")\n            }\n        }\n        return\
    \ result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp01uj74oo.swift:21:20: error: expected initial value after '='\n\
    \    let op_count = operator.count\n                   ^\n/tmp/tmp01uj74oo.swift:21:19:\
    \ error: consecutive statements on a line must be separated by ';'\n    let op_count\
    \ = operator.count\n                  ^\n                  ;\n/tmp/tmp01uj74oo.swift:21:28:\
    \ error: '.' is not allowed in operator names\n    let op_count = operator.count\n\
    \                           ^\n/tmp/tmp01uj74oo.swift:31:20: error: expected expression\
    \ in 'switch' statement\n            switch operator[i] {\n                  \
    \ ^\n/tmp/tmp01uj74oo.swift:31:28: error: '[' is not allowed in operator names\n\
    \            switch operator[i] {\n                           ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let expressions = zip(operand, operator).reduce([\"\
    \\(operand[0])\"]) { result, next in\n        return result + [\"\\(next.1)\"\
    , \"\\(next.0)\"]\n    }.joined(separator: \" \")\n    let expr = Expression(expressions)\n\
    \    return expr.evaluate()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdixu_3nq.swift:21:36: error: expected expression in list of expressions\n\
    \    let expressions = zip(operand, operator).reduce([\"\\(operand[0])\"]) { result,\
    \ next in\n                                   ^\n/tmp/tmpdixu_3nq.swift:21:35:\
    \ error: consecutive statements on a line must be separated by ';'\n    let expressions\
    \ = zip(operand, operator).reduce([\"\\(operand[0])\"]) { result, next in\n  \
    \                                ^\n                                  ;\n/tmp/tmpdixu_3nq.swift:21:44:\
    \ error: ')' is not allowed in operator names\n    let expressions = zip(operand,\
    \ operator).reduce([\"\\(operand[0])\"]) { result, next in\n                 \
    \                          ^\n/tmp/tmpdixu_3nq.swift:21:34: error: missing argument\
    \ for parameter #2 in call\n    let expressions = zip(operand, operator).reduce([\"\
    \\(operand[0])\"]) { result, next in\n                                 ^\n   \
    \                              , <#_#>\nSwift.zip:1:24: note: 'zip' declared here\n\
    @inlinable public func zip<Sequence1, Sequence2>(_ sequence1: Sequence1, _ sequence2:\
    \ Sequence2) -> Zip2Sequence<Sequence1, Sequence2> where Sequence1 : Sequence,\
    \ Sequence2 : Sequence\n                       ^\n/tmp/tmpdixu_3nq.swift:24:16:\
    \ error: cannot find 'Expression' in scope\n    let expr = Expression(expressions)\n\
    \               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var stack = Stack<Int>()\n  for i in 0..<operand.count\
    \ {\n    if stack.isEmpty {\n      stack.push(operand[i])\n    } else {\n    \
    \  let temp = stack.pop()\n      if operator[i - 1] == \"+\" {\n        stack.push(temp\
    \ + operand[i])\n      } else if operator[i - 1] == \"-\" {\n        stack.push(temp\
    \ - operand[i])\n      } else if operator[i - 1] == \"*\" {\n        stack.push(temp\
    \ * operand[i])\n      } else if operator[i - 1] == \"//\" {\n        stack.push(temp\
    \ / operand[i])\n      } else if operator[i - 1] == \"**\" {\n        stack.push(temp\
    \ ^ operand[i])\n      }\n    }\n  }\n  return stack.pop()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmplwd1u15z.swift:27:10: error: expected expression, var, or let in\
    \ 'if' condition\n      if operator[i - 1] == \"+\" {\n         ^\n/tmp/tmplwd1u15z.swift:27:18:\
    \ error: '[' is not allowed in operator names\n      if operator[i - 1] == \"\
    +\" {\n                 ^\n/tmp/tmplwd1u15z.swift:29:17: error: expected expression,\
    \ var, or let in 'if' condition\n      } else if operator[i - 1] == \"-\" {\n\
    \                ^\n/tmp/tmplwd1u15z.swift:29:25: error: '[' is not allowed in\
    \ operator names\n      } else if operator[i - 1] == \"-\" {\n               \
    \         ^\n/tmp/tmplwd1u15z.swift:31:17: error: expected expression, var, or\
    \ let in 'if' condition\n      } else if operator[i - 1] == \"*\" {\n        \
    \        ^\n/tmp/tmplwd1u15z.swift:31:25: error: '[' is not allowed in operator\
    \ names\n      } else if operator[i - 1] == \"*\" {\n                        ^\n\
    /tmp/tmplwd1u15z.swift:33:17: error: expected expression, var, or let in 'if'\
    \ condition\n      } else if operator[i - 1] == \"//\" {\n                ^\n\
    /tmp/tmplwd1u15z.swift:33:25: error: '[' is not allowed in operator names\n  \
    \    } else if operator[i - 1] == \"//\" {\n                        ^\n/tmp/tmplwd1u15z.swift:35:17:\
    \ error: expected expression, var, or let in 'if' condition\n      } else if operator[i\
    \ - 1] == \"**\" {\n                ^\n/tmp/tmplwd1u15z.swift:35:25: error: '['\
    \ is not allowed in operator names\n      } else if operator[i - 1] == \"**\"\
    \ {\n                        ^\n/tmp/tmplwd1u15z.swift:21:15: error: cannot find\
    \ 'Stack' in scope\n  var stack = Stack<Int>()\n              ^~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  let n = operand.count\n  let op = operator\n\
    \  var operands = operand\n  var nOperands = n\n  var nOperators = n - 1\n  var\
    \ index = 0\n  for i in 0..<nOperators {\n    if op[i] == \"**\" {\n      operands[index]\
    \ = operands[index] ** operands[index + 1]\n      index += 1\n      nOperands\
    \ -= 1\n      nOperators -= 1\n    } else {\n      index += 1\n    }\n  }\n  index\
    \ = 0\n  for i in 0..<nOperators {\n    if op[i] == \"//\" {\n      operands[index]\
    \ = operands[index] / operands[index + 1]\n      index += 1\n      nOperands -=\
    \ 1\n      nOperators -= 1\n    } else {\n      index += 1\n    }\n  }\n  index\
    \ = 0\n  for i in 0..<nOperators {\n    if op[i] == \"*\" {\n      operands[index]\
    \ = operands[index] * operands[index + 1]\n      index += 1\n      nOperands -=\
    \ 1\n      nOperators -= 1\n    } else {\n      index += 1\n    }\n  }\n  index\
    \ = 0\n  for i in 0..<nOperators {\n    if op[i] == \"+\" {\n      operands[index]\
    \ = operands[index] + operands[index + 1]\n      index += 1\n      nOperands -=\
    \ 1\n      nOperators -= 1\n    } else {\n      index += 1\n    }\n  }\n  index\
    \ = 0\n  for i in 0..<nOperators {\n    if op[i] == \"-\" {\n      operands[index]\
    \ = operands[index] - operands[index + 1]\n      index += 1\n      nOperands -=\
    \ 1\n      nOperators -= 1\n    } else {\n      index += 1\n    }\n  }\n  return\
    \ operands[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprptpw63x.swift:22:12: error: expected initial value after '='\n\
    \  let op = operator\n           ^\n/tmp/tmprptpw63x.swift:22:11: error: consecutive\
    \ statements on a line must be separated by ';'\n  let op = operator\n       \
    \   ^\n          ;\n/tmp/tmprptpw63x.swift:22:20: error: expected operator name\
    \ in operator declaration\n  let op = operator\n                   ^\n/tmp/tmprptpw63x.swift:29:41:\
    \ error: cannot find operator '**' in scope\n      operands[index] = operands[index]\
    \ ** operands[index + 1]\n                                        ^~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let operators = operator.map {\n   \
    \     switch $0 {\n        case \"+\": return +\n        case \"-\": return -\n\
    \        case \"*\": return *\n        case \"//\": return /\n        case \"\
    **\": return ^\n        default: return +\n        }\n    }\n    if operators.count\
    \ + 1 != operand.count {\n        return 0\n    }\n    var result = operand[0]\n\
    \    for i in 0..<operators.count {\n        result = operators[i](result, operand[i\
    \ + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxb2qgx56.swift:21:21: error: expected initial value after '='\n\
    \    let operators = operator.map {\n                    ^\n/tmp/tmpxb2qgx56.swift:21:20:\
    \ error: consecutive statements on a line must be separated by ';'\n    let operators\
    \ = operator.map {\n                   ^\n                   ;\n/tmp/tmpxb2qgx56.swift:21:29:\
    \ error: '.' is not allowed in operator names\n    let operators = operator.map\
    \ {\n                            ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    //    if operand.count - 1 == operator.count\
    \ {\n    //        if operator.count == 1 {\n    //            if operator[0]\
    \ == \"+\" {\n    //                return operand[0] + operand[1]\n    //   \
    \         }\n    //            if operator[0] == \"-\" {\n    //             \
    \   return operand[0] - operand[1]\n    //            }\n    //            if\
    \ operator[0] == \"*\" {\n    //                return operand[0] * operand[1]\n\
    \    //            }\n    //            if operator[0] == \"//\" {\n    //   \
    \             return operand[0] / operand[1]\n    //            }\n    //    \
    \        if operator[0] == \"**\" {\n    //                return Int(pow(Double(operand[0]),\
    \ Double(operand[1])))\n    //            }\n    //        }\n    //        else\
    \ {\n    //            if operator[0] == \"+\" {\n    //                return\
    \ operand[0] + do_algebra(operator: Array(operator[1..<operator.count]), operand:\
    \ Array(operand[1..<operand.count]))\n    //            }\n    //            if\
    \ operator[0] == \"-\" {\n    //                return operand[0] - do_algebra(operator:\
    \ Array(operator[1..<operator.count]), operand: Array(operand[1..<operand.count]))\n\
    \    //            }\n    //            if operator[0] == \"*\" {\n    //    \
    \            return operand[0] * do_algebra(operator: Array(operator[1..<operator.count]),\
    \ operand: Array(operand[1..<operand.count]))\n    //            }\n    //   \
    \         if operator[0] == \"//\" {\n    //                return operand[0]\
    \ / do_algebra(operator: Array(operator[1..<operator.count]), operand: Array(operand[1..<operand.count]))\n\
    \    //            }\n    //            if operator[0] == \"**\" {\n    //   \
    \             return Int(pow(Double(operand[0]), Double(do\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: '/tmp/tmpy6npv3ov.swift:54:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var i = 0\n    var result = operand[i]\n\
    \    while i < operator.count {\n        switch operator[i] {\n        case \"\
    +\":\n            result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdcc6h13w.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpdcc6h13w.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // Insert your code here.\n    var result\
    \ = operand[0]\n    var i = 0\n    for i in 1..<operand.count {\n        switch\
    \ operator[i-1] {\n        case \"+\":\n            result += operand[i]\n   \
    \     case \"-\":\n            result -= operand[i]\n        case \"*\":\n   \
    \         result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result = Int(pow(Double(result), Double(operand[i])))\n\
    \        default:\n            result = 0\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmph00fvf_c.swift:25:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i-1] {\n               ^\n/tmp/tmph00fvf_c.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i-1] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var expr: [String] = []\n  for i in 0..<operand.count\
    \ - 1 {\n    expr.append(String(operand[i]))\n    expr.append(operator[i])\n \
    \ }\n  expr.append(String(operand[operand.count - 1]))\n  return evaluate(str:\
    \ expr.joined(separator: \" \"))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmplkep40nv.swift:24:17: error: expected expression in list of expressions\n\
    \    expr.append(operator[i])\n                ^\n/tmp/tmplkep40nv.swift:24:25:\
    \ error: '[' is not allowed in operator names\n    expr.append(operator[i])\n\
    \                        ^\n/tmp/tmplkep40nv.swift:24:16: error: missing argument\
    \ for parameter #1 in call\n    expr.append(operator[i])\n               ^\n \
    \              <#String#>\nSwift.Array:6:37: note: 'append' declared here\n  \
    \  @inlinable public mutating func append(_ newElement: __owned Element)\n   \
    \                                 ^\n/tmp/tmplkep40nv.swift:27:10: error: cannot\
    \ find 'evaluate' in scope\n  return evaluate(str: expr.joined(separator: \" \"\
    ))\n         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operator.count == operand.count\
    \ - 1 else {\n        return 0\n    }\n    var temp = operand\n    for (index,\
    \ oper) in operator.enumerated() {\n        switch oper {\n        case \"+\"\
    :\n            temp[index] = temp[index] + temp[index + 1]\n        case \"-\"\
    :\n            temp[index] = temp[index] - temp[index + 1]\n        case \"*\"\
    :\n            temp[index] = temp[index] * temp[index + 1]\n        case \"//\"\
    :\n            temp[index] = temp[index] / temp[index + 1]\n        case \"**\"\
    :\n            temp[index] = temp[index] ** temp[index + 1]\n        default:\n\
    \            break\n        }\n        temp.remove(at: index + 1)\n    }\n   \
    \ return temp[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprzynoow3.swift:21:11: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard operator.count == operand.count - 1 else {\n\
    \          ^\n/tmp/tmprzynoow3.swift:21:19: error: '.' is not allowed in operator\
    \ names\n    guard operator.count == operand.count - 1 else {\n              \
    \    ^\n/tmp/tmprzynoow3.swift:25:26: error: expected Sequence expression for\
    \ for-each loop\n    for (index, oper) in operator.enumerated() {\n          \
    \               ^\n/tmp/tmprzynoow3.swift:25:26: error: expected '{' to start\
    \ the body of for-each loop\n    for (index, oper) in operator.enumerated() {\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let exp = operand.enumerated().map{\
    \ [$0.offset > 0 ? operator[$0.offset - 1] : \"\", String($0.element)] }.flatMap{\
    \ $0 }.joined(separator: \" \")\n    guard let expression = NSExpression(format:\
    \ exp) else { return 0 }\n    guard let result = expression.expressionValue(with:\
    \ nil, context: nil) as? Int else { return 0 }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpmmq0jziu.swift:21:58: error: expected expression after '?' in ternary\
    \ expression\n    let exp = operand.enumerated().map{ [$0.offset > 0 ? operator[$0.offset\
    \ - 1] : \"\", String($0.element)] }.flatMap{ $0 }.joined(separator: \" \")\n\
    \                                                         ^\n/tmp/tmpmmq0jziu.swift:21:66:\
    \ error: '[' is not allowed in operator names\n    let exp = operand.enumerated().map{\
    \ [$0.offset > 0 ? operator[$0.offset - 1] : \"\", String($0.element)] }.flatMap{\
    \ $0 }.joined(separator: \" \")\n                                            \
    \                     ^\n/tmp/tmpmmq0jziu.swift:22:28: error: cannot find 'NSExpression'\
    \ in scope\n    guard let expression = NSExpression(format: exp) else { return\
    \ 0 }\n                           ^~~~~~~~~~~~\n/tmp/tmpmmq0jziu.swift:23:57:\
    \ error: 'nil' requires a contextual type\n    guard let result = expression.expressionValue(with:\
    \ nil, context: nil) as? Int else { return 0 }\n                             \
    \                           ^\n/tmp/tmpmmq0jziu.swift:23:71: error: 'nil' requires\
    \ a contextual type\n    guard let result = expression.expressionValue(with: nil,\
    \ context: nil) as? Int else { return 0 }\n                                  \
    \                                    ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var index\
    \ = 0\n    for op in operator {\n        switch op {\n        case \"+\":\n  \
    \          result += operand[index + 1]\n        case \"-\":\n            result\
    \ -= operand[index + 1]\n        case \"*\":\n            result *= operand[index\
    \ + 1]\n        case \"//\":\n            result /= operand[index + 1]\n     \
    \   case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n        index += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpk6y9lgcv.swift:23:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmpk6y9lgcv.swift:23:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpx2f_6mle/tmpx2f_6mle.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48498b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48495a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48495a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48495a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx2f_6mle                        0x0000556a1559f47b <unavailable> + 5243

    5    libc.so.6                          0x00002b4849a9e460 __libc_start_main +
    245

    6    tmpx2f_6mle                        0x0000556a1559f029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var i = 0\n    var numStack = [Int]()\n\
    \    var opStack = [String]()\n    numStack.append(operand[i])\n    i += 1\n \
    \   for ch in operator {\n        if ch == \"(\" {\n            opStack.append(ch)\n\
    \        } else if ch == \")\" {\n            while opStack.last != \"(\" {\n\
    \                numStack.append(evaluate(opStack.removeLast(), numStack.removeLast(),\
    \ numStack.removeLast()))\n            }\n            opStack.removeLast()\n \
    \       } else if opStack.count == 0 || opStack.last == \"(\" {\n            opStack.append(ch)\n\
    \        } else {\n            while opStack.count > 0 && priority(ch) <= priority(opStack.last!)\
    \ {\n                numStack.append(evaluate(opStack.removeLast(), numStack.removeLast(),\
    \ numStack.removeLast()))\n            }\n            opStack.append(ch)\n   \
    \     }\n        numStack.append(operand[i])\n        i += 1\n    }\n    while\
    \ opStack.count > 0 {\n        numStack.append(evaluate(opStack.removeLast(),\
    \ numStack.removeLast(), numStack.removeLast()))\n    }\n    return numStack.last!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwsjeg0mu.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count == 0 {\n       ^\n\
    /tmp/tmpwsjeg0mu.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count == 0 {\n               ^\n/tmp/tmpwsjeg0mu.swift:29:15:\
    \ error: expected Sequence expression for for-each loop\n    for ch in operator\
    \ {\n              ^\n/tmp/tmpwsjeg0mu.swift:29:15: error: expected '{' to start\
    \ the body of for-each loop\n    for ch in operator {\n              ^\n/tmp/tmpwsjeg0mu.swift:49:25:\
    \ error: cannot find 'evaluate' in scope\n        numStack.append(evaluate(opStack.removeLast(),\
    \ numStack.removeLast(), numStack.removeLast()))\n                        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    // write your code in Swift 4.2.1 (Linux)\n\
    \    var result = operand[0]\n    for i in 0..<operand.count - 1 {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i + 1]\n \
    \       case \"-\":\n            result -= operand[i + 1]\n        case \"*\"\
    :\n            result *= operand[i + 1]\n        case \"//\":\n            result\
    \ /= operand[i + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[i + 1])))\n        default:\n            return -1\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpfvoj55az.swift:24:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpfvoj55az.swift:24:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for (index,\
    \ oper) in operator.enumerated() {\n        let next_operand = operand[index +\
    \ 1]\n        switch oper {\n        case \"+\":\n            result += next_operand\n\
    \        case \"-\":\n            result -= next_operand\n        case \"*\":\n\
    \            result *= next_operand\n        case \"//\":\n            result\
    \ /= next_operand\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(next_operand)))\n        default:\n            print(\"error\")\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpxuc0ovuc.swift:22:26: error: expected Sequence expression for for-each\
    \ loop\n    for (index, oper) in operator.enumerated() {\n                   \
    \      ^\n/tmp/tmpxuc0ovuc.swift:22:26: error: expected '{' to start the body\
    \ of for-each loop\n    for (index, oper) in operator.enumerated() {\n       \
    \                  ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tvar _operator = operator\n\tvar _operand\
    \ = operand\n\tvar result = 0\n\twhile _operator.count > 0 {\n\t\tif _operator.contains(\"\
    **\") {\n\t\t\tif let index = _operator.firstIndex(of: \"**\") {\n\t\t\t\t_operand[index]\
    \ = Int(pow(Double(_operand[index]), Double(_operand[index + 1])))\n\t\t\t\t_operand.remove(at:\
    \ index + 1)\n\t\t\t\t_operator.remove(at: index)\n\t\t\t}\n\t\t} else if _operator.contains(\"\
    //\") {\n\t\t\tif let index = _operator.firstIndex(of: \"//\") {\n\t\t\t\t_operand[index]\
    \ = _operand[index] / _operand[index + 1]\n\t\t\t\t_operand.remove(at: index +\
    \ 1)\n\t\t\t\t_operator.remove(at: index)\n\t\t\t}\n\t\t} else if _operator.contains(\"\
    *\") {\n\t\t\tif let index = _operator.firstIndex(of: \"*\") {\n\t\t\t\t_operand[index]\
    \ = _operand[index] * _operand[index + 1]\n\t\t\t\t_operand.remove(at: index +\
    \ 1)\n\t\t\t\t_operator.remove(at: index)\n\t\t\t}\n\t\t} else if _operator.contains(\"\
    -\") {\n\t\t\tif let index = _operator.firstIndex(of: \"-\") {\n\t\t\t\t_operand[index]\
    \ = _operand[index] - _operand[index + 1]\n\t\t\t\t_operand.remove(at: index +\
    \ 1)\n\t\t\t\t_operator.remove(at: index)\n\t\t\t}\n\t\t} else if _operator.contains(\"\
    +\") {\n\t\t\tif let index = _operator.firstIndex(of: \"+\") {\n\t\t\t\t_operand[index]\
    \ = _operand[index] + _operand[index + 1]\n\t\t\t\t_operand.remove(at: index +\
    \ 1)\n\t\t\t\t_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4zn0yw21.swift:21:18: error: expected initial value after '='\n\
    \        var _operator = operator\n                        ^\n/tmp/tmp4zn0yw21.swift:21:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ _operator = operator\n                       ^\n                       ;\n/tmp/tmp4zn0yw21.swift:21:26:\
    \ error: expected operator name in operator declaration\n        var _operator\
    \ = operator\n                                ^\n/tmp/tmp4zn0yw21.swift:71:67:\
    \ error: expected '}' at end of brace statement\nassert(do_algebra(operator: [\"\
    //\", \"*\"], operand: [7, 3, 4]) == 8)\n                                    \
    \                              ^\n/tmp/tmp4zn0yw21.swift:49:37: note: to match\
    \ this opening '{'\n                } else if _operator.contains(\"+\") {\n  \
    \                                                ^\n/tmp/tmp4zn0yw21.swift:71:67:\
    \ error: expected '}' at end of brace statement\nassert(do_algebra(operator: [\"\
    //\", \"*\"], operand: [7, 3, 4]) == 8)\n                                    \
    \                              ^\n/tmp/tmp4zn0yw21.swift:24:28: note: to match\
    \ this opening '{'\n        while _operator.count > 0 {\n                    \
    \              ^\n/tmp/tmp4zn0yw21.swift:71:67: error: expected '}' at end of\
    \ brace statement\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)\n                                                                \
    \  ^\n/tmp/tmp4zn0yw21.swift:20:60: note: to match this opening '{'\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n                                       \
    \                    ^\n/tmp/tmp4zn0yw21.swift:27:27: error: cannot find 'pow'\
    \ in scope\n                                _operand[index] = Int(pow(Double(_operand[index]),\
    \ Double(_operand[index + 1])))\n                                            \
    \          ^~~\n/tmp/tmp4zn0yw21.swift:53:5: error: '_' can only appear in a pattern\
    \ or on the left side of an assignment\n                                _\n  \
    \                              ^\n/tmp/tmp4zn0yw21.swift:57:6: error: operator\
    \ functions can only "
  stdout: ''
  timestamp: 1660012286
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var result = operand[0]\n  for i in 0..<operator.count\
    \ {\n    if operator[i] == \"+\" {\n      result += operand[i + 1]\n    } else\
    \ if operator[i] == \"-\" {\n      result -= operand[i + 1]\n    } else if operator[i]\
    \ == \"*\" {\n      result *= operand[i + 1]\n    } else if operator[i] == \"\
    //\" {\n      result /= operand[i + 1]\n    } else if operator[i] == \"**\" {\n\
    \      result = Int(pow(Double(result), Double(operand[i + 1])))\n    }\n  }\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmps2xwi5dm.swift:22:16: error: expected expression after operator\n\
    \  for i in 0..<operator.count {\n               ^\n/tmp/tmps2xwi5dm.swift:22:16:\
    \ error: expected '{' to start the body of for-each loop\n  for i in 0..<operator.count\
    \ {\n               ^\n/tmp/tmps2xwi5dm.swift:23:8: error: expected expression,\
    \ var, or let in 'if' condition\n    if operator[i] == \"+\" {\n       ^\n/tmp/tmps2xwi5dm.swift:23:16:\
    \ error: '[' is not allowed in operator names\n    if operator[i] == \"+\" {\n\
    \               ^\n/tmp/tmps2xwi5dm.swift:25:15: error: expected expression, var,\
    \ or let in 'if' condition\n    } else if operator[i] == \"-\" {\n           \
    \   ^\n/tmp/tmps2xwi5dm.swift:25:23: error: '[' is not allowed in operator names\n\
    \    } else if operator[i] == \"-\" {\n                      ^\n/tmp/tmps2xwi5dm.swift:27:15:\
    \ error: expected expression, var, or let in 'if' condition\n    } else if operator[i]\
    \ == \"*\" {\n              ^\n/tmp/tmps2xwi5dm.swift:27:23: error: '[' is not\
    \ allowed in operator names\n    } else if operator[i] == \"*\" {\n          \
    \            ^\n/tmp/tmps2xwi5dm.swift:29:15: error: expected expression, var,\
    \ or let in 'if' condition\n    } else if operator[i] == \"//\" {\n          \
    \    ^\n/tmp/tmps2xwi5dm.swift:29:23: error: '[' is not allowed in operator names\n\
    \    } else if operator[i] == \"//\" {\n                      ^\n/tmp/tmps2xwi5dm.swift:31:15:\
    \ error: expected expression, var, or let in 'if' condition\n    } else if operator[i]\
    \ == \"**\" {\n              ^\n/tmp/tmps2xwi5dm.swift:31:23: error: '[' is not\
    \ allowed in operator names\n    } else if operator[i] == \"**\" {\n         \
    \             ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpwd7fnoii.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpwd7fnoii.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpwd7fnoii.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmpwd7fnoii.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tvar operator = operator\n\tvar operand\
    \ = operand\n\t\n\twhile operand.count > 1 {\n\t\tvar tempOperand = operand[1]\n\
    \t\tswitch operator[0] {\n\t\tcase \"+\":\n\t\t\ttempOperand = operand[0] + operand[1]\n\
    \t\tcase \"-\":\n\t\t\ttempOperand = operand[0] - operand[1]\n\t\tcase \"*\":\n\
    \t\t\ttempOperand = operand[0] * operand[1]\n\t\tcase \"//\":\n\t\t\ttempOperand\
    \ = operand[0] / operand[1]\n\t\tcase \"**\":\n\t\t\ttempOperand = Int(pow(Double(operand[0]),\
    \ Double(operand[1])))\n\t\tdefault:\n\t\t\tbreak\n\t\t}\n\t\t\n\t\toperator.removeFirst()\n\
    \t\toperand.removeFirst()\n\t\toperand[0] = tempOperand\n\t}\n\t\n\treturn operand[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmprla_zm2n.swift:21:6: error: keyword 'operator' cannot be used as\
    \ an identifier here\n        var operator = operator\n            ^\n/tmp/tmprla_zm2n.swift:21:6:\
    \ note: if this name is unavoidable, use backticks to escape it\n        var operator\
    \ = operator\n            ^~~~~~~~\n            `operator`\n/tmp/tmprla_zm2n.swift:21:17:\
    \ error: expected initial value after '='\n        var operator = operator\n \
    \                      ^\n/tmp/tmprla_zm2n.swift:21:16: error: consecutive statements\
    \ on a line must be separated by ';'\n        var operator = operator\n      \
    \                ^\n                      ;\n/tmp/tmprla_zm2n.swift:21:25: error:\
    \ expected operator name in operator declaration\n        var operator = operator\n\
    \                               ^\n/tmp/tmprla_zm2n.swift:26:10: error: expected\
    \ expression in 'switch' statement\n                switch operator[0] {\n   \
    \                    ^\n/tmp/tmprla_zm2n.swift:26:18: error: '[' is not allowed\
    \ in operator names\n                switch operator[0] {\n                  \
    \             ^\n/tmp/tmprla_zm2n.swift:41:11: error: '.' is not allowed in operator\
    \ names\n                operator.removeFirst()\n                        ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var output: Int = operand[0]\n    for\
    \ i in 0...operator.count - 1 {\n        if operator[i] == \"+\" {\n         \
    \   output += operand[i + 1]\n        } else if operator[i] == \"-\" {\n     \
    \       output -= operand[i + 1]\n        } else if operator[i] == \"*\" {\n \
    \           output *= operand[i + 1]\n        } else if operator[i] == \"//\"\
    \ {\n            output /= operand[i + 1]\n        } else if operator[i] == \"\
    **\" {\n            output = Int(pow(Double(output), Double(operand[i + 1])))\n\
    \        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpeu5zd8k8.swift:22:18: error: expected expression after operator\n\
    \    for i in 0...operator.count - 1 {\n                 ^\n/tmp/tmpeu5zd8k8.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0...operator.count\
    \ - 1 {\n                 ^\n/tmp/tmpeu5zd8k8.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmpeu5zd8k8.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmpeu5zd8k8.swift:25:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmpeu5zd8k8.swift:25:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmpeu5zd8k8.swift:27:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmpeu5zd8k8.swift:27:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmpeu5zd8k8.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmpeu5zd8k8.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmpeu5zd8k8.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmpeu5zd8k8.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i+1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i+1]\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i+1]\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = Int(pow(Double(result), Double(operand[i+1])))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmppavkufge.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmppavkufge.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmppavkufge.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmppavkufge.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmppavkufge.swift:25:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmppavkufge.swift:25:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmppavkufge.swift:27:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmppavkufge.swift:27:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmppavkufge.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmppavkufge.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmppavkufge.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmppavkufge.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index + 1]\n        case \"-\":\n           \
    \ result -= operand[index + 1]\n        case \"*\":\n            result *= operand[index\
    \ + 1]\n        case \"//\":\n            result /= operand[index + 1]\n     \
    \   case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbda9c79u.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpbda9c79u.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpbda9c79u.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpbda9c79u.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operator.count > 0 && operand.count\
    \ > 1 else { return 0 }\n    var operandStack = [Int]()\n    var operatorStack\
    \ = [String]()\n    for (i, n) in operand.enumerated() {\n        operandStack.append(n)\n\
    \        if i < operator.count {\n            if operator[i] == \"**\" {\n   \
    \             operandStack.append(pow(operandStack.removeLast(), operandStack.removeLast()))\n\
    \            } else {\n                operatorStack.append(operator[i])\n   \
    \         }\n        }\n    }\n    while operatorStack.count > 0 {\n        let\
    \ op = operatorStack.removeLast()\n        let num2 = operandStack.removeLast()\n\
    \        let num1 = operandStack.removeLast()\n        operandStack.append(calculate(op,\
    \ num1, num2))\n    }\n    return operandStack.removeLast()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp5z1869cl.swift:21:11: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard operator.count > 0 && operand.count > 1 else\
    \ { return 0 }\n          ^\n/tmp/tmp5z1869cl.swift:21:19: error: '.' is not allowed\
    \ in operator names\n    guard operator.count > 0 && operand.count > 1 else {\
    \ return 0 }\n                  ^\n/tmp/tmp5z1869cl.swift:26:16: error: expected\
    \ expression after operator\n        if i < operator.count {\n               ^\n\
    /tmp/tmp5z1869cl.swift:26:24: error: '.' is not allowed in operator names\n  \
    \      if i < operator.count {\n                       ^\n/tmp/tmp5z1869cl.swift:38:29:\
    \ error: cannot find 'calculate' in scope\n        operandStack.append(calculate(op,\
    \ num1, num2))\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operand.count-1 {\n        switch operator[i] {\n        case \"+\":\n \
    \           result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzkihnfvi.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpzkihnfvi.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operator.count == operand.count\
    \ - 1 else { return 0 }\n    guard operand.count >= 2 else { return 0 }\n    var\
    \ answer = operand[0]\n    for i in 0..<operator.count {\n        switch operator[i]\
    \ {\n        case \"+\":\n            answer += operand[i + 1]\n        case \"\
    -\":\n            answer -= operand[i + 1]\n        case \"*\":\n            answer\
    \ *= operand[i + 1]\n        case \"//\":\n            answer /= operand[i + 1]\n\
    \        case \"**\":\n            answer = answer.power(operand[i + 1])\n   \
    \     default:\n            break\n        }\n    }\n    return answer\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3ai1b_85.swift:21:11: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard operator.count == operand.count - 1 else { return\
    \ 0 }\n          ^\n/tmp/tmp3ai1b_85.swift:21:19: error: '.' is not allowed in\
    \ operator names\n    guard operator.count == operand.count - 1 else { return\
    \ 0 }\n                  ^\n/tmp/tmp3ai1b_85.swift:24:18: error: expected expression\
    \ after operator\n    for i in 0..<operator.count {\n                 ^\n/tmp/tmp3ai1b_85.swift:24:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp3ai1b_85.swift:25:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp3ai1b_85.swift:25:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var index\
    \ = 0\n    while index < operator.count {\n        switch operator[index] {\n\
    \        case \"+\":\n            result += operand[index + 1]\n        case \"\
    -\":\n            result -= operand[index + 1]\n        case \"*\":\n        \
    \    result *= operand[index + 1]\n        case \"//\":\n            result /=\
    \ operand[index + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[index + 1])))\n        default:\n            break\n        }\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1jhfwy8h.swift:23:19: error: expected expression after operator\n\
    \    while index < operator.count {\n                  ^\n/tmp/tmp1jhfwy8h.swift:23:27:\
    \ error: '.' is not allowed in operator names\n    while index < operator.count\
    \ {\n                          ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  // Write your code here\n\n  return 0\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpjbjohage/tmpjbjohage.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86f5650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86f5347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86f5347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86f53467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjbjohage                        0x0000561bc673b47b <unavailable> + 5243

    5    libc.so.6                          0x00002b86f583c460 __libc_start_main +
    245

    6    tmpjbjohage                        0x0000561bc673b029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var output = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          output += operand[i+1]\n        case \"-\":\n            output -=\
    \ operand[i+1]\n        case \"*\":\n            output *= operand[i+1]\n    \
    \    case \"//\":\n            output /= operand[i+1]\n        case \"**\":\n\
    \            output = Int(pow(Double(output), Double(operand[i+1])))\n       \
    \ default:\n            return 0\n        }\n    }\n    return output\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptwn6zs6v.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmptwn6zs6v.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmptwn6zs6v.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmptwn6zs6v.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tvar stack: [Int] = []\n\tvar operandIdx\
    \ = 0\n\tfor op in operator {\n\t\tstack.append(operand[operandIdx])\n\t\toperandIdx\
    \ += 1\n\t\twhile stack.count >= 2 {\n\t\t\tif stack.count < 2 {\n\t\t\t\treturn\
    \ 0\n\t\t\t}\n\t\t\tlet op1 = stack.removeLast()\n\t\t\tlet op2 = stack.removeLast()\n\
    \t\t\tif op == \"+\" {\n\t\t\t\tstack.append(op1 + op2)\n\t\t\t} else if op ==\
    \ \"-\" {\n\t\t\t\tstack.append(op1 - op2)\n\t\t\t} else if op == \"*\" {\n\t\t\
    \t\tstack.append(op1 * op2)\n\t\t\t} else if op == \"//\" {\n\t\t\t\tstack.append(op1\
    \ / op2)\n\t\t\t} else if op == \"**\" {\n\t\t\t\tstack.append(Int(pow(Double(op1),\
    \ Double(op2))))\n\t\t\t}\n\t\t}\n\t}\n\tstack.append(operand[operandIdx])\n\t\
    return stack.last!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpvg3y7g36.swift:23:12: error: expected Sequence expression for for-each\
    \ loop\n        for op in operator {\n                  ^\n/tmp/tmpvg3y7g36.swift:23:12:\
    \ error: expected '{' to start the body of for-each loop\n        for op in operator\
    \ {\n                  ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var value = operand[0]\n    for i in 0..<operator.count\
    \ {\n        switch operator[i] {\n        case \"+\":\n            value += operand[i\
    \ + 1]\n        case \"-\":\n            value -= operand[i + 1]\n        case\
    \ \"*\":\n            value *= operand[i + 1]\n        case \"//\":\n        \
    \    value /= operand[i + 1]\n        case \"**\":\n            value = Int(pow(Double(value),\
    \ Double(operand[i + 1])))\n        default:\n            print(\"Unknown operator:\
    \ \\(operator[i])\")\n        }\n    }\n    return value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkghvu2f0.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count == 0 {\n       ^\n\
    /tmp/tmpkghvu2f0.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count == 0 {\n               ^\n/tmp/tmpkghvu2f0.swift:25:18:\
    \ error: expected expression after operator\n    for i in 0..<operator.count {\n\
    \                 ^\n/tmp/tmpkghvu2f0.swift:25:18: error: expected '{' to start\
    \ the body of for-each loop\n    for i in 0..<operator.count {\n             \
    \    ^\n/tmp/tmpkghvu2f0.swift:26:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpkghvu2f0.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var index\
    \ = 0\n    for _ in 1..<operand.count {\n        let op: String = operator[index]\n\
    \        index += 1\n        if op == \"+\" {\n            result += operand[index]\n\
    \        } else if op == \"-\" {\n            result -= operand[index]\n     \
    \   } else if op == \"*\" {\n            result *= operand[index]\n        } else\
    \ if op == \"//\" {\n            result /= operand[index]\n        } else if op\
    \ == \"**\" {\n            result = Int(pow(Double(result), Double(operand[index])))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) ==\
    \ 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5])\
    \ == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9u2vx2fx.swift:24:26: error: expected initial value after '='\n\
    \        let op: String = operator[index]\n                         ^\n/tmp/tmp9u2vx2fx.swift:24:25:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op: String = operator[index]\n                        ^\n                  \
    \      ;\n/tmp/tmp9u2vx2fx.swift:24:34: error: '[' is not allowed in operator\
    \ names\n        let op: String = operator[index]\n                          \
    \       ^\n/tmp/tmp9u2vx2fx.swift:35:26: error: cannot find 'pow' in scope\n \
    \           result = Int(pow(Double(result), Double(operand[index])))\n      \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let op = operator.reversed()\n    var\
    \ operand = operand\n    for i in 0..<op.count {\n        var num1 = operand.removeLast()\n\
    \        var num2 = operand.removeLast()\n        if op[i] == \"+\" {\n      \
    \      operand.append(num1 + num2)\n        } else if op[i] == \"-\" {\n     \
    \       operand.append(num1 - num2)\n        } else if op[i] == \"*\" {\n    \
    \        operand.append(num1 * num2)\n        } else if op[i] == \"//\" {\n  \
    \          operand.append(num1 / num2)\n        } else if op[i] == \"**\" {\n\
    \            operand.append(Int(pow(Double(num1), Double(num2))))\n        }\n\
    \    }\n    return operand[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp941o1jmi.swift:21:14: error: expected initial value after '='\n\
    \    let op = operator.reversed()\n             ^\n/tmp/tmp941o1jmi.swift:21:13:\
    \ error: consecutive statements on a line must be separated by ';'\n    let op\
    \ = operator.reversed()\n            ^\n            ;\n/tmp/tmp941o1jmi.swift:21:22:\
    \ error: '.' is not allowed in operator names\n    let op = operator.reversed()\n\
    \                     ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\treturn 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpp5lex5j5/tmpp5lex5j5.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2605978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b260566fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b260566f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b260566e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5lex5j5                        0x000055941fcab47b <unavailable> + 5243

    5    libc.so.6                          0x00002b2605b64460 __libc_start_main +
    245

    6    tmpp5lex5j5                        0x000055941fcab029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard operand.count > 2 else {\n   \
    \     return 0\n    }\n    var total = operand[0]\n    var operand = operand\n\
    \    for index in 0..<operator.count {\n        let op = operator[index]\n   \
    \     operand.removeFirst()\n        switch op {\n        case \"+\":\n      \
    \      total += operand[0]\n        case \"-\":\n            total -= operand[0]\n\
    \        case \"*\":\n            total *= operand[0]\n        case \"//\":\n\
    \            total /= operand[0]\n        case \"**\":\n            total = Int(pow(Double(total),\
    \ Double(operand[0])))\n        default:\n            break\n        }\n    }\n\
    \    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp9eijflz3.swift:26:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmp9eijflz3.swift:26:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmp9eijflz3.swift:27:18: error: expected initial\
    \ value after '='\n        let op = operator[index]\n                 ^\n/tmp/tmp9eijflz3.swift:27:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[index]\n                ^\n                ;\n/tmp/tmp9eijflz3.swift:27:26:\
    \ error: '[' is not allowed in operator names\n        let op = operator[index]\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var i = 0\n    var result = operand[i]\n\
    \    while i < operator.count {\n        switch operator[i] {\n        case \"\
    +\":\n            result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            break\n        }\n        i += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpdcc6h13w.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpdcc6h13w.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: -4
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0vcqmtjh/tmp0vcqmtjh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b870cc96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b870c98db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b870c98d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b870c98c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0vcqmtjh                        0x000055b98de8c47b <unavailable> + 5243

    5    libc.so.6                          0x00002b870ce82460 __libc_start_main +
    245

    6    tmp0vcqmtjh                        0x000055b98de8c029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let operations = [\"+\", \"-\", \"*\"\
    , \"//\", \"**\"]\n    var number = operand[0]\n    if !operations.contains(operator[0])\
    \ {\n        return 0\n    }\n    for i in 0..<operator.count {\n        if operator[i]\
    \ == \"+\" {\n            number += operand[i + 1]\n        } else if operator[i]\
    \ == \"-\" {\n            number -= operand[i + 1]\n        } else if operator[i]\
    \ == \"*\" {\n            number *= operand[i + 1]\n        } else if operator[i]\
    \ == \"//\" {\n            number /= operand[i + 1]\n        } else if operator[i]\
    \ == \"**\" {\n            number = Int(pow(Double(number), Double(operand[i +\
    \ 1])))\n        }\n    }\n    return number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp_o_1hz13.swift:23:29: error: expected expression in list of expressions\n\
    \    if !operations.contains(operator[0]) {\n                            ^\n/tmp/tmp_o_1hz13.swift:23:37:\
    \ error: '[' is not allowed in operator names\n    if !operations.contains(operator[0])\
    \ {\n                                    ^\n/tmp/tmp_o_1hz13.swift:26:18: error:\
    \ expected expression after operator\n    for i in 0..<operator.count {\n    \
    \             ^\n/tmp/tmp_o_1hz13.swift:26:18: error: expected '{' to start the\
    \ body of for-each loop\n    for i in 0..<operator.count {\n                 ^\n\
    /tmp/tmp_o_1hz13.swift:27:12: error: expected expression, var, or let in 'if'\
    \ condition\n        if operator[i] == \"+\" {\n           ^\n/tmp/tmp_o_1hz13.swift:27:20:\
    \ error: '[' is not allowed in operator names\n        if operator[i] == \"+\"\
    \ {\n                   ^\n/tmp/tmp_o_1hz13.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"-\" {\n  \
    \                ^\n/tmp/tmp_o_1hz13.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"-\" {\n                 \
    \         ^\n/tmp/tmp_o_1hz13.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"*\" {\n          \
    \        ^\n/tmp/tmp_o_1hz13.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"*\" {\n                          ^\n\
    /tmp/tmp_o_1hz13.swift:33:19: error: expected expression, var, or let in 'if'\
    \ condition\n        } else if operator[i] == \"//\" {\n                  ^\n\
    /tmp/tmp_o_1hz13.swift:33:27: error: '[' is not allowed in operator names\n  \
    \      } else if operator[i] == \"//\" {\n                          ^\n/tmp/tmp_o_1hz13.swift:35:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"**\" {\n                  ^\n/tmp/tmp_o_1hz13.swift:35:27:\
    \ error: '[' is not allowed in operator names\n        } else if operator[i] ==\
    \ \"**\" {\n                          ^\n/tmp/tmp_o_1hz13.swift:23:28: error:\
    \ missing argument for par"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operand.count-1 {\n        switch operator[i] {\n        case \"+\":\n \
    \           result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzkihnfvi.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpzkihnfvi.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operand.count-1 {\n        switch operator[i] {\n        case \"+\":\n \
    \           result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            result = 0\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpcpj6neu_.swift:23:16: error: expected expression in 'switch' statement\n\
    \        switch operator[i] {\n               ^\n/tmp/tmpcpj6neu_.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    guard !operator.isEmpty && operand.count\
    \ > 1 else {\n        return 0\n    }\n    var result = operand[0]\n    for i\
    \ in 0 ..< operator.count {\n        switch operator[i] {\n        case \"+\"\
    :\n            result += operand[i + 1]\n        case \"-\":\n            result\
    \ -= operand[i + 1]\n        case \"*\":\n            result *= operand[i + 1]\n\
    \        case \"//\":\n            result /= operand[i + 1]\n        case \"**\"\
    :\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n   \
    \     default:\n            return 0\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmptk3udnef.swift:21:12: error: expected expression, var, let or case\
    \ in 'guard' condition\n    guard !operator.isEmpty && operand.count > 1 else\
    \ {\n           ^\n/tmp/tmptk3udnef.swift:21:20: error: '.' is not allowed in\
    \ operator names\n    guard !operator.isEmpty && operand.count > 1 else {\n  \
    \                 ^\n/tmp/tmptk3udnef.swift:25:20: error: expected expression\
    \ after operator\n    for i in 0 ..< operator.count {\n                   ^\n\
    /tmp/tmptk3udnef.swift:25:20: error: expected '{' to start the body of for-each\
    \ loop\n    for i in 0 ..< operator.count {\n                   ^\n/tmp/tmptk3udnef.swift:26:16:\
    \ error: expected expression in 'switch' statement\n        switch operator[i]\
    \ {\n               ^\n/tmp/tmptk3udnef.swift:26:24: error: '[' is not allowed\
    \ in operator names\n        switch operator[i] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        let op = operator[i]\n        let operand2 = operand[i+1]\n\
    \        switch op {\n        case \"+\":\n            result += operand2\n  \
    \      case \"-\":\n            result -= operand2\n        case \"*\":\n    \
    \        result *= operand2\n        case \"//\":\n            result /= operand2\n\
    \        case \"**\":\n            result = result * result * operand2\n     \
    \   default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3h8uh79q.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp3h8uh79q.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp3h8uh79q.swift:23:18: error: expected initial\
    \ value after '='\n        let op = operator[i]\n                 ^\n/tmp/tmp3h8uh79q.swift:23:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[i]\n                ^\n                ;\n/tmp/tmp3h8uh79q.swift:23:26:\
    \ error: '[' is not allowed in operator names\n        let op = operator[i]\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var index\
    \ = 0\n    while index < operator.count {\n        switch operator[index] {\n\
    \        case \"+\":\n            result += operand[index + 1]\n        case \"\
    -\":\n            result -= operand[index + 1]\n        case \"*\":\n        \
    \    result *= operand[index + 1]\n        case \"//\":\n            result /=\
    \ operand[index + 1]\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(operand[index + 1])))\n        default:\n            break\n        }\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2, 3, 4,\
    \ 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand: [2,\
    \ 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7, 3,\
    \ 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp1jhfwy8h.swift:23:19: error: expected expression after operator\n\
    \    while index < operator.count {\n                  ^\n/tmp/tmp1jhfwy8h.swift:23:27:\
    \ error: '.' is not allowed in operator names\n    while index < operator.count\
    \ {\n                          ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operand = operand\n    for op in\
    \ operator {\n        switch op {\n        case \"+\":\n            operand[0]\
    \ += operand[1]\n            operand.remove(at: 1)\n        case \"-\":\n    \
    \        operand[0] -= operand[1]\n            operand.remove(at: 1)\n       \
    \ case \"*\":\n            operand[0] *= operand[1]\n            operand.remove(at:\
    \ 1)\n        case \"//\":\n            operand[0] /= operand[1]\n           \
    \ operand.remove(at: 1)\n        case \"**\":\n            operand[0] = Int(pow(Double(operand[0]),\
    \ Double(operand[1])))\n            operand.remove(at: 1)\n        default:\n\
    \            break\n        }\n    }\n    return operand[0]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp6imtfcfb.swift:22:15: error: expected Sequence expression for for-each\
    \ loop\n    for op in operator {\n              ^\n/tmp/tmp6imtfcfb.swift:22:15:\
    \ error: expected '{' to start the body of for-each loop\n    for op in operator\
    \ {\n              ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\treturn operator.reduce((operand.first\
    \ ?? 0, operand.dropFirst())) {\n\t\t($1 == \"+\" ? $0.0 + $0.1.first! :\n\t\t\
    \t$1 == \"-\" ? $0.0 - $0.1.first! :\n\t\t\t\t$1 == \"*\" ? $0.0 * $0.1.first!\
    \ :\n\t\t\t\t\t$1 == \"//\" ? $0.0 / $0.1.first! :\n\t\t\t\t\t\t$1 == \"**\" ?\
    \ Int(pow(Double($0.0), Double($0.1.first!))) :\n\t\t\t\t\t\t\t$0.0, $0.1.dropFirst())\n\
    \t}.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp4k6jjq5l.swift:21:8: error: consecutive statements on a line must\
    \ be separated by ';'\n        return operator.reduce((operand.first ?? 0, operand.dropFirst()))\
    \ {\n              ^\n              ;\n/tmp/tmp4k6jjq5l.swift:21:17: error: '.'\
    \ is not allowed in operator names\n        return operator.reduce((operand.first\
    \ ?? 0, operand.dropFirst())) {\n                       ^\n/tmp/tmp4k6jjq5l.swift:21:2:\
    \ error: non-void function should return a value\n        return operator.reduce((operand.first\
    \ ?? 0, operand.dropFirst())) {\n        ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operand = operand\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          operand[i+1] = operand[i] + operand[i+1]\n        case \"-\":\n   \
    \         operand[i+1] = operand[i] - operand[i+1]\n        case \"*\":\n    \
    \        operand[i+1] = operand[i] * operand[i+1]\n        case \"//\":\n    \
    \        operand[i+1] = operand[i] / operand[i+1]\n        case \"**\":\n    \
    \        operand[i+1] = Int(pow(Double(operand[i]), Double(operand[i+1])))\n \
    \       default:\n            return 0\n        }\n    }\n    return operand[operand.count-1]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3t6dimn_.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp3t6dimn_.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp3t6dimn_.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp3t6dimn_.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index + 1]\n        case \"-\":\n           \
    \ result -= operand[index + 1]\n        case \"*\":\n            result *= operand[index\
    \ + 1]\n        case \"//\":\n            result /= operand[index + 1]\n     \
    \   case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpbda9c79u.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpbda9c79u.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpbda9c79u.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpbda9c79u.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var result = operand[0]\n  for i in 0..<operator.count\
    \ {\n    switch operator[i] {\n    case \"+\":\n      result += operand[i + 1]\n\
    \    case \"-\":\n      result -= operand[i + 1]\n    case \"*\":\n      result\
    \ *= operand[i + 1]\n    case \"//\":\n      result /= operand[i + 1]\n    case\
    \ \"**\":\n      result = Int(pow(Double(result), Double(operand[i + 1])))\n \
    \   default:\n      break\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpus7kk8fi.swift:22:16: error: expected expression after operator\n\
    \  for i in 0..<operator.count {\n               ^\n/tmp/tmpus7kk8fi.swift:22:16:\
    \ error: expected '{' to start the body of for-each loop\n  for i in 0..<operator.count\
    \ {\n               ^\n/tmp/tmpus7kk8fi.swift:23:12: error: expected expression\
    \ in 'switch' statement\n    switch operator[i] {\n           ^\n/tmp/tmpus7kk8fi.swift:23:20:\
    \ error: '[' is not allowed in operator names\n    switch operator[i] {\n    \
    \               ^\n"
  stdout: ''
  timestamp: 1660012284
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == operand.count -\
    \ 1 {\n        var result = operand[0]\n        for i in 0...operator.count -\
    \ 1 {\n            switch operator[i] {\n            case \"+\":\n           \
    \     result += operand[i + 1]\n            case \"-\":\n                result\
    \ -= operand[i + 1]\n            case \"*\":\n                result *= operand[i\
    \ + 1]\n            case \"//\":\n                result /= operand[i + 1]\n \
    \           case \"**\":\n                result = Int(pow(Double(result), Double(operand[i\
    \ + 1])))\n            default:\n                return 0\n            }\n   \
    \     }\n        return result\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpygfk4on1.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == operand.count - 1 {\n       ^\n/tmp/tmpygfk4on1.swift:21:16:\
    \ error: '.' is not allowed in operator names\n    if operator.count == operand.count\
    \ - 1 {\n               ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            result = 0\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3c0zo5bv.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp3c0zo5bv.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp3c0zo5bv.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp3c0zo5bv.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012134
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = Int(pow(Double(result), Double(operand[i+1])))\n       \
    \ default:\n            return -1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp7_t2r86w.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmp7_t2r86w.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmp7_t2r86w.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[i] {\n               ^\n/tmp/tmp7_t2r86w.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[i] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012285
- exit_code: 1
  program: "\n/// Given two arrays operator, and operand. The first array has basic\
    \ algebra operations, and \n/// the second array is an array of integers. Use\
    \ the two given arrays to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator array is equal to the length of operand array minus one.\n\
    /// Operand is an array of of non-negative integers.\n/// Operator array has at\
    \ least one operator, and operand array has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for (index,\
    \ oper) in operator.enumerated() {\n        switch oper {\n        case \"+\"\
    :\n            result += operand[index + 1]\n        case \"-\":\n           \
    \ result -= operand[index + 1]\n        case \"*\":\n            result *= operand[index\
    \ + 1]\n        case \"//\":\n            result /= operand[index + 1]\n     \
    \   case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpucadxcpe.swift:22:26: error: expected Sequence expression for for-each\
    \ loop\n    for (index, oper) in operator.enumerated() {\n                   \
    \      ^\n/tmp/tmpucadxcpe.swift:22:26: error: expected '{' to start the body\
    \ of for-each loop\n    for (index, oper) in operator.enumerated() {\n       \
    \                  ^\n"
  stdout: ''
  timestamp: 1660012285
