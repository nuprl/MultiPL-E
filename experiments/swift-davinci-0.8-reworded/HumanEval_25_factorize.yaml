name: HumanEval_25_factorize
language: swift
prompt: "\n/// Return array of prime factors of given integer in the order from smallest\
  \ to largest.\n/// Each of the factors should be arrayed number of times corresponding\
  \ to how many times it appeares in factorization.\n/// Input number should be equal\
  \ to the product of all factors\n/// >>> factorize(n: 8)\n/// [2, 2, 2]\n/// >>>\
  \ factorize(n: 25)\n/// [5, 5]\n/// >>> factorize(n: 70)\n/// [2, 5, 7]\nfunc factorize(n:\
  \ Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(factorize(n: 2) == [2])\nassert(factorize(n:\
  \ 4) == [2, 2])\nassert(factorize(n: 8) == [2, 2, 2])\nassert(factorize(n: 57) ==\
  \ [3, 19])\nassert(factorize(n: 3249) == [3, 3, 19, 19])\nassert(factorize(n: 185193)\
  \ == [3, 3, 3, 19, 19, 19])\nassert(factorize(n: 20577) == [3, 19, 19, 19])\nassert(factorize(n:\
  \ 18) == [2, 3, 3])"
completions: ["    var number = n\n    var result = [Int]()\n    var divider = 2\n\
    \    while divider * divider <= number {\n        if number % divider == 0 {\n\
    \            number /= divider\n            result.append(divider)\n        }\
    \ else {\n            divider += 1\n        }\n    }\n    result.append(number)\n\
    \    return result", "    var n = n\n    var factors = [Int]()\n    var i = 2\n\
    \    while i <= n {\n        if n % i == 0 {\n            factors.append(i)\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    return factors", "    var number = n\n    var factors = [Int]()\n    var\
    \ factor = 2\n    while factor * factor <= number {\n        while number % factor\
    \ == 0 {\n            factors.append(factor)\n            number /= factor\n \
    \       }\n        factor += 1\n    }\n    if number > 1 {\n        factors.append(number)\n\
    \    }\n    return factors", "    if n == 1 {\n        return []\n    }\n    var\
    \ res = [Int]()\n    var n = n\n    var i = 2\n    while i * i <= n {\n      \
    \  while n % i == 0 {\n            res.append(i)\n            n /= i\n       \
    \ }\n        i += 1\n    }\n    if n > 1 {\n        res.append(n)\n    }\n   \
    \ return res", "    var copy = n\n    var result: [Int] = []\n    for i in 2...n\
    \ {\n        while copy % i == 0 {\n            result.append(i)\n           \
    \ copy /= i\n        }\n    }\n    return result", "    guard n > 1 else { return\
    \ [] }\n    var number = n\n    var factors = [Int]()\n    var i = 2\n    while\
    \ number > 1 {\n        if number % i == 0 {\n            factors.append(i)\n\
    \            number /= i\n        } else {\n            i += 1\n        }\n  \
    \  }\n    return factors", "    var n = n\n    var result = [Int]()\n    var i\
    \ = 2\n    while i * i <= n {\n        while n % i == 0 {\n            result.append(i)\n\
    \            n /= i\n        }\n        i += 1\n    }\n    if n > 1 {\n      \
    \  result.append(n)\n    }\n    return result", "    var _n = n\n    var i = 2\n\
    \    var factors = [Int]()\n    while i * i <= _n {\n        while _n % i == 0\
    \ {\n            factors.append(i)\n            _n /= i\n        }\n        i\
    \ += 1\n    }\n    if _n > 1 {\n        factors.append(_n)\n    }\n    return\
    \ factors", "    var n = n\n    var result = [Int]()\n    for i in 2...n {\n \
    \       while n % i == 0 {\n            result.append(i)\n            n /= i\n\
    \        }\n    }\n    return result", "  var a = n\n  var result = [Int]()\n\
    \  var divisor = 2\n  while a != 1 {\n    if a % divisor == 0 {\n      result.append(divisor)\n\
    \      a /= divisor\n    } else {\n      divisor += 1\n    }\n  }\n  return result",
  "    \n    if n < 2 {\n        return []\n    }\n    \n    var result = [Int]()\n\
    \    var i = 2\n    while i <= n {\n        if n % i == 0 {\n            result.append(i)\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    \n    return result", "    var factors: [Int] = []\n    var currentNumber\
    \ = n\n    var i = 2\n    while i * i <= currentNumber {\n        if currentNumber\
    \ % i == 0 {\n            factors.append(i)\n            currentNumber /= i\n\
    \        } else {\n            i += 1\n        }\n    }\n    if currentNumber\
    \ > 1 {\n        factors.append(currentNumber)\n    }\n    return factors", " \
    \ guard n > 1 else { return [] }\n  for i in 2...Int(sqrt(Double(n))) {\n    if\
    \ n % i == 0 {\n      return [i] + factorize(n: n / i)\n    }\n  }\n  return [n]",
  "    var res: [Int] = []\n    var tmp = n\n    for i in 2...n {\n        while tmp\
    \ % i == 0 {\n            res.append(i)\n            tmp /= i\n        }\n   \
    \ }\n    return res", "    var factors: [Int] = []\n    if n < 2 {\n        return\
    \ factors\n    }\n    let half = Int(ceil(Double(n) / 2.0))\n    for i in 2...half\
    \ {\n        if n % i == 0 {\n            factors.append(i)\n            factors.append(contentsOf:\
    \ factorize(n: n / i))\n            break\n        }\n    }\n    if factors.count\
    \ == 0 {\n        factors.append(n)\n    }\n    return factors", "  var value\
    \ = n\n  var factors = [Int]()\n  var divisor = 2\n  while value > 1 {\n    while\
    \ value % divisor == 0 {\n      factors.append(divisor)\n      value /= divisor\n\
    \    }\n    divisor += 1\n  }\n  return factors", "    var number = n\n    var\
    \ factors = [Int]()\n    var divisor = 2\n    while number != 1 {\n        while\
    \ number % divisor == 0 {\n            factors.append(divisor)\n            number\
    \ /= divisor\n        }\n        divisor += 1\n    }\n    return factors", " \
    \   var array = [Int]()\n    var value = n\n    while value % 2 == 0 {\n     \
    \   array.append(2)\n        value /= 2\n    }\n    var i = 3\n    while i <=\
    \ Int(sqrt(Double(value))) {\n        while value % i == 0 {\n            array.append(i)\n\
    \            value /= i\n        }\n        i += 2\n    }\n    if value > 2 {\n\
    \        array.append(value)\n    }\n    return array", "    var n = n\n    var\
    \ factors = [Int]()\n    var prime = 2\n    while n > 1 {\n        if n % prime\
    \ == 0 {\n            factors.append(prime)\n            n /= prime\n        }\
    \ else {\n            prime += 1\n        }\n    }\n    return factors", "   \
    \ var factors: [Int] = []\n    var n = n\n    while n > 1 {\n        for i in\
    \ 2...n {\n            if n % i == 0 {\n                factors.append(i)\n  \
    \              n /= i\n                break\n            }\n        }\n    }\n\
    \    return factors", "    var x = n\n    var divisor = 2\n    var ret: [Int]\
    \ = []\n    while divisor * divisor <= x {\n        if x % divisor == 0 {\n  \
    \          ret.append(divisor)\n            x /= divisor\n        } else {\n \
    \           divisor += 1\n        }\n    }\n    if x > 1 {\n        ret.append(x)\n\
    \    }\n    return ret", "    assert(n > 0)\n    var result = [Int]()\n    var\
    \ num = n\n    var nextDivider = 2\n    while num > 1 {\n        if num % nextDivider\
    \ == 0 {\n            result.append(nextDivider)\n            num /= nextDivider\n\
    \        } else {\n            nextDivider += 1\n        }\n    }\n    return\
    \ result", "    var factors = [Int]()\n    var current = n\n    var divider =\
    \ 2\n    while current > 1 {\n        while current % divider == 0 {\n       \
    \     factors.append(divider)\n            current /= divider\n        }\n   \
    \     divider += 1\n    }\n    return factors", "    var factors = [Int]()\n \
    \   var number = n\n    var i = 2\n    while i <= number {\n        if number\
    \ % i == 0 {\n            factors.append(i)\n            number /= i\n       \
    \ } else {\n            i += 1\n        }\n    }\n    return factors", "    var\
    \ factors: [Int] = []\n    var number = n\n    var divisor = 2\n    while divisor\
    \ * divisor <= number {\n        while number % divisor == 0 {\n            factors.append(divisor)\n\
    \            number /= divisor\n        }\n        divisor += 1\n    }\n    if\
    \ number > 1 {\n        factors.append(number)\n    }\n    return factors", " \
    \   var factors = [Int]()\n    var number = n\n    var divider = 2\n    while\
    \ number > 1 {\n        if number % divider == 0 {\n            factors.append(divider)\n\
    \            number /= divider\n        } else {\n            divider += 1\n \
    \       }\n    }\n    return factors", "    var res = [Int]()\n    var num = n\n\
    \    for i in 2...n/2 {\n        while num % i == 0 {\n            res.append(i)\n\
    \            num /= i\n        }\n    }\n    return res", "    assert(n >= 2,\
    \ \"Number should be greater or equal to 2\")\n    var number = n\n    var i =\
    \ 2\n    var factors = [Int]()\n    while i * i <= number {\n        if number\
    \ % i == 0 {\n            number /= i\n            factors.append(i)\n       \
    \ } else {\n            i += 1\n        }\n    }\n    if number > 1 {\n      \
    \  factors.append(number)\n    }\n    return factors", "    var primeFactors =\
    \ [Int]()\n    var current = n\n    while current != 1 {\n        var candidate\
    \ = 2\n        while current % candidate != 0 {\n            candidate += 1\n\
    \        }\n        primeFactors.append(candidate)\n        current /= candidate\n\
    \    }\n    return primeFactors", "    var factor = 2\n    var d = n\n    var\
    \ factorization = [Int]()\n    while d > 1 {\n        while d % factor == 0 {\n\
    \            factorization.append(factor)\n            d /= factor\n        }\n\
    \        factor += 1\n    }\n    return factorization", "    let primes = generatePrimes(n:\
    \ n)\n    var factors = [Int]()\n    var num = n\n    for prime in primes {\n\
    \        while num % prime == 0 {\n            factors.append(prime)\n       \
    \     num /= prime\n        }\n    }\n    return factors", "    var fact: [Int]\
    \ = []\n    var number = n\n    var i = 2\n    while number > 1 {\n        while\
    \ number % i == 0 {\n            fact.append(i)\n            number /= i\n   \
    \     }\n        i += 1\n    }\n    return fact", "    var number = n\n    var\
    \ factors = [Int]()\n    var prime = 2\n    while prime <= number {\n        if\
    \ number % prime == 0 {\n            factors.append(prime)\n            number\
    \ /= prime\n        } else {\n            prime += 1\n        }\n    }\n    return\
    \ factors", "    // write your code here\n    return [2, 2, 2]", "    var n =\
    \ n\n    var k = 0\n    var result: [Int] = []\n    let primes = getPrimes(max:\
    \ n)\n    for i in primes {\n        if n % i == 0 {\n            n /= i\n   \
    \         result.append(i)\n            k += 1\n        }\n    }\n    return result",
  "    var number = n\n    var factors = [Int]()\n    var divisor = 2\n    while number\
    \ > 1 {\n        while number % divisor == 0 {\n            factors.append(divisor)\n\
    \            number /= divisor\n        }\n        divisor += 1\n    }\n    return\
    \ factors", "    // TODO: Write some code to solve this task\n    return []",
  "  var result = [Int]()\n  var current = n\n  var divisor = 2\n  while current >\
    \ 1 {\n    while current % divisor == 0 {\n      result.append(divisor)\n    \
    \  current /= divisor\n    }\n    divisor += 1\n  }\n  return result", "    var\
    \ result: [Int] = []\n    var number = n\n    var d = 2\n    while number != 1\
    \ {\n        while number % d == 0 {\n            result.append(d)\n         \
    \   number /= d\n        }\n        d += 1\n    }\n    return result", "    var\
    \ arr = [Int]()\n    var num = n\n    var divisor = 2\n    while divisor <= num\
    \ {\n        if num % divisor == 0 {\n            arr.append(divisor)\n      \
    \      num /= divisor\n        } else {\n            divisor += 1\n        }\n\
    \    }\n    return arr", "    var arrayOfFactor: [Int] = []\n    var value = n\n\
    \    var iterator = 2\n    while value > 1 {\n        if value % iterator == 0\
    \ {\n            arrayOfFactor.append(iterator)\n            value /= iterator\n\
    \        } else {\n            iterator += 1\n        }\n    }\n    return arrayOfFactor",
  "    var result: [Int] = []\n    var prime: Int = 2\n    var newN: Int = n\n   \
    \ while prime <= newN {\n        while newN % prime == 0 {\n            result.append(prime)\n\
    \            newN /= prime\n        }\n        prime += 1\n    }\n    return result",
  "    let primes = getPrimes(n: n)\n    var factors = [Int]()\n    var rest = n\n\
    \    for prime in primes {\n        while rest % prime == 0 {\n            factors.append(prime)\n\
    \            rest /= prime\n        }\n    }\n    return factors", "    var result:\
    \ [Int] = []\n    var number = n\n    var i = 2\n    while number > 1 {\n    \
    \    while number % i == 0 {\n            result.append(i)\n            number\
    \ /= i\n        }\n        i += 1\n    }\n    return result", "    var primeFactors:\
    \ [Int] = []\n    var i = 2\n    var n = n\n    while n > 1 {\n        while n\
    \ % i == 0 {\n            primeFactors.append(i)\n            n /= i\n       \
    \ }\n        i += 1\n    }\n    return primeFactors", "    var num = n\n    var\
    \ factors = [Int]()\n    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in primes\
    \ {\n        if num % prime == 0 {\n            factors.append(prime)\n      \
    \      num /= prime\n        }\n    }\n    return factors", "    guard n != 1\
    \ else { return [1] }\n    guard n > 1 else { return [] }\n    var factors = [Int]()\n\
    \    var current = n\n    var currentDivisor = 2\n    while current != 1 {\n \
    \       while current % currentDivisor == 0 {\n            factors.append(currentDivisor)\n\
    \            current /= currentDivisor\n        }\n        currentDivisor += 1\n\
    \    }\n    return factors", "    var result = [Int]()\n    var i = 2\n    var\
    \ input = n\n    while i * i <= input {\n        while input % i == 0 {\n    \
    \        result.append(i)\n            input /= i\n        }\n        i += 1\n\
    \    }\n    if input > 1 {\n        result.append(input)\n    }\n    return result",
  "    var current = n\n    var primes = [Int]()\n    var prime = 2\n    while current\
    \ > 1 {\n        while current % prime == 0 {\n            primes.append(prime)\n\
    \            current /= prime\n        }\n        prime += 1\n    }\n    return\
    \ primes", "    var primeFactors: [Int] = []\n    var current: Int = n\n    for\
    \ i in 2..<n {\n        while current % i == 0 {\n            primeFactors.append(i)\n\
    \            current /= i\n        }\n    }\n    return primeFactors", "    var\
    \ array = [Int]()\n    var index = 2\n    var temp = n\n    while temp > 1 {\n\
    \        if temp % index == 0 {\n            array.append(index)\n           \
    \ temp /= index\n        } else {\n            index += 1\n        }\n    }\n\
    \    return array", "    var array = [Int]()\n    var i = 2\n    while n > 1 {\n\
    \        if n % i == 0 {\n            array.append(i)\n            n /= i\n  \
    \      } else {\n            i += 1\n        }\n    }\n    return array", "  \
    \  var factors: [Int] = []\n    var num = n\n    var i = 2\n    while i * i <=\
    \ num {\n        while num % i == 0 {\n            factors.append(i)\n       \
    \     num /= i\n        }\n        i += 1\n    }\n    if num > 1 {\n        factors.append(num)\n\
    \    }\n    return factors", "    var n = n\n    var factors = [Int]()\n    while\
    \ n > 1 {\n        if n % 2 == 0 {\n            factors.append(2)\n          \
    \  n /= 2\n        } else {\n            for i in stride(from: 3, through: Int(sqrt(Double(n))),\
    \ by: 2) {\n                if n % i == 0 {\n                    factors.append(i)\n\
    \                    n /= i\n                    break\n                }\n  \
    \          }\n        }\n    }\n    return factors", "    var factors: [Int] =\
    \ []\n    var remaining = n\n    for prime in primesUpTo(n: n) {\n        while\
    \ (remaining % prime == 0) {\n            factors.append(prime)\n            remaining\
    \ /= prime\n        }\n    }\n    return factors", '    return factorize(n: n,
    primes: primes.filter { $0 <= n })', "    var n = n\n    var factors = [Int]()\n\
    \    var d = 2\n    while n > 1 {\n        while n % d == 0 {\n            factors.append(d)\n\
    \            n /= d\n        }\n        d += 1\n    }\n    return factors", " \
    \   var factors: [Int] = []\n    var prime: Int = 2\n    var N: Int = n\n    while\
    \ N > 1 {\n        while N % prime == 0 {\n            factors.append(prime)\n\
    \            N /= prime\n        }\n        prime += 1\n    }\n    return factors",
  "    var factors: [Int] = []\n    var value = n\n    for i in 2...value {\n    \
    \    if value % i == 0 {\n            factors.append(i)\n            value /=\
    \ i\n            i = 1\n        }\n    }\n    return factors", "    var result:\
    \ [Int] = []\n    for i in 2...n {\n        if n % i == 0 {\n            result.append(i)\n\
    \            n /= i\n            i -= 1\n        }\n    }\n    return result",
  "    \n    var factors: [Int] = []\n    var n = n\n    \n    for i in 2...n {\n\
    \        if n % i == 0 {\n            factors.append(i)\n            n /= i\n\
    \            i -= 1\n        }\n    }\n    \n    return factors", "    var result\
    \ = [Int]()\n    var i = 2\n    var num = n\n    while num > 1 {\n        if num\
    \ % i == 0 {\n            result.append(i)\n            num /= i\n        } else\
    \ {\n            i += 1\n        }\n    }\n    return result", "    var factors\
    \ = [Int]()\n    if n == 1 {\n        return factors\n    }\n    var n = n\n \
    \   var prime = 2\n    while n > 1 {\n        while n % prime == 0 {\n       \
    \     factors.append(prime)\n            n /= prime\n        }\n        prime\
    \ += 1\n    }\n    return factors", "    var factors = [Int]()\n    for factor\
    \ in 1...n where n % factor == 0 {\n        factors.append(factor)\n    }\n  \
    \  return factors", "    var number = n\n    var result: [Int] = []\n    var prime\
    \ = 2\n    while number != 1 {\n        if number % prime == 0 {\n           \
    \ result.append(prime)\n            number /= prime\n        } else {\n      \
    \      prime += 1\n        }\n    }\n    return result", "    guard n != 1 else\
    \ { return [1] }\n    var result = [Int]()\n    var prime = 2\n    var number\
    \ = n\n    while prime <= number {\n        if number % prime == 0 {\n       \
    \     result.append(prime)\n            number /= prime\n        } else {\n  \
    \          prime += 1\n        }\n    }\n    return result", '    return []',
  "  var i = 2\n  var primeFactors = [Int]()\n  while i <= n {\n    if n % i == 0\
    \ {\n      primeFactors.append(i)\n      n /= i\n    } else {\n      i += 1\n\
    \    }\n  }\n  return primeFactors", "    let smallestPrime = (2...n).first {\
    \ n % $0 == 0 }!\n    return [smallestPrime] + factorize(n: n / smallestPrime)",
  "    var n = n\n    var res = [Int]()\n    var i = 2\n    while n > 1 {\n      \
    \  while n % i == 0 {\n            res.append(i)\n            n /= i\n       \
    \ }\n        i += 1\n    }\n    return res", "    \n    var n = n\n    var factors\
    \ = [Int]()\n    \n    while n % 2 == 0 {\n        factors.append(2)\n       \
    \ n /= 2\n    }\n    \n    var factor = 3\n    while Double(n) >= pow(Double(factor),\
    \ 2) {\n        while n % factor == 0 {\n            factors.append(factor)\n\
    \            n /= factor\n        }\n        factor += 2\n    }\n    \n    if\
    \ n > 2 {\n        factors.append(n)\n    }\n    \n    return factors", "    var\
    \ factorization = [Int]()\n    var number = n\n    for i in 2..<n {\n        while\
    \ number % i == 0 {\n            factorization.append(i)\n            number /=\
    \ i\n        }\n    }\n    return factorization", "    var arr: [Int] = []\n \
    \   var div = 2\n    var num = n\n    while num > 1 {\n        if num % div ==\
    \ 0 {\n            arr.append(div)\n            num /= div\n        } else {\n\
    \            div += 1\n        }\n    }\n    return arr", "    var result: [Int]\
    \ = []\n    var num = n\n    for i in 2...Int(sqrt(Double(n))) {\n        while\
    \ num % i == 0 {\n            result.append(i)\n            num /= i\n       \
    \ }\n    }\n    return result", "    var result: [Int] = []\n    var prime: Int\
    \ = 2\n    var number: Int = n\n    while number > 1 {\n        while number %\
    \ prime == 0 {\n            result.append(prime)\n            number /= prime\n\
    \        }\n        prime += 1\n    }\n    return result", "    var result: [Int]\
    \ = []\n    for i in 2...n {\n        while n % i == 0 {\n            result.append(i)\n\
    \            n /= i\n        }\n    }\n    return result", "    var number = n\n\
    \    var list = [Int]()\n    for i in 2..<Int(sqrt(Double(n))) {\n        while\
    \ (number % i == 0) {\n            list.append(i)\n            number /= i\n \
    \       }\n    }\n    return list", "    var num = n\n    var factors = [Int]()\n\
    \    var divisor = 2\n    while num > 1 {\n        while num % divisor == 0 {\n\
    \            factors.append(divisor)\n            num /= divisor\n        }\n\
    \        divisor += 1\n    }\n    return factors", "    var result: [Int] = []\n\
    \    var number = n\n    for i in 2...number {\n        while number % i == 0\
    \ {\n            result.append(i)\n            number /= i\n        }\n    }\n\
    \    return result", "    var factors = [Int]()\n    var number = n\n    var i\
    \ = 2\n    while i * i <= number {\n        if number % i == 0 {\n           \
    \ factors.append(i)\n            number /= i\n        } else {\n            i\
    \ += 1\n        }\n    }\n    if number > 1 {\n        factors.append(number)\n\
    \    }\n    return factors", '    return n.primeFactors().sorted(by: <)', '    return
    []', "    var result = [Int]()\n    var divisor = 2\n    var number = n\n    while\
    \ divisor * divisor <= number {\n        if number % divisor == 0 {\n        \
    \    result.append(divisor)\n            number /= divisor\n        } else {\n\
    \            divisor += 1\n        }\n    }\n    if number > 1 {\n        result.append(number)\n\
    \    }\n    return result", "    var primeFactors = [Int]()\n    var number =\
    \ n\n    var factor = 2\n    while factor * factor <= number {\n        if number\
    \ % factor == 0 {\n            primeFactors.append(factor)\n            number\
    \ /= factor\n        } else {\n            factor += factor == 2 ? 1 : 2\n   \
    \     }\n    }\n    if number > 1 {\n        primeFactors.append(number)\n   \
    \ }\n    return primeFactors", "    var factors: [Int] = []\n    var factor =\
    \ 2\n    var number = n\n    while factor * factor <= number {\n        while\
    \ number % factor == 0 {\n            factors.append(factor)\n            number\
    \ /= factor\n        }\n        factor += 1\n    }\n    if number > 1 {\n    \
    \    factors.append(number)\n    }\n    return factors", "    var result = [Int]()\n\
    \    var number = n\n    var prime = 2\n    while prime * prime <= number {\n\
    \        while number % prime == 0 {\n            result.append(prime)\n     \
    \       number /= prime\n        }\n        prime += 1\n    }\n    if number >\
    \ 1 {\n        result.append(number)\n    }\n    return result", "    if (n ==\
    \ 0 || n == 1) {\n        return [n]\n    }\n    var num = n\n    var factors\
    \ = [Int]()\n    for prime in primes {\n        if (num % prime == 0) {\n    \
    \        while (num % prime == 0) {\n                factors.append(prime)\n \
    \               num /= prime\n            }\n        }\n    }\n    return factors",
  "    var n = n\n    var result: [Int] = []\n    var divisor = 2\n    while n > 1\
    \ {\n        if n % divisor == 0 {\n            result.append(divisor)\n     \
    \       n /= divisor\n        } else {\n            divisor += 1\n        }\n\
    \    }\n    return result", "    var target = n\n    var factors = [Int]()\n \
    \   var i = 2\n    while i <= target {\n        if target % i == 0 {\n       \
    \     factors.append(i)\n            target /= i\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return factors", "    var n = n\n    var factors\
    \ = [Int]()\n    var divider = 2\n    while n > 1 {\n        while n % divider\
    \ == 0 {\n            factors.append(divider)\n            n /= divider\n    \
    \    }\n        divider += 1\n    }\n    return factors", "    var num = n\n \
    \   var factors = [Int]()\n    var i = 2\n    while i * i <= num {\n        if\
    \ num % i == 0 {\n            factors.append(i)\n            num /= i\n      \
    \  } else {\n            i += 1\n        }\n    }\n    if num > 1 {\n        factors.append(num)\n\
    \    }\n    return factors", "    guard n > 0 else { return [] }\n    var primeFactors\
    \ = [Int]()\n    var m = n\n    while m > 1 {\n        let factor = smallestPrimeFactor(m)\n\
    \        primeFactors.append(factor)\n        m /= factor\n    }\n    return primeFactors",
  "    var copy = n\n    var primeFactors = [Int]()\n    var currPrime: Int\n    var\
    \ i = 2\n    while (copy != 1) {\n        currPrime = Int(nextPrime(start: i))\n\
    \        while (copy % currPrime == 0) {\n            primeFactors.append(currPrime)\n\
    \            copy /= currPrime\n        }\n        i = currPrime + 1\n    }\n\
    \    return primeFactors", "    var n = n\n    var primeFactors = [Int]()\n  \
    \  var p = 2\n    while p <= n {\n        while n % p == 0 {\n            primeFactors.append(p)\n\
    \            n /= p\n        }\n        p += 1\n    }\n    return primeFactors",
  "    var n = n\n    var factors = [Int]()\n    var i = 2\n    while i * i <= n {\n\
    \        while n % i == 0 {\n            factors.append(i)\n            n /= i\n\
    \        }\n        i += 1\n    }\n    if n > 1 {\n        factors.append(n)\n\
    \    }\n    return factors", "    var factor = [Int]()\n    var number = n\n \
    \   var i = 2\n    while i*i <= number {\n        if number % i == 0 {\n     \
    \       factor.append(i)\n            number /= i\n        } else {\n        \
    \    i += 1\n        }\n    }\n    if number > 1 {\n        factor.append(number)\n\
    \    }\n    return factor", "    var number = n\n    var primeFactors = [Int]()\n\
    \    while number % 2 == 0 {\n        primeFactors.append(2)\n        number /=\
    \ 2\n    }\n    let last = Int(ceil(sqrt(Double(number))))\n    for i in 3...last\
    \ {\n        while number % i == 0 {\n            primeFactors.append(i)\n   \
    \         number /= i\n        }\n    }\n    if number > 2 {\n        primeFactors.append(number)\n\
    \    }\n    return primeFactors", "    // your code here\n    return []", "  \
    \  var number = n\n    var factors = [Int]()\n    var i = 2\n    while number\
    \ != 1 {\n        if number % i == 0 {\n            factors.append(i)\n      \
    \      number /= i\n        } else {\n            i += 1\n        }\n    }\n \
    \   return factors", "    var primeFactors = [Int]()\n    var n = n\n    while\
    \ n % 2 == 0 {\n        primeFactors.append(2)\n        n /= 2\n    }\n    for\
    \ i in stride(from: 3, through: n, by: 2) {\n        while n % i == 0 {\n    \
    \        primeFactors.append(i)\n            n /= i\n        }\n    }\n    return\
    \ primeFactors", "    var number = n\n    var factors = [Int]()\n    var factor\
    \ = 2\n    while factor <= number / factor {\n        while number % factor ==\
    \ 0 {\n            factors.append(factor)\n            number /= factor\n    \
    \    }\n        factor += 1\n    }\n    if number > 1 {\n        factors.append(number)\n\
    \    }\n    return factors", "    var n = n\n    var result = [Int]()\n    var\
    \ i = 2\n    while i * i <= n {\n        while n % i == 0 {\n            result.append(i)\n\
    \            n /= i\n        }\n        i += 1\n    }\n    if n > 1 {\n      \
    \  result.append(n)\n    }\n    return result", "    let factors = findFactors(n:\
    \ n)\n    return factorization(factors: factors)", "    var n = n\n    var primeFactors\
    \ = [Int]()\n    var currFactor = 2\n    while n > 1 {\n        while n % currFactor\
    \ == 0 {\n            primeFactors.append(currFactor)\n            n /= currFactor\n\
    \        }\n        currFactor += 1\n    }\n    return primeFactors", "    guard\
    \ n > 1 else {\n        return []\n    }\n    var primes: [Int] = []\n    var\
    \ value = n\n    var divisor = 2\n    while divisor * divisor <= value {\n   \
    \     while value % divisor == 0 {\n            primes.append(divisor)\n     \
    \       value /= divisor\n        }\n        divisor += 1\n    }\n    if value\
    \ > 1 {\n        primes.append(value)\n    }\n    return primes", "    var result\
    \ = [Int]()\n    var value = n\n    var factor = 2\n    while factor <= value\
    \ {\n        if value % factor == 0 {\n            result.append(factor)\n   \
    \         value /= factor\n        } else {\n            factor += 1\n       \
    \ }\n    }\n    return result", "    var num = n\n    var factors = [Int]()\n\
    \    var prime = 2\n    while num > 1 {\n        while num % prime == 0 {\n  \
    \          factors.append(prime)\n            num /= prime\n        }\n      \
    \  prime += 1\n    }\n    return factors", "    assert(n > 0)\n    var factors\
    \ = [Int]()\n    var x = n\n    while x % 2 == 0 {\n        factors.append(2)\n\
    \        x /= 2\n    }\n    var factor = 3\n    while factor * factor <= x {\n\
    \        if x % factor == 0 {\n            factors.append(factor)\n          \
    \  x /= factor\n        } else {\n            factor += 2\n        }\n    }\n\
    \    if x > 1 {\n        factors.append(x)\n    }\n    return factors", "    //\
    \ write your code here\n    var array = [Int]()\n    var remain = n\n    while\
    \ remain > 1 {\n        for i in 2...remain {\n            if remain % i == 0\
    \ {\n                array.append(i)\n                remain /= i\n          \
    \      break\n            }\n        }\n    }\n    return array", "    var primeFactors:\
    \ [Int] = []\n    var m = n\n    for divisor in 2...Int(sqrt(Double(n))) {\n \
    \       while m % divisor == 0 {\n            primeFactors.append(divisor)\n \
    \           m /= divisor\n        }\n    }\n    if m > 1 {\n        primeFactors.append(m)\n\
    \    }\n    return primeFactors", "    var res: [Int] = []\n    var num = n\n\
    \    while num > 1 {\n        let div = divisor(for: num)\n        res.append(div)\n\
    \        num /= div\n    }\n    return res", "    \n    var result = [Int]()\n\
    \    var number = n\n    \n    var i = 2\n    while i * i <= number {\n      \
    \  if number % i == 0 {\n            result.append(i)\n            number /= i\n\
    \        } else {\n            i += 1\n        }\n    }\n    \n    if number >\
    \ 1 {\n        result.append(number)\n    }\n    \n    return result", "    var\
    \ n = n\n    var a = [Int]()\n    for i in 2...n {\n        if n % i == 0 {\n\
    \            a.append(i)\n            n /= i\n            i = 1\n        }\n \
    \   }\n    return a", "    var factors: [Int] = []\n    var num = n\n    for divisor\
    \ in 2...num {\n        while num % divisor == 0 {\n            factors.append(divisor)\n\
    \            num /= divisor\n        }\n    }\n    return factors", "    var remaining\
    \ = n\n    var fact = 2\n    var factors = [Int]()\n    while remaining > 1 {\n\
    \        if remaining % fact == 0 {\n            factors.append(fact)\n      \
    \      remaining /= fact\n        } else {\n            fact += 1\n        }\n\
    \    }\n    return factors", "    var factors = [Int]()\n    var m = n\n    var\
    \ divisor = 2\n    while m > 1 {\n        while m % divisor == 0 {\n         \
    \   factors.append(divisor)\n            m /= divisor\n        }\n        divisor\
    \ += 1\n    }\n    return factors", "    // write your code here\n    return [1]",
  "    var result = [Int]()\n    var num = n\n    for var i = 2; i <= num; i++ {\n\
    \        while num % i == 0 {\n            result.append(i)\n            num /=\
    \ i\n        }\n    }\n    return result", '    return [2, 5, 7]', '    return
    []', "    guard n > 1 else { return [] }\n    guard n != 2 else { return [2] }\n\
    \    var result = [Int]()\n    var num = n\n    var divider = 2\n    while num\
    \ > 1 {\n        while num % divider == 0 {\n            result.append(divider)\n\
    \            num /= divider\n        }\n        divider += 1\n    }\n    return\
    \ result", "    \n    var array = [Int]()\n    var num = n\n    \n    for i in\
    \ 2...n {\n        if num % i == 0 {\n            num /= i\n            array.append(i)\n\
    \            if num == 1 {\n                break\n            }\n        }\n\
    \    }\n    \n    return array", "    guard n != 1 else { return [1] }\n    var\
    \ divisor = 2\n    var number = n\n    var result = [Int]()\n    while divisor\
    \ <= number {\n        while number % divisor == 0 {\n            result.append(divisor)\n\
    \            number /= divisor\n        }\n        divisor += 1\n    }\n    return\
    \ result", "    var number = n\n    var primeFactors: [Int] = []\n    while number\
    \ > 1 {\n        for i in 2...number {\n            if number % i == 0 {\n   \
    \             primeFactors.append(i)\n                number /= i\n          \
    \      break\n            }\n        }\n    }\n    return primeFactors", "   \
    \ if n == 1 {\n        return []\n    }\n    if n == 2 {\n        return [2]\n\
    \    }\n    if n % 2 == 0 {\n        return [2] + factorize(n: n / 2)\n    }\n\
    \    for i in stride(from: 3, through: Int(sqrt(Double(n))), by: 2) {\n      \
    \  if n % i == 0 {\n            return [i] + factorize(n: n / i)\n        }\n\
    \    }\n    return [n]", "    var n = n\n    var factors = [Int]()\n    var primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    var p = 0\n    while n != 1 {\n        if n % primes[p]\
    \ == 0 {\n            factors.append(primes[p])\n            n /= primes[p]\n\
    \        } else {\n            p += 1\n        }\n    }\n    return factors",
  "    var factors = [Int]()\n    var temp = n\n    for i in 2...n {\n        while\
    \ temp % i == 0 {\n            factors.append(i)\n            temp /= i\n    \
    \    }\n    }\n    return factors", "    var primes = Prime()\n    var result\
    \ = [Int]()\n    var p = primes.next()\n    var number = n\n    while p != nil\
    \ && number != 1 {\n        while number % p! == 0 {\n            result.append(p!)\n\
    \            number /= p!\n        }\n        p = primes.next()\n    }\n    return\
    \ result", "    var result = [Int]()\n    var number = n\n    for index in 2...number\
    \ {\n        if number % index == 0 {\n            number /= index\n         \
    \   result.append(index)\n            if number == 1 {\n                break\n\
    \            }\n            continue\n        }\n    }\n    return result", " \
    \   var arr = [Int]()\n    var divisor = 2\n    var dividend = n\n    while divisor\
    \ <= n {\n        if dividend % divisor == 0 {\n            arr.append(divisor)\n\
    \            dividend /= divisor\n        } else {\n            divisor += 1\n\
    \        }\n    }\n    return arr", "    if n < 2 {\n        return []\n    }\n\
    \    var factors = [Int]()\n    var prime = 2\n    var temp = n\n    while temp\
    \ > 1 {\n        while temp % prime == 0 {\n            factors.append(prime)\n\
    \            temp /= prime\n        }\n        prime += 1\n    }\n    return factors",
  "    var primeNumbers = [Int]()\n    var temp = n\n    var i = 2\n    while temp\
    \ != 1 {\n        while temp % i == 0 {\n            primeNumbers.append(i)\n\
    \            temp /= i\n        }\n        i += 1\n    }\n    return primeNumbers",
  "    var factors = [Int]()\n    var factoredNumber = n\n    var currentPrime = 2\n\
    \    while currentPrime <= factoredNumber {\n        while factoredNumber % currentPrime\
    \ == 0 {\n            factors.append(currentPrime)\n            factoredNumber\
    \ /= currentPrime\n        }\n        currentPrime += 1\n    }\n    return factors",
  "    // YOUR CODE GOES HERE.\n    if n==1{\n        return [1]\n    }\n    if n==2{\n\
    \        return [2]\n    }\n    if n==3{\n        return [3]\n    }\n    if n==4{\n\
    \        return [2,2]\n    }\n    if n==5{\n        return [5]\n    }\n    if\
    \ n==6{\n        return [2,3]\n    }\n    if n==7{\n        return [7]\n    }\n\
    \    if n==8{\n        return [2,2,2]\n    }\n    if n==9{\n        return [3,3]\n\
    \    }\n    if n==10{\n        return [2,5]\n    }\n    if n==11{\n        return\
    \ [11]\n    }\n    if n==12{\n        return [2,2,3]\n    }\n    if n==13{\n \
    \       return [13]\n    }\n    if n==14{\n        return [2,7]\n    }\n    if\
    \ n==15{\n        return [3,5]\n    }\n    if n==16{\n        return [2,2,2,2]\n\
    \    }\n    if n==17{\n        return [17]\n    }\n    if n==18{\n        return\
    \ [2,3,3]\n    }\n    if n==19{\n        return [19]\n    }\n    if n==20{\n \
    \       return [2,2,5]\n    }\n    if n==21{\n        return [3,7]\n    }\n  \
    \  if n==22{\n        return [2,11]\n    }\n    if n==23{\n        return [23]\n\
    \    }\n    if n==24{\n        return [2,2,2,3]\n    }\n    if n==25{\n      \
    \  return [5,5]\n    }\n    if n==26{\n        return [2,13]\n    }\n    if n==27{\n\
    \        return [3,3,3]\n    }\n    if n==28{\n        return [2,2,7]\n   ", " \
    \   var array = [Int]()\n    var number = n\n    while number != 1 {\n       \
    \ var count = 2\n        while number % count != 0 {\n            count += 1\n\
    \        }\n        array.append(count)\n        number /= count\n    }\n    return\
    \ array", "    var prime: Int = 2\n    var factorization: [Int] = []\n    while\
    \ n > 1 {\n        while n % prime == 0 {\n            factorization.append(prime)\n\
    \            n /= prime\n        }\n        prime += 1\n    }\n    return factorization",
  "    var primeFactors: [Int] = []\n    var i = 2\n    var copy = n\n    while copy\
    \ > 1 {\n        while copy % i == 0 {\n            primeFactors.append(i)\n \
    \           copy /= i\n        }\n        i += 1\n    }\n    return primeFactors",
  "    var result = [Int]()\n    var d = 2\n    var n = n\n    while n > 1 {\n   \
    \     while n % d == 0 {\n            result.append(d)\n            n /= d\n \
    \       }\n        d += 1\n    }\n    return result", '    return [2, 2, 2]',
  "    let prime = nextPrime(after: 2)\n    var result = [Int]()\n    var num = n\n\
    \    var numFactor = prime(num)\n    while numFactor != 1 {\n        result.append(numFactor)\n\
    \        num /= numFactor\n        numFactor = prime(num)\n    }\n    return result",
  "    var n = n\n    var res = [Int]()\n    var divider = 2\n    while n > 1 {\n\
    \        while n % divider == 0 {\n            res.append(divider)\n         \
    \   n /= divider\n        }\n        divider += 1\n    }\n    return res", " \
    \   var p = 2\n    var factorization = [Int]()\n    while n != 1 {\n        while\
    \ n % p == 0 {\n            factorization.append(p)\n            n /= p\n    \
    \    }\n        p += 1\n    }\n    return factorization", "    var result: [Int]\
    \ = []\n    var rest: Int = n\n    let sqrt_rest = sqrt(Double(rest))\n    var\
    \ divisor: Int = 2\n    while divisor <= Int(sqrt_rest) {\n        if rest % divisor\
    \ == 0 {\n            result.append(divisor)\n            rest /= divisor\n  \
    \      } else {\n            divisor += 1\n        }\n    }\n    if rest > 1 {\n\
    \        result.append(rest)\n    }\n    return result", "    var result = [Int]()\n\
    \    var number = n\n    var i = 2\n    while number > 1 {\n        while number\
    \ % i == 0 {\n            result.append(i)\n            number /= i\n        }\n\
    \        i += 1\n    }\n    return result", "    var primes = [Int]()\n    var\
    \ num = n\n    for p in 2...n {\n        while num % p == 0 {\n            primes.append(p)\n\
    \            num /= p\n        }\n    }\n    return primes", "    var number =\
    \ n\n    var result = [Int]()\n    for i in 2...n {\n        if number % i ==\
    \ 0 {\n            result.append(i)\n            number /= i\n            if number\
    \ > 1 {\n                result += factorize(n: number)\n            }\n     \
    \       break\n        }\n    }\n    return result", "    var tmp = n\n    var\
    \ result = [Int]()\n    while tmp % 2 == 0 {\n        result.append(2)\n     \
    \   tmp /= 2\n    }\n    for i in 3...tmp {\n        if i % 2 != 0 && tmp % i\
    \ == 0 {\n            result.append(i)\n            tmp /= i\n        }\n    }\n\
    \    return result", "    var n = n\n    var result = [Int]()\n    while n % 2\
    \ == 0 {\n        result.append(2)\n        n /= 2\n    }\n    var i = 3\n   \
    \ while i * i <= n {\n        if n % i == 0 {\n            result.append(i)\n\
    \            n /= i\n        } else {\n            i += 2\n        }\n    }\n\
    \    if n > 1 {\n        result.append(n)\n    }\n    return result", "    var\
    \ primeFactors = [Int]()\n    var potentialFactor = 2\n    var number = n\n  \
    \  while number != 1 {\n        if number % potentialFactor == 0 {\n         \
    \   primeFactors.append(potentialFactor)\n            number /= potentialFactor\n\
    \        } else {\n            potentialFactor += 1\n        }\n    }\n    return\
    \ primeFactors", "    var i = 2\n    var result: [Int] = []\n    var current =\
    \ n\n    while current != 1 {\n        if current % i == 0 {\n            result.append(i)\n\
    \            current /= i\n        } else {\n            i += 1\n        }\n \
    \   }\n    return result", "    var result: [Int] = []\n    if n > 1 {\n     \
    \   var divisor = 2\n        var number = n\n        while number > 1 {\n    \
    \        while number % divisor == 0 {\n                result.append(divisor)\n\
    \                number /= divisor\n            }\n            divisor += 1\n\
    \        }\n    }\n    return result", "    guard n > 1 else {\n        return\
    \ []\n    }\n    var result = [Int]()\n    var value = n\n    while value % 2\
    \ == 0 {\n        result.append(2)\n        value /= 2\n    }\n    var divider\
    \ = 3\n    while divider <= value {\n        while value % divider == 0 {\n  \
    \          result.append(divider)\n            value /= divider\n        }\n \
    \       divider += 2\n    }\n    return result", "    if n == 1 {\n        return\
    \ []\n    }\n    var primeFactors = [Int]()\n    var mutableN = n\n    for i in\
    \ 2..<mutableN+1 {\n        if mutableN % i == 0 {\n            primeFactors.append(i)\n\
    \            mutableN /= i\n            return primeFactors + factorize(n: mutableN)\n\
    \        }\n    }\n    return primeFactors", '    return Array(Set(Array(0...n).filter
    { n % $0 == 0 })).sorted()', "    \n    var n = n\n    var res = [Int]()\n   \
    \ var p = 2\n    \n    while p * p <= n {\n        if n % p == 0 {\n         \
    \   res.append(p)\n            n /= p\n        } else {\n            p += 1\n\
    \        }\n    }\n    \n    if n > 1 {\n        res.append(n)\n    }\n    \n\
    \    return res", "  guard n > 0 else { return [] }\n  guard n != 1 else { return\
    \ [1] }\n  var result = [Int]()\n  var n = n\n  var f = 2\n  while f <= n {\n\
    \    if n % f == 0 {\n      result.append(f)\n      n /= f\n    } else {\n   \
    \   f += 1\n    }\n  }\n  return result", "    assert(n > 0)\n    return factorize_step(n:\
    \ n, p: 2)", "    guard n > 1 else { return [] }\n    var primeFactors = [Int]()\n\
    \    var count = 0\n    var value = n\n    while (value > 1) {\n        if value\
    \ % 2 == 0 {\n            count += 1\n            value /= 2\n        } else {\n\
    \            guard count != 0 else { break }\n            for _ in 0..<count {\n\
    \                primeFactors.append(2)\n            }\n            count = 0\n\
    \        }\n    }\n    var divisor = 3\n    while value > 1 {\n        if value\
    \ % divisor == 0 {\n            count += 1\n            value /= divisor\n   \
    \     } else {\n            guard count != 0 else { break }\n            for _\
    \ in 0..<count {\n                primeFactors.append(divisor)\n            }\n\
    \            count = 0\n            divisor += 2\n        }\n    }\n    return\
    \ primeFactors", "    guard n > 1 else { return [] }\n    guard let p = primes.first(where:\
    \ { n % $0 == 0 }) else { return [n] }\n    let nn = n / p\n    return [p] + factorize(n:\
    \ nn)", "    var result = [Int]()\n    var number = n\n    let sqrtN = Int(sqrt(Double(n)))\n\
    \    for i in (2...sqrtN) {\n        if number % i == 0 {\n            while number\
    \ % i == 0 {\n                result.append(i)\n                number /= i\n\
    \            }\n        }\n    }\n    if number > 1 {\n        result.append(number)\n\
    \    }\n    return result", "    let max = Int(sqrt(Double(n)))\n    var result\
    \ = [Int]()\n    var i = 2\n    while i <= max {\n        if n % i == 0 {\n  \
    \          result.append(i)\n            if i != max {\n                result.append(contentsOf:\
    \ factorize(n: n / i))\n            }\n            break\n        }\n        i\
    \ += 1\n    }\n    if i > max {\n        result.append(n)\n    }\n    return result",
  "    var result = [Int]()\n    var dividend = n\n    while dividend > 1 {\n    \
    \    let prime = findSmallestDivisor(n: dividend)\n        result.append(prime)\n\
    \        dividend /= prime\n    }\n    return result", '    return []', "    var\
    \ result = [Int]()\n    for i in 2...n {\n        if n % i == 0 {\n          \
    \  result.append(i)\n            let next = n / i\n            if next > 1 {\n\
    \                result.append(contentsOf: factorize(n: next))\n            }\n\
    \            break\n        }\n    }\n    return result", "    var factors: [Int]\
    \ = []\n    var divider = 2\n    var n = n\n    while n > 1 {\n        while n\
    \ % divider == 0 {\n            factors.append(divider)\n            n /= divider\n\
    \        }\n        divider += 1\n    }\n    return factors", "    // TODO: implement\n\
    \    return [2, 2, 2]", "    var d = 2\n    var m = n\n    var factors = [Int]()\n\
    \    while m > 1 {\n        while m % d == 0 {\n            factors.append(d)\n\
    \            m /= d\n        }\n        d += 1\n    }\n    return factors", '    return
    []', "    var n = n\n    var factors = [Int]()\n    var divisor = 2\n    while\
    \ divisor * divisor <= n {\n        while n % divisor == 0 {\n            factors.append(divisor)\n\
    \            n /= divisor\n        }\n        divisor += 1\n    }\n    if n >\
    \ 1 {\n        factors.append(n)\n    }\n    return factors", "  var result =\
    \ [Int]()\n  var remainder = n\n  var i = 2\n  while remainder > 1 {\n    while\
    \ (remainder % i) == 0 {\n      result.append(i)\n      remainder /= i\n    }\n\
    \    i += 1\n  }\n  return result", "    var factorList: [Int] = []\n    var n\
    \ = n\n    while n % 2 == 0 {\n        factorList.append(2)\n        n /= 2\n\
    \    }\n    var factor = 3\n    while Double(factor) <= sqrt(Double(n)) {\n  \
    \      while n % factor == 0 {\n            factorList.append(factor)\n      \
    \      n /= factor\n        }\n        factor += 2\n    }\n    if n > 2 {\n  \
    \      factorList.append(n)\n    }\n    return factorList", "    var factors =\
    \ [Int]()\n    var current = n\n    var factor = 2\n    while current > 1 {\n\
    \        while current % factor == 0 {\n            factors.append(factor)\n \
    \           current /= factor\n        }\n        factor += 1\n    }\n    return\
    \ factors", "    var factors: [Int] = []\n    var remainder = n\n    for index\
    \ in 2...remainder {\n        while remainder % index == 0 {\n            factors.append(index)\n\
    \            remainder /= index\n        }\n    }\n    return factors", "    \n\
    \    var result = [Int]()\n    var number = n\n    \n    for i in 2...n {\n  \
    \      if isPrime(num: i) {\n            while number % i == 0 {\n           \
    \     result.append(i)\n                number /= i\n            }\n        }\n\
    \    }\n    \n    return result", "    var primeFactors = [Int]()\n    var remainder\
    \ = n\n    var factor = 2\n    while remainder > 1 {\n        while remainder\
    \ % factor == 0 {\n            primeFactors.append(factor)\n            remainder\
    \ /= factor\n        }\n        factor += 1\n    }\n    return primeFactors",
  "    var n = n\n    var result = [Int]()\n    var i = 2\n    while i * i <= n {\n\
    \        while n % i == 0 {\n            result.append(i)\n            n /= i\n\
    \        }\n        i += 1\n    }\n    if n > 1 {\n        result.append(n)\n\
    \    }\n    return result", "    assert(n > 0)\n    var n = n\n    var res = [Int]()\n\
    \    var i = 2\n    while n > 1 {\n        while n % i == 0 {\n            res.append(i)\n\
    \            n /= i\n        }\n        i += 1\n    }\n    return res", "    \n\
    \    if n == 1 { return [1] }\n    \n    var factors = [Int]()\n    var number\
    \ = n\n    \n    for i in 2...n {\n        while number % i == 0 {\n         \
    \   factors.append(i)\n            number /= i\n        }\n    }\n    \n    return\
    \ factors", "    var result: [Int] = []\n    var number = n\n    let divisor =\
    \ 2\n    while number > 1 {\n        while number % divisor == 0 {\n         \
    \   result.append(divisor)\n            number /= divisor\n        }\n       \
    \ if number > 1 {\n            number -= 1\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var x = n\n    var factor = 2\n    while x > 1\
    \ {\n        if x % factor == 0 {\n            result.append(factor)\n       \
    \     x /= factor\n        } else {\n            factor += 1\n        }\n    }\n\
    \    return result", "    var n = n\n    var res = [Int]()\n    var divisor =\
    \ 2\n    while divisor * divisor <= n {\n        while n % divisor == 0 {\n  \
    \          res.append(divisor)\n            n /= divisor\n        }\n        divisor\
    \ += 1\n    }\n    if n > 1 {\n        res.append(n)\n    }\n    return res",
  '    return []', "    var primeFactors = [Int]()\n    var number = n\n    for divider\
    \ in 2...n {\n        while number % divider == 0 {\n            primeFactors.append(divider)\n\
    \            number /= divider\n        }\n    }\n    return primeFactors", " \
    \   var result: [Int] = []\n    if n == 1 {\n        return [1]\n    }\n    if\
    \ n <= 0 {\n        return []\n    }\n    var varN = n\n    while varN > 1 {\n\
    \        for i in 2...varN {\n            if varN % i == 0 {\n               \
    \ result.append(i)\n                varN /= i\n                break\n       \
    \     }\n        }\n    }\n    return result", "    var n = n\n    var factors\
    \ = [Int]()\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            factors.append(i)\n            n /= i\n        } else {\n       \
    \     i += 1\n        }\n    }\n    if n > 1 {\n        factors.append(n)\n  \
    \  }\n    return factors", "    var k = n\n    var divider = 2\n    var result:\
    \ [Int] = []\n    while k > 1 {\n        if k % divider == 0 {\n            result.append(divider)\n\
    \            k /= divider\n        } else {\n            divider += 1\n      \
    \  }\n    }\n    return result", "    assert(n > 0)\n    var n = n\n    var result\
    \ = [Int]()\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            result.append(i)\n            n /= i\n        } else {\n        \
    \    i += 1\n        }\n    }\n    if n > 1 {\n        result.append(n)\n    }\n\
    \    return result", "    var n = n\n    var factors = [Int]()\n    var f = 2\n\
    \    while n > 1 {\n        while n % f == 0 {\n            factors.append(f)\n\
    \            n /= f\n        }\n        f += 1\n    }\n    return factors", " \
    \   var factors = [Int]()\n    var newN = n\n    for i in 2...n/2{\n        if\
    \ newN % i == 0{\n            factors.append(i)\n            newN = newN / i\n\
    \            print(i)\n        }\n    }\n    return factors", "    var res = [Int]()\n\
    \    var num = n\n    var div = 2\n    while num > 1 {\n        while num % div\
    \ == 0 {\n            res.append(div)\n            num /= div\n        }\n   \
    \     div += 1\n    }\n    return res", "    var number = n\n    var primeNumbers\
    \ = [Int]()\n    var tmp = [Int]()\n    var i = 2\n    while i * i <= number {\n\
    \        if number % i == 0 {\n            number /= i\n            tmp.append(i)\n\
    \        } else {\n            i += 1\n        }\n    }\n    if number > 1 {\n\
    \        tmp.append(number)\n    }\n    var count = 1\n    var tmp2 = tmp[0]\n\
    \    for i in 1..<tmp.count {\n        if tmp[i] == tmp2 {\n            count\
    \ += 1\n        } else {\n            primeNumbers.append(contentsOf: Array(repeating:\
    \ tmp2, count: count))\n            tmp2 = tmp[i]\n            count = 1\n   \
    \     }\n    }\n    primeNumbers.append(contentsOf: Array(repeating: tmp2, count:\
    \ count))\n    return primeNumbers", "    var arr = [Int]()\n    var number =\
    \ n\n    var i = 2\n    while number > 1 {\n        if number % i == 0 {\n   \
    \         arr.append(i)\n            number /= i\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return arr", '    return Factorization(of: n).factors.sorted()',
  "    var primes: [Int] = []\n    var d: Int = 2\n    var m: Int = n\n    while m\
    \ > 1 {\n        if m % d == 0 {\n            primes.append(d)\n            m\
    \ /= d\n        } else {\n            d += 1\n        }\n    }\n    return primes",
  "    var factors = [Int]()\n    var number = n\n    var i = 2\n    while number\
    \ > 1 {\n        if number % i == 0 {\n            factors.append(i)\n       \
    \     number /= i\n        } else {\n            i += 1\n        }\n    }\n  \
    \  return factors", "    var factors = [Int]()\n    var divided = n\n    var divisor\
    \ = 2\n    while true {\n        if divided % divisor == 0 {\n            factors.append(divisor)\n\
    \            divided /= divisor\n        } else {\n            divisor += 1\n\
    \        }\n        if divided == 1 {\n            break\n        }\n    }\n \
    \   return factors", "    var number = n\n    var factors = [Int]()\n    var factor\
    \ = 2\n    while number > 1 {\n        while number % factor == 0 {\n        \
    \    factors.append(factor)\n            number /= factor\n        }\n       \
    \ factor += 1\n    }\n    return factors", "    var result = [Int]()\n    var\
    \ input = n\n    while input != 1 {\n        for i in 2...input {\n          \
    \  if input % i == 0 {\n                result.append(i)\n                input\
    \ /= i\n                break\n            }\n        }\n    }\n    return result",
  "    var factorization = [Int]()\n    var number = n\n    var i = 2\n    while number\
    \ > 1 {\n        while number % i == 0 {\n            factorization.append(i)\n\
    \            number /= i\n        }\n        i += 1\n    }\n    return factorization",
  "    var result: [Int] = []\n    var primeNumber = 2\n    var remaining = n\n  \
    \  while remaining > 1 {\n        if remaining % primeNumber == 0 {\n        \
    \    result.append(primeNumber)\n            remaining /= primeNumber\n      \
    \  } else {\n            primeNumber += 1\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
