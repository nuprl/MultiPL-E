name: HumanEval_69_search
language: swift
prompt: "\n/// You are given a non-empty array of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the array.\n/// If no such a value exist, return -1.\n\
  /// Examples:\n/// >>> search(lst: [4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(lst:\
  \ [1, 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(lst: [5, 5, 4, 4, 4])\n///\
  \ -1\nfunc search(lst: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(search(lst: [5, 5, 5, 5, 1]) == 1)\nassert(search(lst:\
  \ [4, 1, 4, 1, 4, 4]) == 4)\nassert(search(lst: [3, 3]) == -1)\nassert(search(lst:\
  \ [8, 8, 8, 8, 8, 8, 8, 8]) == 8)\nassert(search(lst: [2, 3, 3, 2, 2]) == 2)\nassert(search(lst:\
  \ [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1)\n\
  assert(search(lst: [3, 2, 8, 2]) == 2)\nassert(search(lst: [6, 7, 1, 8, 8, 10, 5,\
  \ 8, 5, 3, 10]) == 1)\nassert(search(lst: [8, 8, 3, 6, 5, 6, 4]) == -1)\nassert(search(lst:\
  \ [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])\
  \ == 1)\nassert(search(lst: [1, 9, 10, 1, 3]) == 1)\nassert(search(lst: [6, 9, 7,\
  \ 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5)\nassert(search(lst:\
  \ [1]) == 1)\nassert(search(lst: [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10,\
  \ 4, 2, 1, 10, 2, 1, 1, 5]) == 4)\nassert(search(lst: [2, 10, 4, 8, 2, 10, 5, 1,\
  \ 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2)\nassert(search(lst: [1, 6, 10, 1, 6, 9,\
  \ 10, 8, 6, 8, 7, 3]) == 1)\nassert(search(lst: [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7,\
  \ 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4)\nassert(search(lst:\
  \ [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4)\n\
  assert(search(lst: [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) ==\
  \ 2)\nassert(search(lst: [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
  \ 7, 7, 10, 8]) == -1)\nassert(search(lst: [10]) == -1)\nassert(search(lst: [9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2)\nassert(search(lst: [5, 4, 10, 2,\
  \ 1, 1, 10, 3, 6, 1, 8]) == 1)\nassert(search(lst: [7, 9, 9, 9, 3, 4, 1, 5, 9, 1,\
  \ 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1)\nassert(search(lst: [3, 10, 10, 9,\
  \ 2]) == -1)"
completions: ['    return lst.isEmpty ? -1 : lst.filter{$0 == lst.reduce(0, +)/lst.count}.count
    > 0 ? lst.reduce(0, +)/lst.count : -1', '    return -1', "    var intDict = [Int:\
    \ Int]()\n    var intSet = Set<Int>()\n    for item in lst {\n        if let count\
    \ = intDict[item] {\n            intDict[item] = count + 1\n        } else {\n\
    \            intDict[item] = 1\n        }\n        intSet.insert(item)\n    }\n\
    \    for key in intSet {\n        if key <= intDict[key]! {\n            return\
    \ key\n        }\n    }\n    return -1", "    // write code here\n    let countDict\
    \ = Dictionary(grouping: lst, by: { $0 })\n    let keyArr = Array(countDict.keys).sorted(by:\
    \ { $0 > $1 })\n    for key in keyArr {\n        if key <= countDict[key]!.count\
    \ {\n            return key\n        }\n    }\n    return -1", '    return -1',
  "    var counts: [Int: Int] = [:]\n    var max = -1\n    for i in lst {\n      \
    \  counts[i] = (counts[i] ?? 0) + 1\n        if counts[i]! >= i && max < i {\n\
    \            max = i\n        }\n    }\n    return max", "    var count = [Int:\
    \ Int]()\n    for num in lst {\n        count[num] = (count[num] ?? 0) + 1\n \
    \   }\n    return lst.map{ $0 > count[$0] ?? 0 ? -1 : $0 }.max() ?? -1", "   \
    \ var frequency = [Int: Int]()\n    var maxValue = 0\n    for n in lst {\n   \
    \     if n == 0 {\n            continue\n        }\n        if let curFrequency\
    \ = frequency[n] {\n            frequency[n] = curFrequency + 1\n        } else\
    \ {\n            frequency[n] = 1\n        }\n        if n > maxValue {\n    \
    \        maxValue = n\n        }\n    }\n    for i in 1...maxValue {\n       \
    \ if let freq = frequency[i], freq >= i {\n            return i\n        }\n \
    \   }\n    return -1", "    var bestInt = -1\n    var freq = Dictionary<Int, Int>()\n\
    \    for num in lst {\n        freq[num] = (freq[num] ?? 0) + 1\n        if freq[num]!\
    \ >= num && num > bestInt {\n            bestInt = num\n        }\n    }\n   \
    \ return bestInt", "    var frequencies = [Int: Int]()\n    for item in lst {\n\
    \        frequencies[item] = (frequencies[item] ?? 0) + 1\n    }\n    var max\
    \ = 0\n    for (key, value) in frequencies {\n        if value >= key && value\
    \ >= max {\n            max = key\n        }\n    }\n    return max", "    var\
    \ dict: [Int: Int] = [:]\n    for element in lst {\n        dict[element] = (dict[element]\
    \ ?? 0) + 1\n    }\n    let keys = dict.keys.sorted()\n    for i in 0..<keys.count\
    \ {\n        if dict[keys[i]] ?? 0 >= keys[i] {\n            return keys[i]\n\
    \        }\n    }\n    return -1", "    /// Returns the frequency of an integer\
    \ in an array\n    func getFrequency(integer: Int, lst: [Int]) -> Int {\n    \
    \    var frequency = 0\n        for i in lst {\n            if i == integer {\n\
    \                frequency += 1\n            }\n        }\n        return frequency\n\
    \    }\n    /// Returns the largest integer in an array\n    func getLargestInteger(lst:\
    \ [Int]) -> Int {\n        var largestInteger = 0\n        for i in lst {\n  \
    \          if i > largestInteger {\n                largestInteger = i\n     \
    \       }\n        }\n        return largestInteger\n    }\n    let largestInteger\
    \ = getLargestInteger(lst: lst)\n    let frequencyOfLargestInteger = getFrequency(integer:\
    \ largestInteger, lst: lst)\n    if largestInteger <= frequencyOfLargestInteger\
    \ {\n        return largestInteger\n    } else {\n        return -1\n    }", " \
    \   // For constant runtime, we need to use a dictionary to count the frequency\
    \ of each integer.\n    // Store the frequency in the dictionary as the key and\
    \ the number as the value.\n    var dictionary = [Int: Int]()\n    for number\
    \ in lst {\n        // Increase the count if the number is in the dictionary.\n\
    \        if let count = dictionary[number] {\n            dictionary[number] =\
    \ count + 1\n        } else {\n            // Set the count to 1 if the number\
    \ is not in the dictionary.\n            dictionary[number] = 1\n        }\n \
    \   }\n    // Get the keys (numbers) and sort them in descending order\n    let\
    \ keys = dictionary.keys.sorted(by: >)\n    for key in keys {\n        // Iterate\
    \ through the numbers and return the greatest value that satisfies the problem.\n\
    \        if let value = dictionary[key], value >= key {\n            return key\n\
    \        }\n    }\n    // If the program reaches this point, return -1 because\
    \ no such value exist.\n    return -1", "    var ans = -1\n    var count = 0\n\
    \    for elem in lst {\n        if count < elem {\n            ans = elem\n  \
    \          count = 0\n        }\n        if elem == ans {\n            count +=\
    \ 1\n        }\n    }\n    return count >= ans ? ans : -1", "    // [4, 1, 2,\
    \ 2, 3, 1]\n    var hashMap: [Int: Int] = [:]\n    for item in lst {\n       \
    \ if let value = hashMap[item] {\n            hashMap[item] = value + 1\n    \
    \    } else {\n            hashMap[item] = 1\n        }\n    }\n    for item in\
    \ lst {\n        if let value = hashMap[item] {\n            if value >= item\
    \ {\n                return item\n            }\n        }\n    }\n    return\
    \ -1", "    let dict = countElements(in: lst)\n    let sorted = dict.sorted(by:\
    \ { $0.key > $1.key })\n    for (key, value) in sorted {\n        if key <= value\
    \ {\n            return key\n        }\n    }\n    return -1", "    var (nums,\
    \ freqs) = ([Int](), [Int]())\n    for num in lst {\n        if let i = nums.firstIndex(of:\
    \ num) {\n            freqs[i] += 1\n        } else {\n            nums.append(num)\n\
    \            freqs.append(1)\n        }\n    }\n    for (i, f) in freqs.enumerated()\
    \ {\n        if f >= nums[i] {\n            return nums[i]\n        }\n    }\n\
    \    return -1", "    var freqDict = [Int: Int]()\n    for n in lst {\n      \
    \  freqDict[n] = (freqDict[n] ?? 0) + 1\n    }\n    for (key, value) in freqDict.sorted(by:\
    \ {$0.0 > $1.0}) {\n        if key <= value {\n            return key\n      \
    \  }\n    }\n    return -1", "    // Your code here\n    return -1", "    // Your\
    \ code here\n    return 0", "    let mapper = lst.reduce(into: [:]) { $0[$1, default:\
    \ 0] += 1 }\n    for (key, value) in mapper {\n        if value >= key {\n   \
    \         return key\n        }\n    }\n    return -1", "    var dict: [Int: Int]\
    \ = [:]\n    for num in lst {\n        if let value = dict[num] {\n          \
    \  dict[num] = value + 1\n        } else {\n            dict[num] = 1\n      \
    \  }\n    }\n    let sorted = dict.sorted { $0.0 > $1.0 }\n    for (key, value)\
    \ in sorted {\n        if key <= value {\n            return key\n        }\n\
    \    }\n    return -1", "    var frequencyDictionary = [Int: Int]()\n    for n\
    \ in lst {\n        if let currentFrequency = frequencyDictionary[n] {\n     \
    \       frequencyDictionary[n] = currentFrequency + 1\n        } else {\n    \
    \        frequencyDictionary[n] = 1\n        }\n    }\n    var maxValue = -1\n\
    \    for n in frequencyDictionary.keys {\n        let frequency = frequencyDictionary[n]!\n\
    \        if n <= frequency && frequency > maxValue {\n            maxValue = n\n\
    \        }\n    }\n    return maxValue", "    var set = Set<Int>()\n    var dict\
    \ = [Int: Int]()\n    for i in lst {\n        if set.contains(i) {\n         \
    \   dict[i] = dict[i]! + 1\n        } else {\n            set.insert(i)\n    \
    \        dict[i] = 1\n        }\n    }\n    let arr = dict.filter { (key, value)\
    \ -> Bool in\n        value >= key\n    }\n    return arr.isEmpty ? -1 : arr.keys.max()!",
  "    var dict: [Int: Int] = [:]\n    for num in lst {\n        dict[num] = (dict[num]\
    \ ?? 0) + 1\n    }\n    let sortedDict = dict.sorted { $0.key > $1.key }\n   \
    \ for (num, count) in sortedDict {\n        if num <= count {\n            return\
    \ num\n        }\n    }\n    return -1", "    var dict = [Int: Int]()\n    var\
    \ result = -1\n    for num in lst {\n        dict[num] = (dict[num] ?? 0) + 1\n\
    \    }\n    let keys = dict.keys.sorted()\n    for key in keys {\n        if dict[key]\
    \ ?? 0 >= key {\n            result = key\n        }\n    }\n    return result",
  "    var occurrences: [Int: Int] = [:]\n    for item in lst {\n        if occurrences[item]\
    \ == nil {\n            occurrences[item] = 1\n        } else {\n            occurrences[item]!\
    \ += 1\n        }\n    }\n    for (key, value) in occurrences {\n        if key\
    \ <= value {\n            return key\n        }\n    }\n    return -1", "    var\
    \ count = [Int: Int]()\n    for item in lst {\n        count[item] = (count[item]\
    \ ?? 0) + 1\n    }\n    let maxValue = lst.max() ?? 0\n    for i in stride(from:\
    \ maxValue, to: 0, by: -1) {\n        if let value = count[i], value >= i {\n\
    \            return i\n        }\n    }\n    return -1", "    var greatestInt\
    \ = -1\n    var counter: [Int: Int] = [:]\n    for number in lst {\n        if\
    \ counter[number] == nil {\n            counter[number] = 1\n        } else {\n\
    \            counter[number]! += 1\n        }\n    }\n    for (number, count)\
    \ in counter {\n        if number <= count {\n            if number > greatestInt\
    \ {\n                greatestInt = number\n            }\n        }\n    }\n \
    \   return greatestInt", "    let result = [Int](repeating: 0, count: lst.count)\n\
    \    for i in 0..<lst.count {\n        for j in 0..<lst.count {\n            if\
    \ lst[i] == lst[j] {\n                result[i] += 1\n            }\n        }\n\
    \    }\n    var max = -1\n    for i in 0..<lst.count {\n        if result[i] ==\
    \ lst[i] && lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return\
    \ max", "    let count = lst.count\n    var value = -1\n    for i in 0..<count\
    \ {\n        var same = 0\n        for j in 0..<count {\n            if lst[i]\
    \ == lst[j] {\n                same += 1\n            }\n        }\n        if\
    \ lst[i] <= same {\n            value = lst[i]\n        }\n    }\n    return value",
  "    let frequencies = lst.reduce(into: [:]) { $0[$1, default: 0] += 1 }\n    let\
    \ m = lst.max() ?? 0\n    var g = -1\n    for i in 1...m {\n        if frequencies[i,\
    \ default: 0] >= i && i > g {\n            g = i\n        }\n    }\n    return\
    \ g", "    var nums = lst\n    nums.sort()\n    var result = 0\n    var counter\
    \ = 0\n    var greater = false\n    for i in nums {\n        if result == i {\n\
    \            counter += 1\n        } else {\n            if counter >= result\
    \ {\n                result = i\n                counter = 1\n               \
    \ greater = true\n            } else {\n                counter = 1\n        \
    \    }\n        }\n    }\n    if counter >= result && greater {\n        return\
    \ result\n    } else {\n        return -1\n    }", '    return -1', "    var frequencyDict\
    \ = [Int: Int]()\n    lst.forEach { frequencyDict[$0] = (frequencyDict[$0] ??\
    \ 0) + 1 }\n    return frequencyDict.filter { $0.key <= $0.value }.max { $0.key\
    \ < $1.key }?.key ?? -1", "    var dictionary: [Int: Int] = [:]\n    var keys:\
    \ [Int] = []\n    for i in lst {\n        if dictionary[i] == nil {\n        \
    \    dictionary[i] = 1\n            keys.append(i)\n        } else {\n       \
    \     dictionary[i]! += 1\n        }\n    }\n    let sortedKeys = keys.sorted()\n\
    \    var result = -1\n    for i in sortedKeys {\n        if dictionary[i]! >=\
    \ i {\n            result = i\n        }\n    }\n    return result", "    // You\
    \ need to fill out the algorithm here.\n    var dict = [Int: Int]()\n    var highestKey\
    \ = -1\n    for i in lst {\n        if dict[i] == nil {\n            dict[i] =\
    \ 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    for (key,\
    \ value) in dict {\n        if key <= value && key > highestKey {\n          \
    \  highestKey = key\n        }\n    }\n    return highestKey", "    let res =\
    \ lst.map { (k, v) in (lst.filter { $0 == k }.count, k) }.filter { $0.0 >= $0.1\
    \ }.sorted { $0.0 > $0.1 }\n    return res.isEmpty ? -1 : res[0].1", '    return
    -1', "    var dict = [Int: Int]()\n    for number in lst {\n        if let count\
    \ = dict[number] {\n            dict[number] = count + 1\n        } else {\n \
    \           dict[number] = 1\n        }\n    }\n    for key in dict.keys.sorted(by:\
    \ >) {\n        if dict[key]! >= key {\n            return key\n        }\n  \
    \  }\n    return -1", "    guard lst.count > 0 else { return -1 }\n    var dic\
    \ = [Int: Int]()\n    for i in lst {\n        if let _ = dic[i] {\n          \
    \  dic[i]! += 1\n        } else {\n            dic[i] = 1\n        }\n    }\n\
    \    let arr = Array(dic.keys).sorted()\n    for i in arr {\n        if i <= dic[i]!\
    \ {\n            return i\n        }\n    }\n    return -1", "    var array =\
    \ lst\n    var arr = [Int]()\n    for index in 0..<array.count {\n        if array[index]\
    \ >= array.count {\n            arr.append(array[index])\n        }\n    }\n \
    \   var frequency = [Int: Int]()\n    for n in arr {\n        frequency[n] = (frequency[n]\
    \ ?? 0) + 1\n    }\n    for (key, value) in frequency {\n        if key == value\
    \ {\n            return key\n        }\n    }\n    return -1", "    var dic =\
    \ [Int: Int]()\n    for val in lst {\n        if var value = dic[val] {\n    \
    \        value += 1\n            dic[val] = value\n        } else {\n        \
    \    dic[val] = 1\n        }\n    }\n    let filteredArray = Array(dic.keys).filter\
    \ { dic[$0]! >= $0 }\n    if filteredArray.count > 0 {\n        return filteredArray.max()!\n\
    \    } else {\n        return -1\n    }", "    var frequencyDictionary = [Int:\
    \ Int]()\n    for value in lst {\n        if let frequency = frequencyDictionary[value]\
    \ {\n            frequencyDictionary[value] = frequency + 1\n        } else {\n\
    \            frequencyDictionary[value] = 1\n        }\n    }\n    for (value,\
    \ frequency) in frequencyDictionary {\n        if value <= frequency {\n     \
    \       return value\n        }\n    }\n    return -1", "    var res = -1\n  \
    \  var counts = Dictionary<Int, Int>()\n    for item in lst {\n        if (counts[item]\
    \ == nil) {\n            counts[item] = 1\n        } else {\n            counts[item]!\
    \ += 1\n        }\n    }\n    for (key, val) in counts {\n        if (key <= val\
    \ && key > res) {\n            res = key\n        }\n    }\n    return res", " \
    \   let nums = lst.sorted()\n    var frequencies = [Int: Int]()\n    var frequencies2\
    \ = [Int: Int]()\n    for num in nums {\n        let count = frequencies[num]\
    \ ?? 0\n        frequencies[num] = count + 1\n    }\n    for num in frequencies.keys\
    \ {\n        let count = frequencies[num] ?? 0\n        frequencies2[count] =\
    \ num\n    }\n    let maxValue = frequencies2.keys.max() ?? 0\n    if maxValue\
    \ >= nums.last! {\n        return frequencies2[maxValue]!\n    }\n    return -1",
  '    return -1', "    var dict = [Int: Int]()\n    var max = 0\n    var maxValue\
    \ = -1\n    for num in lst {\n        if dict[num] == nil {\n            dict[num]\
    \ = 1\n        } else {\n            dict[num]! += 1\n        }\n        if num\
    \ > max {\n            max = num\n        }\n    }\n    for num in 1...max {\n\
    \        if dict[num] == nil {\n            continue\n        }\n        if dict[num]!\
    \ >= num {\n            maxValue = num\n        }\n    }\n    return maxValue",
  "\tvar dict = [Int: Int]()\n\t\n\tfor num in lst {\n\t\tif dict[num] == nil {\n\t\
    \t\tdict[num] = 1\n\t\t} else {\n\t\t\tdict[num]! += 1\n\t\t}\n\t}\n\t\n\tfor\
    \ num in dict.keys.sorted(by: >) {\n\t\tif num <= dict[num]! {\n\t\t\treturn num\n\
    \t\t}\n\t}\n\t\n\treturn -1", "    var dict = [Int: Int]()\n    for number in\
    \ lst {\n        dict[number] = (dict[number] ?? 0) + 1\n    }\n    let sortedDict\
    \ = dict.sorted { (first, second) -> Bool in\n        first.key > second.key\n\
    \    }\n    for (key, value) in sortedDict {\n        if key <= value {\n    \
    \        return key\n        }\n    }\n    return -1", "    var dict: [Int: Int]\
    \ = [:]\n    for num in lst {\n        dict[num] = (dict[num] ?? 0) + 1\n    }\n\
    \    let arr = dict.sorted(by: { $0.key > $1.key })\n    for (num, numCount) in\
    \ arr {\n        if numCount >= num {\n            return num\n        }\n   \
    \ }\n    return -1", "    var countByNumber = [Int: Int]()\n    for num in lst\
    \ {\n        if let count = countByNumber[num] {\n            countByNumber[num]\
    \ = count + 1\n        } else {\n            countByNumber[num] = 1\n        }\n\
    \    }\n    var result = -1\n    for (num, count) in countByNumber {\n       \
    \ if num <= count && num > result {\n            result = num\n        }\n   \
    \ }\n    return result", "    var frequency: [Int: Int] = [:]\n    for value in\
    \ lst {\n        frequency[value] = (frequency[value] ?? 0) + 1\n    }\n    let\
    \ maxValue = frequency.keys.max() ?? -1\n    let maxFrequency = frequency[maxValue]\
    \ ?? -1\n    return maxFrequency >= maxValue ? maxValue : -1", "\tvar listOfInts\
    \ = lst\n\tvar maxInt = -1\n\tfor i in 1...lst.count {\n\t\tlet count = listOfInts.filter\
    \ { $0 == i }.count\n\t\tif i <= count {\n\t\t\tmaxInt = i\n\t\t}\n\t}\n\treturn\
    \ maxInt", "    var numbers = lst\n    var counts: [Int: Int] = [:]\n    var result\
    \ = -1\n    \n    for num in numbers {\n        if counts[num] == nil {\n    \
    \        counts[num] = 1\n        } else {\n            counts[num]! += 1\n  \
    \      }\n    }\n    \n    for num in numbers {\n        if counts[num]! >= num\
    \ {\n            result = num\n        }\n    }\n    \n    return result", " \
    \   var lst = lst.sorted()\n    var currNumber = lst[0]\n    var currNumberCount\
    \ = 1\n    for index in 1..<lst.count {\n        let nextNumber = lst[index]\n\
    \        if nextNumber == currNumber {\n            currNumberCount += 1\n   \
    \     } else {\n            if currNumberCount >= currNumber {\n             \
    \   return currNumber\n            }\n            currNumber = nextNumber\n  \
    \          currNumberCount = 1\n        }\n    }\n    return -1", "    let dict\
    \ = Dictionary(grouping: lst, by: { $0 })\n    let sorted = dict.sorted { $0.key\
    \ > $1.key }.filter {\n        $0.key == $0.value.count\n    }\n    return sorted.isEmpty\
    \ ? -1 : sorted[0].key", "    //TODO: implement here\n    return -1", "    var\
    \ sortedLst = lst.sorted()\n    var counter = 1\n    for i in 1..<sortedLst.count\
    \ {\n        if sortedLst[i] == sortedLst[i - 1] {\n            counter += 1\n\
    \        } else {\n            if counter >= sortedLst[i - 1] {\n            \
    \    return sortedLst[i - 1]\n            }\n            counter = 1\n       \
    \ }\n    }\n    return -1", "    var freq = [Int: Int]()\n    for i in lst {\n\
    \        if freq[i] == nil {\n            freq[i] = 1\n        } else {\n    \
    \        freq[i]! += 1\n        }\n    }\n    for (k, v) in freq {\n        if\
    \ v >= k {\n            return k\n        }\n    }\n    return -1", "    // create\
    \ dictionary of frequencies\n    var dic = [Int: Int]()\n    for num in lst {\n\
    \        dic[num] = (dic[num] ?? 0) + 1\n    }\n    // find greatest number with\
    \ frequency greater than or equal to its value\n    for (num, freq) in dic {\n\
    \        if freq >= num {\n            return num\n        }\n    }\n    return\
    \ -1", "    var dict = [Int: Int]()\n    for i in lst {\n        if let val =\
    \ dict[i] {\n            dict[i] = val + 1\n        } else {\n            dict[i]\
    \ = 1\n        }\n    }\n    let keys = dict.keys.sorted()\n    var res = -1\n\
    \    for key in keys {\n        if dict[key]! >= key {\n            res = key\n\
    \        }\n    }\n    return res", "    var dic: [Int: Int] = [:]\n    for num\
    \ in lst {\n        dic[num] = (dic[num] ?? 0) + 1\n    }\n    let sortedKeys\
    \ = dic.keys.sorted { dic[$0]! > dic[$1]! }\n    for key in sortedKeys {\n   \
    \     if dic[key]! >= key {\n            return key\n        }\n    }\n    return\
    \ -1", "    \n    // Create a dictionary, where the key is a number and the value\
    \ is the number of times that number is found\n    var dic = [Int: Int]()\n  \
    \  for i in lst {\n        if dic[i] == nil {\n            dic[i] = 1\n      \
    \  } else {\n            dic[i]! += 1\n        }\n    }\n    \n    // Create a\
    \ second dictionary, where the key is the number of times the number appears and\
    \ the value is the number that appears that many times\n    var secondDic = [Int:\
    \ Int]()\n    for (k, v) in dic {\n        if secondDic[v] == nil {\n        \
    \    secondDic[v] = k\n        } else {\n            if k > secondDic[v]! {\n\
    \                secondDic[v] = k\n            }\n        }\n    }\n    \n   \
    \ // Make an array of all the keys in the second dictionary\n    var arrayOfKeys\
    \ = [Int]()\n    for k in secondDic.keys {\n        arrayOfKeys.append(k)\n  \
    \  }\n    \n    // Sort the array of keys in descending order\n    arrayOfKeys.sort(by:\
    \ >)\n    \n    // Go through the array of keys, starting with the largest key\
    \ and going down, and find the largest value that has a frequency greater than\
    \ or equal to the value of the integer itself\n    for k in arrayOfKeys {\n  \
    \      if k >= secondDic[k]! {\n            return secondDic[k]!\n        }\n\
    \    }\n    \n    // If no such a value exist, return -1\n    return -1", "  \
    \  let sortedLst = lst.sorted { $0 > $1 }\n    let frequencies = makeFrequencies(sortedLst)\n\
    \    let validFrequencies = frequencies.filter { $0.1 >= $0.0 }\n    if validFrequencies.isEmpty\
    \ {\n        return -1\n    }\n    return validFrequencies.first!.0", "\tvar freqCount:\
    \ [Int: Int] = [:]\n\tfor item in lst {\n\t\tif freqCount[item] == nil {\n\t\t\
    \tfreqCount[item] = 1\n\t\t} else {\n\t\t\tfreqCount[item]! += 1\n\t\t}\n\t}\n\
    \tlet freq = freqCount.filter { $0.value >= $0.key }\n\tlet maxItem = freq.max\
    \ { a, b in a.key < b.key }\n\treturn maxItem == nil ? -1 : maxItem!.key", "\t\
    var dic = [Int: Int]()\n\tvar result = -1\n\tfor num in lst {\n\t\tdic[num] =\
    \ (dic[num] ?? 0) + 1\n\t}\n\tfor num in lst {\n\t\tif num <= dic[num]!, num >\
    \ result {\n\t\t\tresult = num\n\t\t}\n\t}\n\treturn result", "    var dict =\
    \ [Int: Int]()\n    var array = lst\n    array.sort()\n    var prevValue = array[0]\n\
    \    var count = 1\n    var result = -1\n    for i in 1..<array.count {\n    \
    \    if array[i] == prevValue {\n            count += 1\n        } else {\n  \
    \          dict[prevValue] = count\n            count = 1\n            prevValue\
    \ = array[i]\n        }\n    }\n    dict[prevValue] = count\n    for (key, value)\
    \ in dict {\n        if key >= value {\n            result = key\n        }\n\
    \    }\n    return result", "    var numOccurrences = [Int: Int]()\n    for num\
    \ in lst {\n        numOccurrences[num] = (numOccurrences[num] ?? 0) + 1\n   \
    \ }\n    var maxNum: Int?\n    for (key, val) in numOccurrences {\n        if\
    \ val >= key && (maxNum == nil || key > maxNum!) {\n            maxNum = key\n\
    \        }\n    }\n    return maxNum ?? -1", "    var hash = [Int: Int]()\n  \
    \  var frequency = 0\n    for item in lst {\n        frequency = hash[item] ??\
    \ 0\n        hash[item] = frequency + 1\n    }\n    for key in hash.keys.sorted(by:\
    \ { $0 > $1 }) {\n        if hash[key] ?? 0 >= key {\n            return key\n\
    \        }\n    }\n    return -1", "    var dic = [Int: Int]()\n    for val in\
    \ lst {\n        if let current_val = dic[val] {\n            dic[val] = current_val\
    \ + 1\n        } else {\n            dic[val] = 1\n        }\n    }\n    var max_val\
    \ = 0\n    for key in dic.keys {\n        if dic[key]! >= key && key > max_val\
    \ {\n            max_val = key\n        }\n    }\n    return max_val > 0 ? max_val\
    \ : -1", '    // your code here', "    var frequency = [Int: Int]()\n    var max\
    \ = -1\n    for elem in lst {\n        frequency[elem] = (frequency[elem] ?? 0)\
    \ + 1\n        if elem > max && frequency[elem]! >= elem {\n            max =\
    \ elem\n        }\n    }\n    return max", "    var greatest: Int = -1\n    var\
    \ frequency: [Int: Int] = [:]\n    for number in lst {\n        frequency[number]\
    \ = (frequency[number] ?? 0) + 1\n    }\n    for (key, value) in frequency {\n\
    \        if key >= value && key > greatest {\n            greatest = key\n   \
    \     }\n    }\n    return greatest", '    return -1', "    var counter = 0\n\
    \    var frequency = 0\n    var result = -1\n    for n in lst {\n        for m\
    \ in lst {\n            if n == m {\n                counter += 1\n          \
    \  }\n        }\n        if counter >= n && n > result {\n            result =\
    \ n\n            frequency = counter\n        }\n        counter = 0\n    }\n\
    \    return result", "    // your code here\n    var count = [Int: Int]()\n  \
    \  for i in lst {\n        if count[i] == nil {\n            count[i] = 1\n  \
    \      } else {\n            count[i]! += 1\n        }\n    }\n    let arr = count.keys.sorted()\n\
    \    for key in arr {\n        if key <= count[key]! {\n            return key\n\
    \        }\n    }\n    return -1", "    var value: Int = -1\n    var dict: [Int:\
    \ Int] = [:]\n    lst.forEach({\n        if dict[$0] == nil {\n            dict[$0]\
    \ = 1\n        } else {\n            dict[$0]! += 1\n        }\n    })\n    dict.keys.forEach({\n\
    \        if dict[$0]! >= $0 && $0 > value {\n            value = $0\n        }\n\
    \    })\n    return value", "    var frequencyDict = [Int: Int]()\n    var result\
    \ = -1\n    for element in lst {\n        frequencyDict[element] = (frequencyDict[element]\
    \ ?? 0) + 1\n    }\n    for key in frequencyDict.keys {\n        if (frequencyDict[key]\
    \ ?? 0) >= key {\n            result = max(result, key)\n        }\n    }\n  \
    \  return result", "    var count = [Int: Int]()\n    var num = -1\n    for i\
    \ in lst {\n        if count[i] == nil {\n            count[i] = 1\n        }\
    \ else {\n            count[i]! += 1\n        }\n    }\n    for i in lst {\n \
    \       if count[i]! >= i {\n            num = i\n        }\n    }\n    return\
    \ num", "    var dict = [Int: Int]()\n    var maxKey = 0\n    for i in lst {\n\
    \        dict[i] = (dict[i] ?? 0) + 1\n        if maxKey < i {\n            maxKey\
    \ = i\n        }\n    }\n    for i in 1...maxKey {\n        if dict[i] ?? 0 >=\
    \ i {\n            return i\n        }\n    }\n    return -1", "    var result\
    \ = -1\n    var dict: [Int: Int] = [:]\n    for num in lst {\n        if let value\
    \ = dict[num] {\n            dict[num] = value + 1\n        } else {\n       \
    \     dict[num] = 1\n        }\n    }\n    for num in lst {\n        if num ==\
    \ dict[num] {\n            result = num\n        }\n    }\n    return result",
  "    let s = Set(lst)\n    var m = [Int: Int]()\n    var res = -1\n    var freq\
    \ = 0\n    for num in s {\n        if m[num] == nil {\n            m[num] = 0\n\
    \        }\n        m[num]! += 1\n    }\n    for (num, freq) in m {\n        if\
    \ freq >= num && freq > res {\n            res = freq\n        }\n    }\n    return\
    \ res", '    return -1', "    var frequency = [Int: Int]()\n    var maxFreq =\
    \ 0\n    for item in lst {\n        frequency[item] = (frequency[item] ?? 0) +\
    \ 1\n        maxFreq = max(maxFreq, frequency[item]!)\n    }\n    for (key, value)\
    \ in frequency {\n        if value >= key {\n            return key\n        }\n\
    \    }\n    return -1", "    var result = -1\n    var count = [Int: Int]()\n \
    \   for n in lst {\n        count[n] = (count[n] ?? 0) + 1\n    }\n    for (n,\
    \ freq) in count {\n        if freq >= n {\n            result = max(result, n)\n\
    \        }\n    }\n    return result", "    var countDictionary: [Int: Int] =\
    \ [:]\n    var result = -1\n    lst.forEach { number in\n        countDictionary[number]\
    \ = (countDictionary[number] ?? 0) + 1\n    }\n    lst.forEach { number in\n \
    \       if countDictionary[number]! >= number && number > result {\n         \
    \   result = number\n        }\n    }\n    return result", "    var dict: [Int:\
    \ Int] = [:]\n    for n in lst {\n        if let number = dict[n] {\n        \
    \    dict[n] = number + 1\n        } else {\n            dict[n] = 1\n       \
    \ }\n    }\n    var highestValue: Int = -1\n    for (key, value) in dict {\n \
    \       if key == value {\n            highestValue = key\n        }\n    }\n\
    \    return highestValue", "    var dict: [Int: Int] = [:]\n    for value in lst\
    \ {\n        if dict[value] == nil {\n            dict[value] = 1\n        } else\
    \ {\n            dict[value]! += 1\n        }\n    }\n    let sortedList = lst.sorted()\n\
    \    for key in sortedList {\n        if dict[key] == key {\n            return\
    \ key\n        }\n    }\n    return -1", "    let sorted = lst.sorted()\n    var\
    \ i = 0\n    while i < sorted.count {\n        let freq = frequency(lst: sorted,\
    \ num: sorted[i])\n        if freq >= sorted[i] {\n            return sorted[i]\n\
    \        }\n        i += freq\n    }\n    return -1", "    let sortedLst = lst.sorted()\n\
    \    var countMap = [Int: Int]()\n    var lastInt = -1\n    var i = 0\n    while\
    \ i < sortedLst.count {\n        let int = sortedLst[i]\n        if lastInt ==\
    \ int {\n            countMap[int] = countMap[int]! + 1\n        } else {\n  \
    \          countMap[int] = 1\n        }\n        if countMap[int]! >= int {\n\
    \            return int\n        }\n        lastInt = int\n        i += 1\n  \
    \  }\n    return -1", "    var dict = [Int: Int]()\n    for num in lst {\n   \
    \     dict[num] = (dict[num] ?? 0) + 1\n    }\n    for num in lst {\n        if\
    \ dict[num]! >= num {\n            return num\n        }\n    }\n    return -1",
  "    guard !lst.isEmpty else { return -1 }\n    let highestFrequency = lst.reduce(lst[0])\
    \ { return $0 > $1 ? $0 : $1 }\n    var counts = [Int: Int]()\n    for value in\
    \ lst {\n        counts[value] = (counts[value] ?? 0) + 1\n    }\n    for i in\
    \ 1...highestFrequency {\n        if counts[i] ?? 0 >= i {\n            return\
    \ i\n        }\n    }\n    return -1", "    let maxValue = lst.max() ?? -1\n \
    \   if lst.filter({ $0 == maxValue }).count == 1 {\n        return -1\n    }\n\
    \    for i in 1...maxValue {\n        if lst.filter({ $0 == i }).count >= i {\n\
    \            return i\n        }\n    }\n    return -1", "    var check = [Int]()\n\
    \    var count = 0\n    var newCount = 0\n    for i in lst {\n        if !check.contains(i)\
    \ {\n            count = 0\n            for j in lst {\n                if i ==\
    \ j {\n                    count += 1\n                }\n            }\n    \
    \        if count >= i {\n                newCount = count\n                check.append(i)\n\
    \            }\n        }\n    }\n    if !check.isEmpty {\n        for a in check\
    \ {\n            if a == newCount {\n                return a\n            }\n\
    \        }\n    }\n    return -1", "    var dict = [Int: Int]()\n    var res =\
    \ -1\n    lst.forEach { dict[$0] = (dict[$0] ?? 0) + 1 }\n    dict.forEach {\n\
    \        if $0.key <= $0.value && $0.key > res {\n            res = $0.key\n \
    \       }\n    }\n    return res", "    let sorted = lst.sorted()\n    let counted\
    \ = lst.reduce(into: [:]) { (counts: inout [Int: Int], num: Int) in\n        counts[num,\
    \ default: 0] += 1\n    }\n    for (num, count) in counted {\n        if num <=\
    \ count {\n            return num\n        }\n    }\n    return -1", "    var\
    \ dict = [Int: Int]()\n    for n in lst {\n        if dict[n] == nil {\n     \
    \       dict[n] = 1\n        } else {\n            dict[n]! += 1\n        }\n\
    \    }\n    var result = -1\n    for k in dict.keys {\n        if k == dict[k]!\
    \ && k > result {\n            result = k\n        }\n    }\n    return result",
  "    var frequency = 0\n    for element in lst {\n        if element > frequency\
    \ {\n            frequency = element\n        }\n    }\n    for elem in lst {\n\
    \        if frequency == elem {\n            return elem\n        }\n    }\n \
    \   return -1", "    let maxNumber = lst.max() ?? 0\n    var results = [Int: Int]()\n\
    \    for number in lst {\n        results[number] = (results[number] ?? 0) + 1\n\
    \    }\n    var max = Int.min\n    for number in results.keys {\n        if (number\
    \ <= maxNumber) && (results[number] ?? 0 >= number) && (number > max) {\n    \
    \        max = number\n        }\n    }\n    return max == Int.min ? -1 : max",
  "    var dictionary = [Int: Int]()\n    var values = [Int]()\n    for item in lst\
    \ {\n        if dictionary[item] == nil {\n            dictionary[item] = 1\n\
    \        } else {\n            dictionary[item]! += 1\n        }\n    }\n    for\
    \ key in dictionary.keys {\n        values.append(key)\n    }\n    for value in\
    \ values {\n        if dictionary[value]! >= value {\n            return value\n\
    \        }\n    }\n    return -1", "    var dict = [Int: Int]()\n    for num in\
    \ lst {\n        if let value = dict[num] {\n            dict[num] = value + 1\n\
    \        } else {\n            dict[num] = 1\n        }\n    }\n    for key in\
    \ dict.keys.sorted() {\n        if key <= dict[key] {\n            return key\n\
    \        }\n    }\n    return -1", "    var dict: [Int: Int] = [:]\n    for num\
    \ in lst {\n        if dict[num] == nil {\n            dict[num] = 1\n       \
    \ } else {\n            dict[num]! += 1\n        }\n    }\n    var max = 0\n \
    \   for (key, value) in dict {\n        if value >= key && key > max {\n     \
    \       max = key\n        }\n    }\n    return max", "    var ht = [Int: Int]()\n\
    \    for i in lst {\n        if ht[i] == nil {\n            ht[i] = 1\n      \
    \  } else {\n            ht[i]! += 1\n        }\n    }\n    var max = -1\n   \
    \ for (key, value) in ht {\n        if key > value {\n            continue\n \
    \       }\n        if key > max {\n            max = key\n        }\n    }\n \
    \   return max", "    let sortedList = lst.sorted()\n    var count = 1\n    var\
    \ maxFreq = 0\n    var maxFreqInt = -1\n    for i in 1..<sortedList.count {\n\
    \        if sortedList[i] == sortedList[i - 1] {\n            count += 1\n   \
    \     } else {\n            if count >= sortedList[i - 1] && count > maxFreq {\n\
    \                maxFreq = count\n                maxFreqInt = sortedList[i -\
    \ 1]\n            }\n            count = 1\n        }\n    }\n    if count >=\
    \ sortedList[sortedList.count - 1] && count > maxFreq {\n        maxFreq = count\n\
    \        maxFreqInt = sortedList[sortedList.count - 1]\n    }\n    return maxFreqInt",
  "    // your code goes here\n    return -1", "    // your code here\n    return\
    \ -1", "    var frequencyDict = [Int: Int]()\n    for num in lst {\n        if\
    \ let count = frequencyDict[num] {\n            frequencyDict[num] = count + 1\n\
    \        } else {\n            frequencyDict[num] = 1\n        }\n    }\n    var\
    \ orderedDict = frequencyDict.sorted { $0.key > $1.key }\n    for (num, frequency)\
    \ in orderedDict {\n        if num == frequency {\n            return num\n  \
    \      }\n    }\n    return -1", "    /// Use a dictionary to count the frequency\
    \ of each integer,\n    /// then use a for loop to find the largest integer which\
    \ has a frequency greater than or equal to itself.\n    /// If such an integer\
    \ is found, return it. Else, return -1.\n    var frequency = [Int: Int]()\n  \
    \  var result = -1\n    lst.forEach { frequency[$0] = (frequency[$0] ?? 0) + 1\
    \ }\n    for key in frequency.keys.sorted(by: >) {\n        if key <= frequency[key]!\
    \ {\n            result = key\n            break\n        }\n    }\n    return\
    \ result", "    var dict = [Int: Int]()\n    var result = -1\n    for i in lst\
    \ {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else {\n\
    \            dict[i]! += 1\n        }\n    }\n    for (key, value) in dict {\n\
    \        if key == value && key > result {\n            result = key\n       \
    \ }\n    }\n    return result", "    // your code here\n    var dict = [Int: Int]()\n\
    \    for item in lst {\n        if dict[item] == nil {\n            dict[item]\
    \ = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    let\
    \ keys = dict.keys.sorted()\n    var output = -1\n    for key in keys {\n    \
    \    if dict[key]! >= key {\n            output = key\n        }\n    }\n    return\
    \ output", "    var mostCommon = lst[0]\n    var commonCount = 0\n    var greatestCommon\
    \ = 0\n    for num in lst {\n        if num > greatestCommon {\n            greatestCommon\
    \ = num\n        }\n        if num == mostCommon {\n            commonCount +=\
    \ 1\n        } else {\n            commonCount -= 1\n        }\n        if commonCount\
    \ == 0 {\n            mostCommon = num\n            commonCount = 1\n        }\n\
    \    }\n    if lst.filter({ $0 == mostCommon }).count >= greatestCommon {\n  \
    \      return greatestCommon\n    }\n    return -1", "    var frequency = [Int:\
    \ Int]()\n    for item in lst {\n        frequency[item] = (frequency[item] ??\
    \ 0) + 1\n    }\n    return frequency.sorted(by: { $0.key > $1.key })\n      \
    \  .filter { $0.key <= $0.value }\n        .first?.key ?? -1", "    // your code\
    \ here\n    let dict: [Int: Int] = lst.reduce(into: [:]) { acc, num in\n     \
    \   acc[num, default: 0] += 1\n    }\n    let result = dict.filter {$0.value >=\
    \ $0.key}.sorted {$0.key > $1.key}\n    return result.isEmpty ? -1 : result[0].key",
  "    \n    guard lst.contains(where: { $0 > 0 }) else { return -1 }\n    \n    var\
    \ numCounter: [Int: Int] = [:]\n    \n    for value in lst {\n        if let count\
    \ = numCounter[value] {\n            numCounter[value] = count + 1\n        }\
    \ else {\n            numCounter[value] = 1\n        }\n    }\n    \n    let filteredDict\
    \ = numCounter.filter { (key, value) -> Bool in\n        key <= value\n    }\n\
    \    \n    return filteredDict.keys.max() ?? -1", '    return 0', "    var dict:\
    \ [Int: Int] = [:]\n    for num in lst {\n        if dict[num] == nil {\n    \
    \        dict[num] = 1\n        } else {\n            dict[num]! += 1\n      \
    \  }\n    }\n    for key in dict.keys.sorted(by: >) {\n        if dict[key]! >=\
    \ key {\n            return key\n        }\n    }\n    return -1", '    return
    -1', "    /// Return the index of the first key greater than or equal to the given\
    \ value\n    func lowerBound<T: Comparable>(lst: [T], value: T) -> Int {\n   \
    \     var left = 0\n        var right = lst.count\n        while left < right\
    \ {\n            let mid = left + (right - left) / 2\n            if lst[mid]\
    \ < value {\n                left = mid + 1\n            } else {\n          \
    \      right = mid\n            }\n        }\n        return left\n    }\n   \
    \ \n    /// Return the index of the first key greater than the given value\n \
    \   func upperBound<T: Comparable>(lst: [T], value: T) -> Int {\n        var left\
    \ = 0\n        var right = lst.count\n        while left < right {\n         \
    \   let mid = left + (right - left) / 2\n            if lst[mid] <= value {\n\
    \                left = mid + 1\n            } else {\n                right =\
    \ mid\n            }\n        }\n        return left\n    }\n    \n    let sortedList\
    \ = lst.sorted()\n    var frequency = [Int: Int]()\n    for elem in sortedList\
    \ {\n        frequency[elem] = (frequency[elem] ?? 0) + 1\n    }\n    let values\
    \ = frequency.keys.sorted()\n    for value in values {\n        let count = frequency[value]!\n\
    \        if count >= value && count == (upperBound(lst: sortedList, value: value)\
    \ - lowerBound(lst: sortedList, value: value)) {\n            return value\n \
    \       }\n    }\n    return -1", "    var freqCount = Dictionary<Int, Int>()\n\
    \    for elem in lst {\n        if let count = freqCount[elem] {\n           \
    \ freqCount[elem] = count + 1\n        } else {\n            freqCount[elem] =\
    \ 1\n        }\n    }\n    var maxPairs = [(Int, Int)]()\n    for (k, v) in freqCount\
    \ {\n        if v >= k {\n            maxPairs.append((k, v))\n        }\n   \
    \ }\n    if maxPairs.count > 0 {\n        return maxPairs.max(by: { (a, b) ->\
    \ Bool in\n            return a.0 < b.0\n        })!.0\n    }\n    return -1",
  "    var result = -1\n    for item in lst {\n        if lst.filter({ $0 == item\
    \ }).count >= item {\n            result = item\n        }\n    }\n    return\
    \ result", "    var freq = [Int: Int]()\n    for num in lst {\n        if let\
    \ value = freq[num] {\n            freq[num] = value + 1\n        } else {\n \
    \           freq[num] = 1\n        }\n    }\n    for (key, value) in freq {\n\
    \        if value >= key {\n            return key\n        }\n    }\n    return\
    \ -1", "    // Create a dictionary that holds the integer as the key and the frequency\
    \ as the value\n    var dict = [Int: Int]()\n    for i in lst {\n        if let\
    \ freq = dict[i] {\n            dict[i] = freq + 1\n        } else {\n       \
    \     dict[i] = 1\n        }\n    }\n    // Create a sorted list that holds the\
    \ keys from the dictionary\n    let keys = dict.keys.sorted()\n    // Iterate\
    \ over the list, find the integer that is greater than zero, and has a frequency\
    \ greater than\n    // or equal to the value of the integer itself.\n    for (i,\
    \ key) in keys.enumerated() {\n        if key > 0 && key <= dict[key]! {\n   \
    \         return key\n        }\n    }\n    return -1", '    return lst.filter
    { val in lst.filter { $0 == val }.count >= val }.max() ?? -1', "    \n    var\
    \ array = lst\n    array.sort()\n    var counter = 0\n    var num = -1\n    \n\
    \    for i in 0..<array.count {\n        if array[i] == array[i + 1] {\n     \
    \       counter += 1\n        } else {\n            counter = 0\n        }\n \
    \       if counter >= array[i] {\n            num = array[i]\n        }\n    }\n\
    \    return num", "    var sortedLst = lst.sorted()\n    var count = 1\n    var\
    \ idx = 0\n    var result = -1\n    while idx < sortedLst.count - 1 {\n      \
    \  if sortedLst[idx] == sortedLst[idx + 1] {\n            count += 1\n       \
    \ } else {\n            if count >= sortedLst[idx] {\n                result =\
    \ sortedLst[idx]\n            }\n            count = 1\n        }\n        idx\
    \ += 1\n    }\n    if count >= sortedLst[idx] {\n        result = sortedLst[idx]\n\
    \    }\n    return result", "    // -1 as default value\n    var result = -1\n\
    \    var counts = [Int: Int]()\n    for number in lst {\n        // if the number\
    \ is greater than 0, add it to the dictionary\n        if number > 0 {\n     \
    \       counts[number] = (counts[number] ?? 0) + 1\n        }\n    }\n    // loop\
    \ through the dictionary\n    for (number, count) in counts {\n        // if the\
    \ count is equal to or greater than the number, return the number\n        if\
    \ count >= number {\n            result = number\n        }\n    }\n    return\
    \ result", "    let countMap = getCountMap(array: lst)\n    for num in countMap.keys.sorted(by:\
    \ >) {\n        if countMap[num]! >= num {\n            return num\n        }\n\
    \    }\n    return -1", "    var dict = [Int: Int]()\n    var best = -1\n    for\
    \ num in lst {\n        if dict[num] == nil {\n            dict[num] = 1\n   \
    \     } else {\n            dict[num]! += 1\n        }\n        if dict[num]!\
    \ >= num {\n            best = max(best, num)\n        }\n    }\n    return best",
  '    // Your code here', "    var result = -1\n    var dict = [Int: Int]()\n   \
    \ lst.forEach { dict[$0] = (dict[$0] ?? 0) + 1 }\n    dict.forEach {\n       \
    \ if $0.value >= $0.key && $0.key > result {\n            result = $0.key\n  \
    \      }\n    }\n    return result", "    var dct = [Int: Int]()\n    for n in\
    \ lst {\n        if dct[n] == nil {\n            dct[n] = 1\n        } else {\n\
    \            dct[n]! += 1\n        }\n    }\n    var max = -1\n    for (k, v)\
    \ in dct {\n        if k > v {\n            continue\n        }\n        if k\
    \ > max {\n            max = k\n        }\n    }\n    return max", "    var dict:\
    \ [Int: Int] = [:]\n    for number in lst {\n        dict[number] = (dict[number]\
    \ ?? 0) + 1\n    }\n    for (number, count) in dict {\n        if number <= count\
    \ {\n            return number\n        }\n    }\n    return -1", "    let countDictionary\
    \ = countElements(lst: lst)\n    let array = countDictionary.compactMap { (key,\
    \ value) -> Int? in\n        return key > value ? nil : key\n    }\n    return\
    \ array.max() ?? -1", "    var dict = [Int: Int]()\n    for i in lst {\n     \
    \   if dict[i] == nil {\n            dict[i] = 1\n        } else {\n         \
    \   dict[i]! += 1\n        }\n    }\n    var ans = -1\n    for (key, value) in\
    \ dict {\n        if value >= key && key > ans {\n            ans = key\n    \
    \    }\n    }\n    return ans", "    var dict = [Int: Int]()\n    for l in lst\
    \ {\n        if dict[l] == nil {\n            dict[l] = 1\n        } else {\n\
    \            dict[l]! += 1\n        }\n    }\n    let sorted = dict.sorted(by:\
    \ {$0.key > $1.key})\n    for (l, f) in sorted {\n        if l <= f {\n      \
    \      return l\n        }\n    }\n    return -1", "    var dict = [Int: Int]()\n\
    \    for item in lst {\n        if dict[item] == nil {\n            dict[item]\
    \ = 1\n        } else {\n            dict[item]! += 1\n        }\n    }\n    print(dict)\n\
    \    let sortedDict = dict.sorted(by: { $0.key > $1.key })\n    for item in sortedDict\
    \ {\n        if item.key <= item.value {\n            return item.key\n      \
    \  }\n    }\n    return -1", "    var dict = [Int: Int]()\n    for number in lst\
    \ {\n        if let count = dict[number] {\n            dict[number] = count +\
    \ 1\n        } else {\n            dict[number] = 1\n        }\n    }\n    for\
    \ key in dict.keys.sorted(by: >) {\n        if dict[key]! >= key {\n         \
    \   return key\n        }\n    }\n    return -1", "    var numbers: [Int] = lst\n\
    \    var index = numbers.count - 1\n    var p = numbers[index]\n    var i = index\n\
    \    while p > 0 {\n        p = numbers[i]\n        if p > 0 {\n            index\
    \ = i\n            break\n        }\n        i -= 1\n    }\n    i = index\n  \
    \  var counter = 1\n    while i > 0 {\n        i -= 1\n        if numbers[i] ==\
    \ p {\n            counter += 1\n        }\n    }\n    if counter >= p {\n   \
    \     return p\n    }\n    return -1", "    let freqDict = lst.reduce(into: [:])\
    \ { $0[$1, default: 0] += 1 }\n    let freqList = freqDict.sorted { $0.value >\
    \ $1.value }\n    for (num, freq) in freqList {\n        if num <= freq {\n  \
    \          return num\n        }\n    }\n    return -1", "    var frequencyDict\
    \ = [Int: Int]()\n    var frequencyArray = [Int]()\n    for item in lst {\n  \
    \      if frequencyDict[item] == nil {\n            frequencyDict[item] = 1\n\
    \        } else {\n            frequencyDict[item]! += 1\n        }\n    }\n \
    \   for (key, value) in frequencyDict {\n        if key == value {\n         \
    \   frequencyArray.append(key)\n        }\n    }\n    if frequencyArray.count\
    \ > 0 {\n        return frequencyArray.max()!\n    } else {\n        return -1\n\
    \    }", "    var freq: [Int: Int] = [:]\n    for e in lst {\n        if freq[e]\
    \ == nil {\n            freq[e] = 1\n        } else {\n            freq[e]! +=\
    \ 1\n        }\n    }\n    for i in stride(from: lst.count, to: 0, by: -1) {\n\
    \        if freq[i] != nil {\n            if freq[i]! >= i {\n               \
    \ return i\n            }\n        }\n    }\n    return -1", "    var lst = lst\n\
    \    lst.sort()\n    let length = lst.count\n    var freq = 1\n    var prev =\
    \ lst[0]\n    for i in 1..<length {\n        if lst[i] == prev {\n           \
    \ freq += 1\n        } else {\n            if freq >= prev {\n               \
    \ return prev\n            }\n            prev = lst[i]\n            freq = 1\n\
    \        }\n    }\n    return freq >= prev ? prev : -1", "    var dict: [Int:\
    \ Int] = [:]\n    for index in lst {\n        if let count = dict[index] {\n \
    \           dict[index] = count + 1\n        } else {\n            dict[index]\
    \ = 1\n        }\n    }\n    let keys = dict.keys.sorted()\n    for index in keys\
    \ {\n        if index <= dict[index]! {\n            return index\n        }\n\
    \    }\n    return -1", "    // write your code here!\n    var dic: [Int: Int]\
    \ = [:]\n    for i in lst {\n        if let val = dic[i] {\n            dic[i]\
    \ = val + 1\n        } else {\n            dic[i] = 1\n        }\n    }\n    let\
    \ sortedKeys = dic.keys.sorted(by: >)\n    for i in sortedKeys {\n        if i\
    \ > 0 && dic[i]! >= i {\n            return i\n        }\n    }\n    return -1",
  "    var count = 0\n    var number: Int = -1\n    let sortedLst = lst.sorted()\n\
    \    for (index, value) in sortedLst.enumerated() {\n        if index == 0 {\n\
    \            count = 1\n            number = value\n        } else if sortedLst[index]\
    \ == sortedLst[index - 1] {\n            count += 1\n        } else {\n      \
    \      if number >= count {\n                return number\n            }\n  \
    \          count = 1\n            number = value\n        }\n    }\n    return\
    \ number >= count ? number : -1", "    // Keep a dictionary containing the number\
    \ as a key, and its frequency as the value\n    var freqDict: [Int: Int] = [:]\n\
    \    for num in lst {\n        if freqDict[num] == nil {\n            freqDict[num]\
    \ = 1\n        } else {\n            freqDict[num]! += 1\n        }\n    }\n \
    \   // Find the max frequency of all values\n    var maxFreq = 0\n    for (_,\
    \ freq) in freqDict {\n        if freq > maxFreq {\n            maxFreq = freq\n\
    \        }\n    }\n    // Create an array of all keys in decreasing order.\n \
    \   var sortedKeys = [Int]()\n    for (key, _) in freqDict {\n        sortedKeys.append(key)\n\
    \    }\n    sortedKeys.sort(by: >)\n    // Traverse through the keys in decending\
    \ order.\n    // Since we are traversing in decending order, we are sure that\
    \ the first key we encounter\n    // with frequency greater than or equal to the\
    \ value of the integer itself, is the answer.\n    for key in sortedKeys {\n \
    \       if freqDict[key]! >= key {\n            return key\n        }\n    }\n\
    \    return -1", "    var dict = [Int: Int]()\n    for num in lst {\n        if\
    \ dict[num] == nil {\n            dict[num] = 1\n        } else {\n          \
    \  dict[num]! += 1\n        }\n    }\n    var result = -1\n    for (key, value)\
    \ in dict {\n        if key <= value && key > result {\n            result = key\n\
    \        }\n    }\n    return result", "    let dic = lst.reduce(into: [:]) {\
    \ res, num in\n        res[num, default: 0] += 1\n    }\n    return dic.keys.filter\
    \ { dic[$0]! >= $0 }.max() ?? -1", "    var frequencyDict = [Int: Int]()\n   \
    \ for num in lst {\n        if frequencyDict[num] == nil {\n            frequencyDict[num]\
    \ = 1\n        } else {\n            frequencyDict[num]! += 1\n        }\n   \
    \ }\n    var result = -1\n    for (num, frequency) in frequencyDict {\n      \
    \  if num == frequency {\n            if num > result {\n                result\
    \ = num\n            }\n        }\n    }\n    return result", "    var lst_counts:\
    \ [Int: Int] = [:]\n    var max_count: Int = 0\n    var max_num: Int = 0\n   \
    \ for num in lst {\n        if lst_counts[num] == nil {\n            lst_counts[num]\
    \ = 1\n        } else {\n            lst_counts[num]! += 1\n        }\n      \
    \  if lst_counts[num]! > max_count {\n            max_count = lst_counts[num]!\n\
    \            max_num = num\n        }\n    }\n    if max_count >= max_num {\n\
    \        return max_num\n    } else {\n        return -1\n    }", "    // 1. initialize\
    \ frequency array\n    var frequency: [Int] = Array(repeating: 0, count: lst.count\
    \ + 1)\n    // 2. record frequency\n    for num in lst {\n        frequency[num]\
    \ += 1\n    }\n    // 3. loop through frequency array\n    for index in stride(from:\
    \ lst.count, to: 0, by: -1) {\n        // 3.1 return if frequency equals number\n\
    \        if frequency[index] == index {\n            return index\n        }\n\
    \    }\n    // 4. return -1 if no frequency matches a number\n    return -1",
  '    return -1', "    // Complete the function here\n    var dict: [Int: Int] =\
    \ [:]\n    for i in lst {\n        if dict[i] == nil {\n            dict[i] =\
    \ 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n    var res\
    \ = -1\n    for (key, value) in dict {\n        if key > value {\n           \
    \ continue\n        } else if res < key {\n            res = key\n        }\n\
    \    }\n    return res", "    var countDict = [Int: Int]()\n    for i in lst {\n\
    \        if let currentCount = countDict[i] {\n            countDict[i] = currentCount\
    \ + 1\n        } else {\n            countDict[i] = 1\n        }\n    }\n    for\
    \ (key, value) in countDict {\n        if key <= value {\n            return key\n\
    \        }\n    }\n    return -1", "    var hash = [Int: Int]()\n    for num in\
    \ lst {\n        if hash[num] == nil {\n            hash[num] = 1\n        } else\
    \ {\n            hash[num]! += 1\n        }\n    }\n    for num in lst {\n   \
    \     if num <= hash[num]! {\n            return num\n        }\n    }\n    return\
    \ -1", "    let length = lst.count\n    if length == 0 {\n        return -1\n\
    \    }\n    if length == 1 {\n        return lst[0]\n    }\n    var freqTable\
    \ = [Int: Int]()\n    var results = [Int]()\n    var max = 0\n    for i in 0..<length\
    \ {\n        if freqTable[lst[i]] == nil {\n            freqTable[lst[i]] = 1\n\
    \        } else {\n            freqTable[lst[i]]! += 1\n        }\n        if\
    \ freqTable[lst[i]]! > max {\n            max = freqTable[lst[i]]!\n        }\n\
    \    }\n    for (key, value) in freqTable {\n        if value >= key && key >=\
    \ max {\n            results.append(key)\n        }\n    }\n    return results.count\
    \ > 0 ? results.max()! : -1", "    var dict = [Int: Int]()\n    for l in lst {\n\
    \        if dict[l] == nil {\n            dict[l] = 1\n        } else {\n    \
    \        dict[l]! += 1\n        }\n    }\n    var max = 0\n    for (key, value)\
    \ in dict {\n        if key <= value && key > max {\n            max = key\n \
    \       }\n    }\n    return max", "    guard let max = lst.max() else { return\
    \ -1 }\n    var dict = [Int: Int]()\n    for i in lst {\n        dict[i] = (dict[i]\
    \ ?? 0) + 1\n    }\n    for i in 1...max {\n        if dict[i] != nil && dict[i]!\
    \ >= i {\n            return i\n        }\n    }\n    return -1", "    var dict:\
    \ [Int: Int] = [:]\n    for item in lst {\n        if dict[item] == nil {\n  \
    \          dict[item] = 1\n        } else {\n            dict[item]! += 1\n  \
    \      }\n    }\n    var ans = -1\n    for (key, value) in dict {\n        if\
    \ value >= key && key > ans {\n            ans = key\n        }\n    }\n    return\
    \ ans", '    // your code here', "    var counts = [Int : Int]()\n    var result\
    \ = -1\n    for i in lst {\n        counts[i] = (counts[i] ?? 0) + 1\n       \
    \ if i > 0 && i <= counts[i]! && i > result {\n            result = i\n      \
    \  }\n    }\n    return result", "    var dic: [Int: Int] = [:]\n    for n in\
    \ lst {\n        if let count = dic[n] {\n            dic[n] = count + 1\n   \
    \     } else {\n            dic[n] = 1\n        }\n    }\n    var result = -1\n\
    \    for (key, value) in dic {\n        if key <= value && key > result {\n  \
    \          result = key\n        }\n    }\n    return result", "    var dict =\
    \ [Int: Int]()\n    var max = 0\n    var frequency = 0\n    for value in lst {\n\
    \        dict[value] = (dict[value] ?? 0) + 1\n        frequency = dict[value]!\n\
    \        if frequency >= value && value > max {\n            max = value\n   \
    \     }\n    }\n    return max == 0 ? -1 : max", "\t// store list in dictionary\n\
    \t// since we only count integers greater than zero, keys are offset by one\n\t\
    var dict: [Int: Int] = [:]\n\tfor i in lst {\n\t\tif i > 0 {\n\t\t\tdict[i, default:\
    \ 0] += 1\n\t\t}\n\t}\n\t// find the maximum key-value pair\n\tlet maxPair = dict.max\
    \ { a, b in a.value < b.value }\n\t// return -1 if the maximum value does not\
    \ meet the criteria,\n\t// otherwise return the value\n\treturn maxPair?.value\
    \ >= maxPair!.key + 1 ? maxPair!.key : -1", "    var lst = lst.sorted()\n    var\
    \ res = [Int: Int]()\n    for n in lst {\n        res[n] = (res[n] ?? 0) + 1\n\
    \    }\n    for n in lst {\n        if res[n]! >= n {\n            return n\n\
    \        }\n    }\n    return -1", "    var dict = [Int: Int]()\n    for item\
    \ in lst {\n        if dict[item] == nil {\n            dict[item] = 1\n     \
    \   } else {\n            dict[item]! += 1\n        }\n    }\n    var max = 0\n\
    \    for (key, value) in dict {\n        if key > max && value >= key {\n    \
    \        max = key\n        }\n    }\n    return max > 0 ? max : -1", "    var\
    \ m : [Int:Int] = [:]\n    for l in lst {\n        if m[l] == nil {\n        \
    \    m[l] = 1\n        } else {\n            m[l]! += 1\n        }\n    }\n  \
    \  for (k,v) in m {\n        if v >= k {\n            return k\n        }\n  \
    \  }\n    return -1", "    var countDict = [Int: Int]()\n    for i in lst {\n\
    \        countDict[i] = (countDict[i] ?? 0) + 1\n    }\n    var max = 0\n    for\
    \ (num, count) in countDict {\n        if num <= count && num > max {\n      \
    \      max = num\n        }\n    }\n    return max == 0 ? -1 : max", "    var\
    \ freq = Dictionary<Int, Int>()\n    var arr = Array(Set(lst))\n    arr.sort()\n\
    \    for item in arr {\n        var temp = lst.filter { $0 == item }\n       \
    \ freq[item] = temp.count\n    }\n    for item in arr {\n        if freq[item]!\
    \ >= item {\n            return item\n        }\n    }\n    return -1", "    let\
    \ filtered = lst.filter {$0 > 0}\n    let result = filtered.reduce(into: [Int:\
    \ Int]()) {$0[$1, default: 0] += 1}\n    let distinct = Set(filtered)\n    let\
    \ keys = result.keys.sorted()\n    let answer = keys.filter { distinct.contains($0)\
    \ }.last\n    return answer!", "\tlet values = lst.reduce(into: [:]) { (dict,\
    \ item) in dict[item, default: 0] += 1 }\n\tlet sorted = values.keys.sorted(by:\
    \ >)\n\t\n\tfor value in sorted {\n\t\tguard let frequency = values[value] else\
    \ { continue }\n\t\tif frequency >= value { return value }\n\t}\n\t\n\treturn\
    \ -1", "    var dict: [Int: Int] = [:]\n    for num in lst {\n        if let value\
    \ = dict[num] {\n            dict[num] = value + 1\n        } else {\n       \
    \     dict[num] = 1\n        }\n    }\n    let sortedDict = dict.sorted { $0.key\
    \ > $1.key }\n    for (key, value) in sortedDict {\n        if key == value {\n\
    \            return key\n        }\n    }\n    return -1", "    var dct = [Int:\
    \ Int]()\n    for i in lst {\n        if dct[i] == nil {\n            dct[i] =\
    \ 1\n        } else {\n            dct[i]! += 1\n        }\n    }\n    var ans\
    \ = -1\n    for i in 1...dct.count {\n        if let v = dct[i], v >= i {\n  \
    \          ans = max(ans, i)\n        }\n    }\n    return ans", "\treturn -1",
  "    let lstSorted = lst.sorted()\n    var counter = 1\n    for num in lstSorted\
    \ {\n        if counter >= num {\n            return num\n        }\n        counter\
    \ += 1\n    }\n    return -1", "    /////////////////////////////////////////////////////\n\
    \    // Return the greatest integer that is greater than //\n    // zero, and\
    \ has a frequency greater than or equal //\n    // to the value of the integer\
    \ itself.             //\n    /////////////////////////////////////////////////////\n\
    \    var dict: [Int: Int] = [:]\n    for l in lst {\n        if l != 0 {\n   \
    \         if let temp = dict[l] {\n                dict[l] = temp + 1\n      \
    \      } else {\n                dict[l] = 1\n            }\n        }\n    }\n\
    \    var arr = dict.keys.sorted()\n    for i in arr {\n        if dict[i] == i\
    \ {\n            return i\n        }\n    }\n    return -1", "    var dict: [Int:\
    \ Int] = [:]\n    var int = -1\n    for i in lst {\n        if dict[i] == nil\
    \ {\n            dict[i] = 1\n        } else {\n            dict[i]! += 1\n  \
    \      }\n    }\n    for (key, value) in dict {\n        if key >= value && key\
    \ > int {\n            int = key\n        }\n    }\n    return int", "\t// Implement\
    \ your code here", "    var ht = [Int: Int]()\n    var currentMax = 0\n    var\
    \ highestFrequency = 0\n    for num in lst {\n        ht[num] = (ht[num] ?? 0)\
    \ + 1\n        highestFrequency = max(highestFrequency, ht[num]!)\n        if\
    \ ht[num] == num {\n            currentMax = max(currentMax, num)\n        }\n\
    \    }\n    return currentMax == highestFrequency ? currentMax : -1", "    //\
    \ Sort the given array by using the ascendingOrder function\n    let array = lst.sorted(by:\
    \ ascendingOrder)\n    var count = 0\n    // Create a set to keep track of unique\
    \ numbers in the array\n    var uniqueSet = Set<Int>()\n    for item in array\
    \ {\n        // If the number exists in the set, then do nothing\n        if uniqueSet.contains(item)\
    \ {\n            continue\n        }\n        // If it doesn't exist, then add\
    \ it to the set and compare it with the next item in the array\n        // to\
    \ count its frequency\n        else {\n            uniqueSet.insert(item)\n  \
    \          count = 1\n            for nextItem in array {\n                if\
    \ item == nextItem {\n                    count += 1\n                }\n    \
    \        }\n            // If the value of the item is equal to its frequency,\
    \ then return it\n            if item == count {\n                return item\n\
    \            }\n        }\n    }\n    // If the function executes this far, then\
    \ there is no such value in the array, so return -1\n    return -1", "    var\
    \ dict: [Int: Int] = [:]\n    for num in lst {\n        if let val = dict[num]\
    \ {\n            dict[num] = val + 1\n        } else {\n            dict[num]\
    \ = 1\n        }\n    }\n    let newArray = Array(dict.keys).sorted(by: {$0 >\
    \ $1})\n    for num in newArray {\n        if let count = dict[num] {\n      \
    \      if num <= count {\n                return num\n            }\n        }\n\
    \    }\n    return -1", "\t// get the frequency of each element in the list\n\t\
    var frequencyDict = [Int: Int]()\n\tfor element in lst {\n\t\tif let frequency\
    \ = frequencyDict[element] {\n\t\t\tfrequencyDict[element] = frequency + 1\n\t\
    \t} else {\n\t\t\tfrequencyDict[element] = 1\n\t\t}\n\t}\n\t\n\t// at this point,\
    \ frequencyDict has the frequency of each element\n\t// now we need to check which\
    \ element is greater than its frequency\n\tvar answer = -1\n\tfor (key, value)\
    \ in frequencyDict {\n\t\tif key <= value && answer < key {\n\t\t\tanswer = key\n\
    \t\t}\n\t}\n\treturn answer", "    var count = [Int: Int]()\n    for number in\
    \ lst {\n        count[number] = (count[number] ?? 0) + 1\n    }\n    for number\
    \ in 1..<count.count where count[number] ?? 0 >= number {\n        return number\n\
    \    }\n    return -1", "    let frequencies = getFrequencies(lst: lst)\n    var\
    \ maxElement = -1\n    for (key, value) in frequencies {\n        if key > value\
    \ {\n            continue\n        }\n        if key > maxElement {\n        \
    \    maxElement = key\n        }\n    }\n    return maxElement", "    // Write\
    \ your code here\n    var dict = [Int: Int]()\n    var result = -1\n    for n\
    \ in lst {\n        if dict[n] == nil {\n            dict[n] = 1\n        } else\
    \ {\n            dict[n]! += 1\n        }\n    }\n    for (key, value) in dict\
    \ {\n        if key == value {\n            if key > result {\n              \
    \  result = key\n            }\n        }\n    }\n    return result", "    var\
    \ dict : [Int:Int] = [:]\n    for num in lst {\n        if let count = dict[num]\
    \ {\n            dict[num] = count + 1\n        } else {\n            dict[num]\
    \ = 1\n        }\n    }\n    var max = 0\n    for (key, value) in dict {\n   \
    \     if key == value {\n            if key > max {\n                max = key\n\
    \            }\n        }\n    }\n    if max == 0 {\n        return -1\n    }\n\
    \    return max", "    var dictionary: [Int: Int] = [:]\n    for int in lst {\n\
    \        dictionary[int] = (dictionary[int] ?? 0) + 1\n    }\n    for (key, value)\
    \ in dictionary.sorted(by: { $0.key > $1.key }) {\n        if key <= value {\n\
    \            return key\n        }\n    }\n    return -1", "    let dict = lst.reduce(into:\
    \ [:]) { $0[$1, default: 0] += 1 }\n    let sorted = dict.sorted { $0.value >\
    \ $1.value }\n    for (key, value) in sorted {\n        if key > 0 && key <= value\
    \ {\n            return key\n        }\n    }\n    return -1", "    // Initialize\
    \ the dictionary\n    var dict = [Int: Int]()\n    // Get the array count\n  \
    \  let count = lst.count\n    // Create a var to store result\n    var result\
    \ = -1\n    // Iterate through the array\n    for i in 0..<count {\n        //\
    \ Check if the array item is contained in the dictionary\n        if dict[lst[i]]\
    \ != nil {\n            // Update the dictionary item\n            dict[lst[i]]!\
    \ += 1\n        } else {\n            // Add the item to the dictionary\n    \
    \        dict[lst[i]] = 1\n        }\n    }\n    // Iterate through the array\
    \ again\n    for i in 0..<count {\n        // Check if the key exists in the dictionary\n\
    \        if dict[lst[i]] != nil {\n            // Check if the dictionary key\
    \ is equal to the array item\n            if dict[lst[i]]! >= lst[i] {\n     \
    \           // Update the result\n                result = max(result, lst[i])\n\
    \            }\n        }\n    }\n    // Return the result\n    return result",
  "    var dict = [Int: Int]()\n    for num in lst {\n        if dict[num] == nil\
    \ {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n\
    \        }\n    }\n    var max = -1\n    var candidate = -1\n    for (key, value)\
    \ in dict {\n        if value >= key && key > max {\n            max = key\n \
    \           candidate = value\n        }\n    }\n    return candidate", '    return
    0', "\tguard lst.count > 0 else { return -1 }\n\tvar frequencies: [Int: Int] =\
    \ [:]\n\tfor element in lst {\n\t\tfrequencies[element] = (frequencies[element]\
    \ ?? 0) + 1\n\t}\n\tfor (element, frequency) in frequencies {\n\t\tif element\
    \ == frequency {\n\t\t\treturn element\n\t\t}\n\t}\n\treturn -1", "    var dict\
    \ = [Int: Int]()\n    for i in lst {\n        if dict[i] == nil {\n          \
    \  dict[i] = 1\n        } else {\n            dict[i]! += 1\n        }\n    }\n\
    \    var maxVal = 0\n    for key in dict.keys {\n        if dict[key]! >= key\
    \ && key > maxVal {\n            maxVal = key\n        }\n    }\n    if maxVal\
    \ > 0 {\n        return maxVal\n    } else {\n        return -1\n    }", "   \
    \ var result = -1\n    for i in 1...lst.count {\n        if lst.filter({ $0 ==\
    \ i }).count >= i {\n            result = i\n        }\n    }\n    return result",
  "    var result = -1\n    var freqDic = [Int: Int]()\n    for val in lst {\n   \
    \     if let valFreq = freqDic[val] {\n            freqDic[val] = valFreq + 1\n\
    \        } else {\n            freqDic[val] = 1\n        }\n    }\n    let sorted\
    \ = freqDic.sorted { (fst: (key: Int, value: Int), snd: (key: Int, value: Int))\
    \ -> Bool in\n        if fst.value == snd.value {\n            return fst.key\
    \ > snd.key\n        }\n        return fst.value > snd.value\n    }\n    for (key,\
    \ value) in sorted {\n        if key >= value {\n            result = key\n  \
    \          break\n        }\n    }\n    return result", "    // your code here\n\
    \    return 0", "    var counts: [Int: Int] = [:]\n    for n in lst {\n      \
    \  if let count = counts[n] {\n            counts[n] = count + 1\n        } else\
    \ {\n            counts[n] = 1\n        }\n    }\n    for (key, value) in counts.sorted(by:\
    \ { $0.key > $1.key }) {\n        if value >= key {\n            return key\n\
    \        }\n    }\n    return -1", "    \n    var dict: [Int: Int] = [:]\n   \
    \ \n    for i in lst {\n        dict[i] = (dict[i] ?? 0) + 1\n    }\n    \n  \
    \  for (key, value) in dict {\n        if value >= key {\n            return key\n\
    \        }\n    }\n    \n    return -1", "    var dict: [Int: Int] = [:]\n   \
    \ for i in lst {\n        if dict[i] == nil {\n            dict[i] = 1\n     \
    \   } else {\n            dict[i]! += 1\n        }\n    }\n    var lstKeys = dict.keys.sorted(by:\
    \ {$0 < $1})\n    if lstKeys.count == 1 {\n        if lstKeys[0] == 1 {\n    \
    \        return -1\n        } else {\n            return lstKeys[0]\n        }\n\
    \    }\n    var idx = 0\n    var index: Int = -1\n    while idx < lstKeys.count\
    \ - 1 {\n        if lstKeys[idx] == 1 {\n            idx += 1\n            continue\n\
    \        }\n        if dict[lstKeys[idx]]! >= lstKeys[idx] {\n            index\
    \ = lstKeys[idx]\n            break\n        }\n        idx += 1\n    }\n    if\
    \ index == -1 {\n        if dict[lstKeys[lstKeys.count - 1]]! >= lstKeys[lstKeys.count\
    \ - 1] {\n            index = lstKeys[lstKeys.count - 1]\n        }\n    }\n \
    \   return index"]
stop_tokens:
- "\n}"
