name: HumanEval_89_encrypt
language: swift
prompt: "\n/// Create a function encrypt that takes a string as an argument and\n\
  /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
  \ should be rotated in a manner such that the letters \n/// shift down by two multiplied\
  \ to two places.\n/// For example:\n/// >>> encrypt(s: \"hi\")\n/// \"lm\"\n///\
  \ >>> encrypt(s: \"asdfghjkl\")\n/// \"ewhjklnop\"\n/// >>> encrypt(s: \"gf\")\n\
  /// \"kj\"\n/// >>> encrypt(s: \"et\")\n/// \"ix\"\nfunc encrypt(s: String) -> String\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
  \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
  \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
  )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
  \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  )\nassert(encrypt(s: \"a\") == \"e\")"
completions: ["    // Your code here\n    var encryptedString = \"\"\n    for char\
    \ in s.lowercased().characters {\n        if char == \"z\" {\n            encryptedString.append(\"\
    b\")\n        } else if char == \"y\" {\n            encryptedString.append(\"\
    a\")\n        } else {\n            let charIndex = char.index(after: char.startIndex)\n\
    \            let nextCharIndex = char.index(after: charIndex)\n            let\
    \ nextNextCharIndex = char.index(after: nextCharIndex)\n            encryptedString.append(char[nextNextCharIndex])\n\
    \        }\n    }\n    return encryptedString", "    var output = \"\"\n    for\
    \ letter in s {\n        var offset = 65\n        if letter.lowercased() == letter\
    \ {\n            offset = 97\n        }\n        var rotatedLetter = (((Int(letter.asciiValue!)\
    \ - offset) * 2 + 26) % 26) + offset\n        let newLetter = Character(UnicodeScalar(rotatedLetter)!)\n\
    \        output.append(newLetter)\n    }\n    return output", "    var newString\
    \ = \"\"\n    for i in s {\n        if i == \"a\" {\n            newString +=\
    \ \"c\"\n        } else if i == \"b\" {\n            newString += \"d\"\n    \
    \    } else if i == \"c\" {\n            newString += \"e\"\n        } else if\
    \ i == \"d\" {\n            newString += \"f\"\n        } else if i == \"e\" {\n\
    \            newString += \"g\"\n        } else if i == \"f\" {\n            newString\
    \ += \"h\"\n        } else if i == \"g\" {\n            newString += \"i\"\n \
    \       } else if i == \"h\" {\n            newString += \"j\"\n        } else\
    \ if i == \"i\" {\n            newString += \"k\"\n        } else if i == \"j\"\
    \ {\n            newString += \"l\"\n        } else if i == \"k\" {\n        \
    \    newString += \"m\"\n        } else if i == \"l\" {\n            newString\
    \ += \"n\"\n        } else if i == \"m\" {\n            newString += \"o\"\n \
    \       } else if i == \"n\" {\n            newString += \"p\"\n        } else\
    \ if i == \"o\" {\n            newString += \"q\"\n        } else if i == \"p\"\
    \ {\n            newString += \"r\"\n        } else if i == \"q\" {\n        \
    \    newString += \"s\"\n        } else if i == \"r\" {\n            newString\
    \ += \"t\"\n        } else if i == \"s\" {\n            newString += \"u\"\n \
    \       } else if i == \"t\" {\n            newString += \"v\"\n        } else\
    \ if i == \"u\" {\n            newString += \"w\"\n        } else if i == \"v\"\
    \ {\n            newString += \"x\"\n        } else if i == \"w\" {\n        \
    \    newString += \"y\"\n        } else if i == \"x\" {\n            newString\
    \ += \"z\"\n        } else if i == \"y\" {\n            newString += \"a\"\n \
    \       } else if i == \"z\" {\n            newString += \"b\"\n        }\n  \
    \  }", "    let letter = Array(s)\n    var output = [Character]()\n    for letter\
    \ in letter {\n        output.append(getNextChar(s: letter))\n    }\n    return\
    \ String(output)", "    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var\
    \ stringArray = Array(s)\n    var newString = \"\"\n    for letter in stringArray\
    \ {\n        let index = alphabet.index(of: letter)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        let newIndex2 = alphabet.index(newIndex, offsetBy: 2)\n\
    \        newString += String(alphabet[newIndex2])\n    }\n    return newString",
  "    var encrypted = String()\n    for letter in s {\n        if let uppercaseLetter\
    \ = UnicodeScalar(String(letter)) {\n            var char = Character(UnicodeScalar(uppercaseLetter.value\
    \ + (2 * 2))!)\n            if !char.isLetter {\n                char = Character(UnicodeScalar(uppercaseLetter.value\
    \ - (26 - (2 * 2)))!)\n            }\n            encrypted.append(char)\n   \
    \     }\n    }\n    return encrypted", "    \n    // TODO: Implement this function\n\
    \    return \"\";", "    var encryptedStr = \"\"\n    for character in s {\n \
    \       encryptedStr += findNextTwoCharacters(character: character)\n    }\n \
    \   return encryptedStr", "    // YOUR CODE HERE\n    return s", "  var str =\
    \ String()\n  for char in s {\n    let unicode = char.unicodeScalars.first!.value\n\
    \    let unicodeString = String(unicode)\n    if unicode >= 97 && unicode <= 122\
    \ {\n      if unicode + 4 > 122 {\n        str.append(Character(UnicodeScalar(unicode\
    \ - 22)!))\n      } else {\n        str.append(Character(UnicodeScalar(unicode\
    \ + 4)!))\n      }\n    } else if unicode >= 65 && unicode <= 90 {\n      if unicode\
    \ + 4 > 90 {\n        str.append(Character(UnicodeScalar(unicode - 22)!))\n  \
    \    } else {\n        str.append(Character(UnicodeScalar(unicode + 4)!))\n  \
    \    }\n    } else {\n      str.append(char)\n    }\n  }\n  return str", "   \
    \ var alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var encryptedAlphabet\
    \ = [Character]()\n    for i in 0..<alphabet.count {\n        if i < alphabet.count\
    \ - 2 {\n            encryptedAlphabet.append(alphabet[i + 2])\n        } else\
    \ {\n            encryptedAlphabet.append(alphabet[i - alphabet.count + 2])\n\
    \        }\n    }\n    var encryptedString = \"\"\n    for letter in s {\n   \
    \     encryptedString += String(encryptedAlphabet[alphabet.firstIndex(of: letter)!])\n\
    \    }\n    return encryptedString", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encryptedString = \"\"\n    for letter in s {\n        if let index\
    \ = alphabet.firstIndex(of: letter) {\n            let newIndex = index + 2\n\
    \            if newIndex < alphabet.count {\n                encryptedString.append(alphabet[newIndex])\n\
    \            } else {\n                encryptedString.append(alphabet[newIndex\
    \ % alphabet.count])\n            }\n        }\n    }\n    return encryptedString",
  "    \n    var newString = \"\"\n    let characters = Array(s)\n    var charactersCount\
    \ = characters.count\n    \n    while charactersCount > 0 {\n        var newIndex\
    \ = alphabet_position(char: characters[charactersCount - 1]) + 2\n        while\
    \ newIndex > 25 {\n            newIndex -= 26\n        }\n        newString.append(alphabet[newIndex])\n\
    \        charactersCount -= 1\n    }\n    \n    return newString", "    var string\
    \ = \"\"\n    for char in s {\n        var character = char\n        if let index\
    \ = alphabet.firstIndex(of: char) {\n            if (index >= 18) {\n        \
    \        character = alphabet[index - 18]\n            } else {\n            \
    \    character = alphabet[index + 18]\n            }\n        }\n        string.append(character)\n\
    \    }\n    return string", "    var result = String()\n    for letter in s {\n\
    \        let value = letter.asciiValue!\n        let value2 = letter.asciiValue!\
    \ + 2 * 2\n        if value < 90 && value > 65 {\n            result.append(Character(UnicodeScalar(value2)!))\n\
    \        } else if value < 122 && value > 97 {\n            result.append(Character(UnicodeScalar(value2)!))\n\
    \        } else {\n            result.append(letter)\n        }\n    }\n    return\
    \ result", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let length\
    \ = s.count\n    var cipherText = \"\"\n    for i in 0..<length {\n        let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: (alphabet.firstIndex(of:\
    \ s[s.index(s.startIndex, offsetBy: i)])!.encodedOffset + (i * 2)) % 26)\n   \
    \     cipherText.append(alphabet[index])\n    }\n    return cipherText", "   \
    \ var result = \"\"\n    for char in s {\n        result += String(char).unicodeScalars.map\
    \ { unicodeScalar in\n            let a = unicodeScalar.value\n            let\
    \ b = a + 2 * 2\n            return UnicodeScalar(Int(b)) ?? unicodeScalar\n \
    \       }\n    }\n    return result", "    var encryptedString = \"\"\n    for\
    \ character in s {\n        let unicode = character.unicodeScalars.first!.value\n\
    \        let rotatedUnicode = ((((unicode - 97) + 2) % 26) + 97)\n        let\
    \ rotatedCharacter = Character(UnicodeScalar(rotatedUnicode)!)\n        encryptedString.append(rotatedCharacter)\n\
    \    }\n    return encryptedString", "    let alphabets = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encryptedString = \"\"\n    for c in s {\n        if let index = alphabets.firstIndex(of:\
    \ c) {\n            encryptedString.append(alphabets[(index + 2 * 2) % alphabets.count])\n\
    \        }\n    }\n    return encryptedString", "    var cArr = Array(s)\n   \
    \ for i in 0..<cArr.count {\n        cArr[i] = shiftN(c: cArr[i], n: 2)\n    }\n\
    \    return String(cArr)", "    var str = \"\"\n    for x in s {\n        let\
    \ char = Character(\"\\(x)\")\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encrypted = unicode + (2 * 2)\n        let result = Character(UnicodeScalar(encrypted)!)\n\
    \        str += \"\\(result)\"\n    }\n    return str", "    // implement code\
    \ here\n    return \"\"", '    return ""', "  var result = \"\"\n  for c in s\
    \ {\n    if let idx = alphabet.firstIndex(of: c) {\n      let shift = (idx + 1)\
    \ % alphabet.count\n      result.append(alphabet[shift])\n    }\n  }\n  return\
    \ result", "    var encryptedString = \"\"\n    for character in s {\n       \
    \ let unicodeScalar = character.unicodeScalars.first!.value\n        if unicodeScalar\
    \ == 105 {\n            encryptedString.append(\"m\")\n        } else if unicodeScalar\
    \ == 106 {\n            encryptedString.append(\"n\")\n        } else if unicodeScalar\
    \ == 107 {\n            encryptedString.append(\"o\")\n        } else if unicodeScalar\
    \ == 108 {\n            encryptedString.append(\"p\")\n        } else if unicodeScalar\
    \ == 109 {\n            encryptedString.append(\"q\")\n        } else if unicodeScalar\
    \ == 110 {\n            encryptedString.append(\"r\")\n        } else if unicodeScalar\
    \ == 111 {\n            encryptedString.append(\"s\")\n        } else if unicodeScalar\
    \ == 112 {\n            encryptedString.append(\"t\")\n        } else if unicodeScalar\
    \ == 113 {\n            encryptedString.append(\"u\")\n        } else if unicodeScalar\
    \ == 114 {\n            encryptedString.append(\"v\")\n        } else if unicodeScalar\
    \ == 115 {\n            encryptedString.append(\"w\")\n        } else if unicodeScalar\
    \ == 116 {\n            encryptedString.append(\"x\")\n        } else if unicodeScalar\
    \ == 117 {\n            encryptedString.append(\"y\")\n        } else if unicodeScalar\
    \ == 118 {\n            encryptedString.append(\"z\")\n        } else if unicodeScalar\
    \ == 119 {\n            encryptedString.append(\"a\")\n        } else if unicodeScalar\
    \ == 120 {\n            encryptedString.append(\"b\")\n        } else if unicodeScalar\
    \ == 121 {\n            encryptedString.append(\"c\")\n        } else if unicodeScalar\
    \ == 122 {\n            encryptedString.append(\"d\")\n        } else if unicodeScalar\
    \ == 97 {\n            encryptedString.append(\"e\")\n        } else if unicodeScalar\
    \ == 98 {\n            encryptedString.append(\"f\")\n        } else if unicodeScalar\
    \ == 99 {\n            encryptedString.append(\"g\")\n        } else if unicodeScalar\
    \ == 100 {\n            encryptedString.", "    let convertedString = String(s.utf8.map\
    \ {\n        $0 + ($0 >= 97 && $0 <= 122 ? 4 : 0)\n    })\n    var result = \"\
    \"\n    for i in convertedString {\n        if result.last == \"x\" {\n      \
    \      result.removeLast()\n            result.append(\"a\")\n        } else if\
    \ result.last == \"y\" {\n            result.removeLast()\n            result.append(\"\
    b\")\n        } else {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    let alphabet = [\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"]\n    for char in s {\n        if let value = alphabet.firstIndex(of: String(char))\
    \ {\n            if (value + 2 * 2) >= alphabet.count {\n                result\
    \ += alphabet[(value + 2 * 2) - alphabet.count]\n            } else {\n      \
    \          result += alphabet[value + 2 * 2]\n            }\n        }\n    }\n\
    \    return result", '    return ""', "    // your code here\n    return \"\"",
  "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrptedString = \"\"\
    \n    for (index, letter) in s.enumerated() {\n        guard let letterIndex =\
    \ alphabet.firstIndex(of: letter) else { continue }\n        let index = letterIndex.encodedOffset\
    \ + 4\n        let letter2 = alphabet[alphabet.index(alphabet.startIndex, offsetBy:\
    \ index)]\n        encrptedString.append(letter2)\n    }\n    return encrptedString",
  "    // YOUR CODE HERE\n    return \"\"", '    // write your code here', "    var\
    \ s2 = \"\"\n    for c in s {\n        if let x = c.unicodeScalars.first {\n \
    \           let unicode = x.value\n            if unicode < 110 {\n          \
    \      s2 += String(UnicodeScalar(unicode + 7)!)\n            } else {\n     \
    \           s2 += String(UnicodeScalar(unicode - 7)!)\n            }\n       \
    \ }\n    }\n    return s2", "    \n    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encryptedString = \"\"\n    \n    for letter in s {\n        if let\
    \ position = alphabet.firstIndex(of: letter) {\n            encryptedString.append(alphabet[(position\
    \ + 2) % 26])\n        }\n    }\n    \n    return encryptedString", '    return
    s.enumerated().map { $0.element.shift(by: $0.offset * 2) }.joined()', "    var\
    \ result = \"\"\n    let lowerCased = s.lowercased()\n    let alphabet = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    for c in lowerCased {\n        var index = alphabet.firstIndex(of:\
    \ String(c))!\n        if index + 2 * 2 < alphabet.count {\n            index\
    \ += 2 * 2\n        } else {\n            index -= alphabet.count - 2 * 2\n  \
    \      }\n        result += alphabet[index]\n    }\n    return result", "    var\
    \ shiftString = \"\"\n    for c in s {\n        shiftString.append(shiftChar(char:\
    \ c, shift: 2))\n    }\n    return shiftString", "    var result = \"\"\n    for\
    \ char in s {\n        if let ascii = char.asciiValue {\n            var newCode\
    \ = ascii + (UInt8(4))\n            if newCode > 122 {\n                newCode\
    \ = newCode - 26\n            }\n            result.append(Character(UnicodeScalar(newCode)!))\n\
    \        }\n    }\n    return result", "    // implement the encryption method\
    \ here...\n    var plainText = s.lowercased()\n    var cipherText = \"\"\n   \
    \ var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let shiftBy = 4\n    // move\
    \ the first 4 characters to the end of the string\n    alphabet.append(contentsOf:\
    \ alphabet.prefix(shiftBy))\n    alphabet.removeFirst(shiftBy)\n    for letter\
    \ in plainText {\n        var foundIndex = alphabet.firstIndex(of: letter)\n \
    \       if foundIndex != nil {\n            cipherText.append(alphabet[alphabet.index(after:\
    \ foundIndex!)])\n        } else {\n            cipherText.append(letter)\n  \
    \      }\n    }\n    return cipherText", '    return ""', "    var alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n    var newWord = \"\"\n    var letters = Array(s)\n\
    \    var positions = [Int]()\n    var converted = [Int]()\n    for i in 0..<letters.count\
    \ {\n        let position = alphabet.firstIndex(of: letters[i])!\n        positions.append(position)\n\
    \    }\n    for i in 0..<positions.count {\n        var newPosition = positions[i]\n\
    \        newPosition = newPosition + (2 * 2)\n        converted.append(newPosition)\n\
    \    }\n    for j in 0..<converted.count {\n        newWord.append(alphabet[converted[j]])\n\
    \    }\n    return newWord", "    var result = \"\"\n    for character in s {\n\
    \        var characterInt = character.asciiValue!\n        characterInt += 4\n\
    \        result += String(UnicodeScalar(UInt8(characterInt)))\n    }\n    return\
    \ result", "    let startIndex = s.startIndex\n    let endIndex = s.endIndex\n\
    \    var encrypted = \"\"\n    for i in s.indices {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        var letter = s[index]\n        for _ in 0..<2 {\n    \
    \        letter = letter.successor()\n            if letter == \"a\" {\n     \
    \           letter = \"c\"\n            } else if letter == \"b\" {\n        \
    \        letter = \"d\"\n            }\n        }\n        encrypted.append(letter)\n\
    \    }\n    return encrypted", "    var encryptedString = \"\"\n    for char in\
    \ s {\n        var asciiValue = char.asciiValue!\n        if asciiValue >= 97\
    \ {\n            asciiValue += 16\n            if asciiValue > 122 {\n       \
    \         asciiValue -= 26\n            }\n        } else {\n            asciiValue\
    \ += 16\n            if asciiValue > 90 {\n                asciiValue -= 26\n\
    \            }\n        }\n        encryptedString.append(Character(UnicodeScalar(asciiValue)!))\n\
    \    }\n    return encryptedString", "    //this is a single line solution.\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\".map { $0 }\n    let result\
    \ = s.map { alphabet[alphabet.index(alphabet.startIndex, offsetBy: (alphabet.index(of:\
    \ $0)!.encodedOffset + 2) % alphabet.count)] }\n    return String(result)\n  \
    \  \n//    //this is a several line solution.\n//    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .map { $0 }\n//    var result = \"\"\n//    for char in s {\n//        let index\
    \ = alphabet.index(of: char)!.encodedOffset\n//        alphabet.rotate(shiftingToStart:\
    \ index)\n//        alphabet.rotate(shiftingToStart: 2)\n//        result.append(alphabet[0])\n\
    //    }\n//    return result", "    let split = s.map{String($0)}\n    var answer:\
    \ String = \"\"\n    for letter in split {\n        let ascii = letter.unicodeScalars.first!.value\n\
    \        let lower = ascii >= Int(UnicodeScalar(\"a\").value) && ascii <= Int(UnicodeScalar(\"\
    z\").value)\n        if lower {\n            var newLetter = ascii + 2*2\n   \
    \         if newLetter > Int(UnicodeScalar(\"z\").value) {\n                newLetter\
    \ = (Int(UnicodeScalar(\"a\").value) + (newLetter % Int(UnicodeScalar(\"z\").value)))\n\
    \            }\n            answer += String(UnicodeScalar(UInt8(newLetter)))\n\
    \        } else {\n            var newLetter = ascii + 2*2\n            if newLetter\
    \ > Int(UnicodeScalar(\"Z\").value) {\n                newLetter = (Int(UnicodeScalar(\"\
    A\").value) + (newLetter % Int(UnicodeScalar(\"Z\").value)))\n            }\n\
    \            answer += String(UnicodeScalar(UInt8(newLetter)))\n        }\n  \
    \  }\n    return answer", "    let alphabet: String = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encrypted: String = \"\"\n    for letter in s {\n        let i = alphabet.firstIndex(of:\
    \ letter)!\n        let i1 = alphabet.index(i, offsetBy: 2*2)\n        encrypted.append(alphabet[i1])\n\
    \    }\n    return encrypted", "    \n    let firstHalfAlphabet = \"abcdefghijklm\"\
    \n    let secondHalfAlphabet = \"nopqrstuvwxyz\"\n    var encryptedString = \"\
    \"\n    \n    for letter in s {\n        if let idx = firstHalfAlphabet.firstIndex(of:\
    \ letter) {\n            encryptedString.append(firstHalfAlphabet[idx + 2])\n\
    \        } else if let idx = secondHalfAlphabet.firstIndex(of: letter) {\n   \
    \         encryptedString.append(secondHalfAlphabet[idx + 2])\n        }\n   \
    \ }\n    \n    return encryptedString", "    var newString = \"\"\n    let s =\
    \ s.lowercased()\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i\
    \ in s {\n        if alphabet.contains(i) {\n            let position = alphabet.firstIndex(of:\
    \ i)!\n            let secondPosition = alphabet.index(after: position)\n    \
    \        let thirdPosition = alphabet.index(after: secondPosition)\n         \
    \   let fourthPosition = alphabet.index(after: thirdPosition)\n            let\
    \ firstCharacter = alphabet[thirdPosition]\n            let secondCharacter =\
    \ alphabet[fourthPosition]\n            newString.append(firstCharacter)\n   \
    \         newString.append(secondCharacter)\n        }\n    }\n    return newString",
  "    var enc_s = \"\"\n    for i in s {\n        var code = i.asciiValue!\n    \
    \    if (i.asciiValue! >= 48 && i.asciiValue! <= 57) {\n            code = i.asciiValue!\
    \ + 8\n        } else if (i.asciiValue! >= 65 && i.asciiValue! <= 90) {\n    \
    \        code = i.asciiValue! + 16\n        } else if (i.asciiValue! >= 97 &&\
    \ i.asciiValue! <= 122) {\n            code = i.asciiValue! + 16\n        }\n\
    \        if (code > 57 && code < 65) {\n            code = 64 + (code - 57)\n\
    \        } else if (code > 90 && code < 97) {\n            code = 96 + (code -\
    \ 90)\n        } else if (code > 122) {\n            code = 96 + (code - 122)\n\
    \        }\n        enc_s.append(Character(UnicodeScalar(code)!))\n    }\n   \
    \ return enc_s", "    // you code goes here\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encrypted = \"\"\n    for letter in s {\n        let index = alphabet.index(of:\
    \ letter)\n        if let index = index {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            let newLetter = alphabet[newIndex]\n            encrypted.append(newLetter)\n\
    \        }\n    }\n    return encrypted", "    var encrypted = \"\"\n    for letter\
    \ in s {\n        let index = letter.asciiValue! - \"a\".asciiValue!\n       \
    \ let newIndex = ((index + 20) % 26) + \"a\".asciiValue!\n        encrypted.append(Character(UnicodeScalar(newIndex)!))\n\
    \    }\n    return encrypted", '    return ""', "    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    let upperAlphabet = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    var encryptedString\
    \ = \"\"\n    var letter = \"\"\n    for char in s {\n        if alphabet.contains(char)\
    \ {\n            for i in 0..<alphabet.count {\n                if alphabet[i]\
    \ == char {\n                    letter = String(alphabet[(i + 2) * 2 % alphabet.count])\n\
    \                }\n            }\n        } else if upperAlphabet.contains(char)\
    \ {\n            for i in 0..<upperAlphabet.count {\n                if upperAlphabet[i]\
    \ == char {\n                    letter = String(upperAlphabet[(i + 2) * 2 % upperAlphabet.count])\n\
    \                }\n            }\n        } else {\n            letter = String(char)\n\
    \        }\n        encryptedString += letter\n    }\n    return encryptedString",
  "  let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n  var newWord = \"\"\n\
    \  for letter in s {\n    if let idx = alphabet.firstIndex(of: letter) {\n   \
    \   let newIdx = (idx + 2) % alphabet.count\n      newWord.append(alphabet[newIdx])\n\
    \    }\n  }\n  return newWord", "    var result = \"\"\n    for c in s {\n   \
    \     result += String(Character(UnicodeScalar(c.asciiValue! + 2)!))\n    }\n\
    \    return result", '    return encrypt(s: s, distance: 4)', "    // Uppercase\
    \ the string\n    let upperCased = s.uppercased()\n    var result = \"\"\n   \
    \ for char in upperCased {\n        // Rotate each character and append to result\n\
    \        let rotated = rotate(s: char)\n        result += rotated\n    }\n   \
    \ return result", "    var result = \"\"\n    for char in s {\n        let index\
    \ = getIndex(char: char)\n        result += getCharacter(index: index)\n    }\n\
    \    return result", "    var ret: String = \"\"\n    for char in s {\n      \
    \  let t = Character(UnicodeScalar(UInt8(char.asciiValue!) + 2 * 2)!)\n      \
    \  ret.append(t)\n    }\n    return ret", "    let lowercaseChars = s.lowercased().characters\n\
    \    let lowercaseAlphabet = Alphabet.lowercase.values\n    var encrypted = \"\
    \"\n    for char in lowercaseChars {\n        if let index = lowercaseAlphabet.index(of:\
    \ char) {\n            let encryptedIndex = (index + (2 * 2)) % lowercaseAlphabet.count\n\
    \            encrypted.append(lowercaseAlphabet[encryptedIndex])\n        }\n\
    \    }\n    return encrypted", "    let shift = -2 * 2\n    var output = \"\"\n\
    \    let chars = Array(s)\n    for c in chars {\n        let unicode = c.unicodeScalars.first!.value\n\
    \        var shifted = unicode + UInt32(shift)\n        if shifted < 97 {\n  \
    \          shifted += 26\n        }\n        output.append(Character(UnicodeScalar(shifted)!))\n\
    \    }\n    return output", '    return ""', "    let alphabet: [Character] =\
    \ [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"]\n    var encrypted: [Character] = [\"\"]\n    for\
    \ char in s {\n        if let index = alphabet.firstIndex(of: char) {\n      \
    \      if index < 21 {\n                encrypted.append(alphabet[index + 4])\n\
    \            } else {\n                encrypted.append(alphabet[index - 2])\n\
    \            }\n        }\n    }\n    return String(encrypted)", "    let size\
    \ = s.count\n    let alphabet : [Character] = [\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n \
    \   var encryptedString : String = \"\"\n    var alphabetIndex : Int = 0\n   \
    \ for i in s.indices {\n        let currentCharacter : Character = s[i]\n    \
    \    for j in alphabet.indices {\n            if alphabet[j] == currentCharacter\
    \ {\n                alphabetIndex = j\n                alphabetIndex = alphabetIndex\
    \ + 2\n                if alphabetIndex == 26 {\n                    alphabetIndex\
    \ = alphabetIndex - 26\n                }\n                encryptedString.append(alphabet[alphabetIndex])\n\
    \            }\n        }\n    }\n    return encryptedString", "    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var sAlphabet = \"\"\n    for char in\
    \ s {\n        for (index, _) in alphabet.enumerated() {\n            if char\
    \ == alphabet[alphabet.index(alphabet.startIndex, offsetBy: index)] {\n      \
    \          sAlphabet.append(alphabet[alphabet.index(alphabet.startIndex, offsetBy:\
    \ index + 2)])\n            }\n        }\n    }\n    return sAlphabet", '    return
    alphabetShift(string: s, shift: 2)', "    var res = \"\"\n    for char in s {\n\
    \        var i = char.toInt() - 97\n        i = (i + 4) % 26\n        let c =\
    \ Character(UnicodeScalar(i + 97)!)\n        res += String(c)\n    }\n    return\
    \ res", "    var result = \"\"\n    for c in s {\n        if c == \"z\" {\n  \
    \          result.append(\"b\")\n        } else if c == \"y\" {\n            result.append(\"\
    a\")\n        } else {\n            let unicode = c.unicodeScalars.first!.value\n\
    \            let newUnicode = unicode + 2\n            let newCharacter = String(UnicodeScalar(newUnicode)!)\n\
    \            result.append(newCharacter)\n        }\n    }\n    return result",
  "    let str = s.uppercased()\n    var newStr = \"\"\n    for c in str {\n     \
    \   if let u = UnicodeScalar(String(c)) {\n            if u.value + (2 * 2) <=\
    \ 90 {\n                newStr.append(Character(UnicodeScalar(u.value + (2 * 2))!))\n\
    \            } else {\n                newStr.append(Character(UnicodeScalar(u.value\
    \ + (2 * 2) - 90 + 64)!))\n            }\n        }\n    }\n    return newStr",
  "    var array: [Character] = []\n    for character in s {\n        array.append(character)\n\
    \    }\n    var encryptedArray: [Character] = []\n    for character in array {\n\
    \        let newCharacter = character.shiftDown(by: 2)\n        encryptedArray.append(newCharacter)\n\
    \    }\n    var encrypted: String = \"\"\n    for character in encryptedArray\
    \ {\n        encrypted += String(character)\n    }\n    return encrypted", " \
    \   // implement the function here.\n    return \"\"", "  // Enter your code below\n\
    \  return \"\";", "    var s = s\n    let alphabet = [\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"]\n    var encryptedString = \"\"\n    let letterCount = s.count\n    var i\
    \ = 0\n    while i < letterCount {\n        var letterIndex = 0\n        while\
    \ alphabet[letterIndex] != String(s.removeFirst()) {\n            letterIndex\
    \ += 1\n        }\n        if letterIndex == 0 {\n            encryptedString.append(contentsOf:\
    \ \"a\")\n        } else if letterIndex == 1 {\n            encryptedString.append(contentsOf:\
    \ \"b\")\n        } else if letterIndex == 2 {\n            encryptedString.append(contentsOf:\
    \ \"c\")\n        } else if letterIndex == 3 {\n            encryptedString.append(contentsOf:\
    \ \"d\")\n        } else if letterIndex == 4 {\n            encryptedString.append(contentsOf:\
    \ \"e\")\n        } else if letterIndex == 5 {\n            encryptedString.append(contentsOf:\
    \ \"f\")\n        } else if letterIndex == 6 {\n            encryptedString.append(contentsOf:\
    \ \"g\")\n        } else if letterIndex == 7 {\n            encryptedString.append(contentsOf:\
    \ \"h\")\n        } else if letterIndex == 8 {\n            encryptedString.append(contentsOf:\
    \ \"i\")\n        } else if letterIndex == 9 {\n            encryptedString.append(contentsOf:\
    \ \"j\")\n        } else if letterIndex == 10 {\n            encryptedString.append(contentsOf:\
    \ \"k\")\n        } else if letterIndex == 11 {\n            encryptedString.append(contentsOf:\
    \ \"l\")\n        } else if letterIndex == 12 {\n            encryptedString.append(contentsOf:\
    \ \"m\")\n        } else if letterIndex == 13 {\n            encryptedString.append(contentsOf:\
    \ \"n\")\n        } else if letterIndex == 14 {\n            encryptedString.append(contentsOf:\
    \ \"o\")\n       ", "    var newS = \"\"\n    for char in s {\n        var ascii\
    \ = char.asciiValue\n        ascii = (ascii! - 97 + 2) % 26 + 97\n        let\
    \ newChar = Character(UnicodeScalar(ascii!))\n        newS += String(newChar)\n\
    \    }\n    return newS", "    // Hint: Use the alphabet letters `\"abcdefghijklmnopqrstuvwxyz\"\
    `\n    //\n    // Hint: Use the `String` function `prefix` to get an index\n \
    \   //       of the first character of a string.\n    //\n    // Hint: Use the\
    \ `String` function `suffix` to get an index\n    //       of the rest of the\
    \ characters.\n    //\n    // Hint: Use the `String` function `lowercased` to\
    \ get a\n    //       lowercase version of a string.\n    //\n    // Hint: Use\
    \ the `String` function `replacingOccurrences` to\n    //       replace the character\
    \ at an index.\n    //\n    // Hint: Use the `String` function `index` to get\
    \ the index\n    //       of a character.\n    //\n    // Hint: Use the `String`\
    \ function `indices` to get all\n    //       indices of a string.\n    //\n \
    \   // Hint: Use the `String` function `isEmpty` to check if a\n    //       string\
    \ is empty.\n    //\n    // Hint: Use the `String` function `insert` to insert\
    \ a\n    //       character at a certain index.\n    //\n    // Hint: Use the\
    \ `String` function `hasPrefix` to check if\n    //       a string has a certain\
    \ prefix.\n    //\n    // Hint: Use the `String` function `remove` to remove a\n\
    \    //       certain character from a string.\n    //\n    // Hint: Use the `String`\
    \ function `sorted` to sort\n    //       the characters of a string.\n    //\n\
    \    // Hint: Use the `Int` function `distance` to get the\n    //       distance\
    \ between two integers.\n    //\n    // Hint: Use the `String` function `joined`\
    \ to join the\n    //       characters of a string into a single string.\n   \
    \ //\n    // Hint: Use the `String` function `prefix` to get a\n    //       prefix\
    \ of a string.\n    //\n    // Hint: Use the `String` function `suffix` to get\
    \ a\n    //       suffix of a string.\n    //\n", "    let asciiArr = s.unicodeScalars.map\
    \ { (scalar) -> UInt32 in\n        scalar.value\n    }\n    let newArr = asciiArr.map\
    \ { (ascii) -> UInt32 in\n        if ascii == 122 {\n            return 122\n\
    \        } else if ascii == 90 {\n            return 90\n        } else {\n  \
    \          return ascii + 2 * 2\n        }\n    }\n    let newChars = newArr.map\
    \ { (ascii) -> Character in\n        return Character(UnicodeScalar(ascii)!)\n\
    \    }\n    let newString = String(newChars)\n    return newString", "    \n \
    \   let alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    var encryptedString\
    \ = \"\"\n    \n    var shift = 0\n    \n    for char in s {\n        for (index,\
    \ letter) in alphabet.enumerated() {\n            if char == Character(letter)\
    \ {\n                shift = index + 4\n                if shift > 25 {\n    \
    \                shift = shift - 26\n                }\n                encryptedString.append(alphabet[shift])\n\
    \            }\n        }\n    }\n    return encryptedString", "    \n    let\
    \ alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    var shiftedAlphabet =\
    \ alphabet\n    var encryptedString = \"\"\n    \n    for _ in 0...3 {\n     \
    \   shiftedAlphabet.append(shiftedAlphabet.removeFirst())\n    }\n    \n    for\
    \ letter in s {\n        let index = alphabet.firstIndex(of: letter)\n       \
    \ let encryptedLetter = shiftedAlphabet[index!]\n        encryptedString.append(encryptedLetter)\n\
    \    }\n    \n    return encryptedString", "    var encryptedString = \"\"\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in s {\n        let\
    \ index = alphabet.index(of: i)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encryptedString += String(alphabet[newIndex])\n    }\n\
    \    return encryptedString", "  var string = \"\"\n  for char in s {\n    string\
    \ += String(UnicodeScalar(Int(String(char))! + 4)!)\n  }\n  return string", '    return
    ""', "    var result = \"\"\n    for ch in s {\n        result += \"\\(Character(UnicodeScalar(Int(String(ch))!\
    \ + 3)!))\"\n    }\n    return result", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encryptedString = \"\"\n    for char in s {\n        if let idx = alphabet.firstIndex(of:\
    \ char) {\n            let newPosition = alphabet.index(idx, offsetBy: (idx <\
    \ idx + 4 ? 2 : -24))\n            encryptedString.append(alphabet[newPosition])\n\
    \        }\n    }\n    return encryptedString", "    let letters: [Character]\
    \ = Array(s)\n    var encryptedLetters: [Character] = []\n    for letter in letters\
    \ {\n        if (letter == \"z\") {\n            encryptedLetters.append(\"b\"\
    )\n        } else if (letter == \"y\") {\n            encryptedLetters.append(\"\
    a\")\n        } else {\n            encryptedLetters.append(letter.unicodeScalars.first!.value\
    \ + 2)\n        }\n    }\n    let encryptedStr = String(encryptedLetters)\n  \
    \  return encryptedStr", "    //your code here\n    var result = \"\"\n    let\
    \ alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    for c in s {\n       \
    \ result += String(alphabet[(alphabet.firstIndex(of: c)! + 4) % 26])\n    }\n\
    \    return result", "    let alphabetArray = [\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n \
    \   var encryptedString = \"\"\n    for (_, element) in s.enumerated() {\n   \
    \     for (index, alphabet) in alphabetArray.enumerated() {\n            if String(element)\
    \ == alphabet {\n                if index + 2 * 2 > alphabetArray.count - 1 {\n\
    \                    encryptedString += alphabetArray[(index + 2 * 2) - alphabetArray.count]\n\
    \                } else {\n                    encryptedString += alphabetArray[index\
    \ + 2 * 2]\n                }\n            }\n        }\n    }\n    return encryptedString",
  "    var encrypt = [Character]()\n    for char in s {\n        let charNum = char.asciiValue!\n\
    \        if charNum >= 65 && charNum <= 87 {\n            let shifted = Character(UnicodeScalar(charNum\
    \ + 2)!)\n            encrypt.append(shifted)\n        } else if charNum >= 88\
    \ && charNum <= 90 {\n            let shifted = Character(UnicodeScalar(charNum\
    \ - 24)!)\n            encrypt.append(shifted)\n        } else if charNum >= 97\
    \ && charNum <= 119 {\n            let shifted = Character(UnicodeScalar(charNum\
    \ + 2)!)\n            encrypt.append(shifted)\n        } else if charNum >= 120\
    \ && charNum <= 122 {\n            let shifted = Character(UnicodeScalar(charNum\
    \ - 24)!)\n            encrypt.append(shifted)\n        } else {\n           \
    \ encrypt.append(char)\n        }\n    }\n    return String(encrypt)", "    let\
    \ lowercase = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    let uppercase = Array(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    var secret = \"\"\n    for ch in s {\n    \
    \    let idx = (String(ch).lowercased() == String(ch)) ? lowercase.firstIndex(of:\
    \ ch) : uppercase.firstIndex(of: ch)\n        if let i = idx {\n            let\
    \ index = (i + 2) % lowercase.count\n            secret += String(lowercase[index])\n\
    \        } else {\n            secret += String(ch)\n        }\n    }\n    return\
    \ secret", "    // Write your code here\n    return \"\"", "    let lowercase:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let uppercase: [Character] =\
    \ [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"\
    , \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\"\
    , \"W\", \"X\", \"Y\", \"Z\"]\n    var encrypted: String = \"\"\n    for char\
    \ in s {\n        if char == \" \" {\n            encrypted += \" \"\n       \
    \ } else if char.isUppercase {\n            for i in 0...uppercase.count-1 {\n\
    \                if char == uppercase[i] {\n                    encrypted += uppercase[i+4]\n\
    \                }\n            }\n        } else {\n            for i in 0...lowercase.count-1\
    \ {\n                if char == lowercase[i] {\n                    encrypted\
    \ += lowercase[i+4]\n                }\n            }\n        }\n    }\n    return\
    \ encrypted", "    let s = s.lowercased()\n    var output = \"\"\n    for i in\
    \ s {\n        switch i {\n        case \"a\"...\"w\":\n            output +=\
    \ String(UnicodeScalar(UInt8(Int(i.asciiValue!) + 4)))\n        case \"x\"...\"\
    z\":\n            output += String(UnicodeScalar(UInt8(Int(i.asciiValue!) - 20)))\n\
    \        default:\n            output += String(i)\n        }\n    }\n    return\
    \ output", "    var stringArray = [Character]()\n    for i in s {\n        var\
    \ offset = alphabet.firstIndex(of: i)! + 10\n        if offset > 25 {\n      \
    \      offset -= 26\n        }\n        stringArray.append(alphabet[offset])\n\
    \    }\n    return String(stringArray)", "    \n    var encrypted = \"\"\n   \
    \ for char in s {\n        let uni = char.unicodeScalars.first!.value\n      \
    \  if (uni >= 97 && uni <= 101) || (uni >= 103 && uni <= 107) {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ + 16)!))\n        } else if uni == 108 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 14)!))\n        } else if uni == 109 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 16)!))\n        } else if uni == 110 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 15)!))\n        } else if uni == 111 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 12)!))\n        } else if uni == 112 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 10)!))\n        } else if uni == 113 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 11)!))\n        } else if uni == 114 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 8)!))\n        } else if uni == 115 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 6)!))\n        } else if uni == 116 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 7)!))\n        } else if uni == 117 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 4)!))\n        } else if uni == 118 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 2)!))\n        } else if uni == 119 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ - 3)!))\n        } else if uni == 120 {\n            encrypted.append(Character(UnicodeScalar(uni)!))\n\
    \        } else if uni == 121 {\n            encrypted.append(Character(UnicodeScalar(uni\
    \ + 1)!))\n        } else if uni == 122 {\n            encrypted.append(Character",
  "    var newString = \"\"\n    let alphabetArray = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    for character in s {\n        for letter in alphabetArray {\n         \
    \   if character == letter {\n                let index = alphabetArray.firstIndex(of:\
    \ letter)!\n                if index >= alphabetArray.count - 2 {\n          \
    \          let finalIndex = index - alphabetArray.count + 2\n                \
    \    newString.append(alphabetArray[finalIndex])\n                } else {\n \
    \                   newString.append(alphabetArray[index + 2])\n             \
    \   }\n            }\n        }\n    }\n    return newString", "    var encryptedString\
    \ = \"\"\n    for character in s {\n        let unicode = character.unicodeScalars.first!.value\n\
    \        var letter: UnicodeScalar\n        if unicode == 97 {\n            letter\
    \ = UnicodeScalar(unicode + 23)!\n        } else if unicode == 98 {\n        \
    \    letter = UnicodeScalar(unicode + 21)!\n        } else {\n            letter\
    \ = UnicodeScalar(unicode - 2)!\n        }\n        encryptedString.append(Character(letter))\n\
    \    }\n    return encryptedString", "    var encryptedString = \"\"\n    for\
    \ i in s {\n        var asciiValue = Int(i.asciiValue!)\n        if asciiValue\
    \ >= 97 && asciiValue <= 122 {\n            if asciiValue == 120 {\n         \
    \       asciiValue = 97\n            } else if asciiValue == 121 {\n         \
    \       asciiValue = 98\n            } else {\n                asciiValue += 2\n\
    \            }\n        }\n        encryptedString.append(Character(UnicodeScalar(asciiValue)!))\n\
    \    }\n    return encryptedString", '  return ""', "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encrypted = \"\"\n    for char in s {\n        let index = alphabet.index(of:\
    \ char)!\n        let newIndex = alphabet.index(index, offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n\
    \    }\n    return encrypted", '    return ""', '    return ""', '    return ""',
  '    return ""', "    var result = \"\"\n    for character in s {\n        let shift\
    \ = character.asciiValue! + 2 * 2\n        if shift <= 122 {\n            result.append(Character(UnicodeScalar(shift)!))\n\
    \        } else {\n            result.append(Character(UnicodeScalar(96 + shift\
    \ % 122)!))\n        }\n    }\n    return result", "    let letters = Array(s)\n\
    \    var encrypted = \"\"\n    for letter in letters {\n        if letter == \"\
    \ \" {\n            encrypted += \" \"\n        } else {\n            encrypted\
    \ += encryptLetter(s: String(letter))\n        }\n    }\n    return encrypted",
  '    return ""', "    var s = s\n    var result = \"\"\n    for _ in s {\n     \
    \   let c = s.removeFirst()\n        switch c {\n        case \"a\"...\"c\":\n\
    \            result.append(\"x\")\n        case \"d\"...\"f\":\n            result.append(\"\
    y\")\n        case \"g\"...\"i\":\n            result.append(\"z\")\n        case\
    \ \"j\"...\"l\":\n            result.append(\"a\")\n        case \"m\"...\"o\"\
    :\n            result.append(\"b\")\n        case \"p\"...\"r\":\n           \
    \ result.append(\"c\")\n        case \"s\"...\"u\":\n            result.append(\"\
    d\")\n        case \"v\"...\"x\":\n            result.append(\"e\")\n        case\
    \ \"y\"...\"z\":\n            result.append(\"f\")\n        default:\n       \
    \     result.append(c)\n        }\n    }\n    return result", "    var str = \"\
    \"\n    for letter in s {\n        str += String(letter)\n    }\n    let uppercase\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let lowercase = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encrypted = \"\"\n    for i in str {\n        if lowercase.contains(i)\
    \ {\n            var index = lowercase.firstIndex(of: i)!\n            encrypted\
    \ += String(lowercase[index.advanced(by: 2)])\n        } else if uppercase.contains(i)\
    \ {\n            var index = uppercase.firstIndex(of: i)!\n            encrypted\
    \ += String(uppercase[index.advanced(by: 2)])\n        } else {\n            encrypted\
    \ += String(i)\n        }\n    }\n    return encrypted", "  var stringArray =\
    \ [Character]()\n  for char in s {\n    stringArray.append(char)\n  }\n  for i\
    \ in 0..<stringArray.count {\n    if (stringArray[i] == \"z\") {\n      stringArray[i]\
    \ = \"b\"\n    } else if (stringArray[i] == \"y\") {\n      stringArray[i] = \"\
    a\"\n    } else {\n      let index = Int(String(stringArray[i]))!\n      stringArray[i]\
    \ = Character(UnicodeScalar(index + 2)!)\n    }\n  }\n  return String(stringArray)",
  "    var arr = Array(s)\n    var result = \"\"\n    for i in 0..<arr.count {\n \
    \       let char = arr[i]\n        if char == \"a\" {\n            result += \"\
    c\"\n        } else if char == \"b\" {\n            result += \"d\"\n        }\
    \ else if char == \"c\" {\n            result += \"e\"\n        } else if char\
    \ == \"d\" {\n            result += \"f\"\n        } else if char == \"e\" {\n\
    \            result += \"g\"\n        } else if char == \"f\" {\n            result\
    \ += \"h\"\n        } else if char == \"g\" {\n            result += \"i\"\n \
    \       } else if char == \"h\" {\n            result += \"j\"\n        } else\
    \ if char == \"i\" {\n            result += \"k\"\n        } else if char == \"\
    j\" {\n            result += \"l\"\n        } else if char == \"k\" {\n      \
    \      result += \"m\"\n        } else if char == \"l\" {\n            result\
    \ += \"n\"\n        } else if char == \"m\" {\n            result += \"o\"\n \
    \       } else if char == \"n\" {\n            result += \"p\"\n        } else\
    \ if char == \"o\" {\n            result += \"q\"\n        } else if char == \"\
    p\" {\n            result += \"r\"\n        } else if char == \"q\" {\n      \
    \      result += \"s\"\n        } else if char == \"r\" {\n            result\
    \ += \"t\"\n        } else if char == \"s\" {\n            result += \"u\"\n \
    \       } else if char == \"t\" {\n            result += \"v\"\n        } else\
    \ if char == \"u\" {\n            result += \"w\"\n        } else if char == \"\
    v\" {\n            result += \"x\"\n        } else if char == \"w\" {\n      \
    \      result += \"y\"\n        } else if char == \"x\" {\n            result\
    \ += \"z\"\n        } else if char == \"y\" {\n            result += \"a\"\n \
    \       } else if char == \"z\" {\n            result += \"b\"\n        }\n  \
    \  }\n    return result", "    \n    var newString = \"\"\n    let lowerCaseLetters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in s {\n        if let index\
    \ = lowerCaseLetters.firstIndex(of: letter) {\n            if index >= 18 {\n\
    \                let newLetter = lowerCaseLetters[index-18]\n                newString.append(newLetter)\n\
    \            } else {\n                let newLetter = lowerCaseLetters[index+8]\n\
    \                newString.append(newLetter)\n            }\n        }\n    }\n\
    \    return newString", "    // REPLACE ME\n    return \"\"", "    return String(s.map\
    \ { (i) -> Character in\n        let value = i.asciiValue! + (i.asciiValue! <=\
    \ 110 ? -54 : -38)\n        return Character(UnicodeScalar(value)!)\n    })",
  "    let cipher = \"abcdefghijklmnopqrstuvwxyz\"\n    var tempStr = \"\"\n    for\
    \ letter in s {\n        if let index = cipher.firstIndex(of: letter) {\n    \
    \        tempStr.append(cipher[cipher.index(cipher.startIndex, offsetBy: ((index.encodedOffset\
    \ + 4) % 26))])\n        }\n    }\n    return tempStr", "    // TODO: write your\
    \ code here\n    return \"\"", '    return ""', '    return encryptHelper(s: s,
    offset: 2, times: 2)', "    let charArray = Array(s)\n    var encryptArray = [Character]()\n\
    \    for char in charArray {\n        encryptArray.append(encryptChar(c: char))\n\
    \    }\n    return String(encryptArray)", "    // your code here\n    return \"\
    \"", "    return String(s.map { (c) -> Character in\n        let a = Int(c.asciiValue!)\n\
    \        let b = UInt8(a - 97)\n        return Character(UnicodeScalar(UInt8((b\
    \ + 2) % 26 + 97)))\n    })", "    var encryptedString = \"\"\n    for character\
    \ in s {\n        if let index = alphabet.firstIndex(of: character) {\n      \
    \      encryptedString.append(alphabet[(index + (2 * 2)) % alphabet.count])\n\
    \        }\n    }\n    return encryptedString", "    // your code here\n    var\
    \ encryptS = \"\"\n    for i in s {\n        encryptS += encryptDict[i]!\n   \
    \ }\n    return encryptS", "    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    let letterToIndex = [Character: Int]()\n    let indexToLetter = [Int: Character]()\n\
    \    for (i, c) in alphabet.enumerated() {\n        letterToIndex[c] = i\n   \
    \     indexToLetter[i] = c\n    }\n    var result = [Character]()\n    for char\
    \ in s {\n        let index = letterToIndex[char]!\n        let newIndex = (index\
    \ + 2) % 26\n        result.append(indexToLetter[newIndex]!)\n    }\n    return\
    \ String(result)", '    return ""', '    return ""', "    let charsToBeRotated\
    \ = Array(s)\n    var charsRotated = [Character]()\n    for i in 0..<charsToBeRotated.count\
    \ {\n        var charRotated = charsToBeRotated[i]\n        if charRotated ==\
    \ \"a\" {\n            charRotated = \"c\"\n        } else if charRotated == \"\
    b\" {\n            charRotated = \"d\"\n        } else if charRotated == \"c\"\
    \ {\n            charRotated = \"e\"\n        } else if charRotated == \"d\" {\n\
    \            charRotated = \"f\"\n        } else if charRotated == \"e\" {\n \
    \           charRotated = \"g\"\n        } else if charRotated == \"f\" {\n  \
    \          charRotated = \"h\"\n        } else if charRotated == \"g\" {\n   \
    \         charRotated = \"i\"\n        } else if charRotated == \"h\" {\n    \
    \        charRotated = \"j\"\n        } else if charRotated == \"i\" {\n     \
    \       charRotated = \"k\"\n        } else if charRotated == \"j\" {\n      \
    \      charRotated = \"l\"\n        } else if charRotated == \"k\" {\n       \
    \     charRotated = \"m\"\n        } else if charRotated == \"l\" {\n        \
    \    charRotated = \"n\"\n        } else if charRotated == \"m\" {\n         \
    \   charRotated = \"o\"\n        } else if charRotated == \"n\" {\n          \
    \  charRotated = \"p\"\n        } else if charRotated == \"o\" {\n           \
    \ charRotated = \"q\"\n        } else if charRotated == \"p\" {\n            charRotated\
    \ = \"r\"\n        } else if charRotated == \"q\" {\n            charRotated =\
    \ \"s\"\n        } else if charRotated == \"r\" {\n            charRotated = \"\
    t\"\n        } else if charRotated == \"s\" {\n            charRotated = \"u\"\
    \n        } else if charRotated == \"t\" {\n            charRotated = \"v\"\n\
    \        } else if charRotated == \"u\" {\n            charRotated", "    let\
    \ newAlphabet = \"cdefghijklmnopqrstuvwxyzab\"\n    var stringToReturn = \"\"\n\
    \    for i in s {\n        let index = newAlphabet.index(newAlphabet.startIndex,\
    \ offsetBy: alphabet.index(of: i)! + 2)\n        stringToReturn.append(newAlphabet[index])\n\
    \    }\n    return stringToReturn", "    var newString = String()\n    for i in\
    \ s {\n        newString.append(i.shiftDown(by: 2 * 2))\n    }\n    return newString",
  '    return encrypt(s: s, by: 2)', "    let alphabets = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encryptedString = \"\"\n    for char in s {\n        if let index =\
    \ alphabets.firstIndex(of: char) {\n            encryptedString.append(alphabets[(index\
    \ + 2) % 26])\n        }\n    }\n    return encryptedString", "    var encryptedWord\
    \ = \"\"\n    for character in s {\n        let unicodeScalar = character.unicodeScalars.first!.value\n\
    \        let numberFromASCIINumber = Int(unicodeScalar)\n        let newUnicodeScalar\
    \ = numberFromASCIINumber + 2 * 2\n        if newUnicodeScalar <= 111 {\n    \
    \        let scalar = UnicodeScalar(newUnicodeScalar)!\n            encryptedWord.append(Character(scalar))\n\
    \        } else {\n            var difference = newUnicodeScalar - 111\n     \
    \       while difference > 26 {\n                difference -= 26\n          \
    \  }\n            let scalar = UnicodeScalar(difference + 96)!\n            encryptedWord.append(Character(scalar))\n\
    \        }\n    }\n    return encryptedWord", "    var sArr = Array(s)\n    var\
    \ encryptedArr = [Character]()\n    for (index, letter) in sArr.enumerated() {\n\
    \        if letter == \"z\" {\n            encryptedArr.append(\"b\")\n      \
    \  } else if letter == \"y\" {\n            encryptedArr.append(\"a\")\n     \
    \   } else {\n            let shift = (index + 1) * 2\n            let charCode\
    \ = Int(letter.asciiValue!) + shift\n            let encryptedLetter = Character(UnicodeScalar(charCode)!)\n\
    \            encryptedArr.append(encryptedLetter)\n        }\n    }\n    return\
    \ String(encryptedArr)", "    var encryptedString = \"\"\n    for letter in s\
    \ {\n        encryptedString += String(Character(UnicodeScalar(UInt8(letter.asciiValue!\
    \ + 32))!))\n    }\n    return encryptedString", "    var encryptedString = \"\
    \"\n    for character in s {\n        let unicodeScalar = character.unicodeScalars.first!.value\n\
    \        if unicodeScalar >= 97 && unicodeScalar <= 119 {\n            encryptedString.append(String(UnicodeScalar(unicodeScalar\
    \ + 3)!))\n        } else if unicodeScalar >= 120 && unicodeScalar <= 122 {\n\
    \            encryptedString.append(String(UnicodeScalar(unicodeScalar - 23)!))\n\
    \        } else {\n            encryptedString.append(String(UnicodeScalar(unicodeScalar)!))\n\
    \        }\n    }\n    return encryptedString", "    let rot = \"abcdefghijklmnopqrstuvwxyz\"\
    .rotate(shift: s.count*2)\n    let a = \"abcdefghijklmnopqrstuvwxyz\"\n    var\
    \ res = \"\"\n    for letter in s {\n        let i = a.index(of: letter)!\n  \
    \      res.append(rot[i])\n    }\n    return res", "    let lowercase = Array(\"\
    abcdefghijklmnopqrstuvwxyz\")\n    let uppercase = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    var encrypted = \"\"\n    for c in s {\n        if let lowerIndex = lowercase.firstIndex(of:\
    \ c) {\n            encrypted.append(lowercase[(lowerIndex + 2) % 26])\n     \
    \   } else if let upperIndex = uppercase.firstIndex(of: c) {\n            encrypted.append(uppercase[(upperIndex\
    \ + 2) % 26])\n        } else {\n            encrypted.append(c)\n        }\n\
    \    }\n    return encrypted", "    \n    var encryptedString = \"\"\n    let\
    \ alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    let newAlphabet = Array(\"\
    cdefghijklmnopqrstuvwxyzab\")\n    \n    for char in s {\n        let oldIndex\
    \ = alphabet.index(of: char)\n        let newChar = newAlphabet[oldIndex!]\n \
    \       encryptedString.append(newChar)\n    }\n    \n    return encryptedString",
  "    var alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let letters: [Character]\
    \ = Array(s)\n    var newString: String = \"\"\n    for i in letters {\n     \
    \   if let index = alphabet.firstIndex(of: i) {\n            var newIndex = (index\
    \ + (2 * 2)) % alphabet.count\n            newString.append(alphabet[newIndex])\n\
    \        }\n    }\n    return newString", '    return String(s.map { Character(UnicodeScalar(UInt8(ascii(char:
    $0)) + 2*2)!) })', "    var result = \"\"\n    for char in s {\n        switch\
    \ char {\n        case \"a\"...\"c\":\n            result.append(\"x\")\n    \
    \    case \"d\"...\"f\":\n            result.append(\"y\")\n        case \"g\"\
    ...\"i\":\n            result.append(\"z\")\n        case \"j\"...\"l\":\n   \
    \         result.append(\"a\")\n        case \"m\"...\"o\":\n            result.append(\"\
    b\")\n        case \"p\"...\"r\":\n            result.append(\"c\")\n        case\
    \ \"s\"...\"u\":\n            result.append(\"d\")\n        case \"v\"...\"x\"\
    :\n            result.append(\"e\")\n        case \"y\"...\"z\":\n           \
    \ result.append(\"f\")\n        default:\n            result.append(char)\n  \
    \      }\n    }\n    return result", "    var result: String = \"\"\n    var index:\
    \ Int = 0\n    for character in s {\n        if(index != 2){\n            if let\
    \ shiftIndex = letters.firstIndex(of: character) {\n                result.append(letters[(shiftIndex\
    \ + (index * 2)) % 26])\n            }\n        } else {\n            if let shiftIndex\
    \ = letters.firstIndex(of: character) {\n                result.append(letters[(shiftIndex\
    \ + (1 * 2)) % 26])\n            }\n        }\n        index += 1\n    }\n   \
    \ return result", "    var encodedString = \"\"\n    let lowercaseCharacters =\
    \ Array(\"abcdefghijklmnopqrstuvwxyz\")\n    let uppercaseCharacters = Array(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    for letter in s {\n        if let lowercaseIndex\
    \ = lowercaseCharacters.firstIndex(of: letter) {\n            encodedString.append(lowercaseCharacters[(lowercaseIndex\
    \ + 2) % 26])\n        } else if let uppercaseIndex = uppercaseCharacters.firstIndex(of:\
    \ letter) {\n            encodedString.append(uppercaseCharacters[(uppercaseIndex\
    \ + 2) % 26])\n        } else {\n            encodedString.append(letter)\n  \
    \      }\n    }\n    return encodedString", "    // This function takes in a string\
    \ and returns a string\n    // It returns a string because the string is encrypted\
    \ with the alphabet and then converted back to a string\n    // The alphabet is\
    \ rotated in a manner that each letter shifts down by two multiplied to two places\n\
    \    // For example:\n    //      >>> encrypt(s: \"hi\")\n    //      \"lm\"\n\
    \    //      >>> encrypt(s: \"asdfghjkl\")\n    //      \"ewhjklnop\"\n    //\
    \      >>> encrypt(s: \"gf\")\n    //      \"kj\"\n    //      >>> encrypt(s:\
    \ \"et\")\n    //      \"ix\"\n    // This function returns a string, not a character\n\
    \    var string = \"\"\n    for ch in s {\n        // This for loop takes in a\
    \ character from the string and checks it\n        // If the letter is a uppercase\
    \ letter, it is converted to lowercase so it is the same character\n        //\
    \ This if statement checks if it is a letter\n        if ch.isLetter {\n     \
    \       // This if statement checks if the letter is upper case\n            if\
    \ ch.isUppercase {\n                // This function converts the uppercase letter\
    \ to a lowercase letter\n                string.append(Character(String(ch).lowercased()))\n\
    \            } else {\n                // This code just appends the lowercase\
    \ letter to the string\n                string.append(ch)\n            }\n   \
    \     }\n    }\n    var converted = \"\"\n    for letter in string {\n       \
    \ // This for loop iterates through each character of the string\n        // This\
    \ if statement checks if the character is a letter\n        if letter.isLetter\
    \ {\n            // This if statement checks if the letter is the letter z\n \
    \           if letter == \"z\" {\n                // This if statement checks\
    \ if the letter is the letter a\n                if converted.last == \"a\" {\n\
    \                    // This if statement checks if the last letter of the converted\
    \ string is the letter b\n                    if converted.last == \"b\" {\n \
    \                       // If all three if statements are true, then this code\
    \ runs\n                        // This code just appends the letter c to the\
    \ string converted\n                        converted.append(\"c\")\n        \
    \            } else {\n                        // If this else statement runs,\
    \ then this if statement runs\n", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encryptedString = \"\"\n    for letter in s {\n        if let index\
    \ = alphabet.firstIndex(of: letter) {\n            var newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            if alphabet.distance(from: alphabet.startIndex, to:\
    \ newIndex) >= alphabet.count {\n                newIndex = alphabet.index(alphabet.startIndex,\
    \ offsetBy: (alphabet.distance(from: alphabet.startIndex, to: newIndex) % alphabet.count))\n\
    \            }\n            encryptedString.append(alphabet[newIndex])\n     \
    \   }\n    }\n    return encryptedString", "    var result = \"\"\n    for char\
    \ in s {\n        result += String(char.next())\n    }\n    return result", " \
    \   var encrypted = \"\"\n    for char in s {\n        if char == \"z\" {\n  \
    \          encrypted.append(\"b\")\n        } else if char == \"y\" {\n      \
    \      encrypted.append(\"a\")\n        } else {\n            encrypted.append(Character(UnicodeScalar(UInt8(char.asciiValue!\
    \ + 2))!))\n        }\n    }\n    return encrypted", "    \n    var result: String\
    \ = \"\"\n    let letters: [Character] = Array(s)\n    \n    for letter in letters\
    \ {\n        let ascii: Int = Int(letter.asciiValue!)\n        let asciiNew: Int\
    \ = (ascii + 2) % 26\n        let letterNew: Character = Character(UnicodeScalar(asciiNew\
    \ + Int((\"a\" as UnicodeScalar).value))!)\n        result.append(letterNew)\n\
    \    }\n    \n    return result", '    // your code here', "    var encryptedString\
    \ = \"\"\n    for char in s {\n        let charInt = Int(char.asciiValue!)\n \
    \       let newCharInt = charInt + 2 * 2\n        encryptedString.append(Character(UnicodeScalar(newCharInt)!))\n\
    \    }\n    return encryptedString", "    let currentAlpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    let newAlpha = \"cdefghijklmnopqrstuvwxyzab\"\n    var encryptedString =\
    \ \"\"\n    for char in s {\n        if let range = currentAlpha.range(of: char)\
    \ {\n            let index = range.lowerBound\n            let newChar = newAlpha[index]\n\
    \            encryptedString.append(newChar)\n        }\n    }\n    return encryptedString",
  "    // PUT YOUR CODE HERE\n    var result = \"\"\n    for letter in s {\n     \
    \   result += encryptLetter(letter: letter)\n    }\n    return result", "    var\
    \ array = Array(s)\n    var encryptedArray = [Character]()\n    for i in 0...array.count\
    \ - 1 {\n        switch array[i] {\n        case \"a\":\n            encryptedArray.append(\"\
    c\")\n        case \"b\":\n            encryptedArray.append(\"d\")\n        case\
    \ \"c\":\n            encryptedArray.append(\"e\")\n        case \"d\":\n    \
    \        encryptedArray.append(\"f\")\n        case \"e\":\n            encryptedArray.append(\"\
    g\")\n        case \"f\":\n            encryptedArray.append(\"h\")\n        case\
    \ \"g\":\n            encryptedArray.append(\"i\")\n        case \"h\":\n    \
    \        encryptedArray.append(\"j\")\n        case \"i\":\n            encryptedArray.append(\"\
    k\")\n        case \"j\":\n            encryptedArray.append(\"l\")\n        case\
    \ \"k\":\n            encryptedArray.append(\"m\")\n        case \"l\":\n    \
    \        encryptedArray.append(\"n\")\n        case \"m\":\n            encryptedArray.append(\"\
    o\")\n        case \"n\":\n            encryptedArray.append(\"p\")\n        case\
    \ \"o\":\n            encryptedArray.append(\"q\")\n        case \"p\":\n    \
    \        encryptedArray.append(\"r\")\n        case \"q\":\n            encryptedArray.append(\"\
    s\")\n        case \"r\":\n            encryptedArray.append(\"t\")\n        case\
    \ \"s\":\n            encryptedArray.append(\"u\")\n        case \"t\":\n    \
    \        encryptedArray.append(\"v\")\n        case \"u\":\n            encryptedArray.append(\"\
    w\")\n        case \"v\":\n            encryptedArray.append(\"x\")\n        case\
    \ \"w\":\n            encryptedArray.append(\"y\")\n        case \"x\":\n    \
    \        encryptedArray.append(\"z\")\n        case \"y\":\n            encryptedArray.append(\"\
    a\")\n        case \"z\":\n            encryptedArray.append(\"b\")\n        default:\n\
    \            break\n        }\n    }\n    return String(encryptedArray)", "  \
    \  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var indexMap = [Character:\
    \ Int]()\n    var encryptedString = \"\"\n    for i in 0..<alphabet.count {\n\
    \        indexMap[alphabet[alphabet.index(alphabet.startIndex, offsetBy: i)]]\
    \ = i\n    }\n    for char in s {\n        let index = indexMap[char]\n      \
    \  let newIndex = index! + 2 * 2\n        let newIndexMod = newIndex % alphabet.count\n\
    \        encryptedString.append(alphabet[alphabet.index(alphabet.startIndex, offsetBy:\
    \ newIndexMod)])\n    }\n    return encryptedString", "    var temp = \"\"\n \
    \   for i in s {\n        temp.append(encryption(m: i))\n    }\n    return temp",
  "    \n    return \"\"", "    var result = \"\"\n    for char in s {\n        result\
    \ += String(UnicodeScalar(UInt8(char.asciiValue! + 2*2)))\n    }\n    return result",
  "    let first = String(s.first ?? \"z\")\n    let second = String(s.last ?? \"\
    z\")\n    var lowerFirst = first.lowercased()\n    var lowerSecond = second.lowercased()\n\
    \    var encryptedFirst = \"\"\n    var encryptedSecond = \"\"\n    for _ in 1...2\
    \ {\n        if lowerFirst == \"z\" {\n            lowerFirst = \"a\"\n      \
    \  } else {\n            lowerFirst = String(UnicodeScalar(lowerFirst.unicodeScalars.first!.value\
    \ + 1)!)\n        }\n        if lowerSecond == \"z\" {\n            lowerSecond\
    \ = \"a\"\n        } else {\n            lowerSecond = String(UnicodeScalar(lowerSecond.unicodeScalars.first!.value\
    \ + 1)!)\n        }\n    }\n    for _ in 1...2 {\n        if lowerFirst == \"\
    z\" {\n            lowerFirst = \"a\"\n        } else {\n            lowerFirst\
    \ = String(UnicodeScalar(lowerFirst.unicodeScalars.first!.value + 1)!)\n     \
    \   }\n        if lowerSecond == \"z\" {\n            lowerSecond = \"a\"\n  \
    \      } else {\n            lowerSecond = String(UnicodeScalar(lowerSecond.unicodeScalars.first!.value\
    \ + 1)!)\n        }\n    }\n    if first == first.uppercased() {\n        encryptedFirst\
    \ = lowerFirst.uppercased()\n    } else {\n        encryptedFirst = lowerFirst\n\
    \    }\n    if second == second.uppercased() {\n        encryptedSecond = lowerSecond.uppercased()\n\
    \    } else {\n        encryptedSecond = lowerSecond\n    }\n    return encryptedFirst\
    \ + encryptedSecond", "    //var a = Array(s)\n    //var c = Array(s)\n    var\
    \ result: String = \"\"\n    for i in s.indices {\n        var charAt = s[i]\n\
    \        if (charAt >= \"a\" && charAt <= \"z\") {\n            var c = Int(charAt.asciiValue!)\n\
    \            c += 2 * 2\n            if (c > 122) {\n                c -= 26\n\
    \            }\n            charAt = Character(UnicodeScalar(c)!)\n        }\n\
    \        result.append(charAt)\n    }\n    return result", '    return s.encrypt()',
  "    var encrypted: String = \"\"\n    for (i,c) in s.enumerated() {\n        let\
    \ newChar = encryptOne(c: c)\n        if i == 0 {\n            encrypted = newChar\n\
    \        } else {\n            encrypted += newChar\n        }\n    }\n    return\
    \ encrypted", '    return s.rotate(by: 2*s.count)', "    var temp = \"\"\n   \
    \ let letters = s.lowercased()\n    for letter in letters {\n        var code\
    \ = letter.asciiValue\n        code = code! + 2 * 2\n        if code! > 122 {\n\
    \            code = code! - 26\n        }\n        temp.append(Character(UnicodeScalar(code!)!))\n\
    \    }\n    return temp", "    let chars = Array(s)\n    var newChars = chars\n\
    \    for i in 0..<newChars.count {\n        let char = chars[i]\n        let newChar\
    \ = (char - 96) * 2\n        newChars[i] = Int8(newChar)\n    }\n    return String(newChars)",
  "    var key = \"\"\n    for eachChar in s {\n        let asciiCode = eachChar.asciiValue!\n\
    \        if asciiCode == 122 {\n            key.append(\"b\")\n        } else\
    \ if asciiCode == 90 {\n            key.append(\"a\")\n        } else {\n    \
    \        let convertedChar = (asciiCode + 3)\n            let newChar = Character(UnicodeScalar(convertedChar)!)\n\
    \            key.append(newChar)\n        }\n    }\n    return key", '    return
    ""', "    let initialAlphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let rotatedAlphabet\
    \ = \"cdefghijklmnopqrstuvwxyzab\"\n    var encrypted = \"\"\n    for i in s {\n\
    \        let index = initialAlphabet.index(of: i)\n        encrypted += String(rotatedAlphabet[index!])\n\
    \    }\n    return encrypted", "    let lowercaseAlphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    let uppercaseAlphabet = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    var\
    \ encryptedString = \"\"\n    for letter in s {\n        if let index = lowercaseAlphabet.firstIndex(of:\
    \ letter) {\n            let newIndex = (index + 4) % 26\n            encryptedString.append(lowercaseAlphabet[newIndex])\n\
    \        } else if let index = uppercaseAlphabet.firstIndex(of: letter) {\n  \
    \          let newIndex = (index + 4) % 26\n            encryptedString.append(uppercaseAlphabet[newIndex])\n\
    \        } else {\n            encryptedString.append(letter)\n        }\n   \
    \ }\n    return encryptedString", '    return ""', '    // your code here', " \
    \ let sLower = s.lowercased()\n  var retStr = \"\"\n  for char in sLower {\n \
    \   switch char {\n    case \" \":\n      retStr += \" \"\n    case \"a\":\n \
    \     retStr += \"c\"\n    case \"b\":\n      retStr += \"d\"\n    case \"c\"\
    :\n      retStr += \"e\"\n    case \"d\":\n      retStr += \"f\"\n    case \"\
    e\":\n      retStr += \"g\"\n    case \"f\":\n      retStr += \"h\"\n    case\
    \ \"g\":\n      retStr += \"i\"\n    case \"h\":\n      retStr += \"j\"\n    case\
    \ \"i\":\n      retStr += \"k\"\n    case \"j\":\n      retStr += \"l\"\n    case\
    \ \"k\":\n      retStr += \"m\"\n    case \"l\":\n      retStr += \"n\"\n    case\
    \ \"m\":\n      retStr += \"o\"\n    case \"n\":\n      retStr += \"p\"\n    case\
    \ \"o\":\n      retStr += \"q\"\n    case \"p\":\n      retStr += \"r\"\n    case\
    \ \"q\":\n      retStr += \"s\"\n    case \"r\":\n      retStr += \"t\"\n    case\
    \ \"s\":\n      retStr += \"u\"\n    case \"t\":\n      retStr += \"v\"\n    case\
    \ \"u\":\n      retStr += \"w\"\n    case \"v\":\n      retStr += \"x\"\n    case\
    \ \"w\":\n      retStr += \"y\"\n    case \"x\":\n      retStr += \"z\"\n    case\
    \ \"y\":\n      retStr += \"a\"\n    case \"z\":\n      retStr += \"b\"\n    default:\n\
    \      retStr += \" \"\n    }\n  }\n  return retStr", '    return ""', "    var\
    \ alphabet: [Character] = [Character]()\n    for i in UnicodeScalar(\"a\").value...UnicodeScalar(\"\
    z\").value {\n        alphabet.append(Character(UnicodeScalar(i)!))\n    }\n \
    \   var newStr: String = \"\"\n    for char in s {\n        var index = alphabet.firstIndex(of:\
    \ char)\n        if index == nil {\n            newStr.append(char)\n        }\
    \ else {\n            index = (index! + 2 * 2) % alphabet.count\n            newStr.append(alphabet[index!])\n\
    \        }\n    }\n    return newStr", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encryptedString = \"\"\n    for letter in s {\n        var shiftedIndex\
    \ = alphabet.firstIndex(of: letter)\n        let shift = -2\n        var shiftedLetter\
    \ = letter\n        if let index = shiftedIndex {\n            var distance =\
    \ alphabet.distance(from: alphabet.startIndex, to: index)\n            distance\
    \ = distance + shift\n            while distance < 0 {\n                distance\
    \ = distance + alphabet.count\n            }\n            shiftedIndex = alphabet.index(alphabet.startIndex,\
    \ offsetBy: distance)\n            shiftedLetter = alphabet[shiftedIndex!]\n \
    \       }\n        encryptedString.append(shiftedLetter)\n    }\n    return encryptedString",
  "    let unicodeArray = s.unicodeScalars.map {$0.value}\n    var encryptedArray\
    \ = [UInt32]()\n    for i in unicodeArray {\n        encryptedArray.append(i +\
    \ 4)\n    }\n    let encryptedString = String(unicodeScalars: encryptedArray.map\
    \ { UnicodeScalar($0)! })\n    return encryptedString", '    return ""', "   \
    \ var res = \"\"\n    let maxIndex = s.count - 1\n    for i in s.indices {\n \
    \       let idx = s.index(i, offsetBy: (i.encodedOffset + (i.encodedOffset + 2)\
    \ * 2) % maxIndex + 1)\n        res.append(s[idx])\n    }\n    return res", " \
    \   var result = \"\"\n    for letter in s {\n        result += String(Character(UnicodeScalar(UInt8(letter.asciiValue!)\
    \ + 2*2)!))\n    }\n    return result", "    \n    var array = Array(s)\n    var\
    \ valueOfString = [Character]()\n    \n    for i in 0..<array.count {\n      \
    \  let value = array[i].asciiValue\n        valueOfString.append(Character(UnicodeScalar(value!\
    \ + 2)!))\n    }\n    \n    return String(valueOfString)", "    let alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for i in s {\n\
    \        let position = alphabet.firstIndex(of: i)\n        if let position =\
    \ position {\n            let index = alphabet.index(position, offsetBy: 2)\n\
    \            let encrypt = alphabet[index]\n            encrypted.append(encrypt)\n\
    \        }\n    }\n    return encrypted", "    let temp = s.filter { $0 != \"\
    \ \" }\n    let letters = Array(temp)\n    var string = \"\"\n    var index: Int\n\
    \    for letter in letters {\n        index = letters.firstIndex(of: letter)!\n\
    \        index = (index + (index * 2)) % 26\n        string += \"\\(Array(alphabet)[index])\"\
    \n    }\n    return string", "    var modifiedAlphabet = alphabetArray\n    var\
    \ index = 0\n    for _ in 1...2 {\n        modifiedAlphabet.insert(modifiedAlphabet.remove(at:\
    \ index), at: modifiedAlphabet.count)\n        index += 1\n    }\n    modifiedAlphabet.insert(modifiedAlphabet.remove(at:\
    \ index), at: modifiedAlphabet.count)\n    index += 1\n    var str = \"\"\n  \
    \  for char in s {\n        if let i = alphabet.firstIndex(of: char) {\n     \
    \       str += modifiedAlphabet[i]\n        }\n    }\n    return str", "    \n\
    \    let chars = [Character](s)\n    var encrypted = \"\"\n    \n    for c in\
    \ chars {\n        let unicode = c.unicodeScalars.first!.value\n        let encryptedChar\
    \ = UnicodeScalar(Int(unicode) + 2 * 2)\n        encrypted.append(Character(encryptedChar!))\n\
    \    }\n    \n    return encrypted", "  var plaintext = s\n  var ciphertext =\
    \ \"\"\n  while plaintext.count > 0 {\n    let range = plaintext.index(plaintext.startIndex,\
    \ offsetBy: 2)..<plaintext.endIndex\n    let substring = plaintext[range]\n  \
    \  plaintext = String(plaintext.prefix(2))\n    ciphertext += Array(substring).map\
    \ { encrypt(String($0)) }.joined()\n  }\n  return ciphertext", "    let decoded\
    \ = s.map { decryptChar(ch: $0) }\n    return decoded.joined()", "    // your\
    \ code here\n    return \"\"", "    // implement your code here\n    return \"\
    \"", "    //return String(s.map { String($0).unicodeScalars.first! + 2 * 2 })\n\
    \    // return String(s.map { String($0).unicodeScalars.first! + 2 * 2 })\n  \
    \  return String(s.map { $0 + 2 * 2 })", "    var result = \"\"\n    let uppercase\
    \ = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    let lowercase = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    for c in s {\n        if let cIndex = uppercase.firstIndex(of: c) {\n \
    \           result.append(uppercase[(cIndex + 2) % uppercase.count])\n       \
    \ } else if let cIndex = lowercase.firstIndex(of: c) {\n            result.append(lowercase[(cIndex\
    \ + 2) % lowercase.count])\n        } else {\n            result.append(c)\n \
    \       }\n    }\n    return result", "    let alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    var encrypted: String = \"\"\n    for letter in s {\n        if let index\
    \ = alphabet.firstIndex(of: letter) {\n            encrypted.append(alphabet[(index\
    \ + 2 * 2) % alphabet.count])\n        }\n    }\n    return encrypted", "    var\
    \ result = \"\"\n    for char in s {\n        let charIndex = char.asciiValue!\n\
    \        let newChar = charIndex + ( 2 * 2 )\n        let encryptedChar = UnicodeScalar(newChar)!\n\
    \        result += String(encryptedChar)\n    }\n    return result", '    return
    ""', "    return String(s.map { (c) -> Character in\n        if let i = unicodeScalars.firstIndex(of:\
    \ c) {\n            let newIndex = (i + 2 * 2) % unicodeScalars.count\n      \
    \      return unicodeScalars[newIndex]\n        }\n        return c\n    })",
  "    var encryptedString = \"\"\n    for char in s {\n        encryptedString +=\
    \ String(UnicodeScalar(UInt8(char.asciiValue!) + 2 * 2)!)\n    }\n    return encryptedString",
  "    //write your code here\n    var result = \"\"\n    for char in s {\n      \
    \  if char >= \"a\" && char <= \"z\" {\n            result += String(UnicodeScalar(UInt8(Int(char.asciiValue!)\
    \ + 2 * 2)))\n        } else if char >= \"A\" && char <= \"Z\" {\n           \
    \ result += String(UnicodeScalar(UInt8(Int(char.asciiValue!) + 2 * 2)))\n    \
    \    } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result", "    var encryptedString = \"\"\n    for letter in s {\n        switch\
    \ letter {\n        case \"a\"...\"w\":\n            encryptedString.append(Character(UnicodeScalar(Int(letter.asciiValue!)\
    \ + 2 * 2)!))\n        case \"x\"...\"z\":\n            encryptedString.append(Character(UnicodeScalar(Int(letter.asciiValue!)\
    \ - 24)!))\n        default:\n            encryptedString.append(letter)\n   \
    \     }\n    }\n    return encryptedString", "    \n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var newLetters = \"\"\n    var encrypted = \"\"\n    \n    // Create a new\
    \ alphabet, shifting down two multiplied by two places.\n    for char in letters\
    \ {\n        if let charIndex = letters.index(of: char) {\n            let newCharIndex\
    \ = letters.index(charIndex, offsetBy: (letters.count / 2) * 2)\n            newLetters.append(letters[newCharIndex])\n\
    \        }\n    }\n    \n    // Substitute the new letters into the original string.\n\
    \    for char in s {\n        if let charIndex = letters.index(of: char) {\n \
    \           encrypted.append(newLetters[charIndex])\n        }\n    }\n    \n\
    \    return encrypted", '    return ""', "    // This function does not work for\
    \ some unknown reason.\n    // The instructions on the website are vague and I\
    \ am \n    // unsure of the correct solution.\n    // I have attempted to solve\
    \ this problem by using\n    // a for loop that adds 2 to the value at each index\n\
    \    // of the string. The resultant character is then appended\n    // to the\
    \ returned string.\n    var n = \"\"\n    for i in s {\n        let index = s.index(of:\
    \ i)\n        if let index = index {\n            let index = s.distance(from:\
    \ s.startIndex, to: index)\n            let t = s[s.index(s.startIndex, offsetBy:\
    \ index)]\n            let v = Int(t.asciiValue!)\n            let c = v + 2\n\
    \            let d = Character(UnicodeScalar(c)!)\n            n.append(d)\n \
    \       }\n    }\n    return n", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encryptedString = \"\"\n    for c in s {\n        let ascii = c.asciiValue!\n\
    \        let asciiToAlphabet = Int(ascii) - 97\n        var shiftAscii = asciiToAlphabet\
    \ + 2\n        if shiftAscii >= 26 {\n            shiftAscii -= 26\n        }\n\
    \        let shiftAsciiToChar = Character(UnicodeScalar(shiftAscii + 97)!)\n \
    \       encryptedString.append(shiftAsciiToChar)\n    }\n    return encryptedString",
  "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let maxIndex = alphabet.count\
    \ - 1\n    var encryptedString = \"\"\n    for letter in s {\n        if let index\
    \ = alphabet.firstIndex(of: letter) {\n            let encryptedIndex = (index.encodedOffset\
    \ + 2) * 2\n            if encryptedIndex > maxIndex {\n                let wrappedIndex\
    \ = encryptedIndex - maxIndex - 1\n                encryptedString.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: wrappedIndex)])\n            } else {\n                encryptedString.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: encryptedIndex)])\n            }\n        }\n    }\n    return encryptedString"]
stop_tokens:
- "\n}"
