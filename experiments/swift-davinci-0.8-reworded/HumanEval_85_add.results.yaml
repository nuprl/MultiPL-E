language: swift
name: HumanEval_85_add
results:
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var total = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            total += lst[i]\n        }\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpl35lfu3d/tmpl35lfu3d.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad14df54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad14dc4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad14dc4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad14dc4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl35lfu3d                        0x000055f3d3bc2617 <unavailable> + 5655

    5    libc.so.6                          0x00002ad14e140460 __libc_start_main +
    245

    6    tmpl35lfu3d                        0x000055f3d3bc21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evens = 0\n    for i in stride(from: 0,\
    \ to: lst.count, by: 2) {\n        evens += lst[i]\n    }\n    return evens\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp8u3eif1x/tmp8u3eif1x.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fd1ae9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fd17e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fd17e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fd17df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8u3eif1x                        0x00005621a7dd75ba <unavailable> + 5562

    5    libc.so.6                          0x00002b5fd1cd5460 __libc_start_main +
    245

    6    tmp8u3eif1x                        0x00005621a7dd7229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var ans = 0\n    for i in stride(from: 0, to:\
    \ lst.count, by: 2) {\n        ans += lst[i]\n    }\n    return ans\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpbepb_pmn/tmpbepb_pmn.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2e8d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2e8a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2e8a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2e8a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbepb_pmn                        0x000055f61009e5ba <unavailable> + 5562

    5    libc.so.6                          0x00002ac2e8f7c460 __libc_start_main +
    245

    6    tmpbepb_pmn                        0x000055f61009e229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0 ..< lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp9jessag5/tmp9jessag5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e04920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e04617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e04617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e046167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jessag5                        0x0000558d9fe7a617 <unavailable> + 5655

    5    libc.so.6                          0x00002b6e04b0c460 __libc_start_main +
    245

    6    tmp9jessag5                        0x0000558d9fe7a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpt9m17ye1/tmpt9m17ye1.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7b733c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc7b42ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc7b42a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc7b4297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9m17ye1                        0x0000563b70462707 <unavailable> + 5895

    5    libc.so.6                          0x00002adc7b91f460 __libc_start_main +
    245

    6    tmpt9m17ye1                        0x0000563b70462299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (res, item)\
    \ in\n        let (idx, value) = item\n        return res + (idx % 2 == 0 ? value\
    \ : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp1d32x218/tmp1d32x218.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b057b204c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b057aefbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b057aefb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b057aefa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1d32x218                        0x000056094bb7851a <unavailable> + 5402

    5    libc.so.6                          0x00002b057b3f0460 __libc_start_main +
    245

    6    tmp1d32x218                        0x000056094bb78189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgrwr54ts/tmpgrwr54ts.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb0536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb022db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb022d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb022c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrwr54ts                        0x00005621d1892617 <unavailable> + 5655

    5    libc.so.6                          0x00002b0bb0722460 __libc_start_main +
    245

    6    tmpgrwr54ts                        0x00005621d18921a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, value) in lst.enumerated()\
    \ {\n        if i.isMultiple(of: 2) && value.isMultiple(of: 2) {\n           \
    \ sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp5nsvwk9s/tmp5nsvwk9s.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6b2447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6b213eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6b213e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6b213d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nsvwk9s                        0x000056476184b61a <unavailable> + 5658

    5    libc.so.6                          0x00002ae6b2633460 __libc_start_main +
    245

    6    tmp5nsvwk9s                        0x000056476184b289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter { $0 % 2 == 0 }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpbb7a73xt/tmpbb7a73xt.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51b3499c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51b3190b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51b3190988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51b318f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb7a73xt                        0x000055e3e222d4ca <unavailable> + 5322

    5    libc.so.6                          0x00002b51b3685460 __libc_start_main +
    245

    6    tmpbb7a73xt                        0x000055e3e222d139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index,num) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && num % 2 == 0 {\n            sum += num\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, value) in lst.enumerated()\
    \ {\n        if i.isMultiple(of: 2) && value.isMultiple(of: 2) {\n           \
    \ sum += value\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp5nsvwk9s/tmp5nsvwk9s.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6b2447c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6b213eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6b213e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6b213d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nsvwk9s                        0x000056476184b61a <unavailable> + 5658

    5    libc.so.6                          0x00002ae6b2633460 __libc_start_main +
    245

    6    tmp5nsvwk9s                        0x000056476184b289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, item) in lst.enumerated()\
    \ {\n        if i % 2 == 1 {\n            sum += item\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp9c24bw49/tmp9c24bw49.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b032a9aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b032a6a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b032a6a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b032a6a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9c24bw49                        0x0000558aaa295687 <unavailable> + 5767

    5    libc.so.6                          0x00002b032ab9a460 __libc_start_main +
    245

    6    tmp9c24bw49                        0x0000558aaa295219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n     \
    \   $0 + ($1.offset % 2 == 0 ? $1.element : 0)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp7hy52piu/tmp7hy52piu.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacb00f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacafde9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacafde9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacafde87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hy52piu                        0x0000556a4aa8b51a <unavailable> + 5402

    5    libc.so.6                          0x00002aacb02de460 __libc_start_main +
    245

    6    tmp7hy52piu                        0x0000556a4aa8b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 && $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 1..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpsxjgowup/tmpsxjgowup.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace8a86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace8a562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace8a562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace8a5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxjgowup                        0x000055b6d5e29617 <unavailable> + 5655

    5    libc.so.6                          0x00002ace8aa57460 __libc_start_main +
    245

    6    tmpsxjgowup                        0x000055b6d5e291a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for i in 0 ..< lst.count\
    \ {\n        if i % 2 == 1 {\n            result += lst[i]\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpzmy6u2ts/tmpzmy6u2ts.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5aab734c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5aab42bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5aab42b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5aab42a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmy6u2ts                        0x000055fb397cd617 <unavailable> + 5655

    5    libc.so.6                          0x00002b5aab920460 __libc_start_main +
    245

    6    tmpzmy6u2ts                        0x000055fb397cd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpt9m17ye1/tmpt9m17ye1.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7b733c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc7b42ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc7b42a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc7b4297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9m17ye1                        0x0000563b70462707 <unavailable> + 5895

    5    libc.so.6                          0x00002adc7b91f460 __libc_start_main +
    245

    6    tmpt9m17ye1                        0x0000563b70462299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter{ ($0 + 1) % 2 == 0 }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp6kizmaa0/tmp6kizmaa0.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab348e90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab348b87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab348b87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab348b867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6kizmaa0                        0x00005588fc0ca4ca <unavailable> + 5322

    5    libc.so.6                          0x00002ab34907c460 __libc_start_main +
    245

    6    tmp6kizmaa0                        0x00005588fc0ca139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var total = 0\n    for (idx, num) in lst.enumerated()\
    \ {\n        if idx % 2 == 1 && num % 2 == 0 {\n            total += num\n   \
    \     }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let n = lst.count\n    var sum = 0\n    for\
    \ i in 0..<n {\n        if i % 2 == 1 {\n            sum += lst[i]\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmppx7oald4/tmppx7oald4.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab44fb81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab44f878b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab44f878988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab44f8777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppx7oald4                        0x0000558555dc3617 <unavailable> + 5655

    5    libc.so.6                          0x00002ab44fd6d460 __libc_start_main +
    245

    6    tmppx7oald4                        0x0000558555dc31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for i in 0..<lst.count\
    \ {\n        if i % 2 == 1 {\n            result += lst[i]\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpcaeq69fi/tmpcaeq69fi.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7c0289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7bff80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7bff80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7bff7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcaeq69fi                        0x00005646d6582617 <unavailable> + 5655

    5    libc.so.6                          0x00002ad7c0475460 __libc_start_main +
    245

    6    tmpcaeq69fi                        0x00005646d65821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp62z6ferf/tmp62z6ferf.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac0640cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac06103b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac06103988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac061027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62z6ferf                        0x000055ea915a52fa <unavailable> + 4858

    5    libc.so.6                          0x00002aac065f8460 __libc_start_main +
    245

    6    tmp62z6ferf                        0x000055ea915a4f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, item) in lst.enumerated()\
    \ {\n        if i % 2 == 1 {\n            sum += item\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp9c24bw49/tmp9c24bw49.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b032a9aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b032a6a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b032a6a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b032a6a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9c24bw49                        0x0000558aaa295687 <unavailable> + 5767

    5    libc.so.6                          0x00002b032ab9a460 __libc_start_main +
    245

    6    tmp9c24bw49                        0x0000558aaa295219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var i = 0\n    var sum = 0\n    while i < lst.count\
    \ {\n        if lst[i] % 2 == 0 && i % 2 != 0 {\n            sum += lst[i]\n \
    \       }\n        i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset\
    \ % 2 == 1 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp06l767oy/tmp06l767oy.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3345cebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33459e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33459e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33459e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp06l767oy                        0x0000564dbad48707 <unavailable> + 5895

    5    libc.so.6                          0x00002b3345ed7460 __libc_start_main +
    245

    6    tmp06l767oy                        0x0000564dbad48299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for i in 1..<lst.count\
    \ {\n        if lst[i] % 2 == 0 {\n            result += lst[i]\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmplhof8yww/tmplhof8yww.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b566fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b566f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b566e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplhof8yww                        0x000055b0158ae617 <unavailable> + 5655

    5    libc.so.6                          0x00002b34b5b64460 __libc_start_main +
    245

    6    tmplhof8yww                        0x000055b0158ae1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    var result = 0\n    \n    for (index,\
    \ value) in lst.enumerated() {\n        if index % 2 != 0 && value % 2 == 0 {\n\
    \            result += value\n        }\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, number) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && number % 2 == 0 {\n            sum += number\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, element) in\
    \ lst.enumerated() {\n        if (index % 2 == 1) && (element % 2 == 0) {\n  \
    \          result += element\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { ($0.offset\
    \ + 1) % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpg15lngac/tmpg15lngac.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9db9577c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9db926eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9db926e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9db926d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg15lngac                        0x00005574087b3657 <unavailable> + 5719

    5    libc.so.6                          0x00002b9db9763460 __libc_start_main +
    245

    6    tmpg15lngac                        0x00005574087b31e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, number) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && number % 2 == 0 {\n            sum += number\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset\
    \ % 2 == 1 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpxnqk89pd/tmpxnqk89pd.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8af0e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8aedd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8aedd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8aedd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnqk89pd                        0x0000562d8cb58657 <unavailable> + 5719

    5    libc.so.6                          0x00002ad8af2cd460 __libc_start_main +
    245

    6    tmpxnqk89pd                        0x0000562d8cb581e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgrwr54ts/tmpgrwr54ts.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb0536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb022db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb022d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb022c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrwr54ts                        0x00005621d1892617 <unavailable> + 5655

    5    libc.so.6                          0x00002b0bb0722460 __libc_start_main +
    245

    6    tmpgrwr54ts                        0x00005621d18921a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (total,\
    \ data) in\n        total + (data.offset % 2 == 0 ? 0 : data.element)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpddqngfjt/tmpddqngfjt.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c7f418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c7f10fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c7f10f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c7f10e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddqngfjt                        0x0000561a3ad495f7 <unavailable> + 5623

    5    libc.so.6                          0x00002b4c7f604460 __libc_start_main +
    245

    6    tmpddqngfjt                        0x0000561a3ad49189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter { $0 % 2 == 0 }.filter {\
    \ lst.index(of: $0)! % 2 != 0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpyv4_fzb0/tmpyv4_fzb0.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add9e89ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add9e595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add9e595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add9e5947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv4_fzb0                        0x00005631dbb0a802 <unavailable> + 6146

    5    libc.so.6                          0x00002add9ea8a460 __libc_start_main +
    245

    6    tmpyv4_fzb0                        0x00005631dbb0a1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset\
    \ % 2 == 1 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpxnqk89pd/tmpxnqk89pd.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8af0e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8aedd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8aedd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8aedd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnqk89pd                        0x0000562d8cb58657 <unavailable> + 5719

    5    libc.so.6                          0x00002ad8af2cd460 __libc_start_main +
    245

    6    tmpxnqk89pd                        0x0000562d8cb581e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var count = 0\n    for (index, num) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && num % 2 == 0 {\n            count += num\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (idx, val) in lst.enumerated()\
    \ {\n        if idx % 2 == 1 && val % 2 == 0 {\n            sum += val\n     \
    \   }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp5bqkddsq/tmp5bqkddsq.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d2327fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d22f76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d22f76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d22f757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bqkddsq                        0x0000558bfd2b42fa <unavailable> + 4858

    5    libc.so.6                          0x00002b8d2346b460 __libc_start_main +
    245

    6    tmp5bqkddsq                        0x0000558bfd2b3f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  return lst.enumerated().filter { $0.offset %\
    \ 2 == 1 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpn442quz0/tmpn442quz0.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afacfc33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afacf92ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afacf92a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afacf9297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn442quz0                        0x0000559ded1be707 <unavailable> + 5895

    5    libc.so.6                          0x00002afacfe1f460 __libc_start_main +
    245

    6    tmpn442quz0                        0x0000559ded1be299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for index in lst.indices\
    \ where index % 2 != 0 {\n        result += lst[index]\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpeoev2qvo/tmpeoev2qvo.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f1791c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f1488b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f1488988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f14877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeoev2qvo                        0x00005581d080a647 <unavailable> + 5703

    5    libc.so.6                          0x00002b00f197d460 __libc_start_main +
    245

    6    tmpeoev2qvo                        0x00005581d080a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, i) in lst.enumerated()\
    \ {\n        if (index + 1) % 2 == 0 && i % 2 == 0 {\n            result += i\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (acc, curr)\
    \ in\n        return acc + (curr.element % 2 == 0 && curr.offset % 2 != 0 ? curr.element\
    \ : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0 ..< lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp9jessag5/tmp9jessag5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e04920c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e04617b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e04617988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e046167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jessag5                        0x0000558d9fe7a617 <unavailable> + 5655

    5    libc.so.6                          0x00002b6e04b0c460 __libc_start_main +
    245

    6    tmp9jessag5                        0x0000558d9fe7a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var res = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            res += value\n\
    \        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    // Your code here\n    var sum = 0\n\
    \    for (index, value) in lst.enumerated() {\n        if index % 2 != 0 && value\
    \ % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpqk0i33ob/tmpqk0i33ob.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17c21a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17c1e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17c1e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17c1e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0i33ob                        0x0000560ffaf86657 <unavailable> + 5719

    5    libc.so.6                          0x00002b17c238f460 __libc_start_main +
    245

    6    tmpqk0i33ob                        0x0000560ffaf861e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in stride(from: 0, to:\
    \ lst.count, by: 2) {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp9i3ddf7k/tmp9i3ddf7k.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9542105c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9541dfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9541dfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9541dfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9i3ddf7k                        0x000055bb0a19664a <unavailable> + 5706

    5    libc.so.6                          0x00002b95422f1460 __libc_start_main +
    245

    6    tmp9i3ddf7k                        0x000055bb0a1962b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    var acc = 0\n    for (i, n) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            acc += n\n        }\n\
    \    }\n    return acc\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in stride(from: 0, to:\
    \ lst.count, by: 2) {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp498mesay/tmp498mesay.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4827714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b482740bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b482740b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b482740a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp498mesay                        0x000055d49387a5ba <unavailable> + 5562

    5    libc.so.6                          0x00002b4827900460 __libc_start_main +
    245

    6    tmp498mesay                        0x000055d49387a229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 1..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpsxjgowup/tmpsxjgowup.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace8a86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace8a562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace8a562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace8a5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxjgowup                        0x000055b6d5e29617 <unavailable> + 5655

    5    libc.so.6                          0x00002ace8aa57460 __libc_start_main +
    245

    6    tmpsxjgowup                        0x000055b6d5e291a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var r = 0\n    for i in 1..<lst.count {\n \
    \       if i % 2 == 1 {\n            r += lst[i]\n        }\n    }\n    return\
    \ r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpizjvv_mn/tmpizjvv_mn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3dcbf65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3dcbc5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3dcbc5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3dcbc5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizjvv_mn                        0x0000564f32835617 <unavailable> + 5655

    5    libc.so.6                          0x00002b3dcc151460 __libc_start_main +
    245

    6    tmpizjvv_mn                        0x0000564f328351a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var total = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            total += lst[i]\n        }\n    }\n    return\
    \ total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpl35lfu3d/tmpl35lfu3d.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad14df54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad14dc4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad14dc4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad14dc4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl35lfu3d                        0x000055f3d3bc2617 <unavailable> + 5655

    5    libc.so.6                          0x00002ad14e140460 __libc_start_main +
    245

    6    tmpl35lfu3d                        0x000055f3d3bc21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n     \
    \   $0 + ( $1.offset % 2 == 0 ? $1.element : 0 )\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpr54w4t5v/tmpr54w4t5v.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13c9a6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13c9761b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13c9761988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13c97607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr54w4t5v                        0x000055ff97d9451a <unavailable> + 5402

    5    libc.so.6                          0x00002b13c9c56460 __libc_start_main +
    245

    6    tmpr54w4t5v                        0x000055ff97d94189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {$0 + ($1.0\
    \ % 2 == 0 ? $1.1 : 0)}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp4iagjzdj/tmp4iagjzdj.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f2ca18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f2c70fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f2c70f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f2c70e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4iagjzdj                        0x000055f6b921751a <unavailable> + 5402

    5    libc.so.6                          0x00002b9f2cc04460 __libc_start_main +
    245

    6    tmp4iagjzdj                        0x000055f6b9217189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if (i % 2 == 1) && (lst[i] % 2 == 0) {\n            sum += lst[i]\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index in 0...lst.count-1\
    \ {\n        if index % 2 != 0 {\n            sum += lst[index]\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp478bv6_h/tmp478bv6_h.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a51b21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a51818b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a51818988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a518177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp478bv6_h                        0x0000557d39c52617 <unavailable> + 5655

    5    libc.so.6                          0x00002b2a51d0d460 __libc_start_main +
    245

    6    tmp478bv6_h                        0x0000557d39c521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index in 0..<lst.count\
    \ {\n        let num = lst[index]\n        if index % 2 == 1 && num % 2 == 0 {\n\
    \            sum += num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var total = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 == 1 && value % 2 == 0 {\n            total += value\n\
    \        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, v) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var _sum = 0\n    for (i, e) in lst.enumerated()\
    \ {\n        if (i % 2 == 1) {\n            _sum += e\n        }\n    }\n    return\
    \ _sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp8alsn0nn/tmp8alsn0nn.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6d8223c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6d7f1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6d7f1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6d7f197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8alsn0nn                        0x000055b77ce9d687 <unavailable> + 5767

    5    libc.so.6                          0x00002ab6d840f460 __libc_start_main +
    245

    6    tmp8alsn0nn                        0x000055b77ce9d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    var sum = 0\n    \n    for (index, element)\
    \ in lst.enumerated() {\n        if index % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpteh6gex7/tmpteh6gex7.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49a5f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49a5c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49a5c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49a5c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpteh6gex7                        0x000055b8bd25d687 <unavailable> + 5767

    5    libc.so.6                          0x00002b49a614e460 __libc_start_main +
    245

    6    tmpteh6gex7                        0x000055b8bd25d219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (acc, pair)\
    \ in\n        if pair.offset % 2 == 1 && pair.element % 2 == 0 {\n           \
    \ return acc + pair.element\n        }\n        return acc\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let odds = lst.filter { $0 % 2 == 1 }\n   \
    \ return odds.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpcgeytqw7/tmpcgeytqw7.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6357ab4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63577abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63577ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63577aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgeytqw7                        0x0000556605a124ca <unavailable> + 5322

    5    libc.so.6                          0x00002b6357ca0460 __libc_start_main +
    245

    6    tmpcgeytqw7                        0x0000556605a12139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in stride(from: 0, to:\
    \ lst.count, by: 2) {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp9i3ddf7k/tmp9i3ddf7k.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9542105c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9541dfcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9541dfc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9541dfb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9i3ddf7k                        0x000055bb0a19664a <unavailable> + 5706

    5    libc.so.6                          0x00002b95422f1460 __libc_start_main +
    245

    6    tmp9i3ddf7k                        0x000055bb0a1962b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, v) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpqk0i33ob/tmpqk0i33ob.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17c21a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17c1e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17c1e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17c1e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0i33ob                        0x0000560ffaf86657 <unavailable> + 5719

    5    libc.so.6                          0x00002b17c238f460 __libc_start_main +
    245

    6    tmpqk0i33ob                        0x0000560ffaf861e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if (index % 2 != 0) && (value % 2 == 0) {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let evens = lst.enumerated().filter { $0.offset\
    \ % 2 == 1 && $0.element % 2 == 0 }\n    return evens.reduce(0) { $0 + $1.element\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    // \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\
    \U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\U0001F4A5\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: SyntaxError
  stderr: '/tmp/tmpqjv7uz3b.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, elm) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && elm % 2 == 0 {\n            sum += elm\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n     \
    \   $0 + (0 == $1.offset % 2 ? $1.element : 0)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmpdc9aid_v/tmpdc9aid_v.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13a1e9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13a1b96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13a1b96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13a1b957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdc9aid_v                        0x0000564e8fb5751a <unavailable> + 5402

    5    libc.so.6                          0x00002b13a208b460 __libc_start_main +
    245

    6    tmpdc9aid_v                        0x0000564e8fb57189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, num) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && num % 2 == 0 {\n            sum += num\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    // write your code here.\n    var sum = 0\n\
    \    for (index, element) in lst.enumerated() {\n        if (index % 2 == 1) {\n\
    \            sum += element\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpktosrctu/tmpktosrctu.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95989b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95986a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95986a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95986a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktosrctu                        0x000055c6d56ca687 <unavailable> + 5767

    5    libc.so.6                          0x00002b9598b9e460 __libc_start_main +
    245

    6    tmpktosrctu                        0x000055c6d56ca219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let evens = lst.filter{$0 % 2 == 0}\n    let\
    \ odds = evens.filter{$0 % 2 != 0}\n    let sum = odds.reduce(0){$0 + $1}\n  \
    \  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp0c7jjolq/tmp0c7jjolq.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60385d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60382cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60382cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60382ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0c7jjolq                        0x0000563be93bb4ca <unavailable> + 5322

    5    libc.so.6                          0x00002b60387c0460 __libc_start_main +
    245

    6    tmp0c7jjolq                        0x0000563be93bb139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpqk0i33ob/tmpqk0i33ob.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17c21a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17c1e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17c1e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17c1e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0i33ob                        0x0000560ffaf86657 <unavailable> + 5719

    5    libc.so.6                          0x00002b17c238f460 __libc_start_main +
    245

    6    tmpqk0i33ob                        0x0000560ffaf861e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (i, x) in lst.enumerated()\
    \ {\n        if (i % 2 != 0) && (x % 2 == 0) {\n            result += x\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpt9m17ye1/tmpt9m17ye1.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7b733c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc7b42ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc7b42a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc7b4297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9m17ye1                        0x0000563b70462707 <unavailable> + 5895

    5    libc.so.6                          0x00002adc7b91f460 __libc_start_main +
    245

    6    tmpt9m17ye1                        0x0000563b70462299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in stride(from: 0, to:\
    \ lst.count, by: 2) {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp498mesay/tmp498mesay.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4827714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b482740bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b482740b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b482740a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp498mesay                        0x000055d49387a5ba <unavailable> + 5562

    5    libc.so.6                          0x00002b4827900460 __libc_start_main +
    245

    6    tmp498mesay                        0x000055d49387a229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { accum,\
    \ x in\n        if x.offset % 2 == 1 && x.element % 2 == 0 {\n            return\
    \ accum + x.element\n        }\n        return accum\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index in 1..<lst.count\
    \ {\n        if index % 2 != 0 {\n            sum += lst[index]\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpn8a14yj_/tmpn8a14yj_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba218be7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2188deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2188de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2188dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8a14yj_                        0x0000559de3c98617 <unavailable> + 5655

    5    libc.so.6                          0x00002ba218dd3460 __libc_start_main +
    245

    6    tmpn8a14yj_                        0x0000559de3c981a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter({$0.offset %\
    \ 2 == 1}).map({$0.element}).reduce(0, {$0 + $1})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmppupie36u/tmppupie36u.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5702f59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5702c50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5702c50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5702c4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppupie36u                        0x0000563850c7c707 <unavailable> + 5895

    5    libc.so.6                          0x00002b5703145460 __libc_start_main +
    245

    6    tmppupie36u                        0x0000563850c7c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    var sum = 0\n    \n    for (index, value)\
    \ in lst.enumerated() {\n        if (index + 1) % 2 != 0 && value % 2 == 0 {\n\
    \            sum += value\n        }\n    }\n    \n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmplk64nj02/tmplk64nj02.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac311b4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac311845b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac311845988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3118447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplk64nj02                        0x0000559a382e15aa <unavailable> + 5546

    5    libc.so.6                          0x00002ac311d3a460 __libc_start_main +
    245

    6    tmplk64nj02                        0x0000559a382e1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgrwr54ts/tmpgrwr54ts.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb0536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb022db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb022d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb022c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrwr54ts                        0x00005621d1892617 <unavailable> + 5655

    5    libc.so.6                          0x00002b0bb0722460 __libc_start_main +
    245

    6    tmpgrwr54ts                        0x00005621d18921a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.offset\
    \ % 2 == 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfknkipq6/tmpfknkipq6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b621135dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6211054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6211054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62110537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfknkipq6                        0x000055ff6862651a <unavailable> + 5402

    5    libc.so.6                          0x00002b6211549460 __libc_start_main +
    245

    6    tmpfknkipq6                        0x000055ff68626189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.offset\
    \ % 2 == 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpfknkipq6/tmpfknkipq6.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b621135dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6211054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6211054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62110537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfknkipq6                        0x000055ff6862651a <unavailable> + 5402

    5    libc.so.6                          0x00002b6211549460 __libc_start_main +
    245

    6    tmpfknkipq6                        0x000055ff68626189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var evenSum = 0\n    for (i, num) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && num % 2 == 0 {\n            evenSum += num\n   \
    \     }\n    }\n    return evenSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 1..<lst.count {\n\
    \        if i % 2 != 0 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp0y7vh89l/tmp0y7vh89l.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b266b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b263aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b263aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b263a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0y7vh89l                        0x0000557041f4a617 <unavailable> + 5655

    5    libc.so.6                          0x00002b2b2689f460 __libc_start_main +
    245

    6    tmp0y7vh89l                        0x0000557041f4a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, v) in lst.enumerated()\
    \ {\n        if (i % 2 == 1) && (v % 2 == 0) {\n            sum += v\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var res = 0\n    for i in stride(from: 0, to:\
    \ lst.count, by: 2) {\n        res += lst[i]\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp6r_1fbpp/tmp6r_1fbpp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f78518c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f7820fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f7820f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f7820e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6r_1fbpp                        0x000055f37feda5ba <unavailable> + 5562

    5    libc.so.6                          0x00002b8f78704460 __libc_start_main +
    245

    6    tmp6r_1fbpp                        0x000055f37feda229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, i) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && i % 2 == 0 {\n            sum += i\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, n) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && n % 2 == 0 {\n            sum += n\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in stride(from: 0, to:\
    \ lst.count, by: 2) {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp498mesay/tmp498mesay.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4827714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b482740bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b482740b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b482740a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp498mesay                        0x000055d49387a5ba <unavailable> + 5562

    5    libc.so.6                          0x00002b4827900460 __libc_start_main +
    245

    6    tmp498mesay                        0x000055d49387a229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp7n5wfylw/tmp7n5wfylw.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdd04b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdd01aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdd01aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdd01a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7n5wfylw                        0x0000556cce0e92fa <unavailable> + 4858

    5    libc.so.6                          0x00002acdd069f460 __libc_start_main +
    245

    6    tmp7n5wfylw                        0x0000556cce0e8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, item) in lst.enumerated()\
    \ {\n        if i % 2 == 1 {\n            sum += item\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp9c24bw49/tmp9c24bw49.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b032a9aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b032a6a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b032a6a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b032a6a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9c24bw49                        0x0000558aaa295687 <unavailable> + 5767

    5    libc.so.6                          0x00002b032ab9a460 __libc_start_main +
    245

    6    tmp9c24bw49                        0x0000558aaa295219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013707
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp7n5wfylw/tmp7n5wfylw.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdd04b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdd01aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdd01aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdd01a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7n5wfylw                        0x0000556cce0e92fa <unavailable> + 4858

    5    libc.so.6                          0x00002acdd069f460 __libc_start_main +
    245

    6    tmp7n5wfylw                        0x0000556cce0e8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, elem) in lst.enumerated()\
    \ {\n        if i % 2 == 1 {\n            sum += elem\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpkh48f_b0/tmpkh48f_b0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d01862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d01559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d01559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d015587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkh48f_b0                        0x0000560ed15d5687 <unavailable> + 5767

    5    libc.so.6                          0x00002b7d01a4e460 __libc_start_main +
    245

    6    tmpkh48f_b0                        0x0000560ed15d5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, element) in\
    \ lst.enumerated() {\n        if index % 2 != 0 && element % 2 == 0 {\n      \
    \      result += element\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter { $0 % 2 == 0 }.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpbb7a73xt/tmpbb7a73xt.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51b3499c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51b3190b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51b3190988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51b318f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb7a73xt                        0x000055e3e222d4ca <unavailable> + 5322

    5    libc.so.6                          0x00002b51b3685460 __libc_start_main +
    245

    6    tmpbb7a73xt                        0x000055e3e222d139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in stride(from: 0, to:\
    \ lst.count, by: 2) {\n        sum += lst[i]\n    }\n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp498mesay/tmp498mesay.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4827714c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b482740bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b482740b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b482740a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp498mesay                        0x000055d49387a5ba <unavailable> + 5562

    5    libc.so.6                          0x00002b4827900460 __libc_start_main +
    245

    6    tmp498mesay                        0x000055d49387a229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    var sum: Int = 0\n    \n    for (index,\
    \ value) in lst.enumerated() {\n        if index % 2 != 0 && value % 2 == 0 {\n\
    \            sum += value\n        }\n    }\n    \n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (i, v) in lst.enumerated()\
    \ {\n        if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    // your code here\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp7n5wfylw/tmp7n5wfylw.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdd04b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdd01aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdd01aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdd01a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7n5wfylw                        0x0000556cce0e92fa <unavailable> + 4858

    5    libc.so.6                          0x00002acdd069f460 __libc_start_main +
    245

    6    tmp7n5wfylw                        0x0000556cce0e8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n     \
    \   $0 + (isEven($1.element) && !isEven($1.offset) ? $1.element : 0)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmp2pchck2q.swift:8:15: error: cannot find 'isEven' in scope\n   \
    \     $0 + (isEven($1.element) && !isEven($1.offset) ? $1.element : 0)\n     \
    \         ^~~~~~\n/tmp/tmp2pchck2q.swift:8:38: error: cannot find 'isEven' in\
    \ scope\n        $0 + (isEven($1.element) && !isEven($1.offset) ? $1.element :\
    \ 0)\n                                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let result = lst.enumerated().filter { (index,\
    \ value) in\n        return value % 2 == 0 && index % 2 != 0\n    }.map { (index,\
    \ value) in\n        return value\n    }.reduce(0, +)\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n     \
    \   $0 + ($1.offset % 2 == 0 ? $1.element : 0)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp7hy52piu/tmp7hy52piu.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacb00f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacafde9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacafde9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacafde87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hy52piu                        0x0000556a4aa8b51a <unavailable> + 5402

    5    libc.so.6                          0x00002aacb02de460 __libc_start_main +
    245

    6    tmp7hy52piu                        0x0000556a4aa8b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for index in 0..<lst.count\
    \ {\n        if index % 2 == 1 {\n            result += lst[index]\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpavewom9s/tmpavewom9s.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54d8ce1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54d89d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54d89d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54d89d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavewom9s                        0x000055f61cf87617 <unavailable> + 5655

    5    libc.so.6                          0x00002b54d8ecd460 __libc_start_main +
    245

    6    tmpavewom9s                        0x000055f61cf871a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    var sum = 0\n    \n    for (index, value)\
    \ in lst.enumerated() {\n        if index % 2 != 0 && value % 2 == 0 {\n     \
    \       sum += value\n        }\n    }\n    \n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        let isEven = lst[i] % 2 == 0\n        let isOdd = i % 2 == 1\n      \
    \  if isEven && isOdd {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 1..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpsxjgowup/tmpsxjgowup.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace8a86bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace8a562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace8a562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace8a5617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxjgowup                        0x000055b6d5e29617 <unavailable> + 5655

    5    libc.so.6                          0x00002ace8aa57460 __libc_start_main +
    245

    6    tmpsxjgowup                        0x000055b6d5e291a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index in 1..<lst.count\
    \ {\n        if index % 2 != 0 {\n            sum += lst[index]\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpn8a14yj_/tmpn8a14yj_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba218be7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2188deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2188de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2188dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8a14yj_                        0x0000559de3c98617 <unavailable> + 5655

    5    libc.so.6                          0x00002ba218dd3460 __libc_start_main +
    245

    6    tmpn8a14yj_                        0x0000559de3c981a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    var index = 0\n    for\
    \ num in lst {\n        if num % 2 == 0 && index % 2 != 0 {\n            result\
    \ += num\n        }\n        index += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + (1\
    \ & $1.offset > 0 ? $1.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpvjyetsnd/tmpvjyetsnd.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4486d37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4486a2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4486a2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4486a2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvjyetsnd                        0x000055b5cc7cc567 <unavailable> + 5479

    5    libc.so.6                          0x00002b4486f23460 __libc_start_main +
    245

    6    tmpvjyetsnd                        0x000055b5cc7cc0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if (i % 2 == 1) && (lst[i] % 2 == 0) {\n            sum += lst[i]\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n     \
    \   $0 + ($1.offset % 2 == 0 ? $1.element : 0)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp7hy52piu/tmp7hy52piu.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacb00f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacafde9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacafde9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacafde87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hy52piu                        0x0000556a4aa8b51a <unavailable> + 5402

    5    libc.so.6                          0x00002aacb02de460 __libc_start_main +
    245

    6    tmp7hy52piu                        0x0000556a4aa8b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpt9m17ye1/tmpt9m17ye1.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7b733c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc7b42ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc7b42a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc7b4297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9m17ye1                        0x0000563b70462707 <unavailable> + 5895

    5    libc.so.6                          0x00002adc7b91f460 __libc_start_main +
    245

    6    tmpt9m17ye1                        0x0000563b70462299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { result,\
    \ a in\n        if a.offset % 2 == 1 {\n            return result + a.element\n\
    \        }\n        return result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpge_e6ej0/tmpge_e6ej0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5763bb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57638abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57638ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57638aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpge_e6ej0                        0x00005650d0a155f7 <unavailable> + 5623

    5    libc.so.6                          0x00002b5763da0460 __libc_start_main +
    245

    6    tmpge_e6ej0                        0x00005650d0a15189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let evens = lst.filter({ $0 % 2 == 0 })\n \
    \   let odds = evens.enumerated().filter({ $0.offset % 2 != 0 }).map({ $0.element\
    \ })\n    return odds.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpnk0xd0tk/tmpnk0xd0tk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61f0e6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61f0b62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61f0b62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61f0b617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnk0xd0tk                        0x000056448eca37c7 <unavailable> + 6087

    5    libc.so.6                          0x00002b61f1057460 __libc_start_main +
    245

    6    tmpnk0xd0tk                        0x000056448eca3359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpkgqp2zdv/tmpkgqp2zdv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e4bd4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e4ba41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e4ba41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e4ba407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgqp2zdv                        0x0000558f959e42fa <unavailable> + 4858

    5    libc.so.6                          0x00002b2e4bf36460 __libc_start_main +
    245

    6    tmpkgqp2zdv                        0x0000558f959e3f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.map { $0.element }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpt9m17ye1/tmpt9m17ye1.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7b733c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc7b42ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc7b42a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc7b4297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt9m17ye1                        0x0000563b70462707 <unavailable> + 5895

    5    libc.so.6                          0x00002adc7b91f460 __libc_start_main +
    245

    6    tmpt9m17ye1                        0x0000563b70462299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if (i % 2 != 0) && (lst[i] % 2 == 0) {\n            sum += lst[i]\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var temp = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            temp += value\n\
    \        }\n    }\n    return temp\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index in 1..<lst.count\
    \ {\n        if index % 2 != 0 {\n            sum += lst[index]\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpn8a14yj_/tmpn8a14yj_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba218be7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2188deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2188de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2188dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8a14yj_                        0x0000559de3c98617 <unavailable> + 5655

    5    libc.so.6                          0x00002ba218dd3460 __libc_start_main +
    245

    6    tmpn8a14yj_                        0x0000559de3c981a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + ($1.0\
    \ % 2 == 0 ? $1.1 : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmptcy58hmy/tmptcy58hmy.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2680e9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2680b94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2680b94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2680b937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcy58hmy                        0x00005582520fa51a <unavailable> + 5402

    5    libc.so.6                          0x00002b2681089460 __libc_start_main +
    245

    6    tmptcy58hmy                        0x00005582520fa189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var value = 0\n    for (index, item) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && item % 2 == 0 {\n            value += item\n\
    \        }\n    }\n    return value\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (i, number) in lst.enumerated()\
    \ {\n        if i % 2 != 0 && number % 2 == 0 {\n            result += number\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, num) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && num % 2 == 0 {\n            sum += num\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset\
    \ % 2 == 1 }).reduce(0, { x, y in\n        x + y.element\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpnvu7h2b3/tmpnvu7h2b3.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5577339c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5577030b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5577030988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b557702f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnvu7h2b3                        0x000055b54a448657 <unavailable> + 5719

    5    libc.so.6                          0x00002b5577525460 __libc_start_main +
    245

    6    tmpnvu7h2b3                        0x000055b54a4481e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  //TODO: Implement the add function here\n  var\
    \ result: Int = 0\n  for i in 0..<lst.count {\n    if i % 2 == 1 {\n      result\
    \ += lst[i]\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpm0x1bknq/tmpm0x1bknq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53c1946c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53c163db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53c163d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53c163c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm0x1bknq                        0x000055a39b204617 <unavailable> + 5655

    5    libc.so.6                          0x00002b53c1b32460 __libc_start_main +
    245

    6    tmpm0x1bknq                        0x000055a39b2041a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for index in 0..<lst.count\
    \ {\n        if index % 2 == 1 {\n            sum += lst[index]\n        }\n \
    \   }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpmrerx65x/tmpmrerx65x.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af713d00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7139f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7139f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7139f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrerx65x                        0x000055c372639617 <unavailable> + 5655

    5    libc.so.6                          0x00002af713eec460 __libc_start_main +
    245

    6    tmpmrerx65x                        0x000055c3726391a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset\
    \ % 2 == 1 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpxnqk89pd/tmpxnqk89pd.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8af0e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8aedd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8aedd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8aedd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnqk89pd                        0x0000562d8cb58657 <unavailable> + 5719

    5    libc.so.6                          0x00002ad8af2cd460 __libc_start_main +
    245

    6    tmpxnqk89pd                        0x0000562d8cb581e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.reduce(0, {\n        if ($1 % 2\
    \ == 0 && lst.index(of: $1)! % 2 != 0) {\n            return $0 + $1\n       \
    \ } else {\n            return $0\n        }\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmpdsvzmcga/tmpdsvzmcga.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5f3bb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5f38a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5f38a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5f38a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsvzmcga                        0x0000556e53a37742 <unavailable> + 5954

    5    libc.so.6                          0x00002af5f3d9d460 __libc_start_main +
    245

    6    tmpdsvzmcga                        0x0000556e53a37129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, num) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && num % 2 == 0 {\n            sum += num\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if (index + 1) % 2 == 0 && value % 2 == 0 {\n            result +=\
    \ value\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    return lst.enumerated().reduce(0, {\n\
    \        if $1.offset % 2 == 1 {\n            return $0 + $1.element\n       \
    \ }\n        return $0\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpzntzavxu/tmpzntzavxu.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab01c4e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab01c1d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab01c1d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab01c1d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzntzavxu                        0x00005600984625f7 <unavailable> + 5623

    5    libc.so.6                          0x00002ab01c6cd460 __libc_start_main +
    245

    6    tmpzntzavxu                        0x0000560098462189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, number) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && number % 2 == 0 {\n            sum += number\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for i in stride(from: 0,\
    \ to: lst.count, by: 2) {\n        if lst[i] % 2 == 0 {\n            result +=\
    \ lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp2pflhii6/tmp2pflhii6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af09dd6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af09da61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af09da61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af09da607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pflhii6                        0x000055779640864a <unavailable> + 5706

    5    libc.so.6                          0x00002af09df56460 __libc_start_main +
    245

    6    tmp2pflhii6                        0x00005577964082b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter({ $0.isMultiple(of: 2) }).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmp7miu4gyw/tmp7miu4gyw.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386cdadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b386caa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b386caa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b386caa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7miu4gyw                        0x000055f63e21c53a <unavailable> + 5434

    5    libc.so.6                          0x00002b386cf99460 __libc_start_main +
    245

    6    tmp7miu4gyw                        0x000055f63e21c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmp_oh_edkr/tmp_oh_edkr.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54324e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54321dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54321da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54321d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oh_edkr                        0x0000560a166272fa <unavailable> + 4858

    5    libc.so.6                          0x00002b54326cf460 __libc_start_main +
    245

    6    tmp_oh_edkr                        0x0000560a16626f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if i % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgrwr54ts/tmpgrwr54ts.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb0536c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb022db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb022d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb022c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrwr54ts                        0x00005621d1892617 <unavailable> + 5655

    5    libc.so.6                          0x00002b0bb0722460 __libc_start_main +
    245

    6    tmpgrwr54ts                        0x00005621d18921a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, number) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && number % 2 == 0 {\n            sum += number\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let odds = lst.enumerated().compactMap {\n\
    \        $0.offset % 2 == 1 ? $0.element : nil\n    }\n    return odds.reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpyedgmy40/tmpyedgmy40.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace05bfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace058f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace058f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace058f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyedgmy40                        0x000055deba0f9667 <unavailable> + 5735

    5    libc.so.6                          0x00002ace05de7460 __libc_start_main +
    245

    6    tmpyedgmy40                        0x000055deba0f91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (acc, e)\
    \ in acc + (e.offset % 2 == 0 ? e.element : 0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: Exception
  stderr: 'tmpb3w9alor/tmpb3w9alor.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb090d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb08dcfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb08dcf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb08dce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3w9alor                        0x0000559755a9b51a <unavailable> + 5402

    5    libc.so.6                          0x00002aeb092c4460 __libc_start_main +
    245

    6    tmpb3w9alor                        0x0000559755a9b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    //var sum = 0\n    //var i = 0\n    //while\
    \ i < lst.count {\n    //    if lst[i] % 2 == 0 && i % 2 != 0 {\n    //      \
    \  sum += lst[i]\n    //    }\n    //    i += 1\n    //}\n    //return sum\n \
    \   return lst.enumerated().reduce(0) { (res, arg1) -> Int in\n        let (index,\
    \ element) = arg1\n        if element % 2 == 0 && index % 2 != 0 {\n         \
    \   return res + element\n        }\n        return res\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013618
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpqk0i33ob/tmpqk0i33ob.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17c21a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17c1e9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17c1e9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17c1e997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0i33ob                        0x0000560ffaf86657 <unavailable> + 5719

    5    libc.so.6                          0x00002b17c238f460 __libc_start_main +
    245

    6    tmpqk0i33ob                        0x0000560ffaf861e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  var result = 0\n  for (index, number) in lst.enumerated()\
    \ {\n    if number % 2 == 0 && index % 2 != 0 {\n      result += number\n    }\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp_we_ndlh/tmp_we_ndlh.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bc087ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bc0575b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bc0575988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bc05747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_we_ndlh                        0x0000560b943862fa <unavailable> + 4858

    5    libc.so.6                          0x00002b5bc0a6a460 __libc_start_main +
    245

    6    tmp_we_ndlh                        0x0000560b94385f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013618
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    var sum = 0\n    \n    for (index, element)\
    \ in lst.enumerated() {\n        if index % 2 != 0 && element % 2 == 0 {\n   \
    \         sum += element\n        }\n    }\n    \n    return sum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index,item) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && item % 2 == 0 {\n            result += item\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let even = lst.enumerated().filter { $0.offset\
    \ % 2 == 1 && $0.element % 2 == 0 }\n    return even.reduce(0) { $0 + $1.element\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var x = 0\n    for i in 0..<lst.count {\n \
    \       if i % 2 == 1 && lst[i] % 2 == 0 {\n            x += lst[i]\n        }\n\
    \    }\n    return x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter({$0 % 2 == 0}).reduce(0,\
    \ +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
    \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmppc6bgsu2/tmppc6bgsu2.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b910c12cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b910be23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b910be23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b910be227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppc6bgsu2                        0x000055ac4966f4ca <unavailable> + 5322

    5    libc.so.6                          0x00002b910c318460 __libc_start_main +
    245

    6    tmppc6bgsu2                        0x000055ac4966f139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, number) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && number % 2 == 0 {\n            sum += number\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $0 + (\
    \ $1.offset % 2 == 0 ? $1.element : 0 ) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmp5nwdqu63/tmp5nwdqu63.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e7a398c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e7a08fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e7a08f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e7a08e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5nwdqu63                        0x00005583259a451a <unavailable> + 5402

    5    libc.so.6                          0x00002b0e7a584460 __libc_start_main +
    245

    6    tmp5nwdqu63                        0x00005583259a4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var total = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            total += value\n\
    \        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0) { i, el in\
    \ i + (el.offset % 2 == 0 ? el.element : 0) }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: Exception
  stderr: 'tmpln5w52h8/tmpln5w52h8.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7f0151c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7efe48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7efe48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7efe477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpln5w52h8                        0x0000560b8f6a251a <unavailable> + 5402

    5    libc.so.6                          0x00002ab7f033d460 __libc_start_main +
    245

    6    tmpln5w52h8                        0x0000560b8f6a2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    \n    let odds = lst.enumerated().filter {\
    \ $0.offset % 2 == 1 }.map { $0.element }\n    return odds.filter { $0 % 2 ==\
    \ 0 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.filter({ (value, index) -> Bool\
    \ in return value % 2 == 0 && index % 2 != 0 }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: SyntaxError
  stderr: "/tmp/tmpp5zci2sl.swift:7:25: error: contextual closure type '(Int) throws\
    \ -> Bool' expects 1 argument, but 2 were used in closure body\n    return lst.filter({\
    \ (value, index) -> Bool in return value % 2 == 0 && index % 2 != 0 }).reduce(0,\
    \ +)\n                        ^\n"
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset\
    \ % 2 == 1 && $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013707
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, item) in lst.enumerated()\
    \ {\n        if (index + 1) % 2 != 0 && item % 2 == 0 {\n            sum += item\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpy6c03g9z/tmpy6c03g9z.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f1976dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f19464b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f19464988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f194637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy6c03g9z                        0x0000560fbe9c15aa <unavailable> + 5546

    5    libc.so.6                          0x00002b1f19959460 __libc_start_main +
    245

    6    tmpy6c03g9z                        0x0000560fbe9c1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n\
    \        if (i % 2 == 1) && (lst[i] % 2 == 0) {\n            sum += lst[i]\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013708
- exit_code: -4
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    let result = lst.enumerated().filter { $0.offset\
    \ % 2 != 0 }.map { $0.element }.reduce(0, +)\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpeqxrvohi/tmpeqxrvohi.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeabb80cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeabb503b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeabb503988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeabb5027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqxrvohi                        0x000055b9ab161707 <unavailable> + 5895

    5    libc.so.6                          0x00002aeabb9f8460 __libc_start_main +
    245

    6    tmpeqxrvohi                        0x000055b9ab161299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (idx, element) in lst.enumerated()\
    \ {\n        if idx % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
- exit_code: 1
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n  // Your code here\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: SyntaxError
  stderr: '/tmp/tmpnwaxn5y1.swift:8:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013709
- exit_code: 0
  program: "\n/// Given a non-empty array of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\n\
    func add(lst: [Int]) -> Int {\n    var sum = 0\n    for (index, item) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && item % 2 == 0 {\n            sum += item\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013709
