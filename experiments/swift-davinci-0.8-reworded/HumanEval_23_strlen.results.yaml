language: swift
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let buffer = Array(string.utf8)\n    var i = 0\n    while (i < buffer.count)\
    \ {\n        if (buffer[i] == 0) {\n            break\n        }\n        i +=\
    \ 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return count(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpyiljagz9.swift:8:12: error: cannot find 'count' in scope\n    return\
    \ count(string)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.utf8.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpqehg3l_m.swift:8:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  return string.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.utf8.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.utf8.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.utf8.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return count(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpyiljagz9.swift:8:12: error: cannot find 'count' in scope\n    return\
    \ count(string)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int(strlen(UnsafePointer<CChar>(string)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\"\
    ) == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp87m2cxz8.swift:8:23: error: missing argument label 'string:' in\
    \ call\n    return Int(strlen(UnsafePointer<CChar>(string)))\n               \
    \       ^\n                      string: \n/tmp/tmp87m2cxz8.swift:8:23: error:\
    \ cannot convert value of type 'UnsafePointer<CChar>' (aka 'UnsafePointer<Int8>')\
    \ to expected argument type 'String'\n    return Int(strlen(UnsafePointer<CChar>(string)))\n\
    \                      ^\n/tmp/tmp87m2cxz8.swift:8:23: warning: initialization\
    \ of 'UnsafePointer<CChar>' (aka 'UnsafePointer<Int8>') results in a dangling\
    \ pointer\n    return Int(strlen(UnsafePointer<CChar>(string)))\n            \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp87m2cxz8.swift:8:44: note: implicit\
    \ argument conversion from 'String' to 'UnsafePointer<CChar>' (aka 'UnsafePointer<Int8>')\
    \ produces a pointer valid only for the duration of the call to 'init(_:)'\n \
    \   return Int(strlen(UnsafePointer<CChar>(string)))\n                       \
    \                    ^~~~~~\n/tmp/tmp87m2cxz8.swift:8:44: note: use the 'withCString'\
    \ method on String in order to explicitly convert argument to pointer valid for\
    \ a defined scope\n    return Int(strlen(UnsafePointer<CChar>(string)))\n    \
    \                                       ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let cString = string.cString(using: .utf8)\n    return cString?.withUnsafeBufferPointer\
    \ {\n        return $0.baseAddress!.withMemoryRebound(to: CChar.self, capacity:\
    \ $0.count) {\n            return Int(strlen($0))\n        }\n    } ?? 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp98r7hckk.swift:8:26: error: value of type 'String' has no member\
    \ 'cString'\n    let cString = string.cString(using: .utf8)\n                \
    \  ~~~~~~ ^~~~~~~\n/tmp/tmp98r7hckk.swift:8:42: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    let cString = string.cString(using:\
    \ .utf8)\n                                        ~^~~~\n/tmp/tmp98r7hckk.swift:11:31:\
    \ error: missing argument label 'string:' in call\n            return Int(strlen($0))\n\
    \                              ^\n                              string: \n"
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int(string.utf8.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.utf8.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return count(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpyiljagz9.swift:8:12: error: cannot find 'count' in scope\n    return\
    \ count(string)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpqehg3l_m.swift:8:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  return string.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    var chars = 0\n    let charPointer = string\n    while !charPointer.isEmpty\
    \ {\n        chars += 1\n        string.removeFirst()\n    }\n    return chars\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strlen(string: \"\") == 0)\nassert(strlen(string:\
    \ \"x\") == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp7k2duzo5.swift:12:16: error: cannot use mutating member on immutable\
    \ value: 'string' is a 'let' constant\n        string.removeFirst()\n        ~~~~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpqehg3l_m.swift:8:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  return string.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return Int(strlen(string))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp6jlq334n.swift:8:23: error: missing argument label 'string:' in\
    \ call\n    return Int(strlen(string))\n                      ^\n            \
    \          string: \n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    var cnt = 0\n    for _ in string {\n        cnt += 1\n    }\n    return\
    \ cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\") ==\
    \ 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  string.utf8.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    var length = 0\n    for _ in string {\n        length += 1\n    }\n \
    \   return length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\"\
    ) == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpqehg3l_m.swift:8:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  return string.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpol5a0u79.swift:8:12: error: 'characters' is unavailable: Please\
    \ use String directly\n    string.characters.count\n           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpqehg3l_m.swift:8:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  return string.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return count(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpb6upn423.swift:8:10: error: cannot find 'count' in scope\n  return\
    \ count(string)\n         ^~~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    let cString = string.cString(using: .utf8)\n    return cString?.count\
    \ ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\") ==\
    \ 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmptxc60nae.swift:8:26: error: value of type 'String' has no member\
    \ 'cString'\n    let cString = string.cString(using: .utf8)\n                \
    \  ~~~~~~ ^~~~~~~\n/tmp/tmptxc60nae.swift:8:42: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    let cString = string.cString(using:\
    \ .utf8)\n                                        ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return count(string)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpyiljagz9.swift:8:12: error: cannot find 'count' in scope\n    return\
    \ count(string)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    var str = string\n    return str.withCString { p in\n        return Int(strlen(p))\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strlen(string: \"\") ==\
    \ 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpwyh_j078.swift:10:27: error: missing argument label 'string:' in\
    \ call\n        return Int(strlen(p))\n                          ^\n         \
    \                 string: \n/tmp/tmpwyh_j078.swift:10:27: error: cannot convert\
    \ value of type 'UnsafePointer<Int8>' to expected argument type 'String'\n   \
    \     return Int(strlen(p))\n                          ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpqehg3l_m.swift:8:17: error: 'characters' is unavailable: Please\
    \ use String directly\n  return string.characters.count\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.utf8.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: SyntaxError
  stderr: "/tmp/tmp11z0eio1.swift:8:10: error: 'characters' is unavailable: Please\
    \ use String directly\n  string.characters.count\n         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return String(string.characters.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\n\
    assert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpbtfc3qzp.swift:8:12: error: cannot convert return expression of\
    \ type 'String' to return type 'Int'\n    return String(string.characters.count)\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.lengthOfBytes(using: .utf8)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\")\
    \ == 1)\nassert(strlen(string: \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpcqa4dd8q.swift:8:19: error: value of type 'String' has no member\
    \ 'lengthOfBytes'\n    return string.lengthOfBytes(using: .utf8)\n           ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpcqa4dd8q.swift:8:41: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    return string.lengthOfBytes(using: .utf8)\n\
    \                                       ~^~~~\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 0
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n  return string.utf8.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strlen(string:\
    \ \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string: \"asdasnakj\"\
    ) == 9)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978557
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
- exit_code: 1
  program: "\n/// Return length of given string\n/// >>> strlen(string: \"\")\n///\
    \ 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int\
    \ {\n    return string.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strlen(string: \"\") == 0)\nassert(strlen(string: \"x\") == 1)\nassert(strlen(string:\
    \ \"asdasnakj\") == 9)"
  status: SyntaxError
  stderr: "/tmp/tmpa0ng_d2e.swift:8:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    return string.characters.count\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659978556
