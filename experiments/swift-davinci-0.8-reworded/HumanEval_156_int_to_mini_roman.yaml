name: HumanEval_156_int_to_mini_roman
language: swift
prompt: "\n/// Given a positive integer, obtain its roman numeral equivalent as a\
  \ string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n\
  /// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number:\
  \ 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\nfunc\
  \ int_to_mini_roman(number: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(int_to_mini_roman(number: 19) == \"xix\"\
  )\nassert(int_to_mini_roman(number: 152) == \"clii\")\nassert(int_to_mini_roman(number:\
  \ 251) == \"ccli\")\nassert(int_to_mini_roman(number: 426) == \"cdxxvi\")\nassert(int_to_mini_roman(number:\
  \ 500) == \"d\")\nassert(int_to_mini_roman(number: 1) == \"i\")\nassert(int_to_mini_roman(number:\
  \ 4) == \"iv\")\nassert(int_to_mini_roman(number: 43) == \"xliii\")\nassert(int_to_mini_roman(number:\
  \ 90) == \"xc\")\nassert(int_to_mini_roman(number: 94) == \"xciv\")\nassert(int_to_mini_roman(number:\
  \ 532) == \"dxxxii\")\nassert(int_to_mini_roman(number: 900) == \"cm\")\nassert(int_to_mini_roman(number:\
  \ 994) == \"cmxciv\")\nassert(int_to_mini_roman(number: 1000) == \"m\")"
completions: ["    var result = \"\"\n    var i = number\n    while i > 0 {\n    \
    \    if i > 900 {\n            result += \"cm\"\n            i -= 900\n      \
    \  } else if i > 500 {\n            result += \"d\"\n            i -= 500\n  \
    \      } else if i > 400 {\n            result += \"cd\"\n            i -= 400\n\
    \        } else if i > 100 {\n            result += \"c\"\n            i -= 100\n\
    \        } else if i > 90 {\n            result += \"xc\"\n            i -= 90\n\
    \        } else if i > 50 {\n            result += \"l\"\n            i -= 50\n\
    \        } else if i > 40 {\n            result += \"xl\"\n            i -= 40\n\
    \        } else if i > 10 {\n            result += \"x\"\n            i -= 10\n\
    \        } else if i > 9 {\n            result += \"ix\"\n            i -= 9\n\
    \        } else if i > 5 {\n            result += \"v\"\n            i -= 5\n\
    \        } else if i > 4 {\n            result += \"iv\"\n            i -= 4\n\
    \        } else if i > 1 {\n            result += \"i\"\n            i -= 1\n\
    \        }\n    }\n    return result", "    var str = \"\"\n    var i = number\n\
    \    let roman = [\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"]\n    var j\
    \ = 0\n    while i > 0 {\n        let curr = i % 10\n        i /= 10\n       \
    \ let roman1 = roman[j]\n        let roman5 = roman[j + 1]\n        let roman10\
    \ = roman[j + 2]\n        if curr == 9 {\n            str = \"\\(roman1)\\(roman10)\"\
    \ + str\n        } else if curr >= 5 {\n            str = \"\\(roman5)\" + String(repeating:\
    \ roman1, count: curr - 5) + str\n        } else if curr == 4 {\n            str\
    \ = \"\\(roman1)\\(roman5)\" + str\n        } else {\n            str = String(repeating:\
    \ roman1, count: curr) + str\n        }\n        j += 2\n    }\n    return str",
  "    var result = \"\"\n    if number == 0 {\n        return \"N\"\n    }\n    if\
    \ number >= 100 {\n        let value = number / 100\n        result += String(repeating:\
    \ \"C\", count: value)\n        let tail = number % 100\n        if tail > 0 {\n\
    \            result += int_to_mini_roman(number: tail)\n        }\n    } else\
    \ if number >= 10 {\n        let value = number / 10\n        if value == 4 {\n\
    \            result += \"XL\"\n        } else if value == 9 {\n            result\
    \ += \"XC\"\n        } else {\n            result += String(repeating: \"X\",\
    \ count: value)\n        }\n        let tail = number % 10\n        if tail >\
    \ 0 {\n            result += int_to_mini_roman(number: tail)\n        }\n    }\
    \ else {\n        if number == 4 {\n            result += \"IV\"\n        } else\
    \ if number == 9 {\n            result += \"IX\"\n        } else {\n         \
    \   result += String(repeating: \"I\", count: number)\n        }\n    }\n    return\
    \ result", "    if number < 1 || number > 1000 {\n        return \"invalid input\"\
    \n    }\n    var result = \"\"\n    let (base, _) = convert(number: number)\n\
    \    for (index, value) in base.enumerated() {\n        for _ in 0..<value {\n\
    \            result += mini_romans[index]\n        }\n    }\n    return result",
  "    var result = \"\"\n    var remainder = number\n    while remainder >= 100 {\n\
    \        result += \"c\"\n        remainder -= 100\n    }\n    if remainder >=\
    \ 90 {\n        result += \"xc\"\n        remainder -= 90\n    }\n    if remainder\
    \ >= 50 {\n        result += \"l\"\n        remainder -= 50\n    }\n    if remainder\
    \ >= 40 {\n        result += \"xl\"\n        remainder -= 40\n    }\n    while\
    \ remainder >= 10 {\n        result += \"x\"\n        remainder -= 10\n    }\n\
    \    if remainder >= 9 {\n        result += \"ix\"\n        remainder -= 9\n \
    \   }\n    if remainder >= 5 {\n        result += \"v\"\n        remainder -=\
    \ 5\n    }\n    if remainder >= 4 {\n        result += \"iv\"\n        remainder\
    \ -= 4\n    }\n    while remainder >= 1 {\n        result += \"i\"\n        remainder\
    \ -= 1\n    }\n    return result", "    var num = number\n    var result = \"\"\
    \n    while num > 0 {\n        if num >= 1000 {\n            result.append(\"\
    m\")\n            num -= 1000\n        } else if num >= 900 {\n            result.append(\"\
    cm\")\n            num -= 900\n        } else if num >= 500 {\n            result.append(\"\
    d\")\n            num -= 500\n        } else if num >= 400 {\n            result.append(\"\
    cd\")\n            num -= 400\n        } else if num >= 100 {\n            result.append(\"\
    c\")\n            num -= 100\n        } else if num >= 90 {\n            result.append(\"\
    xc\")\n            num -= 90\n        } else if num >= 50 {\n            result.append(\"\
    l\")\n            num -= 50\n        } else if num >= 40 {\n            result.append(\"\
    xl\")\n            num -= 40\n        } else if num >= 10 {\n            result.append(\"\
    x\")\n            num -= 10\n        } else if num >= 9 {\n            result.append(\"\
    ix\")\n            num -= 9\n        } else if num >= 5 {\n            result.append(\"\
    v\")\n            num -= 5\n        } else if num >= 4 {\n            result.append(\"\
    iv\")\n            num -= 4\n        } else if num >= 1 {\n            result.append(\"\
    i\")\n            num -= 1\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    var num = number\n    while num >= 1000 {\n        result += \"\
    m\"\n        num -= 1000\n    }\n    while num >= 900 {\n        result += \"\
    cm\"\n        num -= 900\n    }\n    while num >= 500 {\n        result += \"\
    d\"\n        num -= 500\n    }\n    while num >= 400 {\n        result += \"cd\"\
    \n        num -= 400\n    }\n    while num >= 100 {\n        result += \"c\"\n\
    \        num -= 100\n    }\n    while num >= 90 {\n        result += \"xc\"\n\
    \        num -= 90\n    }\n    while num >= 50 {\n        result += \"l\"\n  \
    \      num -= 50\n    }\n    while num >= 40 {\n        result += \"xl\"\n   \
    \     num -= 40\n    }\n    while num >= 10 {\n        result += \"x\"\n     \
    \   num -= 10\n    }\n    while num >= 9 {\n        result += \"ix\"\n       \
    \ num -= 9\n    }\n    while num >= 5 {\n        result += \"v\"\n        num\
    \ -= 5\n    }\n    while num >= 4 {\n        result += \"iv\"\n        num -=\
    \ 4\n    }\n    while num >= 1 {\n        result += \"i\"\n        num -= 1\n\
    \    }\n    return result", "    \n    let units = [\"\", \"i\", \"ii\", \"iii\"\
    , \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    let tens = [\"\", \"\
    x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    let\
    \ hundreds = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"\
    dccc\", \"cm\"]\n    let thousands = [\"\", \"m\", \"mm\", \"mmm\", \"mv\", \"\
    v\", \"vm\", \"vmm\", \"vmmm\", \"mx\"]\n    \n    if number >= 10000 {\n    \
    \    return \"number too large\"\n    }\n    \n    let first = thousands[number\
    \ / 1000]\n    let second = hundreds[(number % 1000) / 100]\n    let third = tens[(number\
    \ % 100) / 10]\n    let fourth = units[number % 10]\n    \n    return first +\
    \ second + third + fourth", "    var output = \"\"\n    let base = \"ivxlcdm\"\
    \n    var count = 0\n    var i = number\n    while i != 0 {\n        let digit\
    \ = i % 10\n        var symbol = \"\"\n        switch digit {\n        case 0...3:\n\
    \            symbol = String(repeating: base[base.index(base.startIndex, offsetBy:\
    \ count * 2)], count: digit)\n        case 4:\n            symbol = \"\\(base[base.index(base.startIndex,\
    \ offsetBy: count * 2)])\\(base[base.index(base.startIndex, offsetBy: count *\
    \ 2 + 1)])\"\n        case 5...8:\n            symbol = \"\\(base[base.index(base.startIndex,\
    \ offsetBy: count * 2 + 1)])\"\n            symbol += String(repeating: base[base.index(base.startIndex,\
    \ offsetBy: count * 2)], count: digit - 5)\n        case 9:\n            symbol\
    \ = \"\\(base[base.index(base.startIndex, offsetBy: count * 2)])\\(base[base.index(base.startIndex,\
    \ offsetBy: count * 2 + 2)])\"\n        default:\n            break\n        }\n\
    \        output = symbol + output\n        i /= 10\n        count += 1\n    }\n\
    \    return output", "    var answer = \"\"\n    let mappings = [\n        1000:\
    \ \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n  \
    \      100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\"\
    ,\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\"\
    ,\n        1: \"i\"\n    ]\n    for (val, roman) in mappings {\n        if number\
    \ == 0 {\n            break\n        }\n        let number_of_digits = number\
    \ / val\n        if number_of_digits > 0 {\n            answer += String(repeating:\
    \ roman, count: number_of_digits)\n            number -= val * number_of_digits\n\
    \        }\n    }\n    return answer", "    let roman_numerals: [Int: String]\
    \ = [\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"\
    ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90:\
    \ \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n  \
    \      900: \"cm\",\n        1000: \"m\"\n    ]\n    var num = number\n    var\
    \ result = \"\"\n    for (key, value) in roman_numerals.sorted(by: { $0.key >\
    \ $1.key }) {\n        while num >= key {\n            result += value\n     \
    \       num -= key\n        }\n    }\n    return result", "    var result = \"\
    \"\n    var num_to_convert = number\n    var index = 0\n    while num_to_convert\
    \ > 0 {\n        let current_numeral = numeral_values[index]\n        let current_number\
    \ = numeral_numbers[index]\n        if num_to_convert < current_number {\n   \
    \         index += 1\n        } else {\n            num_to_convert -= current_number\n\
    \            result += current_numeral\n        }\n    }\n    return result",
  "    let romans = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"\
    x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1]\n    var index = 0\n    var num = number\n    var\
    \ res = \"\"\n    while num > 0 {\n        if num - values[index] >= 0 {\n   \
    \         res += romans[index]\n            num -= values[index]\n        } else\
    \ {\n            index += 1\n        }\n    }\n    return res", "    let roman_list\
    \ = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    let roman_val = [1,\
    \ 5, 10, 50, 100, 500, 1000]\n    var num = number\n    var result = \"\"\n  \
    \  var i = roman_val.count - 1\n    while i >= 0 {\n        let val = roman_val[i]\n\
    \        let div = num / val\n        let mod = num % val\n        if div == 9\
    \ {\n            result += roman_list[i] + roman_list[i + 2]\n        } else if\
    \ div >= 5 {\n            result += roman_list[i + 1]\n            result += String(repeating:\
    \ roman_list[i], count: div - 5)\n        } else if div == 4 {\n            result\
    \ += roman_list[i] + roman_list[i + 1]\n        } else if div > 0 {\n        \
    \    result += String(repeating: roman_list[i], count: div)\n        }\n     \
    \   i -= 2\n        num = mod\n    }\n    return result", "    var result = \"\
    \"\n    var num = number\n    var rem = 0\n    if num / 1000 > 0 {\n        rem\
    \ = num / 1000\n        for _ in 1...rem {\n            result += \"m\"\n    \
    \    }\n        num = num % 1000\n    }\n    if num / 100 > 0 {\n        rem =\
    \ num / 100\n        if rem < 4 {\n            for _ in 1...rem {\n          \
    \      result += \"c\"\n            }\n        } else if rem == 4 {\n        \
    \    result += \"cd\"\n        } else if rem < 9 {\n            result += \"d\"\
    \n            for _ in 1...rem - 5 {\n                result += \"c\"\n      \
    \      }\n        } else {\n            result += \"cm\"\n        }\n        num\
    \ = num % 100\n    }\n    if num / 10 > 0 {\n        rem = num / 10\n        if\
    \ rem < 4 {\n            for _ in 1...rem {\n                result += \"x\"\n\
    \            }\n        } else if rem == 4 {\n            result += \"xl\"\n \
    \       } else if rem < 9 {\n            result += \"l\"\n            for _ in\
    \ 1...rem - 5 {\n                result += \"x\"\n            }\n        } else\
    \ {\n            result += \"xc\"\n        }\n        num = num % 10\n    }\n\
    \    if num > 0 {\n        if num < 4 {\n            for _ in 1...num {\n    \
    \            result += \"i\"\n            }\n        } else if num == 4 {\n  \
    \          result += \"iv\"\n        } else if num < 9 {\n            result +=\
    \ \"v\"\n            for _ in 1...num - 5 {\n                result += \"i\"\n\
    \            }\n        } else {\n            result += \"ix\"\n        }\n  \
    \  }\n    return result", "    let values = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var\
    \ result = \"\"\n    var n = number\n    for i in 0..<values.count {\n       \
    \ let v = values[i]\n        while n >= v {\n            result += roman_numerals[i]\n\
    \            n -= v\n        }\n    }\n    return result", "    var string = \"\
    \"\n    var n = number\n    while n > 0 {\n        if n > 1000 {\n           \
    \ string += \"m\"\n            n -= 1000\n        } else if n > 900 {\n      \
    \      string += \"cm\"\n            n -= 900\n        } else if n > 500 {\n \
    \           string += \"d\"\n            n -= 500\n        } else if n > 400 {\n\
    \            string += \"cd\"\n            n -= 400\n        } else if n > 100\
    \ {\n            string += \"c\"\n            n -= 100\n        } else if n >\
    \ 90 {\n            string += \"xc\"\n            n -= 90\n        } else if n\
    \ > 50 {\n            string += \"l\"\n            n -= 50\n        } else if\
    \ n > 40 {\n            string += \"xl\"\n            n -= 40\n        } else\
    \ if n > 10 {\n            string += \"x\"\n            n -= 10\n        } else\
    \ if n > 9 {\n            string += \"ix\"\n            n -= 9\n        } else\
    \ if n > 5 {\n            string += \"v\"\n            n -= 5\n        } else\
    \ if n > 4 {\n            string += \"iv\"\n            n -= 4\n        } else\
    \ if n > 1 {\n            string += \"i\"\n            n -= 1\n        }\n   \
    \ }\n    return string", "    let roman_numerals = [\"\", \"i\", \"ii\", \"iii\"\
    , \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    var result = \"\"\n \
    \   var num = number\n    while num > 0 {\n        let remainder = num % 10\n\
    \        result = roman_numerals[remainder] + result\n        num /= 10\n    }\n\
    \    return result", "    let nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1]\n    let romans = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\",\
    \ \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var result = \"\"\n\
    \    var number = number\n    for i in 0..<nums.count {\n        while number\
    \ >= nums[i] {\n            result += romans[i]\n            number -= nums[i]\n\
    \        }\n    }\n    return result", '    return "";', "    precondition(number\
    \ > 0, \"num must be a positive integer\")\n    precondition(number <= 1000, \"\
    num must be 1000 or less\")\n    var ret = \"\"\n    let digits = num_to_digits(number:\
    \ number)\n    for (index, digit) in digits.enumerated() {\n        let (int_str,\
    \ roman_str) = int_to_mini_roman_digit(digit: digit, pow10: digits.count - index\
    \ - 1)\n        ret += int_str\n        ret += roman_str\n    }\n    return ret",
  "    let symbols = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\",\
    \ \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var roman = \"\"\n    var x = number\n\
    \    for i in 0..<values.count {\n        let r = x / values[i]\n        for _\
    \ in 0..<r {\n            roman += symbols[i]\n        }\n        x -= r * values[i]\n\
    \    }\n    return roman", "    var ret = \"\"\n    var n = number\n    if n >=\
    \ 1000 {\n        ret += String(repeating: \"m\", count: n / 1000)\n        n\
    \ %= 1000\n    }\n    if n >= 900 {\n        ret += \"cm\"\n        n -= 900\n\
    \    }\n    if n >= 500 {\n        ret += \"d\"\n        n -= 500\n    }\n   \
    \ if n >= 400 {\n        ret += \"cd\"\n        n -= 400\n    }\n    if n >= 100\
    \ {\n        ret += String(repeating: \"c\", count: n / 100)\n        n %= 100\n\
    \    }\n    if n >= 90 {\n        ret += \"xc\"\n        n -= 90\n    }\n    if\
    \ n >= 50 {\n        ret += \"l\"\n        n -= 50\n    }\n    if n >= 40 {\n\
    \        ret += \"xl\"\n        n -= 40\n    }\n    if n >= 10 {\n        ret\
    \ += String(repeating: \"x\", count: n / 10)\n        n %= 10\n    }\n    if n\
    \ >= 9 {\n        ret += \"ix\"\n        n -= 9\n    }\n    if n >= 5 {\n    \
    \    ret += \"v\"\n        n -= 5\n    }\n    if n >= 4 {\n        ret += \"iv\"\
    \n        n -= 4\n    }\n    if n >= 1 {\n        ret += String(repeating: \"\
    i\", count: n)\n    }\n    return ret", '    return ""', "    var num = number\n\
    \    var result = \"\"\n    while num > 0 {\n        if num >= 1000 {\n      \
    \      result += \"m\"\n            num -= 1000\n        } else if num >= 900\
    \ {\n            result += \"cm\"\n            num -= 900\n        } else if num\
    \ >= 500 {\n            result += \"d\"\n            num -= 500\n        } else\
    \ if num >= 400 {\n            result += \"cd\"\n            num -= 400\n    \
    \    } else if num >= 100 {\n            result += \"c\"\n            num -= 100\n\
    \        } else if num >= 90 {\n            result += \"xc\"\n            num\
    \ -= 90\n        } else if num >= 50 {\n            result += \"l\"\n        \
    \    num -= 50\n        } else if num >= 40 {\n            result += \"xl\"\n\
    \            num -= 40\n        } else if num >= 10 {\n            result += \"\
    x\"\n            num -= 10\n        } else if num >= 9 {\n            result +=\
    \ \"ix\"\n            num -= 9\n        } else if num >= 5 {\n            result\
    \ += \"v\"\n            num -= 5\n        } else if num >= 4 {\n            result\
    \ += \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result", "    var\
    \ remainder = number\n    var roman = \"\"\n    while remainder > 0 {\n      \
    \  if remainder >= 1000 {\n            roman += \"m\"\n            remainder -=\
    \ 1000\n        } else if remainder >= 900 {\n            roman += \"cm\"\n  \
    \          remainder -= 900\n        } else if remainder >= 500 {\n          \
    \  roman += \"d\"\n            remainder -= 500\n        } else if remainder >=\
    \ 400 {\n            roman += \"cd\"\n            remainder -= 400\n        }\
    \ else if remainder >= 100 {\n            roman += \"c\"\n            remainder\
    \ -= 100\n        } else if remainder >= 90 {\n            roman += \"xc\"\n \
    \           remainder -= 90\n        } else if remainder >= 50 {\n           \
    \ roman += \"l\"\n            remainder -= 50\n        } else if remainder >=\
    \ 40 {\n            roman += \"xl\"\n            remainder -= 40\n        } else\
    \ if remainder >= 10 {\n            roman += \"x\"\n            remainder -= 10\n\
    \        } else if remainder >= 9 {\n            roman += \"ix\"\n           \
    \ remainder -= 9\n        } else if remainder >= 5 {\n            roman += \"\
    v\"\n            remainder -= 5\n        } else if remainder >= 4 {\n        \
    \    roman += \"iv\"\n            remainder -= 4\n        } else if remainder\
    \ >= 1 {\n            roman += \"i\"\n            remainder -= 1\n        }\n\
    \    }\n    return roman", "    precondition(number >= 1 && number <= 1000, \"\
    1 <= num <= 1000\")\n    var remainder = number\n    var str = \"\"\n    let mapping\
    \ = [\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n     \
    \   400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\"\
    ,\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"\
    v\",\n        4: \"iv\",\n        1: \"i\"\n    ]\n    for (key, value) in mapping\
    \ {\n        while remainder >= key {\n            str += value\n            remainder\
    \ -= key\n        }\n    }\n    return str", "    var result = \"\"\n    var num\
    \ = number\n    var i = 0\n    while num > 0 {\n        var k = num % 10\n   \
    \     num /= 10\n        while k > 0 {\n            result.insert(mini_roman_numerals[i],\
    \ at: result.startIndex)\n            k -= 1\n        }\n        i += 1\n    }\n\
    \    return result", "    var result = \"\"\n    var number = number\n    let\
    \ m = number / 1000\n    number = number % 1000\n    if m > 0 {\n        result\
    \ += String(repeating: \"m\", count: m)\n    }\n    let c = number / 100\n   \
    \ number = number % 100\n    if c > 0 {\n        if c == 9 {\n            result\
    \ += \"cm\"\n        } else if c == 4 {\n            result += \"cd\"\n      \
    \  } else {\n            result += String(repeating: \"c\", count: c / 5)\n  \
    \          result += String(repeating: \"d\", count: c % 5)\n        }\n    }\n\
    \    let x = number / 10\n    number = number % 10\n    if x > 0 {\n        if\
    \ x == 9 {\n            result += \"xc\"\n        } else if x == 4 {\n       \
    \     result += \"xl\"\n        } else {\n            result += String(repeating:\
    \ \"x\", count: x / 5)\n            result += String(repeating: \"l\", count:\
    \ x % 5)\n        }\n    }\n    if number > 0 {\n        if number == 9 {\n  \
    \          result += \"ix\"\n        } else if number == 4 {\n            result\
    \ += \"iv\"\n        } else {\n            result += String(repeating: \"i\",\
    \ count: number / 5)\n            result += String(repeating: \"v\", count: number\
    \ % 5)\n        }\n    }\n    return result", "    let numbers = [1, 5, 10, 50,\
    \ 100, 500, 1000]\n    let numerals = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\"\
    , \"m\"]\n    var result = String()\n    var number = number\n    var base_index\
    \ = 6\n    while number > 0 {\n        if number < numbers[base_index] {\n   \
    \         base_index -= 1\n        } else {\n            let numeral = numerals[base_index]\n\
    \            result += numeral\n            number -= numbers[base_index]\n  \
    \      }\n    }\n    return result", "    precondition(number > 0, \"number should\
    \ be positive\")\n    precondition(number <= 1000, \"number should be less than\
    \ or equal to 1000\")\n    return RomanNumeral.oneToThousand[number]!", "    var\
    \ digits = number.digits()\n    var numeral = \"\"\n    for (i, digit) in digits.enumerated()\
    \ {\n        numeral += mini_roman_digit(value: digit, place: digits.count - i\
    \ - 1)\n    }\n    return numeral", "    guard 1...1000 ~= number else {\n   \
    \     fatalError(\"number must be within 1..1000\")\n    }\n    var res = \"\"\
    \n    var num = number\n    while num > 0 {\n        if num >= 1000 {\n      \
    \      res += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n\
    \            res += \"cm\"\n            num -= 900\n        } else if num >= 500\
    \ {\n            res += \"d\"\n            num -= 500\n        } else if num >=\
    \ 400 {\n            res += \"cd\"\n            num -= 400\n        } else if\
    \ num >= 100 {\n            res += \"c\"\n            num -= 100\n        } else\
    \ if num >= 90 {\n            res += \"xc\"\n            num -= 90\n        }\
    \ else if num >= 50 {\n            res += \"l\"\n            num -= 50\n     \
    \   } else if num >= 40 {\n            res += \"xl\"\n            num -= 40\n\
    \        } else if num >= 10 {\n            res += \"x\"\n            num -= 10\n\
    \        } else if num >= 9 {\n            res += \"ix\"\n            num -= 9\n\
    \        } else if num >= 5 {\n            res += \"v\"\n            num -= 5\n\
    \        } else if num >= 4 {\n            res += \"iv\"\n            num -= 4\n\
    \        } else if num >= 1 {\n            res += \"i\"\n            num -= 1\n\
    \        }\n    }\n    return res", "    let numbers: [Int] = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let numerals: [String] = [\"m\",\
    \ \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"]\n    var result = \"\"\n    var n = number\n    while n > 0 {\n \
    \       for (index, value) in numbers.enumerated() {\n            if n >= value\
    \ {\n                result += numerals[index]\n                n -= value\n \
    \               break\n            }\n        }\n    }\n    return result", " \
    \   if number < 1 || number > 1000 {\n        fatalError(\"Invalid roman number\
    \ conversion; valid range is (1, 1000), instead got \\(number)\")\n    }\n   \
    \ var result = \"\"\n    var n = number\n    while n >= 500 {\n        result\
    \ += \"d\"\n        n -= 500\n    }\n    while n >= 100 {\n        result += \"\
    c\"\n        n -= 100\n    }\n    while n >= 50 {\n        result += \"l\"\n \
    \       n -= 50\n    }\n    while n >= 10 {\n        result += \"x\"\n       \
    \ n -= 10\n    }\n    while n >= 5 {\n        result += \"v\"\n        n -= 5\n\
    \    }\n    while n >= 1 {\n        result += \"i\"\n        n -= 1\n    }\n \
    \   return result", "    \n    guard (1...1000).contains(number) else {\n    \
    \    fatalError(\"Number must be between 1 and 1000, inclusive.\")\n    }\n  \
    \  \n    var result = \"\"\n    var remainder = number\n    \n    while remainder\
    \ > 0 {\n        switch remainder {\n        case (1...3):\n            result\
    \ += \"i\"\n            remainder -= 1\n        case (4):\n            result\
    \ += \"iv\"\n            remainder -= 4\n        case (5...8):\n            result\
    \ += \"v\"\n            remainder -= 5\n        case (9):\n            result\
    \ += \"ix\"\n            remainder -= 9\n        case (10...39):\n           \
    \ result += \"x\"\n            remainder -= 10\n        case (40...49):\n    \
    \        result += \"xl\"\n            remainder -= 40\n        case (50...89):\n\
    \            result += \"l\"\n            remainder -= 50\n        case (90...99):\n\
    \            result += \"xc\"\n            remainder -= 90\n        case (100...399):\n\
    \            result += \"c\"\n            remainder -= 100\n        case (400...499):\n\
    \            result += \"cd\"\n            remainder -= 400\n        case (500...899):\n\
    \            result += \"d\"\n            remainder -= 500\n        case (900...999):\n\
    \            result += \"cm\"\n            remainder -= 900\n        case (1000):\n\
    \            result += \"m\"\n            remainder -= 1000\n        default:\n\
    \            fatalError(\"Remainder is not between 1 and 1000.\")\n        }\n\
    \    }\n    \n    return result", "    var roman: String = \"\"\n    for d in\
    \ [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1] {\n        while number\
    \ >= d {\n            roman.append(number_to_mini_roman(number: d))\n        \
    \    number -= d\n        }\n    }\n    return roman", "    var digit = number\n\
    \    var result = \"\"\n    for (arabic, roman) in arabic_to_roman {\n       \
    \ let count = digit / arabic\n        digit -= count * arabic\n        for _ in\
    \ 0..<count {\n            result += roman\n        }\n    }\n    return result",
  '    return int_to_roman(number: number, minimal: true)', "    var miniRoman = \"\
    \"\n    while number > 0 {\n        switch number {\n        case 1000:\n    \
    \        miniRoman += \"m\"\n            number -= 1000\n        case 900:\n \
    \           miniRoman += \"cm\"\n            number -= 900\n        case 500:\n\
    \            miniRoman += \"d\"\n            number -= 500\n        case 400:\n\
    \            miniRoman += \"cd\"\n            number -= 400\n        case 100:\n\
    \            miniRoman += \"c\"\n            number -= 100\n        case 90:\n\
    \            miniRoman += \"xc\"\n            number -= 90\n        case 50:\n\
    \            miniRoman += \"l\"\n            number -= 50\n        case 40:\n\
    \            miniRoman += \"xl\"\n            number -= 40\n        case 10:\n\
    \            miniRoman += \"x\"\n            number -= 10\n        case 9:\n \
    \           miniRoman += \"ix\"\n            number -= 9\n        case 5:\n  \
    \          miniRoman += \"v\"\n            number -= 5\n        case 4:\n    \
    \        miniRoman += \"iv\"\n            number -= 4\n        case 1:\n     \
    \       miniRoman += \"i\"\n            number -= 1\n        default:\n      \
    \      break\n        }\n    }\n    return miniRoman", "    let numerals = [(\"\
    M\", 1000), (\"CM\", 900), (\"D\", 500), (\"CD\", 400), (\"C\", 100), (\"XC\"\
    , 90), (\"L\", 50), (\"XL\", 40), (\"X\", 10), (\"IX\", 9), (\"V\", 5), (\"IV\"\
    , 4), (\"I\", 1)]\n    var rest = number\n    var numeral = \"\"\n    for (symbol,\
    \ value) in numerals {\n        while rest >= value {\n            numeral +=\
    \ symbol\n            rest -= value\n        }\n    }\n    return numeral", " \
    \   // TODO: Complete this function!\n    return \"\"", "    var string = \"\"\
    \n    var remainder = number\n    while remainder > 0 {\n        if remainder\
    \ >= 1000 {\n            string += \"m\"\n            remainder -= 1000\n    \
    \    } else if remainder >= 900 {\n            string += \"cm\"\n            remainder\
    \ -= 900\n        } else if remainder >= 500 {\n            string += \"d\"\n\
    \            remainder -= 500\n        } else if remainder >= 400 {\n        \
    \    string += \"cd\"\n            remainder -= 400\n        } else if remainder\
    \ >= 100 {\n            string += \"c\"\n            remainder -= 100\n      \
    \  } else if remainder >= 90 {\n            string += \"xc\"\n            remainder\
    \ -= 90\n        } else if remainder >= 50 {\n            string += \"l\"\n  \
    \          remainder -= 50\n        } else if remainder >= 40 {\n            string\
    \ += \"xl\"\n            remainder -= 40\n        } else if remainder >= 10 {\n\
    \            string += \"x\"\n            remainder -= 10\n        } else if remainder\
    \ >= 9 {\n            string += \"ix\"\n            remainder -= 9\n        }\
    \ else if remainder >= 5 {\n            string += \"v\"\n            remainder\
    \ -= 5\n        } else if remainder >= 4 {\n            string += \"iv\"\n   \
    \         remainder -= 4\n        } else if remainder >= 1 {\n            string\
    \ += \"i\"\n            remainder -= 1\n        }\n    }\n    return string",
  "    let number_of_symbols = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\",\
    \ \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var result = \"\"\n    var\
    \ remaining = number\n    for (symbol, numeral) in zip(number_of_symbols, numerals)\
    \ {\n        while remaining >= symbol {\n            result += numeral\n    \
    \        remaining -= symbol\n        }\n    }\n    return result", "    let dict\
    \ = [\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4:\
    \ \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n      \
    \  8: \"viii\",\n        9: \"ix\",\n        10: \"x\",\n        20: \"xx\",\n\
    \        30: \"xxx\",\n        40: \"xl\",\n        50: \"l\",\n        60: \"\
    lx\",\n        70: \"lxx\",\n        80: \"lxxx\",\n        90: \"xc\",\n    \
    \    100: \"c\",\n        200: \"cc\",\n        300: \"ccc\",\n        400: \"\
    cd\",\n        500: \"d\",\n        600: \"dc\",\n        700: \"dcc\",\n    \
    \    800: \"dccc\",\n        900: \"cm\",\n        1000: \"m\",\n        2000:\
    \ \"mm\",\n        3000: \"mmm\",\n        4000: \"mv\",\n        5000: \"v\"\
    ,\n        6000: \"vm\",\n        7000: \"vmm\",\n        8000: \"vmmm\",\n  \
    \      9000: \"mx\",\n        10000: \"x\"\n    ]\n    var retval = \"\"\n   \
    \ var n = number\n    while n > 0 {\n        var divisor = 1\n        while divisor\
    \ < number {\n            divisor *= 10\n        }\n        let remainder = n\
    \ % divisor\n        n -= remainder\n        if let roman = dict[remainder] {\n\
    \            retval += roman\n        }\n    }\n    return retval", '    return
    number.romanize().lowercased()', "    var out = \"\"\n    for i in 0..<4 {\n \
    \       let pow10 = Int(pow(10.0, Double(i)))\n        let digit = number / pow10\
    \ % 10\n        if digit == 0 {\n            continue\n        }\n        let\
    \ base = digit * pow10\n        let roman = mini_roman_by_base[base]\n       \
    \ out += roman\n    }\n    return out", '    return int_to_roman(number: number,
    roman_symbols: MINI_ROMAN_SYMBOLS)', "    var result = \"\"\n    if number ==\
    \ 0 { return \"nulla\" }\n    if number >= 1000 {\n        let num1000 = number\
    \ / 1000\n        result.append(String(repeating: \"m\", count: num1000))\n  \
    \      number %= 1000\n    }\n    if number >= 900 {\n        result.append(\"\
    cm\")\n        number %= 900\n    }\n    if number >= 500 {\n        result.append(\"\
    d\")\n        number %= 500\n    }\n    if number >= 400 {\n        result.append(\"\
    cd\")\n        number %= 400\n    }\n    if number >= 100 {\n        let num100\
    \ = number / 100\n        result.append(String(repeating: \"c\", count: num100))\n\
    \        number %= 100\n    }\n    if number >= 90 {\n        result.append(\"\
    xc\")\n        number %= 90\n    }\n    if number >= 50 {\n        result.append(\"\
    l\")\n        number %= 50\n    }\n    if number >= 40 {\n        result.append(\"\
    xl\")\n        number %= 40\n    }\n    if number >= 10 {\n        let num10 =\
    \ number / 10\n        result.append(String(repeating: \"x\", count: num10))\n\
    \        number %= 10\n    }\n    if number >= 9 {\n        result.append(\"ix\"\
    )\n        number %= 9\n    }\n    if number >= 5 {\n        result.append(\"\
    v\")\n        number %= 5\n    }\n    if number >= 4 {\n        result.append(\"\
    iv\")\n        number %= 4\n    }\n    if number >= 1 {\n        result.append(String(repeating:\
    \ \"i\", count: number))\n    }\n    return result", "    var remain = number\n\
    \    var result = \"\"\n    let roman_map = [\n        1: \"i\",\n        4: \"\
    iv\",\n        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40:\
    \ \"xl\",\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n    \
    \    400: \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"\
    m\",\n    ]\n    let roman_map_keys = Array(roman_map.keys).sorted(by: >)\n  \
    \  for i in roman_map_keys {\n        while remain >= i {\n            result\
    \ += roman_map[i]!\n            remain -= i\n        }\n    }\n    return result",
  "    let RomanNumerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let ArabicNumerals = [1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var result = \"\"\n    var remaining_value\
    \ = number\n    for (index, roman) in RomanNumerals.enumerated() {\n        let\
    \ arabic = ArabicNumerals[index]\n        var temp = remaining_value / arabic\n\
    \        for _ in 0..<temp {\n            result += roman\n        }\n       \
    \ remaining_value %= arabic\n    }\n    return result", "    var result = \"\"\
    \n    var n = number\n    let dict = [\"0\": \"\", \"1\": \"i\", \"2\": \"ii\"\
    , \"3\": \"iii\", \"4\": \"iv\", \"5\": \"v\", \"6\": \"vi\", \"7\": \"vii\",\
    \ \"8\": \"viii\", \"9\": \"ix\"]\n    while n > 0 {\n        let lastDigit =\
    \ String(n % 10)\n        result = dict[lastDigit]! + result\n        n = n /\
    \ 10\n    }\n    return result", "    let romanNumerals: [(digit: Int, numeral:\
    \ String)] = [(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"), (100,\
    \ \"c\"), (90, \"xc\"), (50, \"l\"), (40, \"xl\"), (10, \"x\"), (9, \"ix\"), (5,\
    \ \"v\"), (4, \"iv\"), (1, \"i\")]\n    var result = \"\"\n    var remainder =\
    \ number\n    for (divisor, numerals) in romanNumerals {\n        result += String(repeating:\
    \ numerals, count: remainder / divisor)\n        remainder %= divisor\n    }\n\
    \    return result", "    var result = \"\"\n    var strNumber = String(number)\n\
    \    var digitLength = strNumber.characters.count\n    var digit = 1\n    while\
    \ digitLength != 0 {\n        let n = Int(String(strNumber.characters.last!))!\n\
    \        strNumber.remove(at: strNumber.index(before: strNumber.endIndex))\n \
    \       digitLength -= 1\n        if digit == 1 {\n            if n == 4 {\n \
    \               result = \"iv\" + result\n            } else if n == 9 {\n   \
    \             result = \"ix\" + result\n            } else {\n               \
    \ if n >= 5 {\n                    result = \"v\" + result\n                 \
    \   n -= 5\n                }\n                for _ in 1...n {\n            \
    \        result = \"i\" + result\n                }\n            }\n        }\
    \ else if digit == 2 {\n            if n == 4 {\n                result = \"xl\"\
    \ + result\n            } else if n == 9 {\n                result = \"xc\" +\
    \ result\n            } else {\n                if n >= 5 {\n                \
    \    result = \"l\" + result\n                    n -= 5\n                }\n\
    \                for _ in 1...n {\n                    result = \"x\" + result\n\
    \                }\n            }\n        } else if digit == 3 {\n          \
    \  if n == 4 {\n                result = \"cd\" + result\n            } else if\
    \ n == 9 {\n                result = \"cm\" + result\n            } else {\n \
    \               if n >= 5 {\n                    result = \"d\" + result\n   \
    \                 n -= 5\n                }\n                for _ in 1...n {\n\
    \                    result = \"c\" + result\n                }\n            }\n\
    \        } else if digit == 4 {\n            for _ in 1...n {\n              \
    \  result = \"m\" + result\n            }\n        }\n        digit += 1\n   \
    \ }\n    return result", "    /// return dictionary to make looking up key easier\n\
    \    let roman_numeral_dict = [1: \"i\", 5: \"v\", 10: \"x\", 50: \"l\", 100:\
    \ \"c\", 500: \"d\", 1000: \"m\"]\n    var numeral_list = [String]()\n    var\
    \ temp_num = number\n    var base = 1000\n    while temp_num > 0 {\n        var\
    \ temp_base = base\n        //4 and 9 case, where number - base = base / 2\n \
    \       if temp_num - base == base / 2 {\n            numeral_list.append(roman_numeral_dict[base\
    \ / 2]!)\n            numeral_list.append(roman_numeral_dict[base]!)\n       \
    \     temp_num -= base + base / 2\n        }\n        //5 case, where number -\
    \ base = base / 2\n        else if temp_num - base == base {\n            numeral_list.append(roman_numeral_dict[base]!)\n\
    \            temp_num -= base\n        }\n        //1 case, where number > 1\n\
    \        else if temp_num - base < base && temp_num - base > 0 {\n           \
    \ while temp_num - temp_base >= 0 {\n                numeral_list.append(roman_numeral_dict[base\
    \ / 10]!)\n                temp_num -= base / 10\n            }\n        }\n \
    \       base /= 10\n    }\n    return numeral_list.joined()", "    var roman =\
    \ \"\"\n    var num = number\n    while num >= 1000 {\n        roman.append(\"\
    m\")\n        num -= 1000\n    }\n    while num >= 900 {\n        roman.append(\"\
    cm\")\n        num -= 900\n    }\n    while num >= 500 {\n        roman.append(\"\
    d\")\n        num -= 500\n    }\n    while num >= 400 {\n        roman.append(\"\
    cd\")\n        num -= 400\n    }\n    while num >= 100 {\n        roman.append(\"\
    c\")\n        num -= 100\n    }\n    while num >= 90 {\n        roman.append(\"\
    xc\")\n        num -= 90\n    }\n    while num >= 50 {\n        roman.append(\"\
    l\")\n        num -= 50\n    }\n    while num >= 40 {\n        roman.append(\"\
    xl\")\n        num -= 40\n    }\n    while num >= 10 {\n        roman.append(\"\
    x\")\n        num -= 10\n    }\n    while num >= 9 {\n        roman.append(\"\
    ix\")\n        num -= 9\n    }\n    while num >= 5 {\n        roman.append(\"\
    v\")\n        num -= 5\n    }\n    while num >= 4 {\n        roman.append(\"iv\"\
    )\n        num -= 4\n    }\n    while num >= 1 {\n        roman.append(\"i\")\n\
    \        num -= 1\n    }\n    return roman", "    \n    guard number > 0 && number\
    \ <= 1000 else { return \"\" }\n    \n    var roman: String = \"\"\n    var number\
    \ = number\n    \n    while number > 0 {\n        if number >= 1000 {\n      \
    \      roman += \"m\"\n            number -= 1000\n        } else if number >=\
    \ 900 {\n            roman += \"cm\"\n            number -= 900\n        } else\
    \ if number >= 500 {\n            roman += \"d\"\n            number -= 500\n\
    \        } else if number >= 400 {\n            roman += \"cd\"\n            number\
    \ -= 400\n        } else if number >= 100 {\n            roman += \"c\"\n    \
    \        number -= 100\n        } else if number >= 90 {\n            roman +=\
    \ \"xc\"\n            number -= 90\n        } else if number >= 50 {\n       \
    \     roman += \"l\"\n            number -= 50\n        } else if number >= 40\
    \ {\n            roman += \"xl\"\n            number -= 40\n        } else if\
    \ number >= 10 {\n            roman += \"x\"\n            number -= 10\n     \
    \   } else if number >= 9 {\n            roman += \"ix\"\n            number -=\
    \ 9\n        } else if number >= 5 {\n            roman += \"v\"\n           \
    \ number -= 5\n        } else if number >= 4 {\n            roman += \"iv\"\n\
    \            number -= 4\n        } else if number >= 1 {\n            roman +=\
    \ \"i\"\n            number -= 1\n        }\n    }\n    \n    return roman", " \
    \   let mappings = [\n        (1000, \"m\"),\n        (900, \"cm\"),\n       \
    \ (500, \"d\"),\n        (400, \"cd\"),\n        (100, \"c\"),\n        (90, \"\
    xc\"),\n        (50, \"l\"),\n        (40, \"xl\"),\n        (10, \"x\"),\n  \
    \      (9, \"ix\"),\n        (5, \"v\"),\n        (4, \"iv\"),\n        (1, \"\
    i\")\n    ]\n    var remainder = number\n    var mini_roman = \"\"\n    while\
    \ remainder > 0 {\n        for (number, roman) in mappings {\n            if number\
    \ <= remainder {\n                remainder -= number\n                mini_roman\
    \ += roman\n                break\n            }\n        }\n    }\n    return\
    \ mini_roman", "    var result = \"\"\n    let digits = String(number).map { Int(String($0))!\
    \ }\n    // if the number is greater than 1000, i.e., it has 5 or more digits,\
    \ we\n    // just return \"m\" a number of times equal to the number of thousands.\n\
    \    if digits.count > 4 {\n        return String(repeating: \"m\", count: digits.count\
    \ - 3)\n    }\n    if digits.count == 4 {\n        result.append(contentsOf: String(repeating:\
    \ \"m\", count: digits[0]))\n    }\n    if digits.count > 3 {\n        result.append(contentsOf:\
    \ roman_chars[100]!)\n    }\n    if digits.count > 2 {\n        result.append(contentsOf:\
    \ RomanNumeral(digits[digits.count - 2]).lowercased())\n    }\n    if digits.count\
    \ > 1 {\n        result.append(contentsOf: roman_chars[10]!)\n    }\n    if digits.count\
    \ > 0 {\n        result.append(contentsOf: RomanNumeral(digits[digits.count -\
    \ 1]).lowercased())\n    }\n    return result", "    let roman_numerals = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"]\n    let decimal_numbers = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var roman_numeral_string = \"\"\n    var num = number\n\
    \    for (index, letter) in roman_numerals.enumerated() {\n        while num >=\
    \ decimal_numbers[index] {\n            roman_numeral_string += letter\n     \
    \       num -= decimal_numbers[index]\n        }\n    }\n    return roman_numeral_string",
  "    var numerals = \"\"\n    var number = number\n    for (value, numeral) in int_to_mini_roman_dict\
    \ {\n        while number >= value {\n            numerals += numeral\n      \
    \      number -= value\n        }\n    }\n    return numerals", "    let numerals\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    let num_values = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    var num_string = \"\"\n    var num = number\n    for\
    \ i in 0..<num_values.count {\n        while num >= num_values[i] {\n        \
    \    num_string += numerals[i]\n            num -= num_values[i]\n        }\n\
    \    }\n    return num_string", "  var num = number\n  var s = \"\"\n  while num\
    \ >= 1000 {\n    s += \"m\"\n    num -= 1000\n  }\n  if num >= 900 {\n    s +=\
    \ \"cm\"\n    num -= 900\n  }\n  if num >= 500 {\n    s += \"d\"\n    num -= 500\n\
    \  }\n  if num >= 400 {\n    s += \"cd\"\n    num -= 400\n  }\n  while num >=\
    \ 100 {\n    s += \"c\"\n    num -= 100\n  }\n  if num >= 90 {\n    s += \"xc\"\
    \n    num -= 90\n  }\n  if num >= 50 {\n    s += \"l\"\n    num -= 50\n  }\n \
    \ if num >= 40 {\n    s += \"xl\"\n    num -= 40\n  }\n  while num >= 10 {\n \
    \   s += \"x\"\n    num -= 10\n  }\n  if num >= 9 {\n    s += \"ix\"\n    num\
    \ -= 9\n  }\n  if num >= 5 {\n    s += \"v\"\n    num -= 5\n  }\n  if num >= 4\
    \ {\n    s += \"iv\"\n    num -= 4\n  }\n  while num >= 1 {\n    s += \"i\"\n\
    \    num -= 1\n  }\n  return s", "    // guard that number is in the range\n \
    \   guard number >= 1, number <= 1000 else {\n        return \"Invalid\"\n   \
    \ }\n    // save the number as a string to make the code easier\n    let number_str\
    \ = String(number)\n    // create a dictionary of roman numerals and their corresponding\
    \ integers\n    let numerals = [\"i\": 1, \"v\": 5, \"x\": 10, \"l\": 50, \"c\"\
    : 100, \"d\": 500, \"m\": 1000]\n    // create a function to convert the number\
    \ to roman numeral equivalents\n    func convert_to_mini_roman(str: String) ->\
    \ String {\n        // create a variable to hold the final string\n        var\
    \ final_str = \"\"\n        // create a variable to hold a running total\n   \
    \     var total = 0\n        // create a variable to hold the previous value\n\
    \        var previous_value = 0\n        // iterate through each character in\
    \ the number string\n        for character in str {\n            // find the value\
    \ of each character\n            let value = numerals[String(character)]\n   \
    \         // append the character to the final string\n            final_str +=\
    \ String(character)\n            // check if the value is nil or is larger than\
    \ or equal to the previous value\n            if value == nil || value! >= previous_value\
    \ {\n                // add the value to the total\n                total += value!\n\
    \            } else {\n                // subtract the value from the total\n\
    \                total -= value!\n            }\n            // set the previous\
    \ value to the current value\n            previous_value = value!\n        }\n\
    \        // check if the running total equals the number\n        if total ==\
    \ number {\n            // return the final string\n            return final_str\n\
    \        } else {\n            // return \"Invalid\"\n            return \"Invalid\"\
    \n        }\n    }\n    // create a function to convert the number to a string\
    \ of \"i\"s\n    func convert_to_i_str(str: String) -> String {\n        // create\
    \ a variable to hold the final string\n        var final_str = \"\"\n        //\
    \ iterate through each character in the number string\n        for character in\
    \ str {\n            // create a variable to hold the value of the character\n\
    \            let value = numerals[String(character)]\n            // append",
  "    let units = number % 10\n    let tens = (number / 10) % 10\n    let hundreds\
    \ = (number / 100) % 10\n    let thousands = (number / 1000) % 10\n    return\
    \ get_units(units) + get_tens(tens) + get_hundreds(hundreds) + get_thousands(thousands)",
  "    let numeralDict: [Int: String] = [\n        1: \"i\",\n        4: \"iv\",\n\
    \        5: \"v\",\n        9: \"ix\",\n        10: \"x\",\n        40: \"xl\"\
    ,\n        50: \"l\",\n        90: \"xc\",\n        100: \"c\",\n        400:\
    \ \"cd\",\n        500: \"d\",\n        900: \"cm\",\n        1000: \"m\"\n  \
    \  ]\n    let numeralKeys = numeralDict.keys.sorted().reversed()\n    var roman\
    \ = \"\"\n    var currNumber = number\n    for key in numeralKeys {\n        while\
    \ currNumber >= key {\n            roman += numeralDict[key]!\n            currNumber\
    \ -= key\n        }\n    }\n    return roman", "    precondition(number >= 1 &&\
    \ number <= 1000, \"Value outside of range\")\n    var result = \"\"\n    var\
    \ num = number\n    while num >= 100 {\n        result += \"c\"\n        num -=\
    \ 100\n    }\n    if num >= 90 {\n        result += \"xc\"\n        num -= 90\n\
    \    }\n    if num >= 50 {\n        result += \"l\"\n        num -= 50\n    }\n\
    \    if num >= 40 {\n        result += \"xl\"\n        num -= 40\n    }\n    while\
    \ num >= 10 {\n        result += \"x\"\n        num -= 10\n    }\n    if num >=\
    \ 9 {\n        result += \"ix\"\n        num -= 9\n    }\n    if num >= 5 {\n\
    \        result += \"v\"\n        num -= 5\n    }\n    if num >= 4 {\n       \
    \ result += \"iv\"\n        num -= 4\n    }\n    while num >= 1 {\n        result\
    \ += \"i\"\n        num -= 1\n    }\n    return result", '    return ""', "  \
    \  var number = number\n    var result = \"\"\n    while number >= 1000 {\n  \
    \      result += \"m\"\n        number -= 1000\n    }\n    while number >= 900\
    \ {\n        result += \"cm\"\n        number -= 900\n    }\n    while number\
    \ >= 500 {\n        result += \"d\"\n        number -= 500\n    }\n    while number\
    \ >= 400 {\n        result += \"cd\"\n        number -= 400\n    }\n    while\
    \ number >= 100 {\n        result += \"c\"\n        number -= 100\n    }\n   \
    \ while number >= 90 {\n        result += \"xc\"\n        number -= 90\n    }\n\
    \    while number >= 50 {\n        result += \"l\"\n        number -= 50\n   \
    \ }\n    while number >= 40 {\n        result += \"xl\"\n        number -= 40\n\
    \    }\n    while number >= 10 {\n        result += \"x\"\n        number -= 10\n\
    \    }\n    while number >= 9 {\n        result += \"ix\"\n        number -= 9\n\
    \    }\n    while number >= 5 {\n        result += \"v\"\n        number -= 5\n\
    \    }\n    while number >= 4 {\n        result += \"iv\"\n        number -= 4\n\
    \    }\n    while number >= 1 {\n        result += \"i\"\n        number -= 1\n\
    \    }\n    return result", "    var num = number\n    var digits: [Int] = []\n\
    \    while num != 0 {\n        digits.append(num % 10)\n        num /= 10\n  \
    \  }\n    digits.reverse()\n    var res = \"\"\n    let digits_len = digits.count\n\
    \    for i in 0..<digits_len {\n        let digit = digits[i]\n        let digit_str\
    \ = digit_to_mini_roman(digit: digit,\n                                      \
    \      base: Int(pow(10, Double(i))))\n        res += digit_str\n    }\n    return\
    \ res", "  var result = \"\"\n  var remaining = number\n  while remaining >= 1000\
    \ {\n    result += \"m\"\n    remaining -= 1000\n  }\n  while remaining >= 900\
    \ {\n    result += \"cm\"\n    remaining -= 900\n  }\n  while remaining >= 500\
    \ {\n    result += \"d\"\n    remaining -= 500\n  }\n  while remaining >= 400\
    \ {\n    result += \"cd\"\n    remaining -= 400\n  }\n  while remaining >= 100\
    \ {\n    result += \"c\"\n    remaining -= 100\n  }\n  while remaining >= 90 {\n\
    \    result += \"xc\"\n    remaining -= 90\n  }\n  while remaining >= 50 {\n \
    \   result += \"l\"\n    remaining -= 50\n  }\n  while remaining >= 40 {\n   \
    \ result += \"xl\"\n    remaining -= 40\n  }\n  while remaining >= 10 {\n    result\
    \ += \"x\"\n    remaining -= 10\n  }\n  while remaining >= 9 {\n    result +=\
    \ \"ix\"\n    remaining -= 9\n  }\n  while remaining >= 5 {\n    result += \"\
    v\"\n    remaining -= 5\n  }\n  while remaining >= 4 {\n    result += \"iv\"\n\
    \    remaining -= 4\n  }\n  while remaining >= 1 {\n    result += \"i\"\n    remaining\
    \ -= 1\n  }\n  return result", "    var result = \"\"\n    let numeral_table =\
    \ [\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n       \
    \ 400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n\
    \        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\"\
    ,\n        4: \"iv\",\n        1: \"i\"\n    ]\n    var number = number\n    while\
    \ number > 0 {\n        for (value, numeral) in numeral_table {\n            if\
    \ number >= value {\n                result += numeral\n                number\
    \ -= value\n                break\n            }\n        }\n    }\n    return\
    \ result", "    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let arabic_numerals\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var string_result\
    \ = \"\"\n    var working_value = number\n    for (index, roman_numeral) in roman_numerals.enumerated()\
    \ {\n        let arabic_numeral = arabic_numerals[index]\n        let div = working_value\
    \ / arabic_numeral\n        if div > 0 {\n            for _ in 0..<div {\n   \
    \             string_result += roman_numeral\n            }\n            working_value\
    \ -= arabic_numeral * div\n        }\n    }\n    return string_result", "    //\
    \ TODO: Implement this\n    return \"\"", "    var mini_roman = \"\"\n    var\
    \ num = number\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1]\n    let numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    for (index, value) in values.enumerated()\
    \ {\n        while num >= value {\n            mini_roman += numerals[index]\n\
    \            num -= value\n        }\n    }\n    return mini_roman", "    var\
    \ num = number\n    var result = \"\"\n    let one = [\"\", \"i\", \"ii\", \"\
    iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    let ten = [\"\"\
    , \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n\
    \    let hundred = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\"\
    , \"dccc\", \"cm\"]\n    let thousand = [\"\", \"m\", \"mm\", \"mmm\", \"mvv\"\
    , \"v\", \"vm\", \"vmm\", \"vmmm\", \"mx\"]\n    result += thousand[num / 1000]\n\
    \    num %= 1000\n    result += hundred[num / 100]\n    num %= 100\n    result\
    \ += ten[num / 10]\n    num %= 10\n    result += one[num]\n    return result",
  "    assert(number > 0 && number <= 1000)\n    let mapper = [\n        1000: \"\
    m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n      \
    \  100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n\
    \        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\"\
    ,\n        1: \"i\",\n    ]\n    var num = number\n    var result = \"\"\n   \
    \ for (key, value) in mapper {\n        while num >= key {\n            result\
    \ += value\n            num -= key\n        }\n    }\n    return result", "  \
    \  if number == 0 {\n        return \"\"\n    } else if number <= 3 {\n      \
    \  return String(repeating: \"i\", count: number)\n    } else if number == 4 {\n\
    \        return \"iv\"\n    } else if number <= 8 {\n        return \"v\" + String(repeating:\
    \ \"i\", count: number - 5)\n    } else if number == 9 {\n        return \"ix\"\
    \n    } else if number <= 13 {\n        return \"x\" + String(repeating: \"i\"\
    , count: number - 10)\n    } else if number <= 18 {\n        return \"xv\" + String(repeating:\
    \ \"i\", count: number - 15)\n    } else if number <= 20 {\n        return \"\
    xx\" + String(repeating: \"i\", count: number - 20)\n    } else if number <= 24\
    \ {\n        return \"xxiv\" + String(repeating: \"i\", count: number - 20)\n\
    \    } else if number <= 29 {\n        return \"xxv\" + String(repeating: \"i\"\
    , count: number - 25)\n    } else if number <= 39 {\n        return \"xxx\" +\
    \ String(repeating: \"i\", count: number - 30)\n    } else if number <= 49 {\n\
    \        return \"xl\" + String(repeating: \"i\", count: number - 40)\n    } else\
    \ if number <= 59 {\n        return \"l\" + String(repeating: \"i\", count: number\
    \ - 50)\n    } else if number <= 69 {\n        return \"lx\" + String(repeating:\
    \ \"i\", count: number - 60)\n    } else if number <= 79 {\n        return \"\
    lxx\" + String(repeating: \"i\", count: number - 70)\n    } else if number <=\
    \ 89 {\n        return \"lxxx\" + String(repeating: \"i\", count: number - 80)\n\
    \    } else if number <= 99 {\n        return \"xc\" + String(repeating: \"i\"\
    , count: number - 90)\n    } else if number <= 199 {\n        return \"c\" + String(repeating:\
    \ \"i\", count: number - 100)\n    } else if number <= 299 {\n        return \"\
    cc\" + String(repeating", "    precondition(number >= 1 && number <= 1000, \"\
    Number must be between 1 and 1000\")\n    var n = number\n    var output = \"\"\
    \n    let mini_numerals = [\n        (1, \"i\"),\n        (5, \"v\"),\n      \
    \  (10, \"x\"),\n        (50, \"l\"),\n        (100, \"c\"),\n        (500, \"\
    d\"),\n        (1000, \"m\")\n    ]\n    for i in 0..<mini_numerals.count {\n\
    \        let value = mini_numerals[i].0\n        let numeral = mini_numerals[i].1\n\
    \        while n >= value {\n            output += numeral\n            n -= value\n\
    \        }\n    }\n    return output", "    var ret = \"\"\n    for _ in 0..<number\
    \ {\n        ret += \"i\"\n    }\n    ret = ret.replacingOccurrences(of: \"iiiii\"\
    , with: \"v\")\n    ret = ret.replacingOccurrences(of: \"iiii\", with: \"iv\"\
    )\n    ret = ret.replacingOccurrences(of: \"vv\", with: \"x\")\n    ret = ret.replacingOccurrences(of:\
    \ \"viv\", with: \"ix\")\n    ret = ret.replacingOccurrences(of: \"xxxxx\", with:\
    \ \"l\")\n    ret = ret.replacingOccurrences(of: \"xxxx\", with: \"xl\")\n   \
    \ ret = ret.replacingOccurrences(of: \"ll\", with: \"c\")\n    ret = ret.replacingOccurrences(of:\
    \ \"lxl\", with: \"xc\")\n    ret = ret.replacingOccurrences(of: \"ccccc\", with:\
    \ \"d\")\n    ret = ret.replacingOccurrences(of: \"cccc\", with: \"cd\")\n   \
    \ ret = ret.replacingOccurrences(of: \"dd\", with: \"m\")\n    ret = ret.replacingOccurrences(of:\
    \ \"dcd\", with: \"cm\")\n    return ret", "    var remaining_number = number\n\
    \    var roman_string = \"\"\n    let romans = [\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let\
    \ ints = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var index\
    \ = 0\n    while remaining_number > 0 {\n        while remaining_number >= ints[index]\
    \ {\n            roman_string += romans[index]\n            remaining_number -=\
    \ ints[index]\n        }\n        index += 1\n    }\n    return roman_string",
  "    let roman = String(repeating: \"I\", count: number)\n    let v_pattern = \"\
    ^(?=(I{4,}))(I{4})*$\"\n    let l_pattern = \"^(?=(I{9,}))(I{9})*$\"\n    let\
    \ x_pattern = \"^(?=(I{40,}))(I{40})*$\"\n    let c_pattern = \"^(?=(I{90,}))(I{90})*$\"\
    \n    let d_pattern = \"^(?=(I{400,}))(I{400})*$\"\n    let m_pattern = \"^(?=(I{900,}))(I{900})*$\"\
    \n    return roman.replacingOccurrences(of: v_pattern, with: \"V\", options: .regularExpression)\n\
    \        .replacingOccurrences(of: l_pattern, with: \"L\", options: .regularExpression)\n\
    \        .replacingOccurrences(of: x_pattern, with: \"X\", options: .regularExpression)\n\
    \        .replacingOccurrences(of: c_pattern, with: \"C\", options: .regularExpression)\n\
    \        .replacingOccurrences(of: d_pattern, with: \"D\", options: .regularExpression)\n\
    \        .replacingOccurrences(of: m_pattern, with: \"M\", options: .regularExpression)",
  "    var roman = \"\"\n    var num = number\n    while num > 0 {\n        if num\
    \ >= 1000 {\n            roman += \"m\"\n            num -= 1000\n        } else\
    \ if num >= 900 {\n            roman += \"cm\"\n            num -= 900\n     \
    \   } else if num >= 500 {\n            roman += \"d\"\n            num -= 500\n\
    \        } else if num >= 400 {\n            roman += \"cd\"\n            num\
    \ -= 400\n        } else if num >= 100 {\n            roman += \"c\"\n       \
    \     num -= 100\n        } else if num >= 90 {\n            roman += \"xc\"\n\
    \            num -= 90\n        } else if num >= 50 {\n            roman += \"\
    l\"\n            num -= 50\n        } else if num >= 40 {\n            roman +=\
    \ \"xl\"\n            num -= 40\n        } else if num >= 10 {\n            roman\
    \ += \"x\"\n            num -= 10\n        } else if num >= 9 {\n            roman\
    \ += \"ix\"\n            num -= 9\n        } else if num >= 5 {\n            roman\
    \ += \"v\"\n            num -= 5\n        } else if num >= 4 {\n            roman\
    \ += \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            roman\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return roman", "    \n\
    \    // Initialize function variables.\n    var roman_numeral = \"\"\n    var\
    \ number = number\n    \n    // Iterate through the Roman numeral lookup table,\
    \ and append Roman numerals\n    // as necessary.\n    for (number_value, roman_value)\
    \ in roman_numeral_table {\n        while number >= number_value {\n         \
    \   roman_numeral += roman_value\n            number -= number_value\n       \
    \ }\n    }\n    \n    // Return the resulting Roman numeral.\n    return roman_numeral",
  "    let numerals = [(\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"cd\", 400),\
    \ (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10), (\"ix\"\
    , 9), (\"v\", 5), (\"iv\", 4), (\"i\", 1)]\n    var remainder = number\n    var\
    \ result = \"\"\n    for numeral in numerals {\n        while remainder >= numeral.1\
    \ {\n            result += numeral.0\n            remainder -= numeral.1\n   \
    \     }\n    }\n    return result", "    let digits = String(number).map { String($0)\
    \ }.compactMap { $0 }\n    var result = \"\"\n    var itr = 0\n    while itr <\
    \ digits.count {\n        let digit = Int(digits[itr]) ?? 0\n        let num_char\
    \ = char_at_digit(digit: digit)\n        switch itr {\n        case digits.count\
    \ - 1:\n            result += num_char\n        case digits.count - 2:\n     \
    \       result += num_char * 5\n        case digits.count - 3:\n            result\
    \ += num_char * 10\n        default:\n            result += num_char * 100\n \
    \       }\n        itr += 1\n    }\n    return result", "    let arabic_numerals\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let mini_roman_numerals\
    \ = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"]\n    var current_num = number\n    var roman_num = \"\"\
    \n    for i in 0..<13 {\n        if (current_num >= arabic_numerals[i]) {\n  \
    \          for _ in 0..<(current_num / arabic_numerals[i]) {\n               \
    \ roman_num += mini_roman_numerals[i]\n            }\n            current_num\
    \ %= arabic_numerals[i]\n        }\n    }\n    return roman_num", "  var result\
    \ = \"\"\n  var amount = number\n  var roman_numerals = [\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n\
    \  var arabic_numerals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n\
    \  if (amount < 1 || amount > 1000) {\n    return \"Range of input is 1 through\
    \ 1000\"\n  }\n  for (index, value) in arabic_numerals.enumerated() {\n    while\
    \ amount >= value {\n      result += roman_numerals[index]\n      amount -= value\n\
    \    }\n  }\n  return result", "    var num = number\n    var result = \"\"\n\
    \    while num > 0 {\n        if num >= 1000 {\n            result += \"m\"\n\
    \            num -= 1000\n        } else if num >= 900 {\n            result +=\
    \ \"cm\"\n            num -= 900\n        } else if num >= 500 {\n           \
    \ result += \"d\"\n            num -= 500\n        } else if num >= 400 {\n  \
    \          result += \"cd\"\n            num -= 400\n        } else if num >=\
    \ 100 {\n            result += \"c\"\n            num -= 100\n        } else if\
    \ num >= 90 {\n            result += \"xc\"\n            num -= 90\n        }\
    \ else if num >= 50 {\n            result += \"l\"\n            num -= 50\n  \
    \      } else if num >= 40 {\n            result += \"xl\"\n            num -=\
    \ 40\n        } else if num >= 10 {\n            result += \"x\"\n           \
    \ num -= 10\n        } else if num >= 9 {\n            result += \"ix\"\n    \
    \        num -= 9\n        } else if num >= 5 {\n            result += \"v\"\n\
    \            num -= 5\n        } else if num >= 4 {\n            result += \"\
    iv\"\n            num -= 4\n        } else if num >= 1 {\n            result +=\
    \ \"i\"\n            num -= 1\n        }\n    }\n    return result", "    var\
    \ result = \"\"\n    var remaining = number\n    let ones = [\"\", \"i\", \"ii\"\
    , \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    let tens = [\"\
    \", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n\
    \    let hundreds = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\"\
    , \"dccc\", \"cm\"]\n    let thousands = [\"\", \"m\", \"mm\", \"mmm\", \"mv\"\
    , \"v\", \"vm\", \"vmm\", \"vmmm\", \"mx\"]\n    if remaining >= 1000 {\n    \
    \    let num_thousands = remaining / 1000\n        result += thousands[num_thousands]\n\
    \        remaining -= num_thousands * 1000\n    }\n    if remaining >= 100 {\n\
    \        let num_hundreds = remaining / 100\n        result += hundreds[num_hundreds]\n\
    \        remaining -= num_hundreds * 100\n    }\n    if remaining >= 10 {\n  \
    \      let num_tens = remaining / 10\n        result += tens[num_tens]\n     \
    \   remaining -= num_tens * 10\n    }\n    if remaining >= 1 {\n        result\
    \ += ones[remaining]\n    }\n    return result", "    var num = number\n    var\
    \ result = \"\"\n    var i = 0\n    while num > 0 {\n        if num >= roman_values[i]\
    \ {\n            result += roman_chars[i]\n            num -= roman_values[i]\n\
    \        } else {\n            i += 1\n        }\n    }\n    return result", '  return
    convert(number: number, lookup: mini_roman_lookup, symbols: mini_roman_symbols)',
  "    let numeralValues: [Int] = [1, 5, 10, 50, 100, 500, 1000]\n    let numeralLetters:\
    \ [Character] = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var answer\
    \ = \"\"\n    var remainder = number\n    var i = numeralValues.count - 1\n  \
    \  while remainder > 0 {\n        let quotient = remainder / numeralValues[i]\n\
    \        if quotient > 0 {\n            if quotient == 4 && i > 0 {\n        \
    \        answer.append(numeralLetters[i])\n                answer.append(numeralLetters[i\
    \ - 1])\n            } else if quotient == 4 && i == 0 {\n                answer.append(numeralLetters[i])\n\
    \                answer.append(numeralLetters[i + 1])\n            } else if quotient\
    \ == 9 && i > 0 {\n                answer.append(numeralLetters[i + 1])\n    \
    \            answer.append(numeralLetters[i - 1])\n            } else if quotient\
    \ == 9 && i == 0 {\n                answer.append(numeralLetters[i + 1])\n   \
    \             answer.append(numeralLetters[i + 2])\n            } else {\n   \
    \             if quotient > 4 {\n                    answer.append(numeralLetters[i\
    \ - 1])\n                }\n                var j = 0\n                while j\
    \ < quotient % 5 {\n                    answer.append(numeralLetters[i])\n   \
    \                 j += 1\n                }\n            }\n        }\n      \
    \  remainder %= numeralValues[i]\n        i -= 1\n    }\n    return answer", " \
    \   if number < 1 || number > 1000 {\n        return \"Input out of range\"\n\
    \    }\n    if number == 1 {\n        return \"i\"\n    }\n    if number == 5\
    \ {\n        return \"v\"\n    }\n    if number == 10 {\n        return \"x\"\n\
    \    }\n    if number == 50 {\n        return \"l\"\n    }\n    if number == 100\
    \ {\n        return \"c\"\n    }\n    if number == 500 {\n        return \"d\"\
    \n    }\n    if number == 1000 {\n        return \"m\"\n    }\n    if number %\
    \ 1000 == 0 {\n        return String(repeating: \"m\", count: number / 1000)\n\
    \    }\n    if number % 100 == 0 {\n        return String(repeating: \"c\", count:\
    \ number / 100)\n    }\n    if number % 10 == 0 {\n        return String(repeating:\
    \ \"x\", count: number / 10)\n    }\n    if number % 5 == 0 {\n        return\
    \ String(repeating: \"v\", count: number / 5)\n    }\n    if number < 5 {\n  \
    \      return String(repeating: \"i\", count: number)\n    }\n    if number <\
    \ 10 {\n        return \"v\" + String(repeating: \"i\", count: number - 5)\n \
    \   }\n    if number < 50 {\n        return String(repeating: \"x\", count: number\
    \ / 10) + int_to_mini_roman(number: number % 10)\n    }\n    if number < 100 {\n\
    \        return \"l\" + int_to_mini_roman(number: number - 50)\n    }\n    if\
    \ number < 500 {\n        return String(repeating: \"c\", count: number / 100)\
    \ + int_to_mini_roman(number: number % 100)\n    }\n    if number < 1000 {\n \
    \       return \"d\" + int_to_mini_roman(number: number - 500)\n    }\n    return\
    \ \"\"", "    var number = number\n    var result = \"\"\n    let one = number\
    \ % 10\n    number /= 10\n    let ten = number % 10\n    number /= 10\n    let\
    \ hundred = number % 10\n    number /= 10\n    let thousand = number % 10\n  \
    \  result.append(String(repeating: \"m\", count: thousand))\n    result.append(String(repeating:\
    \ \"c\", count: hundred))\n    result.append(String(repeating: \"x\", count: ten))\n\
    \    result.append(String(repeating: \"i\", count: one))\n    result = result.replacingOccurrences(of:\
    \ \"iiiii\", with: \"v\")\n    result = result.replacingOccurrences(of: \"iiii\"\
    , with: \"iv\")\n    result = result.replacingOccurrences(of: \"vv\", with: \"\
    x\")\n    result = result.replacingOccurrences(of: \"viv\", with: \"ix\")\n  \
    \  result = result.replacingOccurrences(of: \"xxxxx\", with: \"l\")\n    result\
    \ = result.replacingOccurrences(of: \"xxxx\", with: \"xl\")\n    result = result.replacingOccurrences(of:\
    \ \"ll\", with: \"c\")\n    result = result.replacingOccurrences(of: \"lxl\",\
    \ with: \"xc\")\n    result = result.replacingOccurrences(of: \"ccccc\", with:\
    \ \"d\")\n    result = result.replacingOccurrences(of: \"cccc\", with: \"cd\"\
    )\n    result = result.replacingOccurrences(of: \"dd\", with: \"m\")\n    result\
    \ = result.replacingOccurrences(of: \"dcd\", with: \"cm\")\n    return result",
  "    var n = number\n    var result = \"\"\n    var m = n / 1000\n    n %= 1000\n\
    \    if m > 0 {\n        result += String(repeating: \"m\", count: m)\n    }\n\
    \    m = n / 100\n    n %= 100\n    if m == 9 {\n        result += \"cm\"\n  \
    \  } else if m >= 5 {\n        result += \"d\"\n        result += String(repeating:\
    \ \"c\", count: m - 5)\n    } else if m == 4 {\n        result += \"cd\"\n   \
    \ } else if m > 0 {\n        result += String(repeating: \"c\", count: m)\n  \
    \  }\n    m = n / 10\n    n %= 10\n    if m == 9 {\n        result += \"xc\"\n\
    \    } else if m >= 5 {\n        result += \"l\"\n        result += String(repeating:\
    \ \"x\", count: m - 5)\n    } else if m == 4 {\n        result += \"xl\"\n   \
    \ } else if m > 0 {\n        result += String(repeating: \"x\", count: m)\n  \
    \  }\n    if n == 9 {\n        result += \"ix\"\n    } else if n >= 5 {\n    \
    \    result += \"v\"\n        result += String(repeating: \"i\", count: n - 5)\n\
    \    } else if n == 4 {\n        result += \"iv\"\n    } else if n > 0 {\n   \
    \     result += String(repeating: \"i\", count: n)\n    }\n    return result",
  "    let number_list = Array(String(number))\n    var output_string = \"\"\n   \
    \ var tens = 1\n    for digit in number_list.reversed() {\n        switch digit\
    \ {\n        case \"1\":\n            output_string.insert(\"i\", at: output_string.startIndex)\n\
    \        case \"2\":\n            output_string.insert(\"ii\", at: output_string.startIndex)\n\
    \        case \"3\":\n            output_string.insert(\"iii\", at: output_string.startIndex)\n\
    \        case \"4\":\n            output_string.insert(\"iv\", at: output_string.startIndex)\n\
    \        case \"5\":\n            output_string.insert(\"v\", at: output_string.startIndex)\n\
    \        case \"6\":\n            output_string.insert(\"vi\", at: output_string.startIndex)\n\
    \        case \"7\":\n            output_string.insert(\"vii\", at: output_string.startIndex)\n\
    \        case \"8\":\n            output_string.insert(\"viii\", at: output_string.startIndex)\n\
    \        case \"9\":\n            output_string.insert(\"ix\", at: output_string.startIndex)\n\
    \        default:\n            break\n        }\n        if tens == 10 {\n   \
    \         output_string.insert(\"x\", at: output_string.startIndex)\n        }\
    \ else if tens == 100 {\n            output_string.insert(\"c\", at: output_string.startIndex)\n\
    \        } else if tens == 1000 {\n            output_string.insert(\"m\", at:\
    \ output_string.startIndex)\n        }\n        tens *= 10\n    }\n    return\
    \ output_string", "    let symbols = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\"\
    , \"m\"]\n    let numbers = [1, 5, 10, 50, 100, 500, 1000]\n    let map = Dictionary(zip(numbers,\
    \ symbols), uniquingKeysWith: {$1})\n    var num = number\n    var str = \"\"\n\
    \    while num > 0 {\n        if let digit = num.max_digit(numbers) {\n      \
    \      if digit == 0 {\n                str.append(map[10]!)\n               \
    \ num -= 10\n            } else if digit == 1 {\n                str.append(map[1]!)\n\
    \                num -= 1\n            } else if digit == 4 {\n              \
    \  str.append(map[1]!)\n                str.append(map[5]!)\n                num\
    \ -= 4\n            } else if digit == 5 {\n                str.append(map[5]!)\n\
    \                num -= 5\n            } else if digit == 9 {\n              \
    \  str.append(map[1]!)\n                str.append(map[10]!)\n               \
    \ num -= 9\n            } else if digit == 10 {\n                str.append(map[10]!)\n\
    \                num -= 10\n            } else if digit == 40 {\n            \
    \    str.append(map[10]!)\n                str.append(map[50]!)\n            \
    \    num -= 40\n            } else if digit == 50 {\n                str.append(map[50]!)\n\
    \                num -= 50\n            } else if digit == 90 {\n            \
    \    str.append(map[10]!)\n                str.append(map[100]!)\n           \
    \     num -= 90\n            } else if digit == 100 {\n                str.append(map[100]!)\n\
    \                num -= 100\n            } else if digit == 400 {\n          \
    \      str.append(map[100]!)\n                str.append(map[500]!)\n        \
    \        num -= 400\n            } else if digit == 500 {\n                str.append(map[500]!)\n\
    \                num -= 500\n            } else if digit == 900 {\n          \
    \      str.append(map[100]!)\n                str.append(map[1000]!)\n       \
    \         num -= 900\n            } else if digit == 1000 {\n                str.append(map[1000",
  '    return ""', "    var mini_roman_numerals: [String] = []\n    var num: Int =\
    \ number\n    let roman_numerals: [Int] = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1]\n    let roman_symbols: [String] = [\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n   \
    \ for i in 0..<roman_numerals.count {\n        while num >= roman_numerals[i]\
    \ {\n            mini_roman_numerals.append(roman_symbols[i])\n            num\
    \ -= roman_numerals[i]\n        }\n    }\n    return mini_roman_numerals.joined()",
  "    let roman_numerals = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var remainder = number\n    var numeral\
    \ = \"\"\n    for i in 0..<roman_numerals.count {\n        while remainder >=\
    \ values[i] {\n            remainder -= values[i]\n            numeral += roman_numerals[i]\n\
    \        }\n    }\n    return numeral", "    let dict: [Int: String] = [\n   \
    \     1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n\
    \        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\"\
    ,\n        9: \"ix\",\n        10: \"x\",\n        20: \"xx\",\n        30: \"\
    xxx\",\n        40: \"xl\",\n        50: \"l\",\n        60: \"lx\",\n       \
    \ 70: \"lxx\",\n        80: \"lxxx\",\n        90: \"xc\",\n        100: \"c\"\
    ,\n        200: \"cc\",\n        300: \"ccc\",\n        400: \"cd\",\n       \
    \ 500: \"d\",\n        600: \"dc\",\n        700: \"dcc\",\n        800: \"dccc\"\
    ,\n        900: \"cm\",\n        1000: \"m\"\n    ]\n    var pos = 0\n    var\
    \ number = number\n    var result = \"\"\n    while number > 0 {\n        if number\
    \ >= 1000 {\n            let num_m = number / 1000\n            number = number\
    \ % 1000\n            result.append(contentsOf: String(repeating: \"m\", count:\
    \ num_m))\n        } else if number >= 900 {\n            number = number % 900\n\
    \            result.append(contentsOf: \"cm\")\n        } else if number >= 500\
    \ {\n            number = number % 500\n            result.append(contentsOf:\
    \ \"d\")\n        } else if number >= 400 {\n            number = number % 400\n\
    \            result.append(contentsOf: \"cd\")\n        } else if number >= 100\
    \ {\n            let num_c = number / 100\n            number = number % 100\n\
    \            result.append(contentsOf: String(repeating: \"c\", count: num_c))\n\
    \        } else if number >= 90 {\n            number = number % 90\n        \
    \    result.append(contentsOf: \"xc\")\n        } else if number >= 50 {\n   \
    \         number = number % 50\n            result.append(contentsOf: \"l\")\n\
    \        } else if number >= 40 {\n            number = number % 40\n        \
    \    result.append(cont", "    let numeral_list = [\"m\", \"d\", \"c\", \"l\"\
    , \"x\", \"v\", \"i\"]\n    let number_list = [1000, 500, 100, 50, 10, 5, 1]\n\
    \    var result = \"\"\n    var n = number\n    for (i, numeral) in numeral_list.enumerated()\
    \ {\n        let quotient = n / number_list[i]\n        result += String(repeating:\
    \ numeral, count: quotient)\n        n = n % number_list[i]\n        if i == 6\
    \ {\n            break\n        }\n        let next_quotient = n / number_list[i\
    \ + 2]\n        if quotient == 4 {\n            result.removeLast()\n        \
    \    result += numeral_list[i + 1]\n            result += numeral\n        } else\
    \ if next_quotient == 4 {\n            result += numeral_list[i + 2]\n       \
    \     result += numeral\n            n = n % number_list[i + 2]\n        }\n \
    \   }\n    return result", "    let roman: [String] = [\"m\", \"cm\", \"d\", \"\
    cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n   \
    \ let value: [Int] = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n\
    \    var solution: String = \"\"\n    var number = number\n    for i in 0..<roman.count\
    \ {\n        while number >= value[i] {\n            solution += roman[i]\n  \
    \          number -= value[i]\n        }\n    }\n    return solution", "    //\
    \ Handle invalid cases\n    guard number >= 1 && number <= 1000 else {\n     \
    \   return \"\";\n    }\n    \n    var remaining = number;\n    var output = \"\
    \";\n    \n    // Build the output from the largest place to the smallest place\n\
    \    // Compare remaining to the value of each place and subtract/append accordingly\n\
    \    for (symbol, place) in MINI_ROMAN_DIGITS.reversed() {\n        while remaining\
    \ >= place {\n            output += symbol;\n            remaining -= place;\n\
    \        }\n    }\n    \n    return output;", "    var int = number\n    var roman\
    \ = \"\"\n    while int > 0 {\n        let (quotient, remainder) = int.quotientAndRemainder(dividingBy:\
    \ 1000)\n        roman += Array(repeating: \"m\", count: quotient).joined()\n\
    \        int = remainder\n        let (quotient, remainder) = int.quotientAndRemainder(dividingBy:\
    \ 100)\n        if quotient == 9 {\n            roman += \"cm\"\n        } else\
    \ if quotient == 4 {\n            roman += \"cd\"\n        } else {\n        \
    \    roman += Array(repeating: \"d\", count: quotient / 5).joined()\n        \
    \    roman += Array(repeating: \"c\", count: quotient % 5).joined()\n        }\n\
    \        int = remainder\n        let (quotient, remainder) = int.quotientAndRemainder(dividingBy:\
    \ 10)\n        if quotient == 9 {\n            roman += \"xc\"\n        } else\
    \ if quotient == 4 {\n            roman += \"xl\"\n        } else {\n        \
    \    roman += Array(repeating: \"l\", count: quotient / 5).joined()\n        \
    \    roman += Array(repeating: \"x\", count: quotient % 5).joined()\n        }\n\
    \        int = remainder\n        if int == 9 {\n            roman += \"ix\"\n\
    \        } else if int == 4 {\n            roman += \"iv\"\n        } else {\n\
    \            roman += Array(repeating: \"v\", count: int / 5).joined()\n     \
    \       roman += Array(repeating: \"i\", count: int % 5).joined()\n        }\n\
    \        int = 0\n    }\n    return roman", "    var roman = String()\n    let\
    \ roman_dictionary: [Int: String] = [\n        1: \"i\",\n        2: \"ii\",\n\
    \        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\"\
    ,\n        7: \"vii\",\n        8: \"viii\",\n        9: \"ix\",\n        10:\
    \ \"x\",\n        20: \"xx\",\n        30: \"xxx\",\n        40: \"xl\",\n   \
    \     50: \"l\",\n        60: \"lx\",\n        70: \"lxx\",\n        80: \"lxxx\"\
    ,\n        90: \"xc\",\n        100: \"c\",\n        200: \"cc\",\n        300:\
    \ \"ccc\",\n        400: \"cd\",\n        500: \"d\",\n        600: \"dc\",\n\
    \        700: \"dcc\",\n        800: \"dccc\",\n        900: \"cm\",\n       \
    \ 1000: \"m\",\n        2000: \"mm\",\n        3000: \"mmm\",\n        4000: \"\
    mmmi\",\n        5000: \"mv\",\n        6000: \"mvi\",\n        7000: \"mvii\"\
    ,\n        8000: \"mviii\",\n        9000: \"mix\",\n        10000: \"mx\"\n \
    \   ]\n    if let roman_value = roman_dictionary[number] {\n        roman = roman_value\n\
    \    } else {\n        let thousands = number / 1000\n        let hundreds = (number\
    \ % 1000) / 100\n        let tens = (number % 100) / 10\n        let ones = number\
    \ % 10\n        if let thousands_roman = roman_dictionary[thousands] {\n     \
    \       roman.append(thousands_roman)\n        }\n        if let hundreds_roman\
    \ = roman_dictionary[hundreds] {\n            roman.append(hundreds_roman)\n \
    \       }\n        if let tens_roman = roman_dictionary[tens] {\n            roman.append(tens_roman)\n\
    \        }\n        if let ones_roman = roman_dictionary[ones] {\n           \
    \ roman.append(ones_roman)\n        }\n    }\n    return", "    let romanNumbers\
    \ = [(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"), (100, \"c\"),\
    \ (90, \"xc\"), (50, \"l\"), (40, \"xl\"), (10, \"x\"), (9, \"ix\"), (5, \"v\"\
    ), (4, \"iv\"), (1, \"i\")]\n    var tempNum = number\n    var romanString = \"\
    \"\n    for (number, roman) in romanNumbers {\n        while tempNum >= number\
    \ {\n            romanString += roman\n            tempNum -= number\n       \
    \ }\n    }\n    return romanString", "    precondition(number > 0 && number <=\
    \ 1000, \"number must be in the range 1 to 1000\")\n    let nums = [1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let romans = [\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"]\n    var result = \"\"\n    var count = number\n    for (num, roman) in zip(nums,\
    \ romans) {\n        while (count >= num) {\n            result += roman\n   \
    \         count -= num\n        }\n    }\n    return result", '  return ""', " \
    \   guard (1...1000).contains(number) else { return \"\" }\n    let nums = [1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let romans = [\"m\", \"\
    cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\"\
    , \"i\"]\n    var current = number\n    var result = \"\"\n    for i in 0..<nums.count\
    \ {\n        while current >= nums[i] {\n            result += romans[i]\n   \
    \         current -= nums[i]\n        }\n    }\n    return result", "    let roman_numerals:\
    \ [String] = [\"m\", \"c\", \"x\", \"i\"]\n    let values: [Int] = [1000, 100,\
    \ 10, 1]\n    var res: String = \"\"\n    var number = number\n    for (i, value)\
    \ in values.enumerated() {\n        if number / value > 0 {\n            if number\
    \ / value == 9 {\n                res.append(roman_numerals[i])\n            \
    \    res.append(roman_numerals[i - 1])\n            } else if number / value ==\
    \ 4 {\n                res.append(roman_numerals[i])\n                res.append(roman_numerals[i\
    \ + 1])\n            } else {\n                let count = number / value\n  \
    \              for _ in 0..<count {\n                    res.append(roman_numerals[i])\n\
    \                }\n            }\n            number %= value\n        }\n  \
    \  }\n    return res", "    var number = number\n    if number > 1000 || number\
    \ < 1 {\n        return \"\"\n    }\n    var result = \"\"\n    let units = [\"\
    i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    let\
    \ tens = [\"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"\
    xc\"]\n    let hundreds = [\"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\"\
    , \"dccc\", \"cm\"]\n    let thousands = [\"m\", \"mm\", \"mmm\"]\n    if number\
    \ >= 1000 {\n        result += thousands[number / 1000 - 1]\n        number %=\
    \ 1000\n    }\n    if number >= 100 {\n        result += hundreds[number / 100\
    \ - 1]\n        number %= 100\n    }\n    if number >= 10 {\n        result +=\
    \ tens[number / 10 - 1]\n        number %= 10\n    }\n    if number >= 1 {\n \
    \       result += units[number - 1]\n    }\n    return result", "    guard (1...1000).contains(number)\
    \ else { return \"\" }\n    var n = number\n    var result = \"\"\n    let roman_numerals\
    \ = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"]\n    let numbers = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1]\n    for i in 0..<roman_numerals.count {\n        while\
    \ n >= numbers[i] {\n            result += roman_numerals[i]\n            n -=\
    \ numbers[i]\n        }\n    }\n    return result", "    var result = \"\"\n \
    \   var num = number\n    while num > 0 {\n        if num >= 1000 {\n        \
    \    result += \"m\"\n            num -= 1000\n        } else if num >= 900 {\n\
    \            result += \"cm\"\n            num -= 900\n        } else if num >=\
    \ 500 {\n            result += \"d\"\n            num -= 500\n        } else if\
    \ num >= 400 {\n            result += \"cd\"\n            num -= 400\n       \
    \ } else if num >= 100 {\n            result += \"c\"\n            num -= 100\n\
    \        } else if num >= 90 {\n            result += \"xc\"\n            num\
    \ -= 90\n        } else if num >= 50 {\n            result += \"l\"\n        \
    \    num -= 50\n        } else if num >= 40 {\n            result += \"xl\"\n\
    \            num -= 40\n        } else if num >= 10 {\n            result += \"\
    x\"\n            num -= 10\n        } else if num >= 9 {\n            result +=\
    \ \"ix\"\n            num -= 9\n        } else if num >= 5 {\n            result\
    \ += \"v\"\n            num -= 5\n        } else if num >= 4 {\n            result\
    \ += \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            result\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return result", "    let\
    \ romanNumeralDict: [Int: String] = [1: \"i\", 5: \"v\", 10: \"x\", 50: \"l\"\
    , 100: \"c\", 500: \"d\", 1000: \"m\"]\n    let numbers = [1000, 500, 100, 50,\
    \ 10, 5, 1]\n    var n = number\n    var result = \"\"\n    for n in numbers {\n\
    \        let q = n / n\n        let r = n % n\n        result += String(repeating:\
    \ romanNumeralDict[n]!, count: q)\n        n = r\n    }\n    return result", " \
    \   // TODO\n    return \"\"", "    if number > 1000 || number < 1 {\n       \
    \ return \"\"\n    }\n    return \"implementation\"", "    var roman = \"\"\n\
    \    var i = number\n    while i > 0 {\n        if i >= 1000 {\n            roman\
    \ += \"m\"\n            i -= 1000\n        } else if i >= 900 {\n            roman\
    \ += \"cm\"\n            i -= 900\n        } else if i >= 500 {\n            roman\
    \ += \"d\"\n            i -= 500\n        } else if i >= 400 {\n            roman\
    \ += \"cd\"\n            i -= 400\n        } else if i >= 100 {\n            roman\
    \ += \"c\"\n            i -= 100\n        } else if i >= 90 {\n            roman\
    \ += \"xc\"\n            i -= 90\n        } else if i >= 50 {\n            roman\
    \ += \"l\"\n            i -= 50\n        } else if i >= 40 {\n            roman\
    \ += \"xl\"\n            i -= 40\n        } else if i >= 10 {\n            roman\
    \ += \"x\"\n            i -= 10\n        } else if i >= 9 {\n            roman\
    \ += \"ix\"\n            i -= 9\n        } else if i >= 5 {\n            roman\
    \ += \"v\"\n            i -= 5\n        } else if i >= 4 {\n            roman\
    \ += \"iv\"\n            i -= 4\n        } else if i >= 1 {\n            roman\
    \ += \"i\"\n            i -= 1\n        }\n    }\n    return roman", "    let\
    \ thousands = number / 1000 % 10\n    let nine_hundreds = number / 900 % 10\n\
    \    let five_hundreds = number / 500 % 10\n    let four_hundreds = number / 400\
    \ % 10\n    let hundreds = number / 100 % 10\n    let ninety = number / 90 % 10\n\
    \    let fifty = number / 50 % 10\n    let forty = number / 40 % 10\n    let tens\
    \ = number / 10 % 10\n    let nine = number / 9 % 10\n    let five = number /\
    \ 5 % 10\n    let four = number / 4 % 10\n    let ones = number / 1 % 10\n   \
    \ let result = Array(repeating: \"m\", count: thousands) +\n                 Array(repeating:\
    \ \"cm\", count: nine_hundreds) +\n                 Array(repeating: \"d\", count:\
    \ five_hundreds) +\n                 Array(repeating: \"cd\", count: four_hundreds)\
    \ +\n                 Array(repeating: \"c\", count: hundreds) +\n           \
    \      Array(repeating: \"xc\", count: ninety) +\n                 Array(repeating:\
    \ \"l\", count: fifty) +\n                 Array(repeating: \"xl\", count: forty)\
    \ +\n                 Array(repeating: \"x\", count: tens) +\n               \
    \  Array(repeating: \"ix\", count: nine) +\n                 Array(repeating:\
    \ \"v\", count: five) +\n                 Array(repeating: \"iv\", count: four)\
    \ +\n                 Array(repeating: \"i\", count: ones)\n    return result.joined()",
  "    // Handle special cases\n    switch number {\n    case 1...9:\n        return\
    \ number.int_to_mini_roman_tens()\n    case 10...99:\n        return number.int_to_mini_roman_hundreds()\n\
    \    case 100...999:\n        return number.int_to_mini_roman_thousands()\n  \
    \  default:\n        return \"MMM\"\n    }", "    guard number > 0 else { return\
    \ \"\" }\n    if number == 1 { return \"i\" }\n    if number == 2 { return \"\
    ii\" }\n    if number == 3 { return \"iii\" }\n    if number == 4 { return \"\
    iv\" }\n    if number == 5 { return \"v\" }\n    if number == 6 { return \"vi\"\
    \ }\n    if number == 7 { return \"vii\" }\n    if number == 8 { return \"viii\"\
    \ }\n    if number == 9 { return \"ix\" }\n    if number == 10 { return \"x\"\
    \ }\n    if number == 20 { return \"xx\" }\n    if number == 30 { return \"xxx\"\
    \ }\n    if number == 40 { return \"xl\" }\n    if number == 50 { return \"l\"\
    \ }\n    if number == 60 { return \"lx\" }\n    if number == 70 { return \"lxx\"\
    \ }\n    if number == 80 { return \"lxxx\" }\n    if number == 90 { return \"\
    xc\" }\n    if number == 100 { return \"c\" }\n    if number == 200 { return \"\
    cc\" }\n    if number == 300 { return \"ccc\" }\n    if number == 400 { return\
    \ \"cd\" }\n    if number == 500 { return \"d\" }\n    if number == 600 { return\
    \ \"dc\" }\n    if number == 700 { return \"dcc\" }\n    if number == 800 { return\
    \ \"dccc\" }\n    if number == 900 { return \"cm\" }\n    return \"m\"", "   \
    \ assert(number > 0, \"Number must be positive\")\n    assert(number <= 1000,\
    \ \"Number must be lower than 1001\")\n    let bases: [Int] = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    let symbols: [String] = [\"m\", \"\
    cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\"\
    , \"i\"]\n    var result = \"\"\n    var remaining_num = number\n    for (index,\
    \ current_base) in bases.enumerated() {\n        while (remaining_num >= current_base)\
    \ {\n            result += symbols[index]\n            remaining_num -= current_base\n\
    \        }\n    }\n    return result", "    var number = number\n    let conversion:\
    \ [Int: String] = [\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\"\
    ,\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\"\
    ,\n        8: \"viii\",\n        9: \"ix\",\n        10: \"x\",\n        20: \"\
    xx\",\n        30: \"xxx\",\n        40: \"xl\",\n        50: \"l\",\n       \
    \ 60: \"lx\",\n        70: \"lxx\",\n        80: \"lxxx\",\n        90: \"xc\"\
    ,\n        100: \"c\",\n        200: \"cc\",\n        300: \"ccc\",\n        400:\
    \ \"cd\",\n        500: \"d\",\n        600: \"dc\",\n        700: \"dcc\",\n\
    \        800: \"dccc\",\n        900: \"cm\",\n        1000: \"m\"\n    ]\n  \
    \  var roman = \"\"\n    let digits = Array(String(number)).map{ Int(String($0))!\
    \ }\n    var index = digits.count - 1\n    for digit in digits {\n        let\
    \ power = Int(pow(10.0, Double(index)))\n        roman.append(conversion[digit\
    \ * power]!)\n        index -= 1\n    }\n    return roman", "    let roman_numerals\
    \ = [\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n     \
    \   400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\"\
    ,\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"\
    v\",\n        4: \"iv\",\n        1: \"i\"\n    ]\n    var number = number\n \
    \   var result = \"\"\n    for (key, value) in roman_numerals {\n        while\
    \ number >= key {\n            result += value\n            number -= key\n  \
    \      }\n    }\n    return result", "    var roman = \"\"\n    var number = number\n\
    \    let digits = [10,9,5,4,1]\n    let symbols = [\"x\",\"ix\",\"v\",\"iv\",\"\
    i\"]\n    for (index,digit) in digits.enumerated() {\n        while number >=\
    \ digit {\n            roman += symbols[index]\n            number -= digit\n\
    \        }\n    }\n    return roman", '  return "cdxxvi"', "    let romans = [(\"\
    m\", 1000), (\"cm\", 900), (\"d\", 500), (\"cd\", 400), (\"c\", 100), (\"xc\"\
    , 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10), (\"ix\", 9), (\"v\", 5), (\"iv\"\
    , 4), (\"i\", 1)]\n    var result = \"\"\n    var number = number\n    for (rom,\
    \ val) in romans {\n        while number >= val {\n            result += rom\n\
    \            number -= val\n        }\n    }\n    return result", "    let digits\
    \ = Array(String(number)).map { Int(String($0))! }\n    let n = digits.count\n\
    \    if n == 1 {\n        return one_to_three(digits[0])\n    } else if n == 2\
    \ {\n        return ten_to_thirty(digits[0]) + one_to_three(digits[1])\n    }\
    \ else if n == 3 {\n        return one_to_three(digits[0]) + \"c\" + ten_to_thirty(digits[1])\
    \ + one_to_three(digits[2])\n    } else {\n        return \"m\" + int_to_mini_roman(number:\
    \ digits[1] * 100 + digits[2] * 10 + digits[3])\n    }", '    return ""', "  \
    \  guard number > 0 && number <= 1000 else {\n        return \"error\"\n    }\n\
    \    let symbols = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let values = [1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var num = number\n    var result = \"\"\
    \n    var i = 0\n    while i < values.count {\n        while num >= values[i]\
    \ {\n            num -= values[i]\n            result += symbols[i]\n        }\n\
    \        i += 1\n    }\n    return result", "    let  roman = [\"M\",\"CM\",\"\
    D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"]\n    let\
    \ arab = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\n    var n = number\n    var\
    \ i = 0\n    var result = \"\"\n    while n > 0 {\n        if n >= arab[i] {\n\
    \            result += roman[i]\n            n -= arab[i]\n        } else {\n\
    \            i += 1\n        }\n    }\n    return result", "    let MIN = 1\n\
    \    let MAX = 1000\n    if (number < MIN) || (number > MAX) {\n        return\
    \ \"\";\n    }\n    var number = number\n    var result = \"\"\n    let numbers\
    \ = [1000, 500, 100, 50, 10, 5, 1]\n    let roman_numbers = [\"m\", \"d\", \"\
    c\", \"l\", \"x\", \"v\", \"i\"]\n    for i in 0..<numbers.count {\n        let\
    \ n = numbers[i]\n        let rn = roman_numbers[i]\n        let div = number\
    \ / n\n        number = number % n\n        if div == 4 {\n            if (i %\
    \ 2 == 0) {\n                result += rn + roman_numbers[i-1]\n            }\
    \ else {\n                result += rn + roman_numbers[i-2]\n            }\n \
    \       } else {\n            result += String(repeating: rn, count: div)\n  \
    \      }\n    }\n    return result", "    // TODO\n    return \"\"", "    var\
    \ remainder = number\n    var result = \"\"\n    let symbols = [\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"]\n    let values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n\
    \    for (index, symbol) in symbols.enumerated() {\n        while remainder >=\
    \ values[index] {\n            result.append(symbol)\n            remainder -=\
    \ values[index]\n        }\n    }\n    return result", "    var mini_roman = \"\
    \"\n    var remaining = number\n    while remaining >= 100 {\n        mini_roman\
    \ += \"c\"\n        remaining -= 100\n    }\n    if remaining >= 90 {\n      \
    \  mini_roman += \"xc\"\n        remaining -= 90\n    }\n    if remaining >= 50\
    \ {\n        mini_roman += \"l\"\n        remaining -= 50\n    }\n    if remaining\
    \ >= 40 {\n        mini_roman += \"xl\"\n        remaining -= 40\n    }\n    while\
    \ remaining >= 10 {\n        mini_roman += \"x\"\n        remaining -= 10\n  \
    \  }\n    if remaining >= 9 {\n        mini_roman += \"ix\"\n        remaining\
    \ -= 9\n    }\n    if remaining >= 5 {\n        mini_roman += \"v\"\n        remaining\
    \ -= 5\n    }\n    if remaining >= 4 {\n        mini_roman += \"iv\"\n       \
    \ remaining -= 4\n    }\n    while remaining >= 1 {\n        mini_roman += \"\
    i\"\n        remaining -= 1\n    }\n    return mini_roman", "    guard number\
    \ > 0 else { return \"\" }\n    let int_symbols: [Int: String] = [\n        1:\
    \ \"i\",\n        4: \"iv\",\n        5: \"v\",\n        9: \"ix\",\n        10:\
    \ \"x\",\n        40: \"xl\",\n        50: \"l\",\n        90: \"xc\",\n     \
    \   100: \"c\",\n        400: \"cd\",\n        500: \"d\",\n        900: \"cm\"\
    ,\n        1000: \"m\"\n    ]\n    var num = number\n    var symbols = [String]()\n\
    \    for (number, symbol) in int_symbols.sorted(by: { $0.0 > $1.0 }) {\n     \
    \   let number_of_symbols = num / number\n        for _ in 0..<number_of_symbols\
    \ {\n            symbols.append(symbol)\n        }\n        num %= number\n  \
    \  }\n    return symbols.joined()", "    let numerals = [\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n\
    \    let numeral_values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1]\n    var remaining = number\n    var result = \"\"\n    for i in 0..<numerals.count\
    \ {\n        if remaining >= numeral_values[i] {\n            var times = remaining\
    \ / numeral_values[i]\n            remaining -= numeral_values[i] * times\n  \
    \          for _ in 0..<times {\n                result += numerals[i]\n     \
    \       }\n        }\n    }\n    return result", "    guard number > 0 && number\
    \ <= 1000 else {\n        return \"Number must be in range 1..1000\"\n    }\n\
    \    let n = number\n    return (n >= 1000 ? \"m\" : \"\") +\n        (n >= 500\
    \ ? \"d\" : \"\") +\n        (n >= 100 ? \"c\" : \"\") +\n        (n >= 50 ? \"\
    l\" : \"\") +\n        (n >= 10 ? \"x\" : \"\") +\n        (n >= 5 ? \"v\" : \"\
    \") +\n        (n >= 1 ? \"i\" : \"\")", "    if number < 1 || number > 1000 {\n\
    \        fatalError(\"Number must be in the range 1 to 1000.\")\n    }\n    var\
    \ roman = \"\";\n    var x = number;\n    while x > 0 {\n        if x >= 1000\
    \ {\n            roman += \"m\";\n            x -= 1000;\n        } else if x\
    \ >= 900 {\n            roman += \"cm\";\n            x -= 900;\n        } else\
    \ if x >= 500 {\n            roman += \"d\";\n            x -= 500;\n        }\
    \ else if x >= 400 {\n            roman += \"cd\";\n            x -= 400;\n  \
    \      } else if x >= 100 {\n            roman += \"c\";\n            x -= 100;\n\
    \        } else if x >= 90 {\n            roman += \"xc\";\n            x -= 90;\n\
    \        } else if x >= 50 {\n            roman += \"l\";\n            x -= 50;\n\
    \        } else if x >= 40 {\n            roman += \"xl\";\n            x -= 40;\n\
    \        } else if x >= 10 {\n            roman += \"x\";\n            x -= 10;\n\
    \        } else if x >= 9 {\n            roman += \"ix\";\n            x -= 9;\n\
    \        } else if x >= 5 {\n            roman += \"v\";\n            x -= 5;\n\
    \        } else if x >= 4 {\n            roman += \"iv\";\n            x -= 4;\n\
    \        } else if x >= 1 {\n            roman += \"i\";\n            x -= 1;\n\
    \        }\n    }\n    return roman;", "    var num = number\n    var result =\
    \ \"\"\n    let intToRomanMap: [Int: String] = [1: \"i\", 5: \"v\", 10: \"x\"\
    , 50: \"l\", 100: \"c\", 500: \"d\", 1000: \"m\"]\n    let ints = [1000, 500,\
    \ 100, 50, 10, 5, 1]\n    var romanMap = Dictionary<Int, String>()\n    for int\
    \ in ints {\n        if int == 1000 {\n            romanMap[int] = intToRomanMap[int]!\n\
    \        } else {\n            romanMap[int] = intToRomanMap[int]! + intToRomanMap[int\
    \ * 10]!\n        }\n    }\n    for int in ints {\n        if num >= int {\n \
    \           if int > 1 {\n                let newKey = int/10\n              \
    \  if (num % int > (newKey * 4)) {\n                    let numOfMatches = num\
    \ / int\n                    let remainder = num % int\n                    result\
    \ += String(repeating: romanMap[int]!, count: numOfMatches)\n                \
    \    num = remainder\n                } else {\n                    result +=\
    \ romanMap[newKey]!\n                    num -= newKey * 4\n                }\n\
    \            } else {\n                let numOfMatches = num / int\n        \
    \        let remainder = num % int\n                result += String(repeating:\
    \ romanMap[int]!, count: numOfMatches)\n                num = remainder\n    \
    \        }\n        }\n    }\n    return result", '    // This is your job. :)',
  "    var number = number\n    var result = \"\"\n    var digit_values = [1000, 500,\
    \ 100, 50, 10, 5, 1]\n    var roman_values = [\"m\", \"d\", \"c\", \"l\", \"x\"\
    , \"v\", \"i\"]\n    var index = 0\n    while index < digit_values.count {\n \
    \       while number >= digit_values[index] {\n            result += roman_values[index]\n\
    \            number -= digit_values[index]\n        }\n        if number > digit_values[index]\
    \ - digit_values[index + 2] {\n            result += roman_values[index + 2] +\
    \ roman_values[index]\n            number -= digit_values[index] - digit_values[index\
    \ + 2]\n        }\n        index += 2\n    }\n    return result", '    return
    String(number)', "    var remainder = number, roman_numeral = \"\"\n    for factor\
    \ in int_to_mini_roman_factors {\n        roman_numeral += String(repeating: factor.1,\
    \ count: remainder / factor.0)\n        remainder %= factor.0\n    }\n    return\
    \ roman_numeral", "    let m: [Int] = [1,5,10,50,100,500,1000]\n    let v: [Character]\
    \ = [\"i\",\"v\",\"x\",\"l\",\"c\",\"d\",\"m\"]\n    var n = number\n    var result\
    \ = \"\"\n    var i = m.count - 1\n    while n > 0 {\n        if n >= m[i] {\n\
    \            let d = n / m[i]\n            if d == 4 {\n                result\
    \ += \"\\(v[i])\\(v[i+1])\"\n            } else if d == 9 {\n                result\
    \ += \"\\(v[i])\\(v[i+2])\"\n            } else {\n                for _ in 0..<d\
    \ {\n                    result += \"\\(v[i])\"\n                }\n         \
    \   }\n            n %= m[i]\n        }\n        i -= 1\n    }\n    return result",
  "    let units = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\",\
    \ \"viii\", \"ix\"]\n    let tens = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"\
    l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    let hundreds = [\"\", \"c\", \"cc\"\
    , \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    let thousands\
    \ = [\"\", \"m\", \"mm\", \"mmm\", \"mv\", \"v\", \"vm\", \"vmm\", \"vmmm\", \"\
    mx\"]\n    return thousands[number / 1000] + hundreds[(number % 1000) / 100] +\
    \ tens[(number % 100) / 10] + units[number % 10]", "    assert(number >= 1 &&\
    \ number <= 1000)\n    let first = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"]\n    let second = [\"\", \"x\", \"xx\", \"\
    xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    let third = [\"\"\
    , \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n\
    \    let fourth = [\"\", \"m\", \"mm\", \"mmm\"]\n    return fourth[number / 1000]\
    \ + third[(number % 1000) / 100] + second[(number % 100) / 10] + first[number\
    \ % 10]", "    var ints = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1]\n    var romans = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    var num = number\n    var result\
    \ = \"\"\n    while num > 0 {\n        for i in 0..<ints.count {\n           \
    \ if num >= ints[i] {\n                num -= ints[i]\n                result\
    \ += romans[i]\n                break\n            }\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    var remain = number\n    for (intVal, romanVal)\
    \ in (1...1000).zip(mini_roman_digits) {\n        let n = remain / intVal\n  \
    \      remain = remain % intVal\n        result += String(repeating: romanVal,\
    \ count: n)\n    }\n    return result", "    let roman_numerals = [\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"]\n    let roman_numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1]\n    var result = \"\"\n    var number = number\n    for (index, roman_numeral)\
    \ in roman_numerals.enumerated() {\n        if number >= roman_numbers[index]\
    \ {\n            number -= roman_numbers[index]\n            result += roman_numeral\n\
    \        }\n    }\n    return result", "    \n    let roman_numerals = [\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"]\n    let arabic_numerals = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1]\n    \n    var roman_value = \"\"\n    var starting_value =\
    \ number\n    \n    if number > 1000 || number < 1 { return \"invalid number\"\
    }\n    \n    for index in 0..<arabic_numerals.count {\n        let arabic = arabic_numerals[index]\n\
    \        let roman = roman_numerals[index]\n        while starting_value >= arabic\
    \ {\n            roman_value += roman\n            starting_value -= arabic\n\
    \        }\n    }\n    return roman_value", "    let roman_numerals = [\"m\",\
    \ \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"]\n    let decimal_values = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1]\n    var result = \"\"\n    var remaining_num = number\n   \
    \ var i = 0\n    while remaining_num > 0 {\n        let num_symbols = remaining_num\
    \ / decimal_values[i]\n        for _ in 0..<num_symbols {\n            result\
    \ += roman_numerals[i]\n            remaining_num -= decimal_values[i]\n     \
    \   }\n        i += 1\n    }\n    return result", "    var result = \"\"\n   \
    \ var num = number\n    let roman_nums = [\"m\", \"d\", \"c\", \"l\", \"x\", \"\
    v\", \"i\"]\n    let int_nums = [1000, 500, 100, 50, 10, 5, 1]\n    var index\
    \ = 0\n    while num > 0 {\n        let current_int = int_nums[index]\n      \
    \  let current_roman = roman_nums[index]\n        let char_count = num / current_int\n\
    \        if char_count == 4 {\n            if index < roman_nums.count - 1 {\n\
    \                result += current_roman + roman_nums[index + 1]\n           \
    \ } else {\n                result += current_roman + roman_nums[index - 1]\n\
    \            }\n            num -= char_count * current_int\n        } else {\n\
    \            for _ in 0..<char_count {\n                result += current_roman\n\
    \            }\n            num -= char_count * current_int\n        }\n     \
    \   index += 1\n    }\n    return result", "    var number = number\n    var result\
    \ = \"\"\n    while number > 0 {\n        if number >= 1000 {\n            result\
    \ += \"m\"\n            number -= 1000\n        } else if number >= 900 {\n  \
    \          result += \"cm\"\n            number -= 900\n        } else if number\
    \ >= 500 {\n            result += \"d\"\n            number -= 500\n        }\
    \ else if number >= 400 {\n            result += \"cd\"\n            number -=\
    \ 400\n        } else if number >= 100 {\n            result += \"c\"\n      \
    \      number -= 100\n        } else if number >= 90 {\n            result +=\
    \ \"xc\"\n            number -= 90\n        } else if number >= 50 {\n       \
    \     result += \"l\"\n            number -= 50\n        } else if number >= 40\
    \ {\n            result += \"xl\"\n            number -= 40\n        } else if\
    \ number >= 10 {\n            result += \"x\"\n            number -= 10\n    \
    \    } else if number >= 9 {\n            result += \"ix\"\n            number\
    \ -= 9\n        } else if number >= 5 {\n            result += \"v\"\n       \
    \     number -= 5\n        } else if number >= 4 {\n            result += \"iv\"\
    \n            number -= 4\n        } else if number >= 1 {\n            result\
    \ += \"i\"\n            number -= 1\n        }\n    }\n    return result", " \
    \   let roman_numerals: [Int: String] = [1: \"i\", 4: \"iv\", 5: \"v\", 9: \"\
    ix\", 10: \"x\", 40: \"xl\", 50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500:\
    \ \"d\", 900: \"cm\", 1000: \"m\"]\n    var roman_numerals_keys: [Int] = roman_numerals.keys.sorted().reversed()\n\
    \    var mini_roman: String = \"\"\n    var counter: Int = number\n    while counter\
    \ > 0 {\n        for i in 0..<roman_numerals_keys.count {\n            if counter\
    \ - roman_numerals_keys[i] >= 0 {\n                mini_roman += roman_numerals[roman_numerals_keys[i]]!\n\
    \                counter -= roman_numerals_keys[i]\n                break\n  \
    \          }\n        }\n    }\n    return mini_roman", "    let numerals: [Int:\
    \ String] = [\n        1: \"i\",\n        4: \"iv\",\n        5: \"v\",\n    \
    \    9: \"ix\",\n        10: \"x\",\n        40: \"xl\",\n        50: \"l\",\n\
    \        90: \"xc\",\n        100: \"c\",\n        400: \"cd\",\n        500:\
    \ \"d\",\n        900: \"cm\",\n        1000: \"m\"\n    ]\n    return String(number).reversed().enumerated().reduce(\"\
    \") { (result, arg1) in\n        let (i, char) = arg1\n        let value = Int(String(char))!\n\
    \        let corresponding_numerals = numerals.filter { value >= $0.key }\n  \
    \      let nearest_numeral = corresponding_numerals.max { $0.key < $1.key }!\n\
    \        let quotient = value / nearest_numeral.key\n        let remainder = value\
    \ % nearest_numeral.key\n        let next_digit = (i + 1 == result.count) ? 0\
    \ : Int(String(result[result.index(result.startIndex, offsetBy: i + 1)]))!\n \
    \       let remainder_numeral = numerals.filter { next_digit > $0.key }.max {\
    \ $0.key < $1.key }\n        let result_char = (remainder > 0 && remainder_numeral\
    \ != nil && remainder_numeral!.key > nearest_numeral.key) ? \"\" : String(repeating:\
    \ nearest_numeral.value, count: quotient)\n        return result_char + result\n\
    \    }", '    return ""', "    assert(number >= 1 && number <= 1000)\n    let\
    \ tens: [Int] = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n    let small_nums: [Int]\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    let roman_nums: [String] = [\"i\", \"\
    v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var roman_string = \"\"\n    var\
    \ number = number\n    var i = 0\n    while number > 0 {\n        let digit =\
    \ number % 10\n        if digit == 0 {\n            i += 1\n            number\
    \ /= 10\n            continue\n        }\n        let c = digit - 1\n        var\
    \ str = roman_nums[i * 2]\n        if digit == 9 {\n            str = roman_nums[i\
    \ * 2] + roman_nums[i * 2 + 2]\n        } else if digit == 4 {\n            str\
    \ = roman_nums[i * 2] + roman_nums[i * 2 + 1]\n        } else if digit > 4 {\n\
    \            str = roman_nums[i * 2 + 1] + roman_nums[i * 2] * (digit - 5)\n \
    \       } else {\n            str = roman_nums[i * 2] * digit\n        }\n   \
    \     roman_string = str + roman_string\n        i += 1\n        number /= 10\n\
    \    }\n    return roman_string", "    var num = number\n    var res = \"\"\n\
    \    while num >= 1000 {\n        res += \"m\"\n        num -= 1000\n    }\n \
    \   while num >= 900 {\n        res += \"cm\"\n        num -= 900\n    }\n   \
    \ while num >= 500 {\n        res += \"d\"\n        num -= 500\n    }\n    while\
    \ num >= 400 {\n        res += \"cd\"\n        num -= 400\n    }\n    while num\
    \ >= 100 {\n        res += \"c\"\n        num -= 100\n    }\n    while num >=\
    \ 90 {\n        res += \"xc\"\n        num -= 90\n    }\n    while num >= 50 {\n\
    \        res += \"l\"\n        num -= 50\n    }\n    while num >= 40 {\n     \
    \   res += \"xl\"\n        num -= 40\n    }\n    while num >= 10 {\n        res\
    \ += \"x\"\n        num -= 10\n    }\n    while num >= 9 {\n        res += \"\
    ix\"\n        num -= 9\n    }\n    while num >= 5 {\n        res += \"v\"\n  \
    \      num -= 5\n    }\n    while num >= 4 {\n        res += \"iv\"\n        num\
    \ -= 4\n    }\n    while num >= 1 {\n        res += \"i\"\n        num -= 1\n\
    \    }\n    return res", "    var output = String()\n    let zeros = number.digits()\n\
    \    for n in 0..<zeros {\n        let digit = number / Int(pow(10, Double(n)))\
    \ % 10\n        if (n == 2) {\n            output += mini_decimal_to_roman(decimal:\
    \ digit)\n        } else {\n            output += mini_decimal_to_roman(decimal:\
    \ digit, char_multiplier: Int(pow(10, Double(n))))\n        }\n    }\n    return\
    \ output", "    let roman: [String] = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\"\
    , \"m\"]\n    var arabic: [Int] = [1, 5, 10, 50, 100, 500, 1000]\n    var answer:\
    \ String = \"\"\n    var digit: Int = 0\n    var number = number\n    while number\
    \ > 0 {\n        let currentDigit = number % 10\n        let index = arabic.firstIndex(of:\
    \ currentDigit)\n        if index == nil {\n            if currentDigit >= 4 &&\
    \ currentDigit <= 8 {\n                let baseDigit = arabic[digit + 1]\n   \
    \             answer = roman[digit] + String(repeating: roman[digit + 1], count:\
    \ currentDigit - baseDigit / 10) + answer\n            } else if currentDigit\
    \ == 9 {\n                answer = roman[digit] + roman[digit + 2] + answer\n\
    \            }\n        } else {\n            answer = String(repeating: roman[index!],\
    \ count: currentDigit) + answer\n        }\n        number /= 10\n        digit\
    \ += 2\n    }\n    return answer", "    var number = number\n    var output =\
    \ \"\"\n    let digits = [1000, 500, 100, 50, 10, 5, 1]\n    let symbols = [\"\
    m\", \"d\", \"c\", \"l\", \"x\", \"v\", \"i\"]\n    for i in 0..<digits.count\
    \ {\n        let digit = digits[i]\n        let symbol = symbols[i]\n        let\
    \ n = number / digit\n        for _ in 0..<n {\n            output += symbol\n\
    \        }\n        number %= digit\n    }\n    return output", "    // Convert\
    \ the number to a roman numeral in uppercase\n    let roman = int_to_roman(number:\
    \ number)\n    // Convert the uppercase roman numeral to lowercase\n    return\
    \ roman.lowercased()", "    let roman = [\"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let arabic\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    var val = number\n\
    \    var answer = \"\"\n    var index = 0\n    while val > 0 {\n        while\
    \ val >= arabic[index] {\n            val -= arabic[index]\n            answer\
    \ += roman[index]\n        }\n        index += 1\n    }\n    return answer", " \
    \   var remaining = number\n    var result = \"\"\n    while remaining > 0 {\n\
    \        if remaining >= 1000 {\n            result.append(\"m\")\n          \
    \  remaining -= 1000\n        } else if remaining >= 900 {\n            result.append(\"\
    cm\")\n            remaining -= 900\n        } else if remaining >= 500 {\n  \
    \          result.append(\"d\")\n            remaining -= 500\n        } else\
    \ if remaining >= 400 {\n            result.append(\"cd\")\n            remaining\
    \ -= 400\n        } else if remaining >= 100 {\n            result.append(\"c\"\
    )\n            remaining -= 100\n        } else if remaining >= 90 {\n       \
    \     result.append(\"xc\")\n            remaining -= 90\n        } else if remaining\
    \ >= 50 {\n            result.append(\"l\")\n            remaining -= 50\n   \
    \     } else if remaining >= 40 {\n            result.append(\"xl\")\n       \
    \     remaining -= 40\n        } else if remaining >= 10 {\n            result.append(\"\
    x\")\n            remaining -= 10\n        } else if remaining >= 9 {\n      \
    \      result.append(\"ix\")\n            remaining -= 9\n        } else if remaining\
    \ >= 5 {\n            result.append(\"v\")\n            remaining -= 5\n     \
    \   } else if remaining >= 4 {\n            result.append(\"iv\")\n          \
    \  remaining -= 4\n        } else if remaining >= 1 {\n            result.append(\"\
    i\")\n            remaining -= 1\n        }\n    }\n    return result", '    return
    String(roman_numeral_for_int(number).map{ $0.toLowercased() })', "    var result\
    \ = \"\"\n    var left = number\n    let syms = [\n        (1000, \"m\"),\n  \
    \      (900, \"cm\"),\n        (500, \"d\"),\n        (400, \"cd\"),\n       \
    \ (100, \"c\"),\n        (90, \"xc\"),\n        (50, \"l\"),\n        (40, \"\
    xl\"),\n        (10, \"x\"),\n        (9, \"ix\"),\n        (5, \"v\"),\n    \
    \    (4, \"iv\"),\n        (1, \"i\")\n    ]\n    for (num, sym) in syms {\n \
    \       while left >= num {\n            result += sym\n            left -= num\n\
    \        }\n    }\n    return result", "    precondition(number >= 1, \"Number\
    \ must be greater than or equal to 1.\")\n    precondition(number <= 1000, \"\
    Number must be less than or equal to 1000.\")\n    \n    var result = \"\"\n \
    \   var copy = number\n    \n    // check for hundreds\n    for _ in 1...copy\
    \ / 100 {\n        result += \"c\"\n    }\n    copy %= 100\n    \n    // check\
    \ for tens\n    for _ in 1...copy / 10 {\n        result += \"x\"\n    }\n   \
    \ copy %= 10\n    \n    // check for ones\n    for _ in 1...copy {\n        result\
    \ += \"i\"\n    }\n    \n    return result", "    let numeral_symbols = [(\"m\"\
    , 1000), (\"d\", 500), (\"c\", 100), (\"l\", 50), (\"x\", 10), (\"v\", 5), (\"\
    i\", 1)]\n    var num = number\n    var result = \"\"\n    while num > 0 {\n \
    \       for (symbol, value) in numeral_symbols {\n            if value <= num\
    \ {\n                result += symbol\n                num -= value\n        \
    \        break\n            }\n        }\n    }\n    return result", "    var\
    \ number = number\n    var mini_roman = \"\"\n    // Start with the largest I,\
    \ X, or C\n    if number >= 900 {\n        mini_roman += \"c\"\n        number\
    \ -= 900\n    } else if number >= 400 {\n        mini_roman += \"c\"\n       \
    \ number -= 400\n    } else if number >= 90 {\n        mini_roman += \"x\"\n \
    \       number -= 90\n    } else if number >= 40 {\n        mini_roman += \"x\"\
    \n        number -= 40\n    } else if number >= 9 {\n        mini_roman += \"\
    i\"\n        number -= 9\n    } else if number >= 4 {\n        mini_roman += \"\
    i\"\n        number -= 4\n    }\n    // Now add V's, L's, and D's\n    if number\
    \ >= 5 {\n        mini_roman += \"v\"\n        number -= 5\n    }\n    if number\
    \ >= 1 {\n        mini_roman += \"i\"\n        number -= 1\n    }\n    // And\
    \ finally X's, C's, and M's\n    if number >= 10 {\n        mini_roman += \"x\"\
    \n        number -= 10\n    }\n    if number >= 100 {\n        mini_roman += \"\
    c\"\n        number -= 100\n    }\n    if number >= 1000 {\n        mini_roman\
    \ += \"m\"\n        number -= 1000\n    }\n    return mini_roman", "    let numberToUnicode:\
    \ [Int: String] = [\n        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n\
    \        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000: \"\
    m\"\n    ]\n    let (q, r) = number.quotientAndRemainder(dividingBy: 10)\n   \
    \ let roman = numberToUnicode[r] ?? \"\"\n    let rest = (q == 0) ? \"\" : int_to_mini_roman(number:\
    \ q)\n    return \"\\(rest)\\(roman)\"", "    precondition(number >= 1 && number\
    \ <= 1000, \"number must be in range [1, 1000]\")\n    return int_to_roman(number:\
    \ number, all_caps: false)", '    return ""', "    let mini_roman_units: [String]\
    \ = [\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"]\n    var roman_string =\
    \ \"\"\n    var n = number\n    var i = 0\n    while n > 0 {\n        let digit\
    \ = n % 10\n        roman_string = roman_digit_to_string(digit: digit, i: i) +\
    \ roman_string\n        n /= 10\n        i += 2\n    }\n    return roman_string",
  "  let arabicToRomanMapping = [\"\\(0)\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"]\n  var roman: String = \"\"\n  var currentNum\
    \ = number\n  let thousands = currentNum / 1000\n  currentNum %= 1000\n  let hundreds\
    \ = currentNum / 100\n  currentNum %= 100\n  let tens = currentNum / 10\n  currentNum\
    \ %= 10\n  let ones = currentNum / 1\n  let th = Array(repeating: \"m\", count:\
    \ thousands).joined()\n  let hu = Array(repeating: \"c\", count: hundreds).joined()\n\
    \  let te = Array(repeating: \"x\", count: tens).joined()\n  let on = arabicToRomanMapping[ones]\n\
    \  roman = th + hu + te + on\n  return roman", "    var romanNumber = \"\"\n \
    \   var x = number\n    while (x >= 1000) {\n        romanNumber += \"m\"\n  \
    \      x -= 1000\n    }\n    while (x >= 900) {\n        romanNumber += \"cm\"\
    \n        x -= 900\n    }\n    while (x >= 500) {\n        romanNumber += \"d\"\
    \n        x -= 500\n    }\n    while (x >= 400) {\n        romanNumber += \"cd\"\
    \n        x -= 400\n    }\n    while (x >= 100) {\n        romanNumber += \"c\"\
    \n        x -= 100\n    }\n    while (x >= 90) {\n        romanNumber += \"xc\"\
    \n        x -= 90\n    }\n    while (x >= 50) {\n        romanNumber += \"l\"\n\
    \        x -= 50\n    }\n    while (x >= 40) {\n        romanNumber += \"xl\"\n\
    \        x -= 40\n    }\n    while (x >= 10) {\n        romanNumber += \"x\"\n\
    \        x -= 10\n    }\n    while (x >= 9) {\n        romanNumber += \"ix\"\n\
    \        x -= 9\n    }\n    while (x >= 5) {\n        romanNumber += \"v\"\n \
    \       x -= 5\n    }\n    while (x >= 4) {\n        romanNumber += \"iv\"\n \
    \       x -= 4\n    }\n    while (x >= 1) {\n        romanNumber += \"i\"\n  \
    \      x -= 1\n    }\n    return romanNumber", "  let roman_numerals: [Int : String]\
    \ = [\n    1 : \"i\",\n    5 : \"v\",\n    10 : \"x\",\n    50 : \"l\",\n    100\
    \ : \"c\",\n    500 : \"d\",\n    1000 : \"m\",\n  ]\n  var divisor = 1000\n \
    \ var result = \"\"\n  while divisor > 0 {\n    let quotient = number / divisor\n\
    \    if quotient == 0 {\n      divisor /= 10\n      continue\n    }\n    var (roman_numeral,\
    \ remainder) = roman_numerals[divisor]!\n    let (next_roman_numeral, next_divisor)\
    \ =\n      roman_numerals[divisor / (divisor == 1000 ? 1 : 10)]!\n    // If a\
    \ quotient >= 5, its roman numeral will be a divisor + next divisor,\n    // e.g.\
    \ for 50, the roman numeral is \"l\" (50) + \"x\" (10).\n    if quotient >= 5\
    \ {\n      roman_numeral = next_roman_numeral + roman_numeral\n      remainder\
    \ = quotient - 5\n    }\n    // If a quotient == 4, its roman numeral will be\
    \ next divisor + divisor,\n    // e.g. for 4, the roman numeral is \"v\" (5) +\
    \ \"i\" (1).\n    if quotient == 4 {\n      roman_numeral = next_roman_numeral\
    \ + roman_numeral\n      remainder = quotient - 4\n    }\n    result += String(repeating:\
    \ roman_numeral, count: remainder)\n    number -= quotient * divisor\n    divisor\
    \ /= 10\n  }\n  return result", "    let digits = to_digits(num: number)\n   \
    \ var n_digits = digits.count\n    var roman = \"\"\n    for digit in digits {\n\
    \        n_digits -= 1\n        let base = Int(pow(Double(10), Double(n_digits)))\n\
    \        switch digit {\n        case 1:\n            if n_digits == 0 {\n   \
    \             roman += \"i\"\n            } else {\n                roman += \"\
    x\"\n            }\n        case 2:\n            if n_digits == 0 {\n        \
    \        roman += \"ii\"\n            } else {\n                roman += \"xx\"\
    \n            }\n        case 3:\n            if n_digits == 0 {\n           \
    \     roman += \"iii\"\n            } else {\n                roman += \"xxx\"\
    \n            }\n        case 4:\n            if n_digits == 0 {\n           \
    \     roman += \"iv\"\n            } else {\n                roman += \"xl\"\n\
    \            }\n        case 5:\n            if n_digits == 0 {\n            \
    \    roman += \"v\"\n            } else {\n                roman += \"l\"\n  \
    \          }\n        case 6:\n            if n_digits == 0 {\n              \
    \  roman += \"vi\"\n            } else {\n                roman += \"lx\"\n  \
    \          }\n        case 7:\n            if n_digits == 0 {\n              \
    \  roman += \"vii\"\n            } else {\n                roman += \"lxx\"\n\
    \            }\n        case 8:\n            if n_digits == 0 {\n            \
    \    roman += \"viii\"\n            } else {\n                roman += \"lxxx\"\
    \n            }\n        case 9:\n            if n_digits == 0 {\n           \
    \     roman += \"ix\"\n            } else {\n                roman += \"xc\"\n\
    \            }\n        default:\n            break\n        }\n    }\n    return\
    \ roman", "    precondition(1 <= number && number <= 1000)\n    return int_to_roman(number:\
    \ number).lowercased()", "    var result = \"\"\n    let romanNumerals: [Int:\
    \ String] = [\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\"\
    ,\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50:\
    \ \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n      \
    \  5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    ]\n    var remainingValue\
    \ = number\n    for (key, value) in romanNumerals {\n        if remainingValue\
    \ >= key {\n            let roman = String(repeating: value, count: remainingValue\
    \ / key)\n            result += roman\n            remainingValue -= key * (remainingValue\
    \ / key)\n        }\n    }\n    return result", "    var output = \"\"\n    var\
    \ integer = number\n    let roman = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    let decimal = [1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for index in 0..<decimal.count\
    \ {\n        while integer >= decimal[index] {\n            integer -= decimal[index]\n\
    \            output += roman[index]\n        }\n    }\n    return output", " \
    \   let symbols = [\n        \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\n    ]\n    let values = [\n   \
    \     1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n    ]\n    var result\
    \ = \"\"\n    var value = number\n    for (i, val) in values.enumerated() {\n\
    \        let count = value / val\n        for _ in 0..<count {\n            result\
    \ += symbols[i]\n        }\n        value %= val\n    }\n    return result", " \
    \   var mini_roman_string = \"\"\n    var num = number\n    let mini_roman_dictionary:\
    \ [Int: String] = [\n        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n\
    \        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000: \"\
    m\"\n    ]\n    var mini_roman_keys: [Int] = Array(mini_roman_dictionary.keys).sorted(by:\
    \ {$0>$1})\n    if num < 1 || num > 1000 {\n        mini_roman_string = \"num\
    \ out of range!\"\n    } else {\n        if num > 4 {\n            for item in\
    \ mini_roman_keys {\n                if num < 1 {\n                    break\n\
    \                }\n                let how_many = num / item\n              \
    \  if how_many > 0 {\n                    for _ in 1...how_many {\n          \
    \              mini_roman_string += mini_roman_dictionary[item]!\n           \
    \         }\n                    num -= item * how_many\n                }\n \
    \           }\n        } else {\n            mini_roman_string = mini_roman_dictionary[1]!\n\
    \            if num > 1 {\n                mini_roman_string += mini_roman_dictionary[5]!\n\
    \            }\n        }\n    }\n    return mini_roman_string", "    var number\
    \ = number\n    var roman = \"\"\n    let romans = [(\"m\", 1000), (\"d\", 500),\
    \ (\"c\", 100), (\"l\", 50), (\"x\", 10), (\"v\", 5), (\"i\", 1)]\n    for (letter,\
    \ value) in romans {\n        roman += String(repeating: letter, count: number\
    \ / value)\n        number %= value\n    }\n    return roman", "    assert(1 <=\
    \ number && number <= 1000)\n    var num = number\n    var res = \"\"\n    var\
    \ temp = 0\n    for (i, val) in romans.enumerated() {\n        temp = num / val\n\
    \        if temp == 0 {\n            continue\n        }\n        res += String(repeating:\
    \ roman_symbols[i], count: temp)\n        num %= val\n    }\n    return res",
  "    let digits = String(number).map{\n        Int(String($0))!\n    }\n    var\
    \ res = \"\"\n    for i in 0..<digits.count {\n        if digits[i] <= 3 {\n \
    \           res += String(repeating: roman_map[i], count: digits[i])\n       \
    \ } else if digits[i] == 4 {\n            res += roman_map[i] + roman_map[i +\
    \ 1]\n        } else if digits[i] <= 8 {\n            res += roman_map[i + 1]\
    \ + String(repeating: roman_map[i], count: digits[i] - 5)\n        } else {\n\
    \            res += roman_map[i] + roman_map[i + 2]\n        }\n    }\n    return\
    \ res", "    var num = number\n    let numerals = [\"i\", \"v\", \"x\", \"l\"\
    , \"c\", \"d\", \"m\"]\n    var result = \"\"\n    var digit = 0\n    while num\
    \ > 0 {\n        let power = pow(10, Double(digit))\n        let current_digit\
    \ = num % Int(power)\n        let remainder = current_digit % (5 * Int(power/10))\n\
    \        let remainder_thousands = current_digit % (5 * 1000)\n        let remainder_hundreds\
    \ = current_digit % (5 * 100)\n        let remainder_tens = current_digit % (5\
    \ * 10)\n        if current_digit > 0 {\n            result = convert_single_digit(numerals:\
    \ numerals, num: current_digit, power: power, remainder: remainder, remainder_thousands:\
    \ remainder_thousands, remainder_hundreds: remainder_hundreds, remainder_tens:\
    \ remainder_tens) + result\n        }\n        num = num / Int(power)\n      \
    \  digit += 1\n    }\n    return result", "    var result = \"\"\n    var num\
    \ = number\n    var symbol_index = 0\n    while num > 0 {\n        let symbol\
    \ = mini_roman_symbols[symbol_index]\n        let symbol_value = mini_roman_symbol_values[symbol_index]\n\
    \        if num < symbol_value {\n            symbol_index += 1\n        } else\
    \ {\n            result += symbol\n            num -= symbol_value\n        }\n\
    \    }\n    return result", "    var number = number\n    var mini_roman = \"\"\
    \n    while number >= 1000 {\n        mini_roman += \"m\"\n        number -= 1000\n\
    \    }\n    while number >= 500 {\n        mini_roman += \"d\"\n        number\
    \ -= 500\n    }\n    while number >= 100 {\n        mini_roman += \"c\"\n    \
    \    number -= 100\n    }\n    while number >= 50 {\n        mini_roman += \"\
    l\"\n        number -= 50\n    }\n    while number >= 10 {\n        mini_roman\
    \ += \"x\"\n        number -= 10\n    }\n    while number >= 5 {\n        mini_roman\
    \ += \"v\"\n        number -= 5\n    }\n    while number >= 1 {\n        mini_roman\
    \ += \"i\"\n        number -= 1\n    }\n    return mini_roman", "    // placeholder,\
    \ replace with your own code!\n    return \"\"", "    let roman = String(repeating:\
    \ \"M\", count: number / 1000) +\n        mini_roman_mapping[(number % 1000) /\
    \ 100] +\n        mini_roman_mapping[(number % 100) / 10] +\n        mini_roman_mapping[number\
    \ % 10]\n    return roman", "    guard number >= 1 && number <= 1000 else {\n\
    \        print(\"int_to_mini_roman: integer out of range\")\n        return \"\
    \"\n    }\n    var num: Int = number\n    var res: String = \"\"\n    while num\
    \ > 0 {\n        if num >= 900 {\n            res += \"cm\"\n            num -=\
    \ 900\n        } else if num >= 500 {\n            res += \"d\"\n            num\
    \ -= 500\n        } else if num >= 400 {\n            res += \"cd\"\n        \
    \    num -= 400\n        } else if num >= 100 {\n            res += \"c\"\n  \
    \          num -= 100\n        } else if num >= 90 {\n            res += \"xc\"\
    \n            num -= 90\n        } else if num >= 50 {\n            res += \"\
    l\"\n            num -= 50\n        } else if num >= 40 {\n            res +=\
    \ \"xl\"\n            num -= 40\n        } else if num >= 10 {\n            res\
    \ += \"x\"\n            num -= 10\n        } else if num >= 9 {\n            res\
    \ += \"ix\"\n            num -= 9\n        } else if num >= 5 {\n            res\
    \ += \"v\"\n            num -= 5\n        } else if num >= 4 {\n            res\
    \ += \"iv\"\n            num -= 4\n        } else if num >= 1 {\n            res\
    \ += \"i\"\n            num -= 1\n        }\n    }\n    return res", "    // XXX\
    \ - add implementation here\n    return \"\"", "    let numerals = [\"\", \"i\"\
    , \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    let\
    \ empty = \"\", i = \"i\", v = \"v\", x = \"x\"\n    var result = \"\"\n    var\
    \ num = number\n\n    if num > 100 {\n        let hundreds_digit = num / 100\n\
    \        result.append(contentsOf: String(repeating: x, count: hundreds_digit))\n\
    \        num -= 100 * hundreds_digit\n    }\n\n    if num > 10 {\n        let\
    \ tens_digit = num / 10\n        result.append(contentsOf: String(repeating: x,\
    \ count: tens_digit))\n        num -= 10 * tens_digit\n    }\n\n    if num > 0\
    \ {\n        result.append(numerals[num])\n    }\n\n    return result", "    precondition(number\
    \ > 0 && number <= 1000, \"Number must be between 1 and 1000.\")\n    var input\
    \ = number\n    var result = \"\"\n    while input > 0 {\n        if input >=\
    \ 900 {\n            result += \"c\"\n            input -= 900\n        } else\
    \ if input >= 500 {\n            result += \"d\"\n            input -= 500\n \
    \       } else if input >= 400 {\n            result += \"cd\"\n            input\
    \ -= 400\n        } else if input >= 100 {\n            result += \"c\"\n    \
    \        input -= 100\n        } else if input >= 90 {\n            result +=\
    \ \"xc\"\n            input -= 90\n        } else if input >= 50 {\n         \
    \   result += \"l\"\n            input -= 50\n        } else if input >= 40 {\n\
    \            result += \"xl\"\n            input -= 40\n        } else if input\
    \ >= 10 {\n            result += \"x\"\n            input -= 10\n        } else\
    \ if input >= 9 {\n            result += \"ix\"\n            input -= 9\n    \
    \    } else if input >= 5 {\n            result += \"v\"\n            input -=\
    \ 5\n        } else if input >= 4 {\n            result += \"iv\"\n          \
    \  input -= 4\n        } else if input >= 1 {\n            result += \"i\"\n \
    \           input -= 1\n        }\n    }\n    return result", "    var result\
    \ = \"\"\n    if number >= 1000 {\n        result += \"m\"\n        number -=\
    \ 1000\n    }\n    if number >= 900 {\n        result += \"cm\"\n        number\
    \ -= 900\n    }\n    if number >= 500 {\n        result += \"d\"\n        number\
    \ -= 500\n    }\n    if number >= 400 {\n        result += \"cd\"\n        number\
    \ -= 400\n    }\n    if number >= 100 {\n        let count = number / 100\n  \
    \      for _ in 0..<count {\n            result += \"c\"\n        }\n        number\
    \ -= count * 100\n    }\n    if number >= 90 {\n        result += \"xc\"\n   \
    \     number -= 90\n    }\n    if number >= 50 {\n        result += \"l\"\n  \
    \      number -= 50\n    }\n    if number >= 40 {\n        result += \"xl\"\n\
    \        number -= 40\n    }\n    if number >= 10 {\n        let count = number\
    \ / 10\n        for _ in 0..<count {\n            result += \"x\"\n        }\n\
    \        number -= count * 10\n    }\n    if number >= 9 {\n        result +=\
    \ \"ix\"\n        number -= 9\n    }\n    if number >= 5 {\n        result +=\
    \ \"v\"\n        number -= 5\n    }\n    if number >= 4 {\n        result += \"\
    iv\"\n        number -= 4\n    }\n    if number >= 1 {\n        for _ in 0..<number\
    \ {\n            result += \"i\"\n        }\n    }\n    return result", "    var\
    \ num = number\n    var result = \"\"\n    while num > 0 {\n        if num >=\
    \ 1000 {\n            result += \"m\"\n            num -= 1000\n        } else\
    \ if num >= 900 {\n            result += \"cm\"\n            num -= 900\n    \
    \    } else if num >= 500 {\n            result += \"d\"\n            num -= 500\n\
    \        } else if num >= 400 {\n            result += \"cd\"\n            num\
    \ -= 400\n        } else if num >= 100 {\n            result += \"c\"\n      \
    \      num -= 100\n        } else if num >= 90 {\n            result += \"xc\"\
    \n            num -= 90\n        } else if num >= 50 {\n            result +=\
    \ \"l\"\n            num -= 50\n        } else if num >= 40 {\n            result\
    \ += \"xl\"\n            num -= 40\n        } else if num >= 10 {\n          \
    \  result += \"x\"\n            num -= 10\n        } else if num >= 9 {\n    \
    \        result += \"ix\"\n            num -= 9\n        } else if num >= 5 {\n\
    \            result += \"v\"\n            num -= 5\n        } else if num >= 4\
    \ {\n            result += \"iv\"\n            num -= 4\n        } else if num\
    \ >= 1 {\n            result += \"i\"\n            num -= 1\n        }\n    }\n\
    \    return result", "    var number = number\n    guard number > 0 else { return\
    \ \"\" }\n    guard number <= 1000 else { return \"\" }\n    let units = [\"i\"\
    , \"x\", \"c\", \"m\"]\n    let fives = [\"v\", \"l\", \"d\"]\n    var mini_roman\
    \ = \"\"\n    var c = 0\n    var n = number\n    while n > 0 {\n        let digit\
    \ = n % 10\n        n /= 10\n        if digit <= 3 {\n            mini_roman =\
    \ String(repeating: units[c], count: digit) + mini_roman\n        } else if digit\
    \ == 4 {\n            mini_roman = units[c] + fives[c] + mini_roman\n        }\
    \ else if digit <= 8 {\n            mini_roman = fives[c] + String(repeating:\
    \ units[c], count: digit - 5) + mini_roman\n        } else {\n            mini_roman\
    \ = units[c] + units[c + 1] + mini_roman\n        }\n        c += 1\n    }\n \
    \   return mini_roman", "    \n    if number <= 0 || number > 1000 {\n       \
    \ return \"Not Valid Number\"\n    }\n    \n    let romanValues = [\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"]\n    let arabicValues = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1]\n    \n    var romanValue = \"\"\n    var startingValue = number\n   \
    \ \n    for (index, romanChar) in romanValues.enumerated() {\n        let arabicValue\
    \ = arabicValues[index]\n        let div = startingValue / arabicValue\n     \
    \   \n        if (div > 0) {\n            for _ in 0..<div {\n               \
    \ romanValue += romanChar\n            }\n            startingValue -= arabicValue\
    \ * div\n        }\n    }\n    return romanValue"]
stop_tokens:
- "\n}"
