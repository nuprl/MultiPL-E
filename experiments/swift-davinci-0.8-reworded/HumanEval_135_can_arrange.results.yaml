language: swift
name: HumanEval_135_can_arrange
results:
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i\
    \ + 1] {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpibz9yzjn/tmpibz9yzjn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc0442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc0139b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc0139988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc01387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibz9yzjn                        0x0000563943cac552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7cc062e460 __libc_start_main +
    245

    6    tmpibz9yzjn                        0x0000563943cac1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count < 3 {\n        return -1\n    }\n    var sortedArr\
    \ = arr.sorted()\n    let rightMostLess = sortedArr.lastIndex { $0 < sortedArr[arr.count\
    \ - 2] }\n    if rightMostLess == nil {\n        return -1\n    }\n    return\
    \ arr.lastIndex(of: sortedArr[rightMostLess!])!\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvryn3u64/tmpvryn3u64.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af38435dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af384054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af384054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3840537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvryn3u64                        0x000055ad5e3626ef <unavailable> + 5871

    5    libc.so.6                          0x00002af384549460 __libc_start_main +
    245

    6    tmpvryn3u64                        0x000055ad5e362279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var index =\
    \ -1\n    for i in 0..<arr.count-1 {\n        if arr[i] >= arr[i+1] {\n      \
    \      index = i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8_yn1o39/tmp8_yn1o39.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b710cc4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b710c944b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b710c944988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b710c9437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8_yn1o39                        0x0000560c59b0d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b710ce39460 __libc_start_main +
    245

    6    tmp8_yn1o39                        0x0000560c59b0d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 0..<arr.count - 1 {\n   \
    \     if arr[i] >= arr[i + 1] {\n            result = i\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6n3lurgf/tmp6n3lurgf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b786466ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7864361b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7864361988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78643607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6n3lurgf                        0x0000562b0e182552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7864856460 __libc_start_main +
    245

    6    tmp6n3lurgf                        0x0000562b0e1821a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // Your code here\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpclsn8qtl/tmpclsn8qtl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6737647c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b673733eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b673733e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b673733d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpclsn8qtl                        0x000055ac56d06312 <unavailable> + 4882

    5    libc.so.6                          0x00002b6737833460 __libc_start_main +
    245

    6    tmpclsn8qtl                        0x000055ac56d05f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  if arr.count < 2 {\n    return -1\n  }\n  var result = -1\n\
    \  for i in 1..<arr.count {\n    if arr[i] >= arr[i - 1] {\n      continue\n \
    \   }\n    result = i\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2h01p2z6/tmp2h01p2z6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3fee53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3feb4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3feb4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3feb497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h01p2z6                        0x000055d71bf49312 <unavailable> + 4882

    5    libc.so.6                          0x00002ac3ff03f460 __libc_start_main +
    245

    6    tmp2h01p2z6                        0x000055d71bf48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // Write your code here\n    var arr2 = arr\n    arr2.sort()\n\
    \    for i in 0..<arr2.count {\n        if arr2[i] != arr[i] {\n            return\
    \ i - 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpxiuhhlbl/tmpxiuhhlbl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b708355bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7083252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7083252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70832517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxiuhhlbl                        0x000055ebe8643672 <unavailable> + 5746

    5    libc.so.6                          0x00002b7083747460 __libc_start_main +
    245

    6    tmpxiuhhlbl                        0x000055ebe86432c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  var i = 0\n  while i < arr.count - 1 {\n    if arr[i + 1]\
    \ < arr[i] {\n      return i\n    }\n    i += 1\n  }\n  return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo0kgnyez/tmpo0kgnyez.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87ecf4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87ecc42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87ecc42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87ecc417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo0kgnyez                        0x000055b1893853c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b87ed137460 __libc_start_main +
    245

    6    tmpo0kgnyez                        0x000055b189385019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 1..<arr.count {\n        if arr[i]\
    \ > arr[i - 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphep9gn1f/tmphep9gn1f.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b5e8d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b5e5cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b5e5cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b5e5ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphep9gn1f                        0x000055ffd29ab552 <unavailable> + 5458

    5    libc.so.6                          0x00002b5b5eac4460 __libc_start_main +
    245

    6    tmphep9gn1f                        0x000055ffd29ab1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ maximum = arr[0]\n    var ans = 0\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < maximum {\n            ans = i\n        } else {\n            maximum\
    \ = arr[i]\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_cagd3ik/tmp_cagd3ik.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bf5d33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bf5a2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bf5a2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bf5a297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_cagd3ik                        0x0000561c089e261f <unavailable> + 5663

    5    libc.so.6                          0x00002b7bf5f1f460 __libc_start_main +
    245

    6    tmp_cagd3ik                        0x0000561c089e21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count < 2 {\n        return -1\n    }\n    let sorted\
    \ = arr.sorted()\n    let max = sorted.last!\n    let sub = sorted.dropLast()\n\
    \    if sub.contains(max) {\n        let index = sub.index(of: max)!\n       \
    \ return arr.index(of: index)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3fgrb3op.swift:19:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = sub.index(of: max)!\n            \
    \            ^\n/tmp/tmp3fgrb3op.swift:19:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = sub.index(of: max)!\n                        ^~~~~\n    \
    \                    firstIndex\n/tmp/tmp3fgrb3op.swift:20:20: error: value of\
    \ optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped to\
    \ a value of type 'Array<Int>.Index' (aka 'Int')\n        return arr.index(of:\
    \ index)\n                   ^\n/tmp/tmp3fgrb3op.swift:20:20: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        return\
    \ arr.index(of: index)\n                   ^\n                               \
    \     ?? <#default value#>\n/tmp/tmp3fgrb3op.swift:20:20: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        return\
    \ arr.index(of: index)\n                   ^\n                               \
    \    !\n"
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxSoFar = -1\n    var maxSoFarIndex = -1\n    var\
    \ min = arr[0]\n    var minIndex = 0\n    var max = arr[0]\n    var maxIndex =\
    \ 0\n    for i in 1..<arr.count {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n            minIndex = i\n        }\n        if arr[i] > max {\n \
    \           max = arr[i]\n            maxIndex = i\n        }\n        if arr[i]\
    \ > arr[i - 1] {\n            let indexDiff = i - minIndex\n            if indexDiff\
    \ > maxSoFar {\n                maxSoFar = indexDiff\n                maxSoFarIndex\
    \ = minIndex\n            }\n            min = arr[i]\n            minIndex =\
    \ i\n        }\n    }\n    if arr[arr.count - 1] > arr[0] {\n        let indexDiff\
    \ = arr.count - 1 - minIndex\n        if indexDiff > maxSoFar {\n            maxSoFar\
    \ = indexDiff\n            maxSoFarIndex = minIndex\n        }\n    }\n    if\
    \ arr[0] > arr[arr.count - 1] {\n        let indexDiff = maxIndex\n        if\
    \ indexDiff > maxSoFar {\n            maxSoFar = indexDiff\n            maxSoFarIndex\
    \ = 0\n        }\n    }\n    return maxSoFarIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqg4udcpu/tmpqg4udcpu.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bab783c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bab47ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bab47a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bab4797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqg4udcpu                        0x0000556388c3c552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3bab96f460 __libc_start_main +
    245

    6    tmpqg4udcpu                        0x0000556388c3c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2h01p2z6/tmp2h01p2z6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3fee53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3feb4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3feb4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3feb497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h01p2z6                        0x000055d71bf49312 <unavailable> + 4882

    5    libc.so.6                          0x00002ac3ff03f460 __libc_start_main +
    245

    6    tmp2h01p2z6                        0x000055d71bf48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var min = arr[0]\n    var max = arr[0]\n    var idx = 0\n\
    \    var end = arr.count - 1\n    while idx < end {\n        if arr[idx] > arr[idx\
    \ + 1] {\n            break\n        }\n        if arr[idx] < min {\n        \
    \    min = arr[idx]\n        }\n        if arr[idx] > max {\n            max =\
    \ arr[idx]\n        }\n        idx += 1\n    }\n    if idx == end {\n        return\
    \ -1\n    }\n    if arr[idx] < min {\n        min = arr[idx]\n    }\n    if arr[idx]\
    \ > max {\n        max = arr[idx]\n    }\n    idx += 1\n    while idx < end {\n\
    \        if arr[idx] < min {\n            min = arr[idx]\n        }\n        if\
    \ arr[idx] > max {\n            max = arr[idx]\n        }\n        idx += 1\n\
    \    }\n    if arr[idx] > max {\n        max = arr[idx]\n    }\n    if arr[idx]\
    \ < min {\n        min = arr[idx]\n    }\n    if arr[end] < min {\n        return\
    \ end\n    }\n    if arr[end] > max {\n        return -1\n    }\n    return end\
    \ - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpch93wmhw/tmpch93wmhw.swift:77: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15c1b73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15c186ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15c186a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15c18697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpch93wmhw                        0x0000559fd3bfa588 <unavailable> + 5512

    5    libc.so.6                          0x00002b15c1d5f460 __libc_start_main +
    245

    6    tmpch93wmhw                        0x0000559fd3bfa019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in (0..<arr.count - 1).reversed() {\n        if arr[i]\
    \ > arr[i + 1] {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzcxtontn/tmpzcxtontn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c2e507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c2e1feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c2e1fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c2e1fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcxtontn                        0x0000562159710722 <unavailable> + 5922

    5    libc.so.6                          0x00002b3c2e6f3460 __libc_start_main +
    245

    6    tmpzcxtontn                        0x0000562159710379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let sortedArr = arr.sorted()\n    for i in 0..<sortedArr.count\
    \ - 1 {\n        if sortedArr[i] == sortedArr[i + 1] - 1 {\n            return\
    \ i + 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpf55eloar/tmpf55eloar.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80f1704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80f13fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80f13fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80f13fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf55eloar                        0x0000555d03e8a5f2 <unavailable> + 5618

    5    libc.so.6                          0x00002b80f18f0460 __libc_start_main +
    245

    6    tmpf55eloar                        0x0000555d03e8a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxElement = Int.min\n    var maxIndex = -1\n    for\
    \ (index, element) in arr.enumerated() {\n        if element > maxElement {\n\
    \            maxElement = element\n            maxIndex = index\n        }\n \
    \   }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmph45yltcl/tmph45yltcl.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae405a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae40299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae40299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae402987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph45yltcl                        0x0000561af2ab4532 <unavailable> + 5426

    5    libc.so.6                          0x00002aae4078e460 __libc_start_main +
    245

    6    tmph45yltcl                        0x0000561af2ab4189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n\n    var\
    \ min = arr[0]\n    var result = -1\n\n    for i in 1..<arr.count {\n        if\
    \ arr[i] > min {\n            min = arr[i]\n            result = i\n        }\n\
    \    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpeqzo9g56/tmpeqzo9g56.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7381cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac737ec2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac737ec2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac737ec17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeqzo9g56                        0x000055ce49ab7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac7383b7460 __libc_start_main +
    245

    6    tmpeqzo9g56                        0x000055ce49ab71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    guard arr.first!\
    \ < arr.last! else { return -1 }\n    var a = arr\n    for i in 0..<a.count {\n\
    \        for j in i..<a.count {\n            if a[i] > a[j] {\n              \
    \  a.swapAt(i, j)\n            }\n        }\n    }\n    for i in 1..<a.count {\n\
    \        if a[i] < a[i - 1] {\n            return i - 1\n        }\n    }\n  \
    \  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpalfxw5kp/tmpalfxw5kp.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab700d7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab700a73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab700a73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab700a727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpalfxw5kp                        0x000055bd73893722 <unavailable> + 5922

    5    libc.so.6                          0x00002ab700f68460 __libc_start_main +
    245

    6    tmpalfxw5kp                        0x000055bd73893379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i\
    \ + 1] {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpibz9yzjn/tmpibz9yzjn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc0442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc0139b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc0139988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc01387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibz9yzjn                        0x0000563943cac552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7cc062e460 __libc_start_main +
    245

    6    tmpibz9yzjn                        0x0000563943cac1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var tmp = arr[0]\n\
    \    var idx = -1\n    for i in 1..<arr.count {\n        if arr[i] < tmp {\n \
    \           idx = i\n            break\n        }\n        tmp = arr[i]\n    }\n\
    \    return idx\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4obe0hzq/tmp4obe0hzq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535b8ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b535b5e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b535b5e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b535b5e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4obe0hzq                        0x000055dc6c2d57f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b535bad7460 __libc_start_main +
    245

    6    tmp4obe0hzq                        0x000055dc6c2d51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // TODO\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp174kqn8s/tmp174kqn8s.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0e778cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0e7483b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0e7483988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0e74827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp174kqn8s                        0x0000563680c78312 <unavailable> + 4882

    5    libc.so.6                          0x00002af0e7978460 __libc_start_main +
    245

    6    tmp174kqn8s                        0x0000563680c77f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2h01p2z6/tmp2h01p2z6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3fee53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3feb4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3feb4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3feb497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h01p2z6                        0x000055d71bf49312 <unavailable> + 4882

    5    libc.so.6                          0x00002ac3ff03f460 __libc_start_main +
    245

    6    tmp2h01p2z6                        0x000055d71bf48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  guard !arr.isEmpty else { return -1 }\n  var prevNum = arr[0]\n\
    \  var prevIndex = 0\n  for (index, element) in arr.enumerated() {\n    if index\
    \ == 0 { continue }\n    if element < prevNum {\n      prevNum = element\n   \
    \   prevIndex = index\n    }\n  }\n  return prevIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpj4ymwics/tmpj4ymwics.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b863157cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8631273b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8631273988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86312727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4ymwics                        0x000055575efb6612 <unavailable> + 5650

    5    libc.so.6                          0x00002b8631768460 __libc_start_main +
    245

    6    tmpj4ymwics                        0x000055575efb6269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    var largest = -1\n    var prev = Int.min\n    \n\
    \    for (i, val) in arr.enumerated() {\n        if val >= prev {\n          \
    \  prev = val\n            largest = i\n        }\n    }\n    \n    return largest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfbbx5onj/tmpfbbx5onj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeefa44bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeefa142b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeefa142988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeefa1417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfbbx5onj                        0x0000557efd826532 <unavailable> + 5426

    5    libc.so.6                          0x00002aeefa637460 __libc_start_main +
    245

    6    tmpfbbx5onj                        0x0000557efd826189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard let first = arr.first else { return -1 }\n    var\
    \ maxIndex = -1\n    var max = first\n    for (index, value) in arr.enumerated()\
    \ {\n        if value < max {\n            maxIndex = index\n            max =\
    \ value\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_wa9df0d/tmp_wa9df0d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f0efcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f0ecc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f0ecc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f0ecc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wa9df0d                        0x0000560e0be095d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b4f0f1b6460 __libc_start_main +
    245

    6    tmp_wa9df0d                        0x0000560e0be09229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var prev = arr[0]\n    var output = -1\n    for (i, num)\
    \ in arr.enumerated() {\n        if i == 0 {\n            continue\n        }\n\
    \        if num <= prev {\n            prev = num\n            output = i\n  \
    \      }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpfsirl3vg/tmpfsirl3vg.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c2ae38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c2ab2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c2ab2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c2ab2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsirl3vg                        0x000055b70a549582 <unavailable> + 5506

    5    libc.so.6                          0x00002b7c2b024460 __libc_start_main +
    245

    6    tmpfsirl3vg                        0x000055b70a5491d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 0 else { return -1 }\n    var index =\
    \ arr.count - 1\n    for i in stride(from: arr.count - 2, through: 0, by: -1)\
    \ {\n        if arr[i] <= arr[i + 1] {\n            index = i\n        } else\
    \ {\n            break\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxsvpzv2x/tmpxsvpzv2x.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c84781c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c84478b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c84478988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c844777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxsvpzv2x                        0x000055c1944f06bf <unavailable> + 5823

    5    libc.so.6                          0x00002b8c8496d460 __libc_start_main +
    245

    6    tmpxsvpzv2x                        0x000055c1944f0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // Create sorted copy of array\n    let _arr = arr.sorted()\n\
    \    // Iterate through array\n    for i in 0 ..< _arr.count - 1 {\n        //\
    \ If the current element is not the successor of the previous element\n      \
    \  if _arr[i] != _arr[i + 1] - 1 {\n            // Return the index of the current\
    \ element\n            return arr.firstIndex(of: _arr[i])!\n        }\n    }\n\
    \    // The array is completely sorted so return -1\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpexibodkx/tmpexibodkx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ba663cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ba6333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ba6333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ba63327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexibodkx                        0x000055765789e6a2 <unavailable> + 5794

    5    libc.so.6                          0x00002b5ba6828460 __libc_start_main +
    245

    6    tmpexibodkx                        0x000055765789e2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2h01p2z6/tmp2h01p2z6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3fee53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3feb4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3feb4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3feb497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h01p2z6                        0x000055d71bf49312 <unavailable> + 4882

    5    libc.so.6                          0x00002ac3ff03f460 __libc_start_main +
    245

    6    tmp2h01p2z6                        0x000055d71bf48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var i = arr.count -\
    \ 1\n    while i > 0 {\n        if arr[i - 1] < arr[i] {\n            return i\
    \ - 1\n        }\n        i -= 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpd9dahyjm/tmpd9dahyjm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f78535c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7822cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7822c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7822b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9dahyjm                        0x00005598ccebe5af <unavailable> + 5551

    5    libc.so.6                          0x00002b2f78721460 __libc_start_main +
    245

    6    tmpd9dahyjm                        0x00005598ccebe139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return arr.enumerated().reduce((-1, 0)) {\n        return\
    \ $1.element < $0.1 ? ($1.offset, $1.element) : $0\n    }.0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpa7ppyzqv/tmpa7ppyzqv.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd27f98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd27c8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd27c8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd27c8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa7ppyzqv                        0x000056330b8404a2 <unavailable> + 5282

    5    libc.so.6                          0x00002abd28184460 __libc_start_main +
    245

    6    tmpa7ppyzqv                        0x000056330b8400f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] <= arr[i - 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b04307a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0430499561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0430499286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b043049913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0430498bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpp61t58l7                        0x0000556f255fc9c2 <unavailable> + 6594

    6    tmpp61t58l7                        0x0000556f255fc81c <unavailable> + 6172

    7    libc.so.6                          0x00002b043098e460 __libc_start_main +
    245

    8    tmpp61t58l7                        0x0000556f255fc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2exzfjw4/tmp2exzfjw4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58c2dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58bfd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58bfd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58bfd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2exzfjw4                        0x0000561fdb046552 <unavailable> + 5458

    5    libc.so.6                          0x00002af58c4c7460 __libc_start_main +
    245

    6    tmp2exzfjw4                        0x0000561fdb0461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_idx = -1\n    for (i, num) in arr.enumerated()\
    \ {\n        if i == 0 {\n            continue\n        }\n        if num <= arr[i\
    \ - 1] {\n            max_idx = i\n        }\n    }\n    return max_idx\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in (0..<arr.count - 1).reversed() {\n        if arr[i]\
    \ > arr[i + 1] {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzcxtontn/tmpzcxtontn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c2e507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c2e1feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c2e1fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c2e1fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcxtontn                        0x0000562159710722 <unavailable> + 5922

    5    libc.so.6                          0x00002b3c2e6f3460 __libc_start_main +
    245

    6    tmpzcxtontn                        0x0000562159710379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 0..<arr.count - 1 {\n        if arr[i] < arr[i\
    \ + 1] {\n            return i + 1\n        }\n    }\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7f_ailvk/tmp7f_ailvk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a5f1bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a5eeb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a5eeb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a5eeb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7f_ailvk                        0x000055c38d9e0552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4a5f3aa460 __libc_start_main +
    245

    6    tmp7f_ailvk                        0x000055c38d9e01a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var longest = 0\n    var cache = [Int: Int]()\n    for\
    \ (i, num) in arr.enumerated() {\n        var num = num\n        while let next\
    \ = cache[num - 1] {\n            num = next\n        }\n        longest = max(longest,\
    \ i - num + 1)\n        cache[num] = i\n    }\n    return longest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4s0ep2zg/tmp4s0ep2zg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7a7a68c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7a775fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7a775f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7a775e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4s0ep2zg                        0x000055ac1c7a56f2 <unavailable> + 5874

    5    libc.so.6                          0x00002ab7a7c54460 __libc_start_main +
    245

    6    tmp4s0ep2zg                        0x000055ac1c7a5349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var arr = arr\n    let sortedArr = arr.sorted()\n    var\
    \ ans = -1\n    for i in 0..<arr.count {\n        if arr[i] == sortedArr[i] {\n\
    \            ans = i\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8qtrm1cn/tmp8qtrm1cn.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77e2208b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77e2208988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77e22077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8qtrm1cn                        0x00005618c09fb5f2 <unavailable> + 5618

    5    libc.so.6                          0x00002b77e26fd460 __libc_start_main +
    245

    6    tmp8qtrm1cn                        0x00005618c09fb249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // Hint: The function `arr.enumerated()` gives you an array\
    \ of tuples, where\n    // each tuple is of the form (index, value)\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3,\
    \ 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpc8h79jfb/tmpc8h79jfb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2656c65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b265695cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b265695c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b265695b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc8h79jfb                        0x000055616a4f1312 <unavailable> + 4882

    5    libc.so.6                          0x00002b2656e51460 __libc_start_main +
    245

    6    tmpc8h79jfb                        0x000055616a4f0f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var largestIndexOfSmallerElement\
    \ = arr.count - 1\n    for i in (0...arr.count - 2).reversed() {\n        if arr[i]\
    \ > arr[i + 1] {\n            largestIndexOfSmallerElement = i\n        } else\
    \ {\n            return largestIndexOfSmallerElement\n        }\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3,\
    \ 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4z_9mnre/tmp4z_9mnre.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad44658ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad446285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad446285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4462847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4z_9mnre                        0x00005623795ee722 <unavailable> + 5922

    5    libc.so.6                          0x00002ad44677a460 __libc_start_main +
    245

    6    tmp4z_9mnre                        0x00005623795ee379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    var index: Int = -1\n    \n    for i in 0..<arr.count-1\
    \ {\n        if arr[i] <= arr[i+1] {\n            index = i\n        }\n    }\n\
    \    \n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpc636b6hr/tmpc636b6hr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2ed1e63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ed1b5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ed1b5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ed1b597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc636b6hr                        0x000055b961dba61f <unavailable> + 5663

    5    libc.so.6                          0x00002b2ed204f460 __libc_start_main +
    245

    6    tmpc636b6hr                        0x000055b961dba1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in 1..<arr.count {\n       \
    \ if arr[i] <= arr[i - 1] {\n            result = i\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b04307a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0430499561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0430499286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b043049913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0430498bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpp61t58l7                        0x0000556f255fc9c2 <unavailable> + 6594

    6    tmpp61t58l7                        0x0000556f255fc81c <unavailable> + 6172

    7    libc.so.6                          0x00002b043098e460 __libc_start_main +
    245

    8    tmpp61t58l7                        0x0000556f255fc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in (0..<arr.count - 1).reversed()\
    \ {\n        if arr[i] <= arr[i + 1] {\n            index = i\n        } else\
    \ {\n            break\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpv0rh0135/tmpv0rh0135.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8b2331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8b2028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8b2028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8b20277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0rh0135                        0x0000561db0f857ef <unavailable> + 6127

    5    libc.so.6                          0x00002ab8b251d460 __libc_start_main +
    245

    6    tmpv0rh0135                        0x0000561db0f85379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var arr = arr\n\
    \    arr.sort()\n    for i in (0..<arr.count-1).reversed() {\n        if arr[i]\
    \ > arr[i+1] {\n            return i\n        }\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpanezddrt/tmpanezddrt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b690ae38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b690ab2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b690ab2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b690ab2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpanezddrt                        0x000055accf049842 <unavailable> + 6210

    5    libc.so.6                          0x00002b690b024460 __libc_start_main +
    245

    6    tmpanezddrt                        0x000055accf049499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var index = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < max {\n            max = arr[i]\n            index =\
    \ i\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmphygkfk1e/tmphygkfk1e.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acab91e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acab8edcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acab8edc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acab8edb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphygkfk1e                        0x000055e0ded14552 <unavailable> + 5458

    5    libc.so.6                          0x00002acab93d1460 __libc_start_main +
    245

    6    tmphygkfk1e                        0x000055e0ded141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    var newIndex = 0\n    var indexIsSmaller\
    \ = true\n    var firstValue = 0\n    var secondValue = 0\n    // Loops through\
    \ the array\n    for _ in arr {\n        // Compare each index with the following\
    \ index\n        firstValue = arr[newIndex]\n        secondValue = arr[newIndex\
    \ + 1]\n        // Compare the index values\n        if firstValue <= secondValue\
    \ {\n            // The current index is less than or equal to the following index\n\
    \            indexIsSmaller = true\n        } else {\n            // The current\
    \ index is greater than the following index\n            indexIsSmaller = false\n\
    \        }\n        // If the current index is greater than the following index\n\
    \        if indexIsSmaller == false {\n            // Check if it is greater than\
    \ the index\n            if firstValue > index {\n                // Save the\
    \ index\n                index = firstValue\n            }\n        }\n      \
    \  // Increment the index\n        newIndex += 1\n    }\n    // Return the index\n\
    \    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1cdf44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1cdc3b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab1cdc3b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab1cdc3b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab1cdc3abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab1cda3ae83 <unavailable> + 188035

    6    tmpvj6wm3dd                        0x000056303168f9be <unavailable> + 6590

    7    tmpvj6wm3dd                        0x000056303168f454 <unavailable> + 5204

    8    libc.so.6                          0x00002ab1ce130460 __libc_start_main +
    245

    9    tmpvj6wm3dd                        0x000056303168f129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for (i, v) in arr.enumerated() {\n\
    \        if i > 0 && v <= arr[i - 1] {\n            if v > largest {\n       \
    \         largest = v\n            }\n        }\n    }\n    return largest\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpgtx3b4sx/tmpgtx3b4sx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9c1be1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9c18d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9c18d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9c18d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtx3b4sx                        0x000055d7ec65e829 <unavailable> + 6185

    5    libc.so.6                          0x00002ad9c1dcd460 __libc_start_main +
    245

    6    tmpgtx3b4sx                        0x000055d7ec65e1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    for (index,\
    \ value) in arr.enumerated() {\n        guard index > 0 else { continue }\n  \
    \      if arr[index - 1] >= value {\n            return index - 1\n        }\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpoviaokvl/tmpoviaokvl.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02d5779c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02d5470b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02d5470988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02d546f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoviaokvl                        0x000055ce17a075e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b02d5965460 __libc_start_main +
    245

    6    tmpoviaokvl                        0x000055ce17a07239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = 0\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < arr[i - 1] {\n            return index\n        }\n        index +=\
    \ 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpujzxqlk3/tmpujzxqlk3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3031730c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3031427b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3031427988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30314267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpujzxqlk3                        0x000055ccf3e58552 <unavailable> + 5458

    5    libc.so.6                          0x00002b303191c460 __libc_start_main +
    245

    6    tmpujzxqlk3                        0x000055ccf3e581a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = 0\n    for (i, v) in arr.enumerated() {\n\
    \        if v >= arr[max_index] {\n            max_index = i\n        } else {\n\
    \            return max_index\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp0ggzr3e3/tmp0ggzr3e3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aed3aa65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aed3a75cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aed3a75c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aed3a75b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ggzr3e3                        0x000056307925c582 <unavailable> + 5506

    5    libc.so.6                          0x00002aed3ac51460 __libc_start_main +
    245

    6    tmp0ggzr3e3                        0x000056307925c1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var current_max = Int.min\n    var current_index = -1\n\
    \    for (index, element) in arr.enumerated() {\n        if element >= current_max\
    \ {\n            current_max = element\n            current_index = index\n  \
    \      }\n    }\n    return current_index\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpntor2yls/tmpntor2yls.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9569810c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9569507b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9569507988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95695067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntor2yls                        0x0000558f46aea532 <unavailable> + 5426

    5    libc.so.6                          0x00002b95699fc460 __libc_start_main +
    245

    6    tmpntor2yls                        0x0000558f46aea189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  var maxIndex = -1\n  for i in 0..<arr.count-1 {\n    if arr[i]\
    \ <= arr[i+1] {\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpvftadokm/tmpvftadokm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4b6c70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4b6967b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4b6967988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4b69667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvftadokm                        0x00005618d562e61f <unavailable> + 5663

    5    libc.so.6                          0x00002ac4b6e5c460 __libc_start_main +
    245

    6    tmpvftadokm                        0x00005618d562e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count - 1 {\n       \
    \ if arr[i] < arr[i + 1] {\n            max = i + 1\n        }\n    }\n    return\
    \ max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpjalsuxn4/tmpjalsuxn4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac578814c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac57850bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac57850b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac57850a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjalsuxn4                        0x00005577006fb552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac578a00460 __libc_start_main +
    245

    6    tmpjalsuxn4                        0x00005577006fb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2exzfjw4/tmp2exzfjw4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58c2dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58bfd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58bfd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58bfd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2exzfjw4                        0x0000561fdb046552 <unavailable> + 5458

    5    libc.so.6                          0x00002af58c4c7460 __libc_start_main +
    245

    6    tmp2exzfjw4                        0x0000561fdb0461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var min = 0\n    for i in 1..<arr.count {\n        if arr[i]\
    \ < arr[i - 1] {\n            min = i\n            break\n        }\n    }\n \
    \   guard min != 0 else { return -1 }\n    for i in (min + 1)..<arr.count {\n\
    \        if arr[i] < arr[i - 1] {\n            return -1\n        }\n    }\n \
    \   return min - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1ez14141/tmp1ez14141.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac64e06fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac64dd66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac64dd66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac64dd657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ez14141                        0x000055e0ae583552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac64e25b460 __libc_start_main +
    245

    6    tmp1ez14141                        0x000055e0ae5831a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  guard arr.count > 1 else { return -1 }\n  var best = -1\n\
    \  for i in 1..<arr.count {\n    if arr[i] < arr[i - 1] {\n      best = i\n  \
    \  }\n  }\n  return best\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in (0..<arr.count - 1).reversed() {\n        if arr[i]\
    \ >= arr[i + 1] {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp4axc6380/tmp4axc6380.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e0adfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e0aaf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e0aaf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e0aaf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4axc6380                        0x0000560e66837722 <unavailable> + 5922

    5    libc.so.6                          0x00002b3e0afea460 __libc_start_main +
    245

    6    tmp4axc6380                        0x0000560e66837379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let arr_reverse = arr.reversed()\n    return arr_reverse.index(where:\
    \ { $0 > arr_reverse[safe: arr_reverse.index(after: $0.hashValue) ?? 0] }) ??\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3,\
    \ 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpae0t6fnw.swift:13:55: error: extraneous argument label 'safe:'\
    \ in subscript\n    return arr_reverse.index(where: { $0 > arr_reverse[safe: arr_reverse.index(after:\
    \ $0.hashValue) ?? 0] }) ?? -1\n                                             \
    \         ^~~~~~~\n                                                       \n/tmp/tmpae0t6fnw.swift:13:90:\
    \ error: cannot convert value of type 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n\
    \    return arr_reverse.index(where: { $0 > arr_reverse[safe: arr_reverse.index(after:\
    \ $0.hashValue) ?? 0] }) ?? -1\n                                             \
    \                                            ^\n/tmp/tmpae0t6fnw.swift:13:104:\
    \ error: cannot convert value of type 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n\
    \    return arr_reverse.index(where: { $0 > arr_reverse[safe: arr_reverse.index(after:\
    \ $0.hashValue) ?? 0] }) ?? -1\n                                             \
    \                                                          ^\n/tmp/tmpae0t6fnw.swift:13:110:\
    \ error: cannot convert return expression of type 'ReversedCollection<[Int]>.Index'\
    \ to return type 'Int'\n    return arr_reverse.index(where: { $0 > arr_reverse[safe:\
    \ arr_reverse.index(after: $0.hashValue) ?? 0] }) ?? -1\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpae0t6fnw.swift:13:113: error: cannot convert value of type 'Int' to expected\
    \ argument type 'ReversedCollection<[Int]>.Index'\n    return arr_reverse.index(where:\
    \ { $0 > arr_reverse[safe: arr_reverse.index(after: $0.hashValue) ?? 0] }) ??\
    \ -1\n                                                                       \
    \                                         ^\n"
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ len = arr.count - 1\n    for i in 0..<len {\n        if arr[i] > arr[i + 1]\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphkdhj241/tmphkdhj241.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cf2274c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cf1f6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cf1f6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cf1f6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphkdhj241                        0x000056491a940552 <unavailable> + 5458

    5    libc.so.6                          0x00002b2cf2460460 __libc_start_main +
    245

    6    tmphkdhj241                        0x000056491a9401a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let possible = arr.enumerated().flatMap { (i,v) -> Int?\
    \ in\n        if i == 0 { return nil }\n        if v < arr[i-1] { return i }\n\
    \        return nil\n    }\n    if possible.count > 0 {\n        return possible.max()!\
    \ - 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpywonme2c/tmpywonme2c.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b692f202c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b692eef9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b692eef9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b692eef87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywonme2c                        0x0000559d22b98672 <unavailable> + 5746

    5    libc.so.6                          0x00002b692f3ee460 __libc_start_main +
    245

    6    tmpywonme2c                        0x0000559d22b982c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var indices = [Int]()\n    for index in 0..<arr.count {\n\
    \        if index == 0 {\n            indices.append(-1)\n        } else {\n \
    \           var prevIndex = index - 1\n            while prevIndex > -1 && arr[prevIndex]\
    \ > arr[index] {\n                prevIndex = indices[prevIndex]\n           \
    \ }\n            indices.append(prevIndex)\n        }\n    }\n    return indices.last!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzdvyrn6p/tmpzdvyrn6p.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2e0b6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2e0864b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2e0864988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2e08637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdvyrn6p                        0x000055d25c2d775f <unavailable> + 5983

    5    libc.so.6                          0x00002ba2e0d59460 __libc_start_main +
    245

    6    tmpzdvyrn6p                        0x000055d25c2d72e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // This solution passes all tests on the online judge.\n\
    \    let n = arr.count\n    var last_counted = n - 1\n    for i in (0..<n).reversed()\
    \ {\n        if arr[i] > arr[last_counted] {\n            return last_counted\n\
    \        }\n        if arr[i] <= arr[last_counted] {\n            last_counted\
    \ = i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count < 2 {\n        return -1\n    }\n    var largest:\
    \ Int = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n        if arr[i]\
    \ > largest {\n            largest = arr[i]\n            index = i\n        }\n\
    \    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpx1u7ztg1/tmpx1u7ztg1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8d8736c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8d842db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8d842d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8d842c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1u7ztg1                        0x0000560c55049552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab8d8922460 __libc_start_main +
    245

    6    tmpx1u7ztg1                        0x0000560c550491a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var prev = -1, index = -1\n    for i in 0..<arr.count {\n\
    \        if arr[i] >= prev {\n            prev = arr[i]\n            index = i\n\
    \        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp6a2am7wo/tmp6a2am7wo.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3e1044c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3e0d3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3e0d3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3e0d3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6a2am7wo                        0x00005610b01bc552 <unavailable> + 5458

    5    libc.so.6                          0x00002ad3e1230460 __libc_start_main +
    245

    6    tmp6a2am7wo                        0x00005610b01bc1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_previous_element_index = -1\n    var max_prev =\
    \ Int.min\n    for i in 0 ..< arr.count {\n        if arr[i] >= max_prev {\n \
    \           max_prev = arr[i]\n            max_previous_element_index = i\n  \
    \      }\n    }\n    return max_previous_element_index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzec1jer3/tmpzec1jer3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada31c2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada31924b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada31924988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada319237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzec1jer3                        0x0000557f3390d552 <unavailable> + 5458

    5    libc.so.6                          0x00002ada31e19460 __libc_start_main +
    245

    6    tmpzec1jer3                        0x0000557f3390d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ max_val = arr[0]\n    var index = 0\n    for i in 1..<arr.count {\n        if\
    \ arr[i] > max_val {\n            max_val = arr[i]\n            index = i\n  \
    \      }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbgk_2931/tmpbgk_2931.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2210946c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b221063db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b221063d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b221063c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgk_2931                        0x0000560408415552 <unavailable> + 5458

    5    libc.so.6                          0x00002b2210b32460 __libc_start_main +
    245

    6    tmpbgk_2931                        0x00005604084151a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2h01p2z6/tmp2h01p2z6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3fee53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3feb4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3feb4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3feb497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h01p2z6                        0x000055d71bf49312 <unavailable> + 4882

    5    libc.so.6                          0x00002ac3ff03f460 __libc_start_main +
    245

    6    tmp2h01p2z6                        0x000055d71bf48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count < 2 {\n        return -1\n    }\n    var largest\
    \ = arr[arr.count - 1]\n    var largestIndex = -1\n    for i in stride(from: arr.count\
    \ - 2, through: 0, by: -1) {\n        if arr[i] <= largest {\n            largest\
    \ = arr[i]\n            largestIndex = i\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmph6hhue4i/tmph6hhue4i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9b3d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9b3a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9b3a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9b3a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph6hhue4i                        0x000055d9a67e65f2 <unavailable> + 5618

    5    libc.so.6                          0x00002ad9b3f7b460 __libc_start_main +
    245

    6    tmph6hhue4i                        0x000055d9a67e6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let count = arr.count\n    if count == 0 {\n        return\
    \ -1\n    }\n    var idx = count - 1\n    for i in (0..<count-1).reversed() {\n\
    \        if arr[i] < arr[i+1] {\n            idx = i\n            break\n    \
    \    }\n    }\n    return idx\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5kj0b_z8/tmp5kj0b_z8.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0331392c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0331089b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0331089988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03310887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kj0b_z8                        0x000055d33f29a7ef <unavailable> + 6127

    5    libc.so.6                          0x00002b033157e460 __libc_start_main +
    245

    6    tmp5kj0b_z8                        0x000055d33f29a379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1]\
    \ {\n            return i - 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2exzfjw4/tmp2exzfjw4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af58c2dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af58bfd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af58bfd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af58bfd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2exzfjw4                        0x0000561fdb046552 <unavailable> + 5458

    5    libc.so.6                          0x00002af58c4c7460 __libc_start_main +
    245

    6    tmp2exzfjw4                        0x0000561fdb0461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  for i in 0..<arr.count-1 {\n    if arr[i] >= arr[i+1] {\n\
    \      return i\n    }\n  }\n  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp4k4x2xg2/tmp4k4x2xg2.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab59dba1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab59d898b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab59d898988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab59d8977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4k4x2xg2                        0x0000556cdd71a552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab59dd8d460 __libc_start_main +
    245

    6    tmp4k4x2xg2                        0x0000556cdd71a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = -1\n    for (index, element) in arr.enumerated()\
    \ {\n        if index == 0 {\n            continue\n        }\n        if element\
    \ >= arr[index - 1] {\n            maxIndex = index\n        }\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmppebbt8y4/tmppebbt8y4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bd946cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bd9163b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bd9163988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bd91627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppebbt8y4                        0x000055a56cee6582 <unavailable> + 5506

    5    libc.so.6                          0x00002b3bd9658460 __libc_start_main +
    245

    6    tmppebbt8y4                        0x000055a56cee61d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let newArr = arr.enumerated().compactMap { (index, element)\
    \ -> Int? in\n        var i = index - 1\n        while i >= 0 {\n            if\
    \ arr[i] < element {\n                return index\n            }\n          \
    \  i -= 1\n        }\n        return nil\n    }\n    return newArr.isEmpty ? -1\
    \ : newArr.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpifl30mue/tmpifl30mue.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bfbd16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bfba0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bfba0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bfba0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifl30mue                        0x0000556aad93b6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b6bfbf02460 __libc_start_main +
    245

    6    tmpifl30mue                        0x0000556aad93b309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ maxIndex = 0\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n\
    \            return maxIndex\n        }\n        if arr[i] > arr[maxIndex] {\n\
    \            maxIndex = i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2jry0qi7/tmp2jry0qi7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae55a61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae55758b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae55758988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae557577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jry0qi7                        0x00005652152ab552 <unavailable> + 5458

    5    libc.so.6                          0x00002aae55c4d460 __libc_start_main +
    245

    6    tmp2jry0qi7                        0x00005652152ab1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 1..<arr.count {\n        if arr[i] > arr[i - 1]\
    \ {\n            continue\n        }\n        return i - 1\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3,\
    \ 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp79tvl3w5/tmp79tvl3w5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d351aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d34ea1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d34ea1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d34ea07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79tvl3w5                        0x000055fd9463a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3d35396460 __libc_start_main +
    245

    6    tmp79tvl3w5                        0x000055fd9463a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var sortedArr = arr.sorted()\n    for (i, n) in sortedArr.enumerated()\
    \ {\n        if n != arr[i] {\n            return i - 1\n        }\n    }\n  \
    \  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpx4js1rt_/tmpx4js1rt_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1b930cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1b9003b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1b9003988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1b90027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4js1rt_                        0x0000557f2d216622 <unavailable> + 5666

    5    libc.so.6                          0x00002af1b94f8460 __libc_start_main +
    245

    6    tmpx4js1rt_                        0x0000557f2d216279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 0 else { return -1 }\n    var count =\
    \ 0\n    var numbers = [Int]()\n    for number in arr {\n        numbers.append(number)\n\
    \    }\n    numbers.sort()\n    var index = arr.count - 1\n    while index >=\
    \ 0 {\n        if numbers[index] >= arr[index] {\n            count += 1\n   \
    \     }\n        if count > 1 {\n            return -1\n        }\n        index\
    \ -= 1\n    }\n    return arr.count - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpr4fxmhk9/tmpr4fxmhk9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b589dc30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b589d927b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b589d927988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b589d9267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4fxmhk9                        0x000055bda5308702 <unavailable> + 5890

    5    libc.so.6                          0x00002b589de1c460 __libc_start_main +
    245

    6    tmpr4fxmhk9                        0x000055bda5308359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = arr.count - 1\n    while index > 0 {\n    \
    \    if arr[index] < arr[index - 1] {\n            return index - 1\n        }\n\
    \        index -= 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpyapiqgms/tmpyapiqgms.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab43a7f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab43a4f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab43a4f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab43a4ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyapiqgms                        0x000055bd8b43c3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002ab43a9e5460 __libc_start_main +
    245

    6    tmpyapiqgms                        0x000055bd8b43c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var i = arr.count - 1\n    var maxIndex = i\n    while\
    \ i > 0 {\n        if arr[i] >= arr[i - 1] {\n            maxIndex = i\n     \
    \   } else {\n            break\n        }\n        i -= 1\n    }\n    return\
    \ maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpovmhqvcb/tmpovmhqvcb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b256d0d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b256cdcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b256cdca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b256cdc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovmhqvcb                        0x000055c63b6ef3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b256d2bf460 __libc_start_main +
    245

    6    tmpovmhqvcb                        0x000055c63b6ef019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // your code goes here\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: '/tmp/tmpqz_952cv.swift:13:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest_idx = -1\n    for i in 1..<arr.count {\n  \
    \      if arr[i] <= arr[i - 1] {\n            continue\n        } else {\n   \
    \         largest_idx = i\n        }\n    }\n    return largest_idx\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpuvlrgu39/tmpuvlrgu39.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a41d00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a419f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a419f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a419f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvlrgu39                        0x000055a47965e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0a41eec460 __libc_start_main +
    245

    6    tmpuvlrgu39                        0x000055a47965e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpa90ehqt1/tmpa90ehqt1.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7947eb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7947ba9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7947ba9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7947ba87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa90ehqt1                        0x000055c8b808d312 <unavailable> + 4882

    5    libc.so.6                          0x00002b794809e460 __libc_start_main +
    245

    6    tmpa90ehqt1                        0x000055c8b808cf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = arr.count - 1\n    while index > 0 {\n    \
    \    if arr[index] >= arr[index - 1] {\n            index -= 1\n        } else\
    \ {\n            return index\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largestIndex = -1\n    var largest = Int.min\n    for\
    \ index in 0 ..< arr.count - 1 {\n        if arr[index] < arr[index + 1] {\n \
    \           if arr[index + 1] > largest {\n                largest = arr[index\
    \ + 1]\n                largestIndex = index + 1\n            }\n        }\n \
    \   }\n    return largestIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp986iqy7b/tmp986iqy7b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff82f00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff82bf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff82bf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff82bf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp986iqy7b                        0x000055687f847552 <unavailable> + 5458

    5    libc.so.6                          0x00002aff830ec460 __libc_start_main +
    245

    6    tmp986iqy7b                        0x000055687f8471a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2h01p2z6/tmp2h01p2z6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3fee53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3feb4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3feb4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3feb497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2h01p2z6                        0x000055d71bf49312 <unavailable> + 4882

    5    libc.so.6                          0x00002ac3ff03f460 __libc_start_main +
    245

    6    tmp2h01p2z6                        0x000055d71bf48f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var minValue = arr[0]\n    var index = 0\n    for (i, n)\
    \ in arr.enumerated() {\n        if n > minValue {\n            index = i\n  \
    \          minValue = n\n        }\n    }\n    return index == arr.count - 1 ?\
    \ -1 : index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbdsk3jjt/tmpbdsk3jjt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ac291bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ac2612b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ac2612988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ac26117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbdsk3jjt                        0x000055db74cc55e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b5ac2b07460 __libc_start_main +
    245

    6    tmpbdsk3jjt                        0x000055db74cc5239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let sortedArr = arr.sorted()\n    var result = -1\n   \
    \ for i in 1..<sortedArr.count {\n        if sortedArr[i] >= sortedArr[i - 1]\
    \ {\n            result = i\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpq2m0xhny/tmpq2m0xhny.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7892935c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b789262cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b789262c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b789262b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq2m0xhny                        0x0000564e709b05f2 <unavailable> + 5618

    5    libc.so.6                          0x00002b7892b21460 __libc_start_main +
    245

    6    tmpq2m0xhny                        0x0000564e709b0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    var prev = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] >= prev {\n            prev = arr[i]\n        } else {\n\
    \            result = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7711251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7710f48561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7710f48286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7710f4813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7710f47bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7710d47e83 <unavailable> + 188035

    6    tmpab4j0__s                        0x000055e910dc193a <unavailable> + 6458

    7    tmpab4j0__s                        0x000055e910dc181c <unavailable> + 6172

    8    libc.so.6                          0x00002b771143d460 __libc_start_main +
    245

    9    tmpab4j0__s                        0x000055e910dc11a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    if arr.count == 0 {\n        return -1\n    }\n \
    \   \n    var index = 0\n    for i in 0..<arr.count - 1 {\n        if arr[i] >\
    \ arr[i + 1] {\n            index = i + 1\n            break\n        }\n    }\n\
    \    \n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpkz8kir65/tmpkz8kir65.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4394650c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4394347b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4394347988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43943467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkz8kir65                        0x000055e65a9b561f <unavailable> + 5663

    5    libc.so.6                          0x00002b439483c460 __libc_start_main +
    245

    6    tmpkz8kir65                        0x000055e65a9b51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var idx = arr.count - 1\n    var largest = arr[idx]\n \
    \   var prev = arr[idx - 1]\n    while idx > 0 {\n        if prev < largest {\n\
    \            return idx - 1\n        }\n        largest = max(largest, arr[idx\
    \ - 1])\n        prev = arr[idx - 1]\n        idx -= 1\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpcxszu_jj/tmpcxszu_jj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7aaaa5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7aaa754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7aaa754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7aaa7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxszu_jj                        0x000056183b0ad51f <unavailable> + 5407

    5    libc.so.6                          0x00002b7aaac49460 __libc_start_main +
    245

    6    tmpcxszu_jj                        0x000056183b0ad0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var prev = arr[0]\n    var largestIndex = -1\n    for i\
    \ in 0..<arr.count {\n        if arr[i] <= prev {\n            prev = arr[i]\n\
    \            largestIndex = i\n        }\n    }\n    return largestIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpr9l6c09o/tmpr9l6c09o.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb24475c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb2416cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb2416c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb2416b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9l6c09o                        0x000055db744ea552 <unavailable> + 5458

    5    libc.so.6                          0x00002acb24661460 __libc_start_main +
    245

    6    tmpr9l6c09o                        0x000055db744ea1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 0..<arr.count-1 {\n        if arr[i] < arr[i+1]\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpoa9mzw_c/tmpoa9mzw_c.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb0b099c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb0ad90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb0ad90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb0ad8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoa9mzw_c                        0x000056460e39d552 <unavailable> + 5458

    5    libc.so.6                          0x00002acb0b285460 __libc_start_main +
    245

    6    tmpoa9mzw_c                        0x000056460e39d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i] > arr[i + 1] {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpl_qw7khi/tmpl_qw7khi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10b6448c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10b613fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10b613f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10b613e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_qw7khi                        0x0000558c174d5552 <unavailable> + 5458

    5    libc.so.6                          0x00002b10b6634460 __libc_start_main +
    245

    6    tmpl_qw7khi                        0x0000558c174d51a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  var result = -1\n  for index in 1..<arr.count {\n    if arr[index\
    \ - 1] >= arr[index] {\n      result = index\n    }\n  }\n  return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b6786f2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6786c21561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6786c21286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6786c2113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6786c20bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpgoltxyc3                        0x00005643430549c2 <unavailable> + 6594

    6    tmpgoltxyc3                        0x000056434305481c <unavailable> + 6172

    7    libc.so.6                          0x00002b6787116460 __libc_start_main +
    245

    8    tmpgoltxyc3                        0x00005643430541a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return can_arrange_helper(arr: arr, idx: 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmw186_su.swift:12:12: error: cannot find 'can_arrange_helper' in\
    \ scope\n    return can_arrange_helper(arr: arr, idx: 0)\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // Write your code here.\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpd_v8nyhl/tmpd_v8nyhl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f99744c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f9943bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f9943b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f9943a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_v8nyhl                        0x000055685cfe9312 <unavailable> + 4882

    5    libc.so.6                          0x00002b0f99930460 __libc_start_main +
    245

    6    tmpd_v8nyhl                        0x000055685cfe8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    var prev = Int.min\n    for (i, v)\
    \ in arr.enumerated() {\n        if v >= prev {\n            index = i\n     \
    \       prev = v\n        }\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpj4tgb2zz/tmpj4tgb2zz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae013271c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae012f68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae012f68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae012f677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4tgb2zz                        0x000055a65e654532 <unavailable> + 5426

    5    libc.so.6                          0x00002ae01345d460 __libc_start_main +
    245

    6    tmpj4tgb2zz                        0x000055a65e654189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    for i in (0..<arr.count-1).reversed()\
    \ {\n        if arr[i] > arr[i+1] {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp055ja7tq/tmp055ja7tq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d3f90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d3c87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d3c87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d3c867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp055ja7tq                        0x000055cf96eff722 <unavailable> + 5922

    5    libc.so.6                          0x00002b09d417c460 __libc_start_main +
    245

    6    tmp055ja7tq                        0x000055cf96eff379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var idx = -1\n    for i in 1..<arr.count {\n        if\
    \ arr[i] < arr[i - 1] {\n            idx = i\n            break\n        }\n \
    \   }\n    return idx\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp9blqtuo2/tmp9blqtuo2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b399ba9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b399b795b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b399b795988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b399b7947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9blqtuo2                        0x000055cc3456c7f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b399bc8a460 __libc_start_main +
    245

    6    tmp9blqtuo2                        0x000055cc3456c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    var arr = arr\n    var dp = Array(repeating: 1, count:\
    \ arr.count)\n    var largest = -1\n    \n    for i in 1..<arr.count {\n     \
    \   if arr[i] > arr[i - 1] {\n            dp[i] = dp[i - 1] + 1\n        }\n \
    \       if dp[i] > dp[largest] {\n            largest = i\n        }\n    }\n\
    \    \n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fa6701c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fa63f8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6fa63f8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6fa63f813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6fa63f7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6fa61f7e83 <unavailable> + 188035

    6    tmp_seydjs3                        0x0000561c048cbce2 <unavailable> + 7394

    7    tmp_seydjs3                        0x0000561c048cb594 <unavailable> + 5524

    8    libc.so.6                          0x00002b6fa68ed460 __libc_start_main +
    245

    9    tmp_seydjs3                        0x0000561c048cb269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var retVal = -1\n    for i in 0..<arr.count - 1 {\n   \
    \     if arr[i] > arr[i + 1] {\n            retVal = i\n            break\n  \
    \      }\n    }\n    return retVal\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp_zivk78_/tmp_zivk78_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80414e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80411ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80411dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80411dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zivk78_                        0x0000560f09042552 <unavailable> + 5458

    5    libc.so.6                          0x00002b80416d2460 __libc_start_main +
    245

    6    tmp_zivk78_                        0x0000560f090421a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ max = arr[0]\n    var index = -1\n    for i in 1..<arr.count {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n            index = i\n        }\n    }\n\
    \    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8w4gpszq/tmp8w4gpszq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8b53e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8b50d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8b50d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8b50d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8w4gpszq                        0x000055d9753ec552 <unavailable> + 5458

    5    libc.so.6                          0x00002ab8b55cc460 __libc_start_main +
    245

    6    tmp8w4gpszq                        0x000055d9753ec1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var indx = -1\n    for i in 1..<arr.count {\n        if\
    \ arr[i] <= arr[i - 1] {\n            indx = i\n        }\n    }\n    return indx\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf57970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf57667561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf57667286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf5766713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf57666bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp03a1gcf6                        0x0000559d7d41f9c2 <unavailable> + 6594

    6    tmp03a1gcf6                        0x0000559d7d41f81c <unavailable> + 6172

    7    libc.so.6                          0x00002aaf57b5c460 __libc_start_main +
    245

    8    tmp03a1gcf6                        0x0000559d7d41f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  var index = -1\n  for i in 0..<arr.count - 1 {\n    if arr[i]\
    \ > arr[i + 1] {\n      index = i\n    }\n  }\n  return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2_mt66vf/tmp2_mt66vf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea42a31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea42728b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea42728988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea427277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2_mt66vf                        0x000056444b708552 <unavailable> + 5458

    5    libc.so.6                          0x00002aea42c1d460 __libc_start_main +
    245

    6    tmp2_mt66vf                        0x000056444b7081a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // This is your job. :)\n    let _ = arr\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmdp3bhw_/tmpmdp3bhw_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30ea7f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30ea4e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30ea4e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30ea4e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmdp3bhw_                        0x0000556c3fe1f312 <unavailable> + 4882

    5    libc.so.6                          0x00002b30ea9dc460 __libc_start_main +
    245

    6    tmpmdp3bhw_                        0x0000556c3fe1ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var i = 0\n    while\
    \ i < arr.count {\n        if arr[i] == arr[i + 1] {\n            i += 1\n   \
    \     } else if arr[i] != arr[i + 1] - 1 {\n            return i\n        }\n\
    \        i += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b47354c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b4704b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7b4704b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7b4704b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7b4704abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7b46e4ae83 <unavailable> + 188035

    6    tmpb3nnchca                        0x00005568dddd695f <unavailable> + 6495

    7    tmpb3nnchca                        0x00005568dddd6464 <unavailable> + 5220

    8    libc.so.6                          0x00002b7b47540460 __libc_start_main +
    245

    9    tmpb3nnchca                        0x00005568dddd6139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // TODO: Write solution here\n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpl3vxv4m5/tmpl3vxv4m5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8ff90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ff601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ff601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ff6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl3vxv4m5                        0x00005602e8687312 <unavailable> + 4882

    5    libc.so.6                          0x00002af8ffaf6460 __libc_start_main +
    245

    6    tmpl3vxv4m5                        0x00005602e8686f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let array = arr\n    let sortedArray = array.sorted()\n\
    \    let reversedArray = sortedArray.reversed()\n    var largestIndex = -1\n \
    \   var i = 1\n    while(i < reversedArray.count) {\n        if(reversedArray[i]\
    \ == (reversedArray[i-1] - 1)) {\n            largestIndex = reversedArray.count\
    \ - i\n        }\n        i += 1\n    }\n    return largestIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmptlmdqof1.swift:18:26: error: cannot convert value of type 'Int'\
    \ to expected argument type 'ReversedCollection<[Int]>.Index'\n        if(reversedArray[i]\
    \ == (reversedArray[i-1] - 1)) {\n                         ^\n/tmp/tmptlmdqof1.swift:18:48:\
    \ error: cannot convert value of type 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n\
    \        if(reversedArray[i] == (reversedArray[i-1] - 1)) {\n                \
    \                               ^\n"
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var i = arr.count - 1\n    while i > 0 {\n        if arr[i]\
    \ < arr[i - 1] {\n            return i - 1\n        }\n        i -= 1\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp7168zd4u/tmp7168zd4u.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b50f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b4de8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b4de8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b4de77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7168zd4u                        0x0000559738ade3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b31b52dd460 __libc_start_main +
    245

    6    tmp7168zd4u                        0x0000559738ade019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var arr2 =\
    \ arr\n    arr2.sort()\n    var maxI = -1\n    for i in 0..<arr2.count - 1 {\n\
    \        if arr2[i + 1] > arr2[i] {\n            maxI = max(maxI, arr.firstIndex(of:\
    \ arr2[i + 1])!)\n        }\n    }\n    return maxI\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfr486lx4/tmpfr486lx4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a847a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a84498b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a84498988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a844977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfr486lx4                        0x000055841b4ae772 <unavailable> + 6002

    5    libc.so.6                          0x00002b4a8498d460 __libc_start_main +
    245

    6    tmpfr486lx4                        0x000055841b4ae3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var high = arr.count - 1\n    var low = 0\n    while low\
    \ <= high {\n        let mid = (low + high) / 2\n        if arr[mid] > arr[mid\
    \ - 1] {\n            low = mid + 1\n        } else {\n            if mid == 0\
    \ || arr[mid] > arr[mid - 2] {\n                return mid - 1\n            }\n\
    \            high = mid - 1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpp0twztnr/tmpp0twztnr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd29e3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd29b32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd29b32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd29b317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0twztnr                        0x0000564497a69462 <unavailable> + 5218

    5    libc.so.6                          0x00002afd2a027460 __libc_start_main +
    245

    6    tmpp0twztnr                        0x0000564497a690b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let sorted = arr.sorted()\n    for i in (0..<sorted.count\
    \ - 1).reversed() {\n        if sorted[i] > sorted[i + 1] {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp115_m9nw/tmp115_m9nw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5e67b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5e64a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5e64a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5e64a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp115_m9nw                        0x0000563d78ad67c2 <unavailable> + 6082

    5    libc.so.6                          0x00002ac5e699c460 __libc_start_main +
    245

    6    tmp115_m9nw                        0x0000563d78ad6419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count\
    \ - 1 {\n        if arr[i + 1] - arr[i] != 1 {\n            return i\n       \
    \ }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpq8ps7t9s/tmpq8ps7t9s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad492409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad492100b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad492100988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4920ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8ps7t9s                        0x000055886e897672 <unavailable> + 5746

    5    libc.so.6                          0x00002ad4925f5460 __libc_start_main +
    245

    6    tmpq8ps7t9s                        0x000055886e8972c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    var previous = -1\n    for (index,\
    \ element) in arr.enumerated() {\n        if element <= previous {\n         \
    \   result = index - 1\n            break\n        }\n        previous = element\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphjsssmgm/tmphjsssmgm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad659320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad659017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad659017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6590167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphjsssmgm                        0x00005573c7787532 <unavailable> + 5426

    5    libc.so.6                          0x00002ad65950c460 __libc_start_main +
    245

    6    tmphjsssmgm                        0x00005573c7787189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = arr.count - 1\n    while index > 0 {\n    \
    \    if arr[index] < arr[index - 1] {\n            return index - 1\n        }\n\
    \        index -= 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpyapiqgms/tmpyapiqgms.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab43a7f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab43a4f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab43a4f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab43a4ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyapiqgms                        0x000055bd8b43c3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002ab43a9e5460 __libc_start_main +
    245

    6    tmpyapiqgms                        0x000055bd8b43c019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var largest\
    \ = -1\n    var prev = arr[0]\n    for (index, value) in arr.enumerated() {\n\
    \        if index == 0 { continue }\n        if value <= prev {\n            largest\
    \ = index\n        }\n        prev = value\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    var last : Int = arr[0]\n    var index : Int = 0\n\
    \    var lastIndex : Int = 0\n    \n    for i in 1...arr.count-1 {\n        if\
    \ arr[i] < last {\n            index = i\n            lastIndex = i\n        }\n\
    \        last = arr[i]\n    }\n    \n    return index == lastIndex ? -1 : index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3c4yu10f/tmp3c4yu10f.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25b1225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25b0f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25b0f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25b0f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3c4yu10f                        0x000055992f85b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b25b1411460 __libc_start_main +
    245

    6    tmp3c4yu10f                        0x000055992f85b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let arr = arr.filter { $0 > 0 }\n    if arr.count < 2 {\n\
    \        return -1\n    }\n    let sortedArr = arr.sorted()\n    var largestIndex\
    \ = 0\n    for i in 1..<sortedArr.count {\n        if sortedArr[i] <= sortedArr[i\
    \ - 1] {\n            largestIndex = i\n        }\n    }\n    return largestIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_svj6s4v/tmp_svj6s4v.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accbe8a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accbe599b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accbe599988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accbe5987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_svj6s4v                        0x0000559e0a85e6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002accbea8e460 __libc_start_main +
    245

    6    tmp_svj6s4v                        0x0000559e0a85e309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for i in 0..<arr.count - 1 {\n  \
    \      if arr[i] <= arr[i + 1] {\n            largest = i\n        }\n    }\n\
    \    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxrl1rm7n/tmpxrl1rm7n.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b155d2aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b155cfa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b155cfa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b155cfa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxrl1rm7n                        0x000055973fcfd61f <unavailable> + 5663

    5    libc.so.6                          0x00002b155d496460 __libc_start_main +
    245

    6    tmpxrl1rm7n                        0x000055973fcfd1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 0..<arr.count-1 {\n        if arr[i] > arr[i+1]\
    \ {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpp5renf23/tmpp5renf23.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6547b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6544b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6544b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6544af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5renf23                        0x00005642d4bbe552 <unavailable> + 5458

    5    libc.so.6                          0x00002ae6549a5460 __libc_start_main +
    245

    6    tmpp5renf23                        0x00005642d4bbe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    // Create a hash table with the elements of the input\
    \ array as the keys\n    // and their indices as the values.\n    var hash_table\
    \ = [Int: Int]()\n    for i in 0..<arr.count {\n        hash_table[arr[i]] = i\n\
    \    }\n    \n    // Iterate over the hash table and find the first element which\
    \ is not\n    // greater than or equal to the element preceding it.\n    var largest_index\
    \ = -1\n    for i in 0..<arr.count - 1 {\n        if hash_table[arr[i]]! < hash_table[arr[i\
    \ + 1]]! {\n            largest_index = hash_table[arr[i + 1]]!\n            break\n\
    \        }\n    }\n    \n    return largest_index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfetsfq1w/tmpfetsfq1w.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39117e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39114d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39114d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39114d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfetsfq1w                        0x000055dd48fc9672 <unavailable> + 5746

    5    libc.so.6                          0x00002b39119cd460 __libc_start_main +
    245

    6    tmpfetsfq1w                        0x000055dd48fc92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var ans = -1\n    var idx = arr.count - 1\n    while idx\
    \ > 0 {\n        let current = arr[idx]\n        let prev = arr[idx - 1]\n   \
    \     if current <= prev {\n            ans = idx\n            idx -= 1\n    \
    \    } else {\n            idx -= 2\n        }\n    }\n    return ans\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2cvq5zeu/tmp2cvq5zeu.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64b5de1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64b5ad8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64b5ad8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64b5ad77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2cvq5zeu                        0x0000562e949ff3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b64b5fcd460 __libc_start_main +
    245

    6    tmp2cvq5zeu                        0x0000562e949ff019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    for\
    \ index in 0..<arr.count - 1 {\n        if arr[index] > arr[index + 1] {\n   \
    \         return index\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpel8k_gzj/tmpel8k_gzj.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbdce84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbdcb7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbdcb7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbdcb7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpel8k_gzj                        0x000055a37cd4b552 <unavailable> + 5458

    5    libc.so.6                          0x00002afbdd070460 __libc_start_main +
    245

    6    tmpel8k_gzj                        0x000055a37cd4b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  let sorted = arr.sorted()\n  var index = -1\n  for i in 0..<sorted.count\
    \ - 1 {\n    if sorted[i] <= sorted[i + 1] {\n      index = i\n    }\n  }\n  return\
    \ index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2,\
    \ 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpd4c25k2g/tmpd4c25k2g.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2b54b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2b51aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2b51aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2b51a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4c25k2g                        0x000055ab3697f6bf <unavailable> + 5823

    5    libc.so.6                          0x00002ac2b569f460 __libc_start_main +
    245

    6    tmpd4c25k2g                        0x000055ab3697f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var right_min = Int.max\n    var result = -1\n    for i\
    \ in (0..<arr.count).reversed() {\n        let current = arr[i]\n        if current\
    \ <= right_min {\n            right_min = current\n        } else {\n        \
    \    result = i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp33bxdrnj/tmp33bxdrnj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75e4c72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75e4969b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75e4969988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75e49687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33bxdrnj                        0x0000557db2a12722 <unavailable> + 5922

    5    libc.so.6                          0x00002b75e4e5e460 __libc_start_main +
    245

    6    tmp33bxdrnj                        0x0000557db2a12379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in (0..<arr.count - 1).reversed() {\n        if arr[i]\
    \ > arr[i + 1] {\n            return i\n        }\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzcxtontn/tmpzcxtontn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c2e507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c2e1feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c2e1fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c2e1fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcxtontn                        0x0000562159710722 <unavailable> + 5922

    5    libc.so.6                          0x00002b3c2e6f3460 __libc_start_main +
    245

    6    tmpzcxtontn                        0x0000562159710379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest: Int = 0\n    var result: Int = -1\n    for\
    \ i in 1..<arr.count {\n        if arr[i] >= arr[i - 1] {\n            if i >\
    \ largest {\n                largest = i\n            }\n        } else {\n  \
    \          result = largest\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpj3ixbjgr/tmpj3ixbjgr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3136828c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b313651fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b313651f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b313651e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3ixbjgr                        0x000055e770cd9552 <unavailable> + 5458

    5    libc.so.6                          0x00002b3136a14460 __libc_start_main +
    245

    6    tmpj3ixbjgr                        0x000055e770cd91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    for i in (0..<arr.count - 1).reversed()\
    \ {\n        if arr[i] <= arr[i + 1] {\n            index = i\n        } else\
    \ {\n            break\n        }\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpv0rh0135/tmpv0rh0135.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8b2331c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8b2028b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8b2028988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8b20277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0rh0135                        0x0000561db0f857ef <unavailable> + 6127

    5    libc.so.6                          0x00002ab8b251d460 __libc_start_main +
    245

    6    tmpv0rh0135                        0x0000561db0f85379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var maxIndex\
    \ = 0\n    for i in 1..<arr.count {\n        if arr[i] < arr[i - 1] {\n      \
    \      return i - 1\n        }\n        if arr[i] > arr[maxIndex] {\n        \
    \    maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpxwiw352p/tmpxwiw352p.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d42899c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d42590b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d42590988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d4258f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxwiw352p                        0x00005637bc056552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6d42a85460 __libc_start_main +
    245

    6    tmpxwiw352p                        0x00005637bc0561a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ max_index = 0\n    for i in 0..<arr.count {\n        if arr[i] <= arr[max_index]\
    \ {\n            max_index = i\n        }\n    }\n    return max_index\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8jxxn70t/tmp8jxxn70t.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4324ca0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4324997b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4324997988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43249967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jxxn70t                        0x000055f522f9b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b4324e8c460 __libc_start_main +
    245

    6    tmp8jxxn70t                        0x000055f522f9b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxSoFar = arr[0]\n    var index = -1\n    for i in\
    \ 1..<arr.count {\n        if arr[i] <= maxSoFar {\n            index = i\n  \
    \      } else {\n            maxSoFar = arr[i]\n        }\n    }\n    return index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b09f8b91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09f8888561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b09f8888286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b09f888813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b09f8887bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b09f8687e83 <unavailable> + 188035

    6    tmpfa5vja7t                        0x000055b16eb3f932 <unavailable> + 6450

    7    tmpfa5vja7t                        0x000055b16eb3f81c <unavailable> + 6172

    8    libc.so.6                          0x00002b09f8d7d460 __libc_start_main +
    245

    9    tmpfa5vja7t                        0x000055b16eb3f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let n = arr.count\n    var res = -1\n    for i in (0..<n-1).reversed()\
    \ {\n        if arr[i] >= arr[i+1] {\n            res = i\n        } else {\n\
    \            break\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpmo4rk1tt/tmpmo4rk1tt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac18b03fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac18ad36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac18ad36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac18ad357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo4rk1tt                        0x000055de49692722 <unavailable> + 5922

    5    libc.so.6                          0x00002ac18b22b460 __libc_start_main +
    245

    6    tmpmo4rk1tt                        0x000055de49692379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    for i in 1..<arr.count {\n        if arr[i] < arr[i-1]\
    \ {\n            return i-1\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpg0zmlhh7/tmpg0zmlhh7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05a3fcec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05a3cc5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05a3cc5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05a3cc47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0zmlhh7                        0x000055e2987f3552 <unavailable> + 5458

    5    libc.so.6                          0x00002b05a41ba460 __libc_start_main +
    245

    6    tmpg0zmlhh7                        0x000055e2987f31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count < 2 {\n        return -1\n    }\n    var index\
    \ = -1\n    for i in (0..<arr.count-1).reversed() {\n        if arr[i] <= arr[i+1]\
    \ {\n            index = i\n        } else {\n            break\n        }\n \
    \   }\n    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp5_v6i796/tmp5_v6i796.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b083f691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b083f388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b083f388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b083f3877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5_v6i796                        0x0000562b25b9e7ef <unavailable> + 6127

    5    libc.so.6                          0x00002b083f87d460 __libc_start_main +
    245

    6    tmp5_v6i796                        0x0000562b25b9e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 0..<arr.count - 1 {\n        if arr[i] > arr[i\
    \ + 1] {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpibz9yzjn/tmpibz9yzjn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc0442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc0139b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc0139988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc01387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpibz9yzjn                        0x0000563943cac552 <unavailable> + 5458

    5    libc.so.6                          0x00002b7cc062e460 __libc_start_main +
    245

    6    tmpibz9yzjn                        0x0000563943cac1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var prev =\
    \ arr[0]\n    var index = 0\n    for (i, v) in arr.enumerated() {\n        if\
    \ v > prev {\n            prev = v\n            index = i\n        }\n    }\n\
    \    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmped_sp4zx/tmped_sp4zx.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaaf2b52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaaf2849b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaaf2849988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaaf28487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped_sp4zx                        0x00005610fc82d5e2 <unavailable> + 5602

    5    libc.so.6                          0x00002aaaf2d3e460 __libc_start_main +
    245

    6    tmped_sp4zx                        0x00005610fc82d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count < 2 {\n        return -1\n    }\n    var previousElement\
    \ = arr[0]\n    var index = 1\n    while index < arr.count {\n        if arr[index]\
    \ >= previousElement {\n            previousElement = arr[index]\n           \
    \ index += 1\n        } else {\n            return index\n        }\n    }\n \
    \   return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp8qxzf302/tmp8qxzf302.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4019886c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b401957db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b401957d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b401957c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8qxzf302                        0x000056307b929669 <unavailable> + 5737

    5    libc.so.6                          0x00002b4019a72460 __libc_start_main +
    245

    6    tmp8qxzf302                        0x000056307b929019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    var index = arr.count - 1\n    var previous = -1\n\
    \    \n    while index >= 0 {\n        if arr[index] > previous {\n          \
    \  return index\n        }\n        previous = arr[index]\n        index -= 1\n\
    \    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpa252uztq/tmpa252uztq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b263aa22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b263a719b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b263a719988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b263a7187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa252uztq                        0x000055e483c4b3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b263ac0e460 __libc_start_main +
    245

    6    tmpa252uztq                        0x000055e483c4b019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    for i in 0..<arr.count - 1 {\n        if arr[i] >\
    \ arr[i + 1] {\n            return i\n        }\n    }\n    \n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2hkrz0m7/tmp2hkrz0m7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba59c075c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba59bd6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba59bd6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba59bd6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hkrz0m7                        0x000055830dad7552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba59c261460 __libc_start_main +
    245

    6    tmp2hkrz0m7                        0x000055830dad71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = arr.count - 1\n    while index > 0 {\n    \
    \    if arr[index] > arr[index - 1] {\n            break\n        }\n        index\
    \ -= 1\n    }\n    return index == 0 ? -1 : index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1pfb_8sw/tmp1pfb_8sw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b85dd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b85ac9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b85ac9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b85ac87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1pfb_8sw                        0x000055699cb9a3c2 <unavailable> + 5058

    5    libc.so.6                          0x00002b6b85fbe460 __libc_start_main +
    245

    6    tmp1pfb_8sw                        0x000055699cb9a019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var (largest, idx) = (arr[0], -1)\n    for (idx, val) in\
    \ arr.enumerated() {\n        if val > largest {\n            largest = val\n\
    \        } else if val < largest {\n            return idx - 1\n        }\n  \
    \  }\n    return idx\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp_o_gxje6/tmp_o_gxje6.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c6afacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c6aca3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c6aca3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c6aca27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_o_gxje6                        0x0000560784e23582 <unavailable> + 5506

    5    libc.so.6                          0x00002b6c6b198460 __libc_start_main +
    245

    6    tmp_o_gxje6                        0x0000560784e231d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // return greatest index of value greater than previous\
    \ value\n    var max = -1\n    for i in 1..<arr.count {\n        if arr[i] > arr[i\
    \ - 1] {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpdc2irbvz/tmpdc2irbvz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e04e27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e04b1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e04b1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e04b1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdc2irbvz                        0x000055cb7e214552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9e05013460 __libc_start_main +
    245

    6    tmpdc2irbvz                        0x000055cb7e2141a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var n = arr.count\
    \ - 1\n    while n > 0 {\n        if arr[n] <= arr[n - 1] {\n            n -=\
    \ 1\n        } else {\n            return n - 1\n        }\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3,\
    \ 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpeieo7rj7/tmpeieo7rj7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5373944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b537363bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b537363b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b537363a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeieo7rj7                        0x00005624fd60d48f <unavailable> + 5263

    5    libc.so.6                          0x00002b5373b30460 __libc_start_main +
    245

    6    tmpeieo7rj7                        0x00005624fd60d019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var maxIndex = 0\n    var max = arr[0]\n    for i in 1..<arr.count\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    if arr[maxIndex] - 1 == arr[maxIndex - 1] {\n   \
    \     return maxIndex\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpl_gwnw6n/tmpl_gwnw6n.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b8ba1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b8b715b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b8b715988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b8b7147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_gwnw6n                        0x000056464ae40552 <unavailable> + 5458

    5    libc.so.6                          0x00002b0b8bc0a460 __libc_start_main +
    245

    6    tmpl_gwnw6n                        0x000056464ae401a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    \n    var myArr = arr\n    var highest = -1\n    var result\
    \ = -1\n    \n    while myArr.count > 1 {\n        let last = myArr.removeLast()\n\
    \        if last >= highest {\n            result = arr.count - myArr.count -\
    \ 1\n            highest = last\n        }\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpbybbx0ya/tmpbybbx0ya.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79d5934c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79d562bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79d562b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79d562a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbybbx0ya                        0x0000565545655452 <unavailable> + 5202

    5    libc.so.6                          0x00002b79d5b20460 __libc_start_main +
    245

    6    tmpbybbx0ya                        0x00005655456550a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index = -1\n    var maxVal = -1\n    var maxValIndex\
    \ = -1\n    var count = 0\n    for a in arr {\n        if a >= maxVal {\n    \
    \        maxVal = a\n            maxValIndex = count\n        }\n        if a\
    \ < maxVal && maxValIndex > index {\n            index = maxValIndex\n       \
    \ }\n        count += 1\n    }\n    return index\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpiuxrmz1d/tmpiuxrmz1d.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb376ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb373e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb373e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb373e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuxrmz1d                        0x0000560f8c61b482 <unavailable> + 5250

    5    libc.so.6                          0x00002afb378d8460 __libc_start_main +
    245

    6    tmpiuxrmz1d                        0x0000560f8c61b0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = arr[0]\n    var result = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] <= max {\n            result = i\n        } else {\n  \
    \          max = arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e9b1efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e9aee6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9e9aee6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9e9aee613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9e9aee5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9e9ace5e83 <unavailable> + 188035

    6    tmpz3v0r8y0                        0x0000562aead5d932 <unavailable> + 6450

    7    tmpz3v0r8y0                        0x0000562aead5d81c <unavailable> + 6172

    8    libc.so.6                          0x00002b9e9b3db460 __libc_start_main +
    245

    9    tmpz3v0r8y0                        0x0000562aead5d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let N = arr.count\n    var max_idx = -1\n    for i in 0..<N-1\
    \ {\n        if arr[i] >= arr[i+1] {\n            max_idx = i\n        }\n   \
    \ }\n    return max_idx\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsl3rvkx4/tmpsl3rvkx4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac44beecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac44bbe3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac44bbe3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac44bbe27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsl3rvkx4                        0x0000562b43afe552 <unavailable> + 5458

    5    libc.so.6                          0x00002ac44c0d8460 __libc_start_main +
    245

    6    tmpsl3rvkx4                        0x0000562b43afe1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var x = 0\n    for index in arr.indices.dropFirst() {\n\
    \        if arr[index] < arr[index - 1] {\n            return x\n        }\n \
    \       x += 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmp700u3m7e/tmp700u3m7e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b89fa3a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89fa09ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89fa09a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89fa0997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp700u3m7e                        0x000055d34c5ed622 <unavailable> + 5666

    5    libc.so.6                          0x00002b89fa58f460 __libc_start_main +
    245

    6    tmp700u3m7e                        0x000055d34c5ed279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: 1
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // Your code here\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: SyntaxError
  stderr: '/tmp/tmpnq9idvkm.swift:13:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    for\
    \ i in 0..<arr.count - 1 {\n        if arr[i] >= arr[i + 1] {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2,\
    \ 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\
    assert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr: [] as\
    \ [Int]) == -1)"
  status: Exception
  stderr: 'tmpxhqfxj0f/tmpxhqfxj0f.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29ec610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29ec307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29ec307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29ec3067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxhqfxj0f                        0x000055fe051c7552 <unavailable> + 5458

    5    libc.so.6                          0x00002b29ec7fc460 __libc_start_main +
    245

    6    tmpxhqfxj0f                        0x000055fe051c71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  var largestIndexOfElemNotGreaterThanPrecedingElem = -1\n\
    \  var largestValueOfPrecedingElem = Int.min\n  var indexOfLastSmallestElem =\
    \ -1\n  var nextSmallestValue = Int.max\n  var lastSmallestValue = Int.max\n \
    \ var secondLastSmallestValue = Int.max\n  var secondLastSmallestValueIndex =\
    \ -1\n  let n = arr.count\n  for i in 0..<n {\n    let currentValue = arr[i]\n\
    \    if currentValue > largestValueOfPrecedingElem {\n      largestValueOfPrecedingElem\
    \ = currentValue\n      largestIndexOfElemNotGreaterThanPrecedingElem = i\n  \
    \  }\n    if currentValue <= lastSmallestValue {\n      secondLastSmallestValue\
    \ = lastSmallestValue\n      secondLastSmallestValueIndex = indexOfLastSmallestElem\n\
    \      lastSmallestValue = currentValue\n      indexOfLastSmallestElem = i\n \
    \   } else if currentValue < nextSmallestValue {\n      nextSmallestValue = currentValue\n\
    \    }\n  }\n  if nextSmallestValue < secondLastSmallestValue {\n    return indexOfLastSmallestElem\n\
    \  }\n  return largestIndexOfElemNotGreaterThanPrecedingElem\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpo9ekddp8/tmpo9ekddp8.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9734fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9734cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9734cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9734cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9ekddp8                        0x000055be4dad4552 <unavailable> + 5458

    5    libc.so.6                          0x00002b97351c6460 __libc_start_main +
    245

    6    tmpo9ekddp8                        0x000055be4dad41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let n = arr.count\n    var previous = arr[0]\n    var largest_index\
    \ = -1\n    for i in 1..<n {\n        if arr[i] >= previous {\n            largest_index\
    \ = i\n        }\n        previous = arr[i]\n    }\n    return largest_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpzhl1ul_8/tmpzhl1ul_8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26740c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2673dbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2673dbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2673dbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhl1ul_8                        0x0000564236952552 <unavailable> + 5458

    5    libc.so.6                          0x00002b26742b3460 __libc_start_main +
    245

    6    tmpzhl1ul_8                        0x00005642369521a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpa90ehqt1/tmpa90ehqt1.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7947eb2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7947ba9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7947ba9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7947ba87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa90ehqt1                        0x000055c8b808d312 <unavailable> + 4882

    5    libc.so.6                          0x00002b794809e460 __libc_start_main +
    245

    6    tmpa90ehqt1                        0x000055c8b808cf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978417
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ newArr = arr.sorted()\n    var res = -1\n    for i in (0..<newArr.count).reversed()\
    \ {\n        if newArr[i] >= arr[i] {\n            res = i\n        }\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp10k005w3/tmp10k005w3.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c8a097c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c89d8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c89d8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c89d8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10k005w3                        0x0000557472c7b7c2 <unavailable> + 6082

    5    libc.so.6                          0x00002b9c8a283460 __libc_start_main +
    245

    6    tmp10k005w3                        0x0000557472c7b419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var count = arr.count - 1\n    if arr.count <= 1 {\n  \
    \      return -1\n    }\n    for i in stride(from: arr.count - 1, to: 0, by: -1)\
    \ {\n        if arr[i] > arr[i - 1] {\n            count = i - 1\n           \
    \ break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp51kpqyh2/tmp51kpqyh2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4738ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4735f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4735f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4735f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp51kpqyh2                        0x00005633de37f69f <unavailable> + 5791

    5    libc.so.6                          0x00002ac473aeb460 __libc_start_main +
    245

    6    tmp51kpqyh2                        0x00005633de37f229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    var\
    \ max_index = 0\n    for i in 1..<arr.count {\n        if arr[i] > arr[max_index]\
    \ {\n            max_index = i\n        }\n    }\n    for i in 0..<arr.count {\n\
    \        if arr[i] == arr[max_index] {\n            continue\n        }\n    \
    \    if arr[i] > arr[max_index] {\n            return -1\n        }\n    }\n \
    \   return max_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp3fgmfrnv/tmp3fgmfrnv.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaccb82dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaccb524b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaccb524988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaccb5237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3fgmfrnv                        0x0000556ef970b552 <unavailable> + 5458

    5    libc.so.6                          0x00002aaccba19460 __libc_start_main +
    245

    6    tmp3fgmfrnv                        0x0000556ef970b1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let sorted = arr.sorted()\n    for i in 0..<sorted.count-1\
    \ {\n        if sorted[i] + 1 == sorted[i+1] {\n            return arr.firstIndex(of:\
    \ sorted[i+1])!\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphuwyjkoj/tmphuwyjkoj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9991b03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99917fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99917fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99917f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphuwyjkoj                        0x0000562ace8c76a2 <unavailable> + 5794

    5    libc.so.6                          0x00002b9991cef460 __libc_start_main +
    245

    6    tmphuwyjkoj                        0x0000562ace8c72f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var maxIndex\
    \ = 0\n    for i in 1..<arr.count {\n        let cur = arr[i]\n        let prev\
    \ = arr[i - 1]\n        if cur < prev {\n            return maxIndex\n       \
    \ }\n        if cur > arr[maxIndex] {\n            maxIndex = i\n        }\n \
    \   }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpfhgiezjo/tmpfhgiezjo.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6145941c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6145638b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6145638988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61456377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfhgiezjo                        0x000055678805d552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6145b2d460 __libc_start_main +
    245

    6    tmpfhgiezjo                        0x000055678805d1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max_index = -1\n    var max_element = arr[0]\n    for\
    \ i in 1..<arr.count {\n        if arr[i] > max_element {\n            max_element\
    \ = arr[i]\n            max_index = i\n        }\n    }\n    return max_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6gxkbrid/tmp6gxkbrid.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaedddecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeddae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeddae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeddae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6gxkbrid                        0x000055695a79c552 <unavailable> + 5458

    5    libc.so.6                          0x00002aaeddfd8460 __libc_start_main +
    245

    6    tmp6gxkbrid                        0x000055695a79c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var largest = -1\n    for i in 0..<arr.count - 1 {\n  \
    \      if arr[i] >= arr[i + 1] {\n            if i > largest {\n             \
    \   largest = i\n            }\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpjza6v_u9/tmpjza6v_u9.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba51c5abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba51c2a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba51c2a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba51c2a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjza6v_u9                        0x0000556a3ed45552 <unavailable> + 5458

    5    libc.so.6                          0x00002ba51c797460 __libc_start_main +
    245

    6    tmpjza6v_u9                        0x0000556a3ed451a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count == 0 {\n        return -1\n    }\n    if arr.count\
    \ == 1 {\n        return -1\n    }\n    var ret = -1\n    for i in 1..<arr.count\
    \ {\n        if arr[i] < arr[i - 1] {\n            ret = i\n            break\n\
    \        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpausoig4m/tmpausoig4m.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd70c2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd70924b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd70924988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd709237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpausoig4m                        0x000055ab18a0c7f9 <unavailable> + 6137

    5    libc.so.6                          0x00002abd70e19460 __libc_start_main +
    245

    6    tmpausoig4m                        0x000055ab18a0c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: 0
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    if arr.count < 2 {\n        return -1\n    }\n    var last\
    \ = arr[0]\n    var ret = -1\n    for idx in 1..<arr.count {\n        if arr[idx]\
    \ < last {\n            ret = idx\n        }\n        last = arr[idx]\n    }\n\
    \    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    for i in 1..<arr.count {\n        if arr[i] >= arr[i -\
    \ 1] { continue }\n        for j in 0..<i {\n            if arr[j] <= arr[i] {\n\
    \                return i\n            }\n        }\n    }\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1c7yun2e/tmp1c7yun2e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae590d3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae590a36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae590a36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae590a357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1c7yun2e                        0x000055b87eeb47f9 <unavailable> + 6137

    5    libc.so.6                          0x00002ae590f2b460 __libc_start_main +
    245

    6    tmp1c7yun2e                        0x000055b87eeb41a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var index: Int = -1\n    for i in (0..<arr.count-1).reversed()\
    \ {\n        if arr[i] <= arr[i+1] {\n            index = i\n        }\n    }\n\
    \    return index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp53q7bawd/tmp53q7bawd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b859e080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b859dd77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b859dd77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b859dd767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp53q7bawd                        0x00005643fd7c2722 <unavailable> + 5922

    5    libc.so.6                          0x00002b859e26c460 __libc_start_main +
    245

    6    tmp53q7bawd                        0x00005643fd7c2379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var arr = arr\n    guard arr.count > 1 else {\n       \
    \ return -1\n    }\n    var index = arr.count - 1\n    for i in 0...arr.count\
    \ - 2 {\n        if arr[i] <= arr[i + 1] {\n            continue\n        }\n\
    \        index = i\n        break\n    }\n    return index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpson9q1h7/tmpson9q1h7.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace0a8ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace0a5e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace0a5e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace0a5e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpson9q1h7                        0x000055fa17466552 <unavailable> + 5458

    5    libc.so.6                          0x00002ace0aad7460 __libc_start_main +
    245

    6    tmpson9q1h7                        0x000055fa174661a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    let lastIndex\
    \ = arr.endIndex - 1\n    var i = lastIndex - 1\n    while i >= 0 {\n        if\
    \ arr[i] <= arr[i + 1] {\n            return i\n        }\n        i -= 1\n  \
    \  }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmphrdc2qs7/tmphrdc2qs7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1fb279c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1faf70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1faf70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1faf6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphrdc2qs7                        0x000055b5c330c4ef <unavailable> + 5359

    5    libc.so.6                          0x00002ad1fb465460 __libc_start_main +
    245

    6    tmphrdc2qs7                        0x000055b5c330c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let sorted = arr.sorted()\n    return sorted.enumerated().reversed().first(where:\
    \ { $0.element == sorted[$0.offset - 1] })?.offset ?? -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4224966c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b422465d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b422465d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b422465d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b422465cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b422445ce83 <unavailable> + 188035

    6    tmpbigvwzk3                        0x00005569b06e7bc6 <unavailable> + 7110

    7    tmpbigvwzk3                        0x00005569b06e817f <unavailable> + 8575

    8    libswiftCore.so                    0x00002b42247649c0 Sequence.first(where:)
    + 435

    9    tmpbigvwzk3                        0x00005569b06e7a79 <unavailable> + 6777

    10   tmpbigvwzk3                        0x00005569b06e7574 <unavailable> + 5492

    11   libc.so.6                          0x00002b4224b52460 __libc_start_main +
    245

    12   tmpbigvwzk3                        0x00005569b06e7249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var maxIndex\
    \ = 0\n    for (i,n) in arr.enumerated() {\n        if i > 0 && n < arr[i-1] {\n\
    \            if i > maxIndex { return -1 }\n            else { return i-1 }\n\
    \        }\n        if n > arr[maxIndex] { maxIndex = i }\n    }\n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp50av1qjm/tmp50av1qjm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25c9d09c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25c9a00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25c9a00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25c99ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp50av1qjm                        0x000055c1f34505e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b25c9ef5460 __libc_start_main +
    245

    6    tmp50av1qjm                        0x000055c1f3450239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n  return arr.enumerated().first(where: { $0.element >= arr[$0.offset\
    \ - 1] })?.offset ?? -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e2e17fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e2de76561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8e2de76286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8e2de7613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8e2de75bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8e2dc75e83 <unavailable> + 188035

    6    tmp3wscjp0d                        0x00005560a59a5a16 <unavailable> + 6678

    7    tmp3wscjp0d                        0x00005560a59a5f7f <unavailable> + 8063

    8    libswiftCore.so                    0x00002b8e2df7d9c0 Sequence.first(where:)
    + 435

    9    tmp3wscjp0d                        0x00005560a59a58e6 <unavailable> + 6374

    10   tmp3wscjp0d                        0x00005560a59a5464 <unavailable> + 5220

    11   libc.so.6                          0x00002b8e2e36b460 __libc_start_main +
    245

    12   tmp3wscjp0d                        0x00005560a59a5139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1u1o2vn8/tmp1u1o2vn8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b610bb3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b610b834b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b610b834988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b610b8337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1u1o2vn8                        0x000055ccb0a8b312 <unavailable> + 4882

    5    libc.so.6                          0x00002b610bd29460 __libc_start_main +
    245

    6    tmp1u1o2vn8                        0x000055ccb0a8af69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978416
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    let asc = arr.sorted()\n    var min = Int.max\n    var\
    \ max = Int.min\n    for (i, v) in arr.enumerated() {\n        if asc[i] < min\
    \ {\n            min = asc[i]\n        }\n        if asc[i] > max {\n        \
    \    max = asc[i]\n        }\n    }\n    let diff = max - min\n    if diff ==\
    \ 0 {\n        return -1\n    }\n    for i in 0..<arr.count - 1 {\n        if\
    \ arr[i] + 1 != arr[i + 1] {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3,\
    \ 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpgrw2uw6f/tmpgrw2uw6f.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf43ddec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf43ad5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf43ad5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf43ad47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgrw2uw6f                        0x00005564ce7d5802 <unavailable> + 6146

    5    libc.so.6                          0x00002aaf43fca460 __libc_start_main +
    245

    6    tmpgrw2uw6f                        0x00005564ce7d5459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var currentMax\
    \ = arr[0]\n    var index = -1\n    for (i, elem) in arr.enumerated() {\n    \
    \    if i == 0 { continue }\n        if elem <= currentMax {\n            currentMax\
    \ = elem\n            index = i\n        }\n    }\n    return index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpqehb_g50/tmpqehb_g50.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1abfba2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1abf899b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1abf899988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1abf8987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqehb_g50                        0x00005562aa8f05e2 <unavailable> + 5602

    5    libc.so.6                          0x00002b1abfd8e460 __libc_start_main +
    245

    6    tmpqehb_g50                        0x00005562aa8f0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // your code here\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpgn3qk71_/tmpgn3qk71_.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa79955c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa7964cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa7964c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa7964b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgn3qk71_                        0x00005639ac58c312 <unavailable> + 4882

    5    libc.so.6                          0x00002afa79b41460 __libc_start_main +
    245

    6    tmpgn3qk71_                        0x00005639ac58bf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var l = -1, r = 0, n = arr.count\n    while r < n {\n \
    \       if arr[r] < arr[r - 1] {\n            l = r - 1\n        }\n        r\
    \ += 1\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e37170c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e36e67561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5e36e67286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5e36e6713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5e36e66bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5e36c66e83 <unavailable> + 188035

    6    tmpmkfgsy6m                        0x000055fac9a5e7e7 <unavailable> + 6119

    7    tmpmkfgsy6m                        0x000055fac9a5e344 <unavailable> + 4932

    8    libc.so.6                          0x00002b5e3735c460 __libc_start_main +
    245

    9    tmpmkfgsy6m                        0x000055fac9a5e019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 0 else { return -1 }\n    for i in (0..<arr.count-1).reversed()\
    \ {\n        if arr[i] > arr[i+1] {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr: [1,\
    \ 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp2rx7mvke/tmp2rx7mvke.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6d60d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6d5dc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6d5dc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6d5dc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2rx7mvke                        0x0000564b2b65e722 <unavailable> + 5922

    5    libc.so.6                          0x00002ac6d62be460 __libc_start_main +
    245

    6    tmp2rx7mvke                        0x0000564b2b65e379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var result = -1\n    for i in (0..<arr.count-1).reversed()\
    \ {\n        if arr[i] > arr[i+1] {\n            break\n        }\n        result\
    \ = i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp1afwi0e4/tmp1afwi0e4.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26dac86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26da97db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26da97d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26da97c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1afwi0e4                        0x000055892c8f67ef <unavailable> + 6127

    5    libc.so.6                          0x00002b26dae72460 __libc_start_main +
    245

    6    tmp1afwi0e4                        0x000055892c8f6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // TODO: Implement\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6lpq3ioa/tmp6lpq3ioa.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7ad6c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7ad3bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7ad3bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7ad3ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6lpq3ioa                        0x00005625f0307312 <unavailable> + 4882

    5    libc.so.6                          0x00002ad7ad8b0460 __libc_start_main +
    245

    6    tmp6lpq3ioa                        0x00005625f0306f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 0 else { return -1 }\n    var stack =\
    \ [Int]()\n    for element in arr {\n        while !stack.isEmpty && stack.last!\
    \ < element {\n            stack.removeLast()\n        }\n        stack.append(element)\n\
    \    }\n    for (index, element) in arr.enumerated() {\n        if element ==\
    \ stack.last! {\n            return index\n        }\n    }\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpm6_ee0mw/tmpm6_ee0mw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf3cf99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf3cc90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf3cc90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf3cc8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6_ee0mw                        0x000055f0c70b49c2 <unavailable> + 6594

    5    libc.so.6                          0x00002adf3d185460 __libc_start_main +
    245

    6    tmpm6_ee0mw                        0x000055f0c70b4619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    for i in 1..<arr.count\
    \ {\n        if arr[i] >= arr[i - 1] {\n            return i - 1\n        }\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(can_arrange(arr:\
    \ [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp960ynu47/tmp960ynu47.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ae7b0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ae7805b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ae7805988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ae78047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp960ynu47                        0x0000560598b0e552 <unavailable> + 5458

    5    libc.so.6                          0x00002b6ae7cfa460 __libc_start_main +
    245

    6    tmp960ynu47                        0x0000560598b0e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    guard arr.count > 1 else { return -1 }\n    var i = arr.count\
    \ - 1\n    while i > 0 {\n        if arr[i - 1] >= arr[i] {\n            i -=\
    \ 1\n        } else {\n            return i - 1\n        }\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3,\
    \ 5]) == 3)\nassert(can_arrange(arr: [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr:\
    \ [1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3])\
    \ == 4)\nassert(can_arrange(arr: [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpsw8yxwiz/tmpsw8yxwiz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77607d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77604c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77604c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77604c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsw8yxwiz                        0x000055e375fe948f <unavailable> + 5263

    5    libc.so.6                          0x00002b77609bd460 __libc_start_main +
    245

    6    tmpsw8yxwiz                        0x000055e375fe9019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    // Maintain max seen so far\n    var max_seen_so_far =\
    \ arr[0]\n    var index = 0\n    var ret = -1\n    // Iterate backwards\n    for\
    \ i in stride(from: arr.count - 1, through: 0, by: -1) {\n        if arr[i] <=\
    \ max_seen_so_far {\n            ret = i\n        }\n        if arr[i] > max_seen_so_far\
    \ {\n            max_seen_so_far = arr[i]\n        }\n    }\n    return ret\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmp6oijfh3z/tmp6oijfh3z.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0aa76d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0aa73c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0aa73c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0aa73c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6oijfh3z                        0x0000559b0c9c35f2 <unavailable> + 5618

    5    libc.so.6                          0x00002b0aa78bc460 __libc_start_main +
    245

    6    tmp6oijfh3z                        0x0000559b0c9c3249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659978418
- exit_code: -4
  program: "\n/// Create a function which returns the largest index of an element\
    \ which\n/// is not greater than or equal to the element immediately preceding\
    \ it. If\n/// no such element exists then return -1. The given array will not\
    \ contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1,\
    \ 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr:\
    \ [Int]) -> Int {\n    var max = -1\n    for i in 0..<arr.count-1 {\n        if\
    \ arr[i] >= arr[i+1] {\n            if i > max {\n                max = i\n  \
    \          }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(can_arrange(arr: [1, 2, 4, 3, 5]) == 3)\nassert(can_arrange(arr:\
    \ [1, 2, 4, 5]) == -1)\nassert(can_arrange(arr: [1, 4, 2, 5, 6, 7, 8, 9, 10])\
    \ == 2)\nassert(can_arrange(arr: [4, 8, 5, 7, 3]) == 4)\nassert(can_arrange(arr:\
    \ [] as [Int]) == -1)"
  status: Exception
  stderr: 'tmpwsg83eze/tmpwsg83eze.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c08b94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c0888bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c0888b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c0888a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsg83eze                        0x00005635de11a552 <unavailable> + 5458

    5    libc.so.6                          0x00002b2c08d80460 __libc_start_main +
    245

    6    tmpwsg83eze                        0x00005635de11a1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659978418
