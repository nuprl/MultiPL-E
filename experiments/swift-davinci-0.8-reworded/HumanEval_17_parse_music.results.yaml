language: swift
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    var musicComponents = music_string.components(separatedBy: \" \")\n    for\
    \ i in 0..<musicComponents.count {\n        switch musicComponents[i] {\n    \
    \    case \"o\":\n            result.append(4)\n        case \"o|\":\n       \
    \     result.append(2)\n        case \".|\":\n            result.append(1)\n \
    \       default:\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_kkm6dge.swift:13:40: error: value of type 'String' has no member\
    \ 'components'\n    var musicComponents = music_string.components(separatedBy:\
    \ \" \")\n                          ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let music = music_string.components(separatedBy:\
    \ \" \")\n    var finalMusic = [Int]()\n    for item in music {\n        switch\
    \ item {\n        case \"o\":\n            finalMusic.append(4)\n        case\
    \ \"o|\":\n            finalMusic.append(2)\n        case \".|\":\n          \
    \  finalMusic.append(1)\n        default:\n            print(\"Invalid input\"\
    )\n        }\n    }\n    return finalMusic\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2cl03ttb.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes = music_string.split(separator:\
    \ \" \")\n    var beat_list: [Int] = []\n    for note in notes {\n        if note\
    \ == \"o\" {\n            beat_list.append(4)\n        } else if note == \"o|\"\
    \ {\n            beat_list.append(2)\n        } else if note == \".|\" {\n   \
    \         beat_list.append(1)\n        }\n    }\n    return beat_list\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // Convert the string into\
    \ an array of strings.\n    let notes = music_string.split(separator: \" \")\n\
    \    // Create a variable to store the beats.\n    var beats = [Int]()\n    //\
    \ Loop through each note.\n    for note in notes {\n        // Check if the note\
    \ is a whole note.\n        if note == \"o\" {\n            // Append 4 to the\
    \ beats.\n            beats.append(4)\n        }\n        // Check if the note\
    \ is a half note.\n        else if note == \"o|\" {\n            // Append 2 to\
    \ the beats.\n            beats.append(2)\n        }\n        // Check if the\
    \ note is a quarter note.\n        else if note == \".|\" {\n            // Append\
    \ 1 to the beats.\n            beats.append(1)\n        }\n    }\n    // Return\
    \ the beats.\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // You can use regex to\
    \ do this exercise.\n    // You can access it like this: NSRegularExpression(pattern:\
    \ \"o|o|\\\\.|\", options: [])\n    // and use function firstMatchInString to\
    \ get the first matching character.\n    // Don't forget to include escape character\
    \ '\\\\' before '.' because it has special meaning in regexp.\n    var result\
    \ = [Int]()\n    let regex = NSRegularExpression(pattern: \"o|o|\\\\.|\", options:\
    \ [])\n    let matches = regex?.matchesInString(music_string, options: [], range:\
    \ NSMakeRange(0, music_string.characters.count))\n    for match in matches! {\n\
    \        let found_match = (music_string as NSString).substringWithRange(match.range)\n\
    \        result.append(beat_length(found_match))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8hjrtmw6.swift:17:17: error: cannot find 'NSRegularExpression'\
    \ in scope\n    let regex = NSRegularExpression(pattern: \"o|o|\\\\.|\", options:\
    \ [])\n                ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp8hjrtmw6.swift:18:76: error:\
    \ cannot find 'NSMakeRange' in scope\n    let matches = regex?.matchesInString(music_string,\
    \ options: [], range: NSMakeRange(0, music_string.characters.count))\n       \
    \                                                                    ^~~~~~~~~~~\n\
    /tmp/tmp8hjrtmw6.swift:20:44: error: cannot find type 'NSString' in scope\n  \
    \      let found_match = (music_string as NSString).substringWithRange(match.range)\n\
    \                                           ^~~~~~~~\n/tmp/tmp8hjrtmw6.swift:20:54:\
    \ error: value of type 'String' has no member 'substringWithRange'\n        let\
    \ found_match = (music_string as NSString).substringWithRange(match.range)\n \
    \                         ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n  return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjiqtdy1v/tmpjiqtdy1v.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32aefe7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32aecdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32aecde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32aecdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjiqtdy1v                        0x00005642c571151f <unavailable> + 5407

    5    libc.so.6                          0x00002b32af1d3460 __libc_start_main +
    245

    6    tmpjiqtdy1v                        0x00005642c5711059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var beats = [Int]()\n\
    \    let noteToBeats : [Character: Int] = [\"o\": 4, \"|\": 2, \".\": 1]\n   \
    \ \n    for character in music_string {\n        if let value = noteToBeats[character]\
    \ {\n            beats.append(value)\n        }\n    }\n    \n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp0_jny8u2/tmp0_jny8u2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb9194dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb91644b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb91644988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb916437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_jny8u2                        0x0000558aea6d0972 <unavailable> + 6514

    5    libc.so.6                          0x00002adb91b39460 __libc_start_main +
    245

    6    tmp0_jny8u2                        0x0000558aea6d0389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let m = music_string.components(separatedBy:\
    \ \" \")\n    var ret = [Int]()\n    for note in m {\n        if note == \"o\"\
    \ {\n            ret.append(4)\n        } else if note == \"o|\" {\n         \
    \   ret.append(2)\n        } else if note == \".|\" {\n            ret.append(1)\n\
    \        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzq3uokeu.swift:12:26: error: value of type 'String' has no member\
    \ 'components'\n    let m = music_string.components(separatedBy: \" \")\n    \
    \        ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   for char in music_string {\n        if char == \" \" {\n            continue\n\
    \        }\n        if char == \"o\" {\n            beats.append(4)\n        }\n\
    \        if char == \".\" {\n            beats.append(1)\n        }\n        if\
    \ char == \"|\" {\n            beats[beats.count - 1] = beats[beats.count - 1]\
    \ / 2\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5ehwmwg3/tmp5ehwmwg3.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ec408fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ec3d86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ec3d86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ec3d857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ehwmwg3                        0x00005620ba37ca32 <unavailable> + 6706

    5    libc.so.6                          0x00002b4ec427b460 __libc_start_main +
    245

    6    tmp5ehwmwg3                        0x00005620ba37c449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var array = [Int]()\n \
    \   let newMusicString = music_string.replacingOccurrences(of: \" \", with: \"\
    \")\n    var i = 0\n    while i < newMusicString.count {\n        if (i+1) ==\
    \ newMusicString.count {\n            array.append(4)\n            break\n   \
    \     }\n        if newMusicString[i] == \"o\" && newMusicString[i+1] == \"o\"\
    \ {\n            array.append(4)\n            i += 1\n        } else if newMusicString[i]\
    \ == \"o\" && newMusicString[i+1] == \"|\" {\n            array.append(2)\n  \
    \          i += 1\n        } else if newMusicString[i] == \".\" && newMusicString[i+1]\
    \ == \"|\" {\n            array.append(1)\n            i += 1\n        }\n   \
    \     i += 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsatsq1r9.swift:13:39: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let newMusicString = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                         ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   let music = music_string.components(separatedBy: \" \")\n    for note in music\
    \ {\n        if note == \"o\" {\n            beats.append(4)\n        } else if\
    \ note == \"o|\" {\n            beats.append(2)\n        } else if note == \"\
    .|\" {\n            beats.append(1)\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpojcxewzj.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let music_notes = music_string.components(separatedBy:\
    \ \" \")\n    let result = music_notes.map { $0.count < 2 ? 4 : 2 }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpumhl8biu.swift:12:36: error: value of type 'String' has no member\
    \ 'components'\n    let music_notes = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var output: [Int] = []\n\
    \    var code : Int\n    // code 0 = whole note\n    // code 1 = half note\n \
    \   // code 2 = quater note\n    for c in music_string {\n        if c == \"o\"\
    \ {\n            code = 0\n        } else if c == \"|\" {\n            code +=\
    \ 1\n        } else {\n            code = 0\n        }\n        if code == 0 {\n\
    \            output.append(4)\n        } else if code == 1 {\n            output.append(2)\n\
    \        } else if code == 2 {\n            output.append(1)\n        }\n    }\n\
    \    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_4j1ua8w.swift:21:18: error: variable 'code' passed by reference\
    \ before being initialized\n            code += 1\n                 ^\n/tmp/tmp_4j1ua8w.swift:13:9:\
    \ note: variable defined here\n    var code : Int\n        ^\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beat_len = [Int]()\n\
    \    let chars = music_string.characters\n    var cur_char = chars.startIndex\n\
    \    while cur_char != chars.endIndex {\n        switch chars[cur_char] {\n  \
    \      case \"o\":\n            if chars[cur_char.advancedBy(1)] == \"|\" {\n\
    \                beat_len.append(2)\n                cur_char = cur_char.advancedBy(2)\n\
    \            } else {\n                beat_len.append(4)\n                cur_char\
    \ = cur_char.advancedBy(1)\n            }\n        case \".\":\n            beat_len.append(1)\n\
    \            cur_char = cur_char.advancedBy(2)\n        default:\n           \
    \ beat_len.append(1)\n            cur_char = cur_char.advancedBy(1)\n        }\n\
    \    }\n    return beat_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt2icpgpj.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = music_string.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpt2icpgpj.swift:18:31: error: value of type 'String.Index' has no\
    \ member 'advancedBy'\n            if chars[cur_char.advancedBy(1)] == \"|\" {\n\
    \                     ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpt2icpgpj.swift:20:37: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n                cur_char\
    \ = cur_char.advancedBy(2)\n                           ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpt2icpgpj.swift:23:37:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \     cur_char = cur_char.advancedBy(1)\n                           ~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpt2icpgpj.swift:27:33: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n            cur_char = cur_char.advancedBy(2)\n              \
    \         ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpt2icpgpj.swift:30:33: error: value of type\
    \ 'String.Index' has no member 'advancedBy'\n            cur_char = cur_char.advancedBy(1)\n\
    \                       ~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let stringArray = music_string.components(separatedBy:\
    \ \" \")\n    var intArray: [Int] = []\n    for string in stringArray {\n    \
    \    let o = \"o\"\n        let oBar = \"o|\"\n        let dotBar = \".|\"\n \
    \       if string == o {\n            intArray.append(4)\n        } else if string\
    \ == oBar {\n            intArray.append(2)\n        } else if string == dotBar\
    \ {\n            intArray.append(1)\n        }\n    }\n    return intArray\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcnoonyyx.swift:12:36: error: value of type 'String' has no member\
    \ 'components'\n    let stringArray = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    return music_string.components(separatedBy:\
    \ \" \").map({ (str) -> Int in\n        let str = str.characters.last!\n     \
    \   switch str {\n        case \"o\":\n            return 4\n        case \"|\"\
    :\n            return 2\n        case \".\":\n            return 1\n        default:\n\
    \            return 0\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpk0q8lhqo.swift:13:25: error: value of type 'String' has no member\
    \ 'components'\n    return music_string.components(separatedBy: \" \").map({ (str)\
    \ -> Int in\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var array: [Int] = []\n\
    \    for char in music_string {\n        if char == \"o\" {\n            array.append(4)\n\
    \        } else if char == \"|\" {\n            array.append(2)\n        } else\
    \ if char == \".\" {\n            array.append(1)\n        }\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp7junvy29/tmp7junvy29.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f97ef9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f97bf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f97bf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f97bef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7junvy29                        0x000056245db37842 <unavailable> + 6210

    5    libc.so.6                          0x00002b0f980e5460 __libc_start_main +
    245

    6    tmp7junvy29                        0x000056245db37259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    var s = music_string.components(separatedBy: \" \")\n    for x in s {\n \
    \       if x == \"o\" {\n            result.append(4)\n        } else if x ==\
    \ \"o|\" {\n            result.append(2)\n        } else if x == \".|\" {\n  \
    \          result.append(1)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwyl8gywn.swift:13:26: error: value of type 'String' has no member\
    \ 'components'\n    var s = music_string.components(separatedBy: \" \")\n    \
    \        ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beatPair = [\"o\":\
    \ 4, \"o|\": 2, \".|\": 1]\n    var musicArr: [Int] = []\n    var prevBeat: String\
    \ = \"\"\n    for char in music_string {\n        if char == \" \" {\n       \
    \     musicArr.append(beatPair[prevBeat]!)\n            prevBeat = \"\"\n    \
    \    } else {\n            prevBeat += String(char)\n        }\n    }\n    musicArr.append(beatPair[prevBeat]!)\n\
    \    return musicArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpfb3m5l1u/tmpfb3m5l1u.swift:23: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab205984c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab20567b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab20567b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab20567b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab20567abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpfb3m5l1u                        0x000055d61b7d32b9 <unavailable> + 8889

    6    tmpfb3m5l1u                        0x000055d61b7d27c5 <unavailable> + 6085

    7    libc.so.6                          0x00002ab205b70460 __libc_start_main +
    245

    8    tmpfb3m5l1u                        0x000055d61b7d24c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return parse_music_rec(music_string:\
    \ music_string, parsed: [])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8kmn9c7v.swift:12:12: error: cannot find 'parse_music_rec' in scope\n\
    \    return parse_music_rec(music_string: music_string, parsed: [])\n        \
    \   ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   for char in music_string {\n        switch char {\n        case \"o\":\n \
    \           beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     continue\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpqs3wcyrc.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpqs3wcyrc.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013570
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let fullNote = \"o\"\n\
    \    let halfNote = \"o|\"\n    let quarterNote = \".|\"\n    let notes: [Int]\
    \ = []\n    return notes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpexoednl_/tmpexoednl_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b664ed7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b664ea72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b664ea72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b664ea717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexoednl_                        0x000055803183c51f <unavailable> + 5407

    5    libc.so.6                          0x00002b664ef67460 __libc_start_main +
    245

    6    tmpexoednl_                        0x000055803183c059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var notes = [Int]()\n \
    \   let notes_array = music_string.components(separatedBy: \" \")\n    for note\
    \ in notes_array {\n        if note == \"o\" {\n            notes.append(4)\n\
    \        } else if note == \"o|\" {\n            notes.append(2)\n        } else\
    \ if note == \".|\" {\n            notes.append(1)\n        }\n    }\n    return\
    \ notes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1czflmcx.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let notes_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let temp = music_string.components(separatedBy:\
    \ \" \")\n    var note_array = [Int]()\n    for note in temp {\n        if note\
    \ == \"o\" {\n            note_array.append(4)\n        } else if note == \"o|\"\
    \ {\n            note_array.append(2)\n        } else if note == \".|\" {\n  \
    \          note_array.append(1)\n        }\n    }\n    return note_array\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpy_fp2pua.swift:12:29: error: value of type 'String' has no member\
    \ 'components'\n    let temp = music_string.components(separatedBy: \" \")\n \
    \              ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   let music = music_string.components(separatedBy: \" \")\n    for item in music\
    \ {\n        switch item {\n        case \"o\":\n            beats.append(4)\n\
    \        case \"o|\":\n            beats.append(2)\n        case \".|\":\n   \
    \         beats.append(1)\n        default:\n            beats.append(0)\n   \
    \     }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0f7kcl9w.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return [Int]()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp_owrxq1m/tmp_owrxq1m.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebc8c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebc8929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebc8929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebc89287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_owrxq1m                        0x0000563bc411456f <unavailable> + 5487

    5    libc.so.6                          0x00002aebc8e1e460 __libc_start_main +
    245

    6    tmp_owrxq1m                        0x0000563bc41140a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var string = music_string\n\
    \    var result = [Int]()\n    while !string.isEmpty {\n        let first_note\
    \ = string.prefix(1)\n        switch first_note {\n        case \"o\":\n     \
    \       result.append(4)\n            string.removeFirst()\n        case \".\"\
    :\n            string.removeFirst()\n            result.append(1)\n          \
    \  string.removeFirst()\n        default:\n            print(\"unexpected character:\
    \ \\(first_note)\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: "unexpected character:  \nunexpected character:  \nunexpected character:\
    \  \nunexpected character:  \nunexpected character:  \nunexpected character: \
    \ \nunexpected character:  \nunexpected character:  \nunexpected character:  \n\
    unexpected character:  \nunexpected character:  \nunexpected character:  \nunexpected\
    \ character:  \nunexpected character:  \nunexpected character:  \nunexpected character:\
    \  \nunexpected character:  \nunexpected character:  \nunexpected character: \
    \ \nunexpected character:  \nunexpected character:  \nunexpected character:  \n\
    unexpected character:  \nunexpected character:  \nunexpected character:  \nunexpected\
    \ character:  \nunexpected character:  \nunexpected character:  \nunexpected character:\
    \  \nunexpected character:  \nunexpected character:  \nunexpected character: \
    \ \nunexpected character:  \nunexpected character:  \nunexpected character:  \n\
    unexpected character:  \nunexpected character:  \nunexpected character:  \nunexpected\
    \ character:  \nunexpected character:  \nunexpected character:  \nunexpected character:\
    \  \nunexpected character:  \nunexpected character:  \nunexpected character: \
    \ \nunexpected character:  \nunexpected character:  \nunexpected character:  \n\
    unexpected character:  \nunexpected character:  \nunexpected character:  \nunexpected\
    \ character:  \nunexpected character:  \nunexpected character:  \nunexpected character:\
    \  \nunexpected character:  \nunexpected character:  \nunexpected character: \
    \ \nunexpected character:  \nunexpected character:  \nunexpected character:  \n\
    unexpected character:  \nunexpected character:  \nunexpected character:  \nunexpected\
    \ character:  \nunexpected character:  \nunexpected character:  \nunexpected character:\
    \  \nunexpected character:  \nunexpected character:  \nunexpected character: \
    \ \nunexpected character:  \nunexpected character:  \nunexpected character:  \n\
    unexpected character:  \nunexpected character:  \nunexpected character:  \nunexpected\
    \ character:  \nunexpected character:  \nunexpected character:  \nunexpected character:\
    \  \nunexpected character:  \nunexpected character:  \nunexpected character: \
    \ \nunexpected character:  \nunexpect"
  timestamp: 1660013743
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    var symbol = \"\"\n    var i = 0\n    while i < music_string.count {\n  \
    \      while music_string[i] != \" \" {\n            symbol += String(music_string[i])\n\
    \            i += 1\n        }\n        if symbol == \"o\" {\n            result.append(4)\n\
    \        } else if symbol == \"o|\" {\n            result.append(2)\n        }\
    \ else if symbol == \".|\" {\n            result.append(1)\n        }\n      \
    \  symbol = \"\"\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw8aek59z.swift:16:15: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        while music_string[i]\
    \ != \" \" {\n              ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpw8aek59z.swift:17:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            symbol += String(music_string[i])\n                             ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let input = music_string.split(separator:\
    \ \" \")\n    var result = [Int]()\n    for i in input {\n        switch i {\n\
    \        case \"o\":\n            result.append(4)\n        case \"o|\":\n   \
    \         result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let music_array = music_string.characters.split\
    \ { $0 == \" \" }.map(String.init)\n    var beats: [Int] = []\n    for notes in\
    \ music_array {\n        if notes == \"o\" {\n            beats.append(4)\n  \
    \      } else if notes == \"o|\" {\n            beats.append(2)\n        } else\
    \ if notes == \".|\" {\n            beats.append(1)\n        }\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgo0ju7hi.swift:12:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    let music_array = music_string.characters.split { $0\
    \ == \" \" }.map(String.init)\n                                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    let music_array = music_string.components(separatedBy: \" \")\n    for element\
    \ in music_array {\n        switch element {\n        case \"o\":\n          \
    \  result.append(4)\n        case \"o|\":\n            result.append(2)\n    \
    \    case \".|\":\n            result.append(1)\n        default:\n          \
    \  break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv2j7jy1c.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let lengths = [\n     \
    \   \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    ]\n    var result =\
    \ [Int]()\n    var word = \"\"\n    for letter in music_string {\n        if lengths[String(letter)]\
    \ != nil {\n            result.append(lengths[word]!)\n            word = String(letter)\n\
    \        } else {\n            word += String(letter)\n        }\n    }\n    result.append(lengths[word]!)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpggzd34js/tmpggzd34js.swift:27: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b5771af2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57717e9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b57717e9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b57717e913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b57717e8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpggzd34js                        0x0000558422f2625d <unavailable> + 8797

    6    tmpggzd34js                        0x0000558422f25725 <unavailable> + 5925

    7    libc.so.6                          0x00002b5771cde460 __libc_start_main +
    245

    8    tmpggzd34js                        0x0000558422f25429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let note_values = [\"o\"\
    : 4, \"o|\": 2, \".|\": 1]\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        let value = note_values[note]\n   \
    \     if value != nil {\n            result.append(value!)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe32p49_2.swift:14:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // TODO:\n    // Fix this\
    \ function.\n    var beats = [Int]()\n    for note in music_string.split(separator:\
    \ \" \") {\n        switch note {\n        case \"o\":\n            beats.append(4)\n\
    \        case \"o|\":\n            beats.append(2)\n        case \".|\":\n   \
    \         beats.append(1)\n        default:\n            beats.append(0)\n   \
    \     }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n  let letters = music_string.characters.map({String($0)})\n\
    \  var output: [Int] = []\n  var i = 0\n  while i < letters.count {\n    let letter\
    \ = letters[i]\n    if letter == \"o\" {\n      output.append(4)\n      i += 1\n\
    \    } else if letter == \".\" {\n      output.append(1)\n      i += 2\n    }\
    \ else {\n      fatalError(\"Invalid input\")\n    }\n  }\n  return output\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6nb8bpz7.swift:12:30: error: 'characters' is unavailable: Please\
    \ use String directly\n  let letters = music_string.characters.map({String($0)})\n\
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return [Int]()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp_owrxq1m/tmp_owrxq1m.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebc8c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebc8929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebc8929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebc89287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_owrxq1m                        0x0000563bc411456f <unavailable> + 5487

    5    libc.so.6                          0x00002aebc8e1e460 __libc_start_main +
    245

    6    tmp_owrxq1m                        0x0000563bc41140a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var rawArray = [String]()\n\
    \    var finalArray = [Int]()\n    \n    rawArray = music_string.characters.split\
    \ { $0 == \" \" || $0 == \"|\" }.map { String($0) }\n    \n    for element in\
    \ rawArray {\n        if element == \"o\" {\n            finalArray.append(4)\n\
    \        } else if element == \"o\" {\n            finalArray.append(2)\n    \
    \    } else if element == \".\" {\n            finalArray.append(1)\n        }\n\
    \    }\n    \n    return finalArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn8vmcs_a.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    rawArray = music_string.characters.split { $0 == \"\
    \ \" || $0 == \"|\" }.map { String($0) }\n                            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let note_string = \"o|.|\"\
    \n    let beats_string = \"4214\"\n    var beat_array = [Int]()\n    for note\
    \ in music_string {\n        let index = note_string.index(of: note)\n       \
    \ if let index = index {\n            let beats = beats_string[index]\n      \
    \      beat_array.append(Int(String(beats))!)\n        }\n    }\n    return beat_array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp33tzlri4/tmp33tzlri4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ba4f07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ba4bfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ba4bfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ba4bfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp33tzlri4                        0x0000555c2232cab2 <unavailable> + 6834

    5    libc.so.6                          0x00002b7ba50f3460 __libc_start_main +
    245

    6    tmp33tzlri4                        0x0000555c2232c4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let dic = [\"o\": 4, \"\
    o|\": 2, \".|\": 1]\n    let notes = music_string.components(separatedBy: \" \"\
    )\n    return notes.map({ dic[$0]! })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprmzfjust.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var array_of_int\
    \ = [Int]()\n    var array_of_string = music_string.components(separatedBy: \"\
    \ \")\n    \n    for string in array_of_string {\n        if string == \"o\" {\n\
    \            array_of_int.append(4)\n        } else if string == \"o|\" {\n  \
    \          array_of_int.append(2)\n        } else if string == \".|\" {\n    \
    \        array_of_int.append(1)\n        }\n    }\n    \n    return array_of_int\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkn1aqxw4.swift:14:40: error: value of type 'String' has no member\
    \ 'components'\n    var array_of_string = music_string.components(separatedBy:\
    \ \" \")\n                          ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var note_beats = [Int]()\n    \n    for note in notes {\n      \
    \  switch note {\n        case \"o\":\n            note_beats.append(4)\n    \
    \    case \"o|\":\n            note_beats.append(2)\n        case \".|\":\n  \
    \          note_beats.append(1)\n        default:\n            break\n       \
    \ }\n    }\n    \n    return note_beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt18ii44l.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    let music_array = music_string.components(separatedBy: \" \")\n    for i\
    \ in music_array {\n        switch i {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpj4ftdoy5.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beats = \"o|.|\"\n\
    \    var music_string = music_string\n    var result: [Int] = []\n    while music_string.count\
    \ > 0 {\n        if let index = beats.firstIndex(of: music_string.removeFirst())\
    \ {\n            result.append(beats.distance(from: beats.startIndex, to: index))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpw8wquhho/tmpw8wquhho.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b611e37bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b611e072b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b611e072988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b611e0717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8wquhho                        0x000055bb51f4484f <unavailable> + 6223

    5    libc.so.6                          0x00002b611e567460 __libc_start_main +
    245

    6    tmpw8wquhho                        0x000055bb51f44389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var output = [Int]()\n\
    \    var current_string = \"\"\n    for i in music_string {\n        if i == \"\
    \ \" {\n            if current_string == \"o\" {\n                output.append(4)\n\
    \            } else if current_string == \"o|\" {\n                output.append(2)\n\
    \            } else if current_string == \".|\" {\n                output.append(1)\n\
    \            }\n            current_string = \"\"\n        } else {\n        \
    \    current_string.append(i)\n        }\n    }\n    return output\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjow1nopg/tmpjow1nopg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2091dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae208ed1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae208ed1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae208ed07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjow1nopg                        0x000055f5b62d581f <unavailable> + 6175

    5    libc.so.6                          0x00002ae2093c6460 __libc_start_main +
    245

    6    tmpjow1nopg                        0x000055f5b62d5359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    var musicalNotes = music_string.components(separatedBy: \" \")\n    for var\
    \ i in 0..<musicalNotes.count {\n        var size = musicalNotes[i].characters.count\n\
    \        if size == 1 {\n            result.append(4)\n        } else if size\
    \ == 2 {\n            result.append(2)\n        } else {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpevy5rlpb.swift:13:37: error: value of type 'String' has no member\
    \ 'components'\n    var musicalNotes = music_string.components(separatedBy: \"\
    \ \")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var beat_map: [Int] = []\n    for note in notes {\n        switch\
    \ note {\n        case \"o\":\n            beat_map.append(4)\n        case \"\
    o|\":\n            beat_map.append(2)\n        case \".|\":\n            beat_map.append(1)\n\
    \        default:\n            print(\"Invalid note: \\(note)\")\n        }\n\
    \    }\n    return beat_map\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyxho18rn.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes: [Character]\
    \ = [Character](\"o|.\")\n    let durations: [Int] = [4, 2, 1]\n    var beats\
    \ = [Int]()\n    for ch in music_string {\n        for (i, note) in notes.enumerated()\
    \ {\n            if ch == note {\n                beats.append(durations[i])\n\
    \            }\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpskxs6e7z/tmpskxs6e7z.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b393ca48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b393c73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b393c73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b393c73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpskxs6e7z                        0x000055aced17eb82 <unavailable> + 7042

    5    libc.so.6                          0x00002b393cc34460 __libc_start_main +
    245

    6    tmpskxs6e7z                        0x000055aced17e599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return [Int]()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp_owrxq1m/tmp_owrxq1m.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebc8c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebc8929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebc8929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebc89287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_owrxq1m                        0x0000563bc411456f <unavailable> + 5487

    5    libc.so.6                          0x00002aebc8e1e460 __libc_start_main +
    245

    6    tmp_owrxq1m                        0x0000563bc41140a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    return []\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmppr2en8h6/tmppr2en8h6.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab54363cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab543333b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab543333988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5433327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppr2en8h6                        0x00005614cb43951f <unavailable> + 5407

    5    libc.so.6                          0x00002ab543828460 __libc_start_main +
    245

    6    tmppr2en8h6                        0x00005614cb439059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let music_dictionary: [Character:\
    \ Int] = [\"o\": 4, \"|\": 2, \".\": 1]\n    var parsed_music: [Int] = []\n  \
    \  var count: Int = 0\n    var current_char: Character = music_string[music_string.startIndex]\n\
    \    for char in music_string {\n        if char == current_char {\n         \
    \   count += 1\n        } else {\n            if music_dictionary[current_char]\
    \ != nil {\n                parsed_music.append(music_dictionary[current_char]!\
    \ * count)\n            }\n            count = 1\n            current_char = char\n\
    \        }\n    }\n    if music_dictionary[current_char] != nil {\n        parsed_music.append(music_dictionary[current_char]!\
    \ * count)\n    }\n    return parsed_music\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b5828248c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5827f3f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5827f3f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5827f3f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5827f3ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5828072ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b582802b660 String.subscript.getter
    + 34

    7    tmpvacvpb11                        0x00005569e34f3f6a <unavailable> + 8042

    8    tmpvacvpb11                        0x00005569e34f37c5 <unavailable> + 6085

    9    libc.so.6                          0x00002b5828434460 __libc_start_main +
    245

    10   tmpvacvpb11                        0x00005569e34f34c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var music_string = music_string\n\
    \    var result = [Int]()\n    while !music_string.isEmpty {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string.removeFirst()\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013743
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n  let symbols = [\n    \"o\"\
    \ : 4,\n    \"o|\" : 2,\n    \".|\" : 1\n  ]\n  var res = [Int]()\n  let pairs\
    \ = music_string.split(separator: \" \")\n  for pair in pairs {\n    let symbol\
    \ = String(pair)\n    let duration = symbols[symbol]\n    if duration != nil {\n\
    \      res.append(duration!)\n    }\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var note_lengths = [Int]()\n\
    \    var note_value = [\".\", \"o\", \"o|\"]\n    var note_length = [1, 4, 2]\n\
    \    var input_notes = music_string.split(separator: \" \")\n    for notes in\
    \ input_notes {\n        if let index = note_value.firstIndex(of: String(notes))\
    \ {\n            note_lengths.append(note_length[index])\n        }\n    }\n \
    \   return note_lengths\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpd2xpueoi/tmpd2xpueoi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ad73b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ad70adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ad70ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ad70ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd2xpueoi                        0x00005567ade87ba2 <unavailable> + 7074

    5    libc.so.6                          0x00002b4ad75a2460 __libc_start_main +
    245

    6    tmpd2xpueoi                        0x00005567ade875b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let m = music_string.components(separatedBy:\
    \ \" \")\n    var b:[Int] = []\n    for n in m {\n        switch n {\n       \
    \ case \"o\":\n            b.append(4)\n        case \"o|\":\n            b.append(2)\n\
    \        case \".|\":\n            b.append(1)\n        default:\n           \
    \ print(\"not in list!\")\n        }\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv1wrt_wt.swift:12:26: error: value of type 'String' has no member\
    \ 'components'\n    let m = music_string.components(separatedBy: \" \")\n    \
    \        ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let length = music_string.count\n\
    \    var beat = 0\n    var beats = [Int]()\n    for i in 0...length - 1 {\n  \
    \      switch music_string[i] {\n        case \"o\":\n            beat = 4\n \
    \       case \"o|\":\n            beat = 2\n        case \".|\":\n           \
    \ beat = 1\n        default:\n            beat = 0\n        }\n        beats.append(beat)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpqzl5c1v3.swift:16:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        switch music_string[i]\
    \ {\n               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpqzl5c1v3.swift:19:14: error: expression\
    \ pattern of type 'String' cannot match values of type 'Character'\n        case\
    \ \"o|\":\n             ^~~~\n/tmp/tmpqzl5c1v3.swift:21:14: error: expression\
    \ pattern of type 'String' cannot match values of type 'Character'\n        case\
    \ \".|\":\n             ^~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beats = [\".\", \"\
    o\"]\n    let notes = music_string.split(separator: \" \")\n    var parsed_music:\
    \ [Int] = []\n    for note in notes {\n        if note.contains(\"|\") {\n   \
    \         let new_note = note.replacingOccurrences(of: \"|\", with: \"\")\n  \
    \          if beats.contains(new_note) {\n                parsed_music.append(note.count\
    \ - 1)\n            }\n        } else {\n            if beats.contains(note) {\n\
    \                parsed_music.append(note.count)\n            }\n        }\n \
    \   }\n    return parsed_music\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgu5t3i25.swift:17:33: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'replacingOccurrences'\n            let new_note\
    \ = note.replacingOccurrences(of: \"|\", with: \"\")\n                       \
    \    ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgu5t3i25.swift:22:16: error: instance\
    \ method 'contains' requires the types 'String' and 'Character' be equivalent\n\
    \            if beats.contains(note) {\n               ^\n_StringProcessing.Collection:3:17:\
    \ note: where 'Self.Element' = 'String', 'C.Element' = 'Character'\n    public\
    \ func contains<C>(_ other: C) -> Bool where C : Collection, Self.Element == C.Element\n\
    \                ^\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let music = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var beat: [Int] = []\n    for note in music {\n    \
    \    switch note {\n        case \"o\":\n            beat.append(4)\n        case\
    \ \"o|\":\n            beat.append(2)\n        case \".|\":\n            beat.append(1)\n\
    \        default:\n            return []\n        }\n    }\n    return beat\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcjirfjsl.swift:12:30: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let wholeNote = \"o\"\n\
    \    let halfNote = \"o|\"\n    let quarterNote = \".|\"\n    var measures: [Int]\
    \ = []\n    var measure: String = \"\"\n    for char in music_string {\n     \
    \   if char == \" \" {\n            if measure == wholeNote {\n              \
    \  measures.append(4)\n            } else if measure == halfNote {\n         \
    \       measures.append(2)\n            } else if measure == quarterNote {\n \
    \               measures.append(1)\n            }\n            measure = \"\"\n\
    \        } else {\n            measure.append(char)\n        }\n    }\n    if\
    \ measure == wholeNote {\n        measures.append(4)\n    } else if measure ==\
    \ halfNote {\n        measures.append(2)\n    } else if measure == quarterNote\
    \ {\n        measures.append(1)\n    }\n    return measures\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    var split_by_beat = music_string.components(separatedBy: \" \")\n    for\
    \ beat in split_by_beat {\n        if beat == \"o\" {\n            result.append(4)\n\
    \        } else if beat == \"o|\" {\n            result.append(2)\n        } else\
    \ if beat == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnri3iq5e.swift:13:38: error: value of type 'String' has no member\
    \ 'components'\n    var split_by_beat = music_string.components(separatedBy: \"\
    \ \")\n                        ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013738
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var count = 0\n    var\
    \ music_notes = [Int]()\n    let array_music_string = Array(music_string)\n  \
    \  for item in array_music_string {\n        if item == \"o\" {\n            count\
    \ += 1\n        } else if item == \"|\" {\n            if count == 1 {\n     \
    \           music_notes.append(1)\n            } else if count == 2 {\n      \
    \          music_notes.append(2)\n            } else if count == 3 {\n       \
    \         music_notes.append(4)\n            }\n            count = 0\n      \
    \  }\n    }\n    return music_notes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp05a9fpkk/tmp05a9fpkk.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c6f8e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c6f5deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c6f5de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c6f5dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp05a9fpkk                        0x0000559cb78a593f <unavailable> + 6463

    5    libc.so.6                          0x00002b5c6fad3460 __libc_start_main +
    245

    6    tmp05a9fpkk                        0x0000559cb78a5479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    var resultIndex = 0\n    let array = Array(music_string)\n    for i in 0..<array.count\
    \ {\n        let char = array[i]\n        switch char {\n        case \"o\":\n\
    \            if i == array.count - 1 {\n                result.append(4)\n   \
    \         } else {\n                if array[i + 1] == \"|\" {\n             \
    \       result.append(2)\n                } else {\n                    result.append(4)\n\
    \                }\n            }\n        case \".\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let preprocessed_musical_notes\
    \ = music_string.replacingOccurrences(of: \" \", with: \"|\")\n    var parsed_notes:\
    \ [Int] = []\n    var current_index = 0\n    while (current_index < preprocessed_musical_notes.count)\
    \ {\n        let current_character = preprocessed_musical_notes[current_index]\n\
    \        let next_character = preprocessed_musical_notes[current_index + 1]\n\
    \        if (current_character == \"o\") {\n            if (next_character ==\
    \ \"|\") {\n                parsed_notes.append(2)\n                current_index\
    \ += 2\n            } else {\n                parsed_notes.append(4)\n       \
    \         current_index += 1\n            }\n        } else {\n            parsed_notes.append(1)\n\
    \            current_index += 2\n        }\n    }\n    return parsed_notes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpl1lmihpt.swift:12:51: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let preprocessed_musical_notes = music_string.replacingOccurrences(of:\
    \ \" \", with: \"|\")\n                                     ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let arr = music_string.split(separator:\
    \ \" \")\n    var arrInt = [Int]()\n    for ch in arr {\n        if ch == \"o\"\
    \ {\n            arrInt.append(4)\n        } else if ch == \"o|\" {\n        \
    \    arrInt.append(2)\n        } else if ch == \".|\" {\n            arrInt.append(1)\n\
    \        }\n    }\n    return arrInt\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    var currentPosition = music_string.startIndex\n    for _ in 0..<music_string.count\
    \ {\n        if music_string[currentPosition] == \" \" {\n            currentPosition\
    \ = music_string.index(after: currentPosition)\n            continue\n       \
    \ }\n        switch music_string[currentPosition] {\n        case \"o\":\n   \
    \         result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.append(4)\n            currentPosition = music_string.index(after:\
    \ currentPosition)\n        case \"o\":\n            result.append(4)\n      \
    \      currentPosition = music_string.index(after: currentPosition)\n        case\
    \ \"o\":\n            result.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp127adya4.swift:63:19: error: expected member name following '.'\n\
    \            result.\n                  ^\n/tmp/tmp127adya4.swift:83:87: error:\
    \ expected '}' at end of brace statement\nassert(parse_music(music_string: \"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\n                      \
    \                                                                ^\n/tmp/tmp127adya4.swift:14:37:\
    \ note: to match this opening '{'\n    for _ in 0..<music_string.count {\n   \
    \                                 ^\n/tmp/tmp127adya4.swift:83:87: error: expected\
    \ '}' at end of brace statement\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\n                                \
    \                                                      ^\n/tmp/tmp127adya4.swift:11:49:\
    \ note: to match this opening '{'\nfunc parse_music(music_string: String) -> [Int]\
    \ {\n                                                ^\n/tmp/tmp127adya4.swift:23:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"o\":\n             ^~~\n/tmp/tmp127adya4.swift:20:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"o\":\n\
    \             ^~~\n/tmp/tmp127adya4.swift:26:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"o\":\n   \
    \          ^~~\n/tmp/tmp127adya4.swift:20:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"o\":\n             ^~~\n/tmp/tmp127adya4.swift:29:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"o\":\n             ^~~\n/tmp/tmp127adya4.swift:20:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"o\":\n\
    \             ^~~\n/tmp/tmp127adya4.swift:32:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"o\":\n   \
    \          ^~~\n/tmp/tmp127adya4.swift:20:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"o\":\n             ^~~\n/tmp/tmp127adya4.swift:35:14:\
    \ warning:"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    let musicArray =\
    \ music_string.components(separatedBy: \" \")\n    var resultArray = [Int]()\n\
    \    \n    for element in musicArray {\n        if element == \"o\" {\n      \
    \      resultArray.append(4)\n        } else if element == \"o|\" {\n        \
    \    resultArray.append(2)\n        } else if element == \".|\" {\n          \
    \  resultArray.append(1)\n        }\n    }\n    \n    return resultArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp417i2zuv.swift:13:35: error: value of type 'String' has no member\
    \ 'components'\n    let musicArray = music_string.components(separatedBy: \" \"\
    )\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    for char in music_string.characters {\n        switch char {\n        case\
    \ \"o\":\n            result.append(4)\n        case \"|\":\n            result.append(2)\n\
    \        case \".\":\n            result.append(1)\n        default:\n       \
    \     continue\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp167fj4gc.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in music_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   for note in music_string.split(separator: \" \") {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return music_string.split(separator:\
    \ \" \").compactMap({ (token) -> Int? in\n        switch token {\n        case\
    \ \"o\":\n            return 4\n        case \"o|\":\n            return 2\n \
    \       case \".|\":\n            return 1\n        default:\n            return\
    \ nil\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var music_array : [Int]\
    \ = []\n    for (i, char) in music_string.enumerated() {\n        if char == \"\
    o\" && (i + 1 < music_string.count) && (music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: i + 1)] == \" \") {\n            music_array.append(4)\n        }\
    \ else if char == \"o\" && (i + 1 < music_string.count) && (music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: i + 1)] == \"|\") {\n            music_array.append(2)\n        }\
    \ else if char == \".\" && (i + 1 < music_string.count) && (music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: i + 1)] == \"|\") {\n            music_array.append(1)\n        }\n\
    \    }\n    return music_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp2oauk54t/tmp2oauk54t.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c33db5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c33aacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c33aac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c33aab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2oauk54t                        0x0000558207076a5f <unavailable> + 6751

    5    libc.so.6                          0x00002b7c33fa1460 __libc_start_main +
    245

    6    tmp2oauk54t                        0x0000558207076599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // write your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpo3_d2ham/tmpo3_d2ham.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2768b53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276884ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276884a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27688497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3_d2ham                        0x000055c99194451f <unavailable> + 5407

    5    libc.so.6                          0x00002b2768d3f460 __libc_start_main +
    245

    6    tmpo3_d2ham                        0x000055c991944059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var music_note: String\
    \ = \"\"\n    var music_notes: [Int] = []\n    for i in music_string {\n     \
    \   if i == \" \" {\n            music_notes.append(get_music_note(music_note:\
    \ music_note))\n            music_note = \"\"\n        } else {\n            music_note\
    \ += String(i)\n        }\n    }\n    music_notes.append(get_music_note(music_note:\
    \ music_note))\n    return music_notes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpykel1jdb.swift:16:32: error: cannot find 'get_music_note' in scope\n\
    \            music_notes.append(get_music_note(music_note: music_note))\n    \
    \                           ^~~~~~~~~~~~~~\n/tmp/tmpykel1jdb.swift:22:24: error:\
    \ cannot find 'get_music_note' in scope\n    music_notes.append(get_music_note(music_note:\
    \ music_note))\n                       ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes: [String: Int]\
    \ = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let parts = music_string.split(separator:\
    \ \" \")\n    return parts.map { notes[String($0)]! }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // FIXME: Implement this\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpeocqpe1u/tmpeocqpe1u.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab43ad9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab43aa96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab43aa96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab43aa957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeocqpe1u                        0x0000561291f1851f <unavailable> + 5407

    5    libc.so.6                          0x00002ab43af8b460 __libc_start_main +
    245

    6    tmpeocqpe1u                        0x0000561291f18059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return [1]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpr1af45fv/tmpr1af45fv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b710778bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7107482b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7107482988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71074817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1af45fv                        0x000055d34540740e <unavailable> + 5134

    5    libc.so.6                          0x00002b7107977460 __libc_start_main +
    245

    6    tmpr1af45fv                        0x000055d345407059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    var stringArray = Array(music_string)\n    var charLength = stringArray.count\n\
    \    var currentIndex = 0\n    while currentIndex < charLength {\n        let\
    \ currentChar = stringArray[currentIndex]\n        switch currentChar {\n    \
    \    case \"o\":\n            result.append(4)\n            currentIndex += 1\n\
    \        case \".\":\n            result.append(1)\n            currentIndex +=\
    \ 2\n        default:\n            currentIndex += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpxvdagzkj/tmpxvdagzkj.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af61fb17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af61f80eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af61f80e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af61f80d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxvdagzkj                        0x0000555c81b7eab1 <unavailable> + 6833

    5    libc.so.6                          0x00002af61fd03460 __libc_start_main +
    245

    6    tmpxvdagzkj                        0x0000555c81b7e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var note: [Int] = []\n\
    \    var string = music_string.replacingOccurrences(of: \" \", with: \"\")\n \
    \   string = string.replacingOccurrences(of: \" \", with: \"\")\n    string =\
    \ string.replacingOccurrences(of: \"o|\", with: \"1\")\n    string = string.replacingOccurrences(of:\
    \ \".|\", with: \"0\")\n    string = string.replacingOccurrences(of: \"o\", with:\
    \ \"4\")\n    let separatedArray = string.map{String($0)}\n    for number in separatedArray\
    \ {\n        let num = Int(number)\n        note.append(num!)\n    }\n    return\
    \ note\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmplzqrqrvv.swift:13:31: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    var string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                 ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var beats = [Int]()\n\
    \    var currentBeat = Int()\n    \n    for char in music_string {\n        switch\
    \ char {\n        case \"o\":\n            currentBeat = 4\n        case \"|\"\
    :\n            beats.append(currentBeat)\n        case \".\":\n            currentBeat\
    \ = 1\n        default:\n            continue\n        }\n    }\n    \n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpqy82ynw_/tmpqy82ynw_.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ee694c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ee38bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ee38b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ee38a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqy82ynw_                        0x00005575d5be276f <unavailable> + 5999

    5    libc.so.6                          0x00002af3ee880460 __libc_start_main +
    245

    6    tmpqy82ynw_                        0x00005575d5be22a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var musicArray: [Int]\
    \ = []\n    var hasWholeNote = false\n    var hasHalfNote = false\n    var hasQuaterNote\
    \ = false\n    \n    let musicStringArray = music_string.components(separatedBy:\
    \ \" \")\n    \n    for stringValue in musicStringArray {\n        \n        switch\
    \ stringValue {\n            \n        case \"o\":\n            hasWholeNote =\
    \ true\n        case \"o|\":\n            hasHalfNote = true\n        case \"\
    .|\":\n            hasQuaterNote = true\n        default:\n            return\
    \ musicArray\n        }\n        \n        if hasWholeNote == true {\n       \
    \     musicArray.append(4)\n            hasWholeNote = false\n        }\n    \
    \    \n        if hasHalfNote == true {\n            musicArray.append(2)\n  \
    \          hasHalfNote = false\n        }\n        \n        if hasQuaterNote\
    \ == true {\n            musicArray.append(1)\n            hasQuaterNote = false\n\
    \        }\n    }\n    \n    return musicArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcmv33ajb.swift:18:41: error: value of type 'String' has no member\
    \ 'components'\n    let musicStringArray = music_string.components(separatedBy:\
    \ \" \")\n                           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    var music_array = music_string.characters.split(separator: \" \").map(String.init)\n\
    \    for music in music_array {\n        if music == \"o\" {\n            result.append(4)\n\
    \        } else if music == \"o|\" {\n            result.append(2)\n        }\
    \ else if music == \".|\" {\n            result.append(1)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfomcfw01.swift:13:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var music_array = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpfomcfw01.swift:13:9: warning: variable\
    \ 'music_array' was never mutated; consider changing to 'let' constant\n    var\
    \ music_array = music_string.characters.split(separator: \" \").map(String.init)\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    let parsedData =\
    \ parse_music_helper(musicString: music_string)\n    return parsedData\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjre8v_ot.swift:13:22: error: cannot find 'parse_music_helper' in\
    \ scope\n    let parsedData = parse_music_helper(musicString: music_string)\n\
    \                     ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    let arr = music_string.split(separator: \" \")\n    for i in arr {\n    \
    \    let element = String(i)\n        if element == \"o\" {\n            result.append(4)\n\
    \        } else if element == \"o|\" {\n            result.append(2)\n       \
    \ } else if element == \".|\" {\n            result.append(1)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var note_beats: [Int] =\
    \ []\n    var note_type: Int = 0\n    for char in music_string {\n        switch\
    \ char {\n        case \" \":\n            if note_type > 0 {\n              \
    \  note_beats.append(note_type)\n                note_type = 0\n            }\n\
    \        case \"|\":\n            note_type = note_type / 2\n        case \"o\"\
    :\n            note_type = 4\n        case \".\":\n            note_type = 1\n\
    \        default:\n            print(\"Invalid character\")\n        }\n    }\n\
    \    return note_beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpdru7c1m1/tmpdru7c1m1.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b010eb70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b010e867b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b010e867988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b010e8667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdru7c1m1                        0x000055e3c15ae90f <unavailable> + 6415

    5    libc.so.6                          0x00002b010ed5c460 __libc_start_main +
    245

    6    tmpdru7c1m1                        0x000055e3c15ae449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var music_notes = [Int]()\n    for note in music_string\
    \ {\n        switch note {\n        case \"o\":\n            music_notes.append(4)\n\
    \        case \"|\":\n            music_notes.append(2)\n        case \".\":\n\
    \            music_notes.append(1)\n        default:\n            break\n    \
    \    }\n    }\n    return music_notes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1_yb1bce.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var music_arr: [Int] =\
    \ []\n    var arr: [String] = music_string.split(separator: \" \").map { \"\\\
    ($0)\" }\n    for element in arr {\n        if element == \"o\" {\n          \
    \  music_arr.append(4)\n        } else if element == \"o|\" {\n            music_arr.append(2)\n\
    \        } else if element == \".|\" {\n            music_arr.append(1)\n    \
    \    }\n    }\n    return music_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let music = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var beatsArray = [Int]()\n    let beats = [\n      \
    \  \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n    ]\n    var note = \"\"\
    \n    for character in music {\n        note.append(character)\n        if character\
    \ == \"|\" {\n            if let beat = beats[note] {\n                beatsArray.append(beat)\n\
    \            }\n            note = \"\"\n        }\n    }\n    return beatsArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8eou6bmp.swift:12:30: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes: [Int] = [4,\
    \ 2, 1]\n    var result: [Int] = []\n    let chars = Array(music_string)\n   \
    \ var index = 0\n    while index < chars.count {\n        let c = chars[index]\n\
    \        if c == \"o\" {\n            result.append(notes[0])\n            index\
    \ += 2\n        } else if c == \".\" {\n            result.append(notes[2])\n\
    \            index += 3\n        } else {\n            result.append(notes[1])\n\
    \            index += 3\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmppm80926r/tmppm80926r.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77b0bfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77b08f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77b08f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77b08f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppm80926r                        0x0000557044dd1b01 <unavailable> + 6913

    5    libc.so.6                          0x00002b77b0dea460 __libc_start_main +
    245

    6    tmppm80926r                        0x0000557044dd13b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var beat_counts = [Int]()\n    for note in notes {\n        switch\
    \ note {\n        case \"o\":\n            beat_counts.append(4)\n        case\
    \ \"o|\":\n            beat_counts.append(2)\n        case \".|\":\n         \
    \   beat_counts.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return beat_counts\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2ed6iihc.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var parsed: [Int] = []\n\
    \    var input = music_string.split(separator: \" \")\n    for i in input {\n\
    \        if i == \"o\" {\n            parsed.append(4)\n        } else if i ==\
    \ \"o|\" {\n            parsed.append(2)\n        } else if i == \".|\" {\n  \
    \          parsed.append(1)\n        }\n    }\n    return parsed\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var parsed_music\
    \ = [Int]()\n    \n    let characters_of_music = Array(music_string)\n    \n \
    \   var index_of_string = 0\n    \n    while (index_of_string < characters_of_music.count)\
    \ {\n        \n        if characters_of_music[index_of_string] == \"o\" {\n  \
    \          \n            if index_of_string < characters_of_music.count - 1 &&\
    \ characters_of_music[index_of_string + 1] == \"|\" {\n                \n    \
    \            parsed_music.append(2)\n                index_of_string += 2\n  \
    \              \n            } else {\n                \n                parsed_music.append(4)\n\
    \                index_of_string += 1\n                \n            }\n     \
    \       \n        } else if characters_of_music[index_of_string] == \".\" {\n\
    \            \n            if index_of_string < characters_of_music.count - 1\
    \ && characters_of_music[index_of_string + 1] == \"|\" {\n                \n \
    \               parsed_music.append(1)\n                index_of_string += 2\n\
    \                \n            } else {\n                \n                print(\"\
    Error: incorrect string format\")\n                return [Int]()\n          \
    \      \n            }\n            \n        } else {\n            \n       \
    \     print(\"Error: incorrect string format\")\n            return [Int]()\n\
    \            \n        }\n        \n    }\n    \n    return parsed_music\n   \
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\"\
    ) == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4,\
    \ 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string:\
    \ \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpqv32nrgh/tmpqv32nrgh.swift:76: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08981a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0897e97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0897e97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0897e967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqv32nrgh                        0x0000563094fb199f <unavailable> + 6559

    5    libc.so.6                          0x00002b089838c460 __libc_start_main +
    245

    6    tmpqv32nrgh                        0x0000563094fb14d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   var notes = Array(music_string)\n    var note = \"\"\n    var previous_note\
    \ = \"\"\n    for n in notes {\n        note = String(n)\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"|\" {\n      \
    \      if previous_note == \"o\" {\n                beats[beats.count - 1] = 2\n\
    \            } else {\n                beats.append(1)\n            }\n      \
    \  }\n        previous_note = note\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // your code here\n   \
    \ return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmph9_3i50o/tmph9_3i50o.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9932b70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9932867b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9932867988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99328667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph9_3i50o                        0x00005595ec66451f <unavailable> + 5407

    5    libc.so.6                          0x00002b9932d5c460 __libc_start_main +
    245

    6    tmph9_3i50o                        0x00005595ec664059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return music_string.components(separatedBy:\
    \ \" \").map { beat in\n        switch beat {\n        case \"o\":\n         \
    \   return 4\n        case \"o|\":\n            return 2\n        case \".|\"\
    :\n            return 1\n        default:\n            return 0\n        }\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpej28ugc1.swift:12:25: error: value of type 'String' has no member\
    \ 'components'\n    return music_string.components(separatedBy: \" \").map { beat\
    \ in\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let musicSplit = music_string.split(separator:\
    \ \" \")\n    var result: [Int] = []\n    for music in musicSplit {\n        if\
    \ music == \"o\" {\n            result.append(4)\n        } else if music == \"\
    o|\" {\n            result.append(2)\n        } else if music == \".|\" {\n  \
    \          result.append(1)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    var music = music_string.components(separatedBy: \" \")\n    for i in 0..<music.count\
    \ {\n        if music[i] == \"o\" {\n            result.append(4)\n        } else\
    \ if music[i] == \"o|\" {\n            result.append(2)\n        } else if music[i]\
    \ == \".|\" {\n            result.append(1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp29c92p5g.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return music_string.components(separatedBy:\
    \ \" \").map {\n        switch $0 {\n        case \"o\":\n            return 4\n\
    \        case \"o|\":\n            return 2\n        case \".|\":\n          \
    \  return 1\n        default:\n            return 0\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphtnqqpo2.swift:12:25: error: value of type 'String' has no member\
    \ 'components'\n    return music_string.components(separatedBy: \" \").map {\n\
    \           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var parsedNotes = [Int]()\n    \n    for note in notes {\n     \
    \   if note == \"o\" {\n            parsedNotes.append(4)\n        } else if note\
    \ == \"o|\" {\n            parsedNotes.append(2)\n        } else if note == \"\
    .|\" {\n            parsedNotes.append(1)\n        }\n    }\n    \n    return\
    \ parsedNotes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6by9_fo7.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    for char in music_string {\n        if char == \"o\" {\n            beats.append(4)\n\
    \        } else if char == \"o\" {\n            beats.append(2)\n        } else\
    \ if char == \".\" {\n            beats.append(1)\n        }\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpdgtuana0/tmpdgtuana0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe2ade7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe2aadeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe2aade988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe2aadd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdgtuana0                        0x0000556137e159a1 <unavailable> + 6561

    5    libc.so.6                          0x00002abe2afd3460 __libc_start_main +
    245

    6    tmpdgtuana0                        0x0000556137e15259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes:[String] = music_string.components(separatedBy:\
    \ \" \")\n    var notesBeat = [Int]()\n    for i in notes {\n        if i == \"\
    o\" {\n            notesBeat.append(4)\n        } else if i == \"o|\" {\n    \
    \        notesBeat.append(2)\n        } else if i == \".|\" {\n            notesBeat.append(1)\n\
    \        }\n    }\n    return notesBeat\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvzse5moj.swift:12:39: error: value of type 'String' has no member\
    \ 'components'\n    let notes:[String] = music_string.components(separatedBy:\
    \ \" \")\n                         ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    let notes = music_string.components(separatedBy: \" \")\n    for note in\
    \ notes {\n        if note == \"o\" {\n            result.append(4)\n        }\
    \ else if note == \"o|\" {\n            result.append(2)\n        } else if note\
    \ == \".|\" {\n            result.append(1)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphw572eq0.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013571
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   let music_array = music_string.split(separator: \" \")\n    for item in music_array\
    \ {\n        switch item {\n        case \"o\":\n            beats.append(4)\n\
    \        case \"o|\":\n            beats.append(2)\n        case \".|\":\n   \
    \         beats.append(1)\n        default:\n            print(\"nope\")\n   \
    \     }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let chars = music_string.characters.map\
    \ { String($0) }\n    var beats: [Int] = []\n    var beat: Int = 0\n    for char\
    \ in chars {\n        if char == \"o\" {\n            beat = 4\n        } else\
    \ if char == \"o|\" {\n            beat = 2\n        } else if char == \".|\"\
    \ {\n            beat = 1\n        }\n        beats.append(beat)\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmh2tvjw_.swift:12:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = music_string.characters.map { String($0)\
    \ }\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let dic: [Character: Int]\
    \ = [\"o\": 4, \"|\": 1]\n    var res: [Int] = []\n    var sum = 0\n    for ch\
    \ in music_string {\n        if ch == \" \" {\n            res.append(sum)\n \
    \           sum = 0\n        } else {\n            sum += dic[ch]!\n        }\n\
    \    }\n    res.append(sum)\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmperi8ewrr/tmperi8ewrr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0df9eafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0df9ba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0df9ba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0df9ba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmperi8ewrr                        0x000055c7bcec57ce <unavailable> + 6094

    5    libc.so.6                          0x00002b0dfa09b460 __libc_start_main +
    245

    6    tmperi8ewrr                        0x000055c7bcec5419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return [1]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpr1af45fv/tmpr1af45fv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b710778bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7107482b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7107482988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71074817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1af45fv                        0x000055d34540740e <unavailable> + 5134

    5    libc.so.6                          0x00002b7107977460 __libc_start_main +
    245

    6    tmpr1af45fv                        0x000055d345407059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   for (index, character) in music_string.characters.enumerated() {\n       \
    \ if character == \"o\" {\n            beats.append(4)\n        } else if character\
    \ == \"|\" {\n            beats[beats.count - 1] /= 2\n        }\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjhyxmhiy.swift:13:44: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, character) in music_string.characters.enumerated()\
    \ {\n                                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpjhyxmhiy.swift:13:10: warning: immutable\
    \ value 'index' was never used; consider replacing with '_' or removing it\n \
    \   for (index, character) in music_string.characters.enumerated() {\n       \
    \  ^~~~~\n         _\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return [Int]()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp_owrxq1m/tmp_owrxq1m.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebc8c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebc8929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebc8929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebc89287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_owrxq1m                        0x0000563bc411456f <unavailable> + 5487

    5    libc.so.6                          0x00002aebc8e1e460 __libc_start_main +
    245

    6    tmp_owrxq1m                        0x0000563bc41140a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    var notes = music_string.split(separator: \" \")\n    for note in notes {\n\
    \        switch note {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"o|\":\n            result.append(2)\n        case \".|\":\n    \
    \        result.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    //let note: [Character]\
    \ = [\"o\", \"o|\", \".|\"]\n    var duration = [Int]()\n    var noteDuration\
    \ = 0\n    for char in music_string {\n        switch char {\n        case \"\
    o\":\n            noteDuration = 4\n        case \"o|\":\n            noteDuration\
    \ = 2\n        case \".|\":\n            noteDuration = 1\n        default:\n\
    \            noteDuration = 0\n        }\n        duration.append(noteDuration)\n\
    \    }\n    return duration\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp16rbbm2f.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmp16rbbm2f.swift:21:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let (notes, length) = map_music(music_string:\
    \ music_string)\n    var result = [Int]()\n    var i = 0\n    while i < length\
    \ {\n        result.append(notes[i].duration)\n        i += notes[i].duration\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwu80oj7x.swift:12:27: error: cannot find 'map_music' in scope\n\
    \    let (notes, length) = map_music(music_string: music_string)\n           \
    \               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes = music_string.split(separator:\
    \ \" \")\n    var beats: [Int] = []\n    for note in notes {\n        if String(note)\
    \ == \"o\" {\n            beats.append(4)\n        } else if String(note) == \"\
    o|\" {\n            beats.append(2)\n        } else if String(note) == \".|\"\
    \ {\n            beats.append(1)\n        }\n    }\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // Your code here\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: '/tmp/tmph6u5sabr.swift:13:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var music_string = music_string\n\
    \    let len = music_string.count\n    var start_ind = 0\n    var buffer = \"\"\
    \n    var res: [Int] = []\n    while start_ind < len {\n        buffer = \"\"\n\
    \        if music_string[start_ind] == \"o\" {\n            if music_string[start_ind\
    \ + 1] == \" \" {\n                buffer = \"o\"\n                start_ind +=\
    \ 2\n            } else if music_string[start_ind + 1] == \"|\" {\n          \
    \      buffer = \"o|\"\n                start_ind += 3\n            }\n      \
    \  } else if music_string[start_ind] == \".\" {\n            if music_string[start_ind\
    \ + 1] == \"|\" {\n                buffer = \".|\"\n                start_ind\
    \ += 3\n            }\n        }\n        if buffer == \"o\" {\n            res.append(4)\n\
    \        } else if buffer == \"o|\" {\n            res.append(2)\n        } else\
    \ if buffer == \".|\" {\n            res.append(1)\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg1_i_ut2.swift:19:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if music_string[start_ind]\
    \ == \"o\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpg1_i_ut2.swift:20:16: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if music_string[start_ind + 1] == \" \" {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpg1_i_ut2.swift:23:23:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            } else if music_string[start_ind +\
    \ 1] == \"|\" {\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpg1_i_ut2.swift:27:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if music_string[start_ind] == \"\
    .\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpg1_i_ut2.swift:28:16: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            if music_string[start_ind + 1] == \"|\" {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpg1_i_ut2.swift:12:9:\
    \ warning: variable 'music_string' was never mutated; consider changing to 'let'\
    \ constant\n    var music_string = music_string\n    ~~~ ^\n    "
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let musicArray = music_string.components(separatedBy:\
    \ \" \")\n    var musicIntArray = [Int]()\n    for note in musicArray {\n    \
    \    if note == \"o\" {\n            musicIntArray.append(4)\n        } else if\
    \ note == \"o|\" {\n            musicIntArray.append(2)\n        } else if note\
    \ == \".|\" {\n            musicIntArray.append(1)\n        }\n    }\n    return\
    \ musicIntArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfbwu0a1u.swift:12:35: error: value of type 'String' has no member\
    \ 'components'\n    let musicArray = music_string.components(separatedBy: \" \"\
    )\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var res = [Int]()\n   \
    \ var chars = music_string.characters.map { String($0) }\n    while !chars.isEmpty\
    \ {\n        if chars[0] == \"o\" {\n            res.append(4)\n            chars.remove(at:\
    \ 0)\n        } else {\n            res.append(2)\n            chars.remove(at:\
    \ 0)\n            chars.remove(at: 0)\n        }\n    }\n    return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprij7yl0g.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars = music_string.characters.map { String($0)\
    \ }\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // Implement your solution\
    \ here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp2x1ko9vg/tmp2x1ko9vg.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b746b921c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b746b618b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b746b618988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b746b6177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2x1ko9vg                        0x0000563c9d85451f <unavailable> + 5407

    5    libc.so.6                          0x00002b746bb0d460 __libc_start_main +
    245

    6    tmp2x1ko9vg                        0x0000563c9d854059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats : [Int] = []\n\
    \    for letter in music_string.characters {\n        switch letter {\n      \
    \  case \"o\":\n            beats.append(4)\n        case \"|\":\n           \
    \ beats.append(2)\n        case \".\":\n            beats.append(1)\n        default:\n\
    \            break\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbrzw_a46.swift:13:32: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in music_string.characters {\n         \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let music_string = music_string.split(separator:\
    \ \" \")\n    var beat = [Int]()\n    for element in music_string {\n        let\
    \ note = String(element)\n        if note == \"o\" {\n            beat.append(4)\n\
    \        } else if note == \"o|\" {\n            beat.append(2)\n        } else\
    \ if note == \".|\" {\n            beat.append(1)\n        }\n    }\n    return\
    \ beat\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notesDict: [Character:\
    \ Int] = [\"o\": 4, \"|\": 2, \".\": 1]\n    var result: [Int] = []\n    var note:\
    \ String = \"\"\n    for char in music_string {\n        if let value = notesDict[char]\
    \ {\n            result.append(value)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmppigfhu6k/tmppigfhu6k.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b038cf84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b038cc7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b038cc7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b038cc7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppigfhu6k                        0x00005584bb421912 <unavailable> + 6418

    5    libc.so.6                          0x00002b038d170460 __libc_start_main +
    245

    6    tmppigfhu6k                        0x00005584bb421329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // write your code here\n\
    \    var result: [Int] = []\n    let stringArray = music_string.split(separator:\
    \ \" \")\n    for i in stringArray {\n        switch i {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      result.append(0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return music_string.components(separatedBy:\
    \ \" \").map({(note: String) -> Int in\n        if note == \"o\" {\n         \
    \   return 4\n        } else if note == \"o|\" {\n            return 2\n     \
    \   } else {\n            return 1\n        }\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxezvefcq.swift:12:25: error: value of type 'String' has no member\
    \ 'components'\n    return music_string.components(separatedBy: \" \").map({(note:\
    \ String) -> Int in\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    var m = music_string.components(separatedBy: \" \")\n    for i in m {\n \
    \       switch i {\n        case \"o\":\n            result.append(4)\n      \
    \  case \"o|\":\n            result.append(2)\n        case \".|\":\n        \
    \    result.append(1)\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpusdjwchl.swift:13:26: error: value of type 'String' has no member\
    \ 'components'\n    var m = music_string.components(separatedBy: \" \")\n    \
    \        ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats: [Int] = []\n\
    \    let chars = music_string.components(separatedBy: \" \")\n    for char in\
    \ chars {\n        switch char {\n        case \"o\":\n            beats.append(4)\n\
    \        case \"o|\":\n            beats.append(2)\n        case \".|\":\n   \
    \         beats.append(1)\n        default:\n            print(\"Unknown character:\
    \ \\(char)\")\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp16ffatj8.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let chars = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // Your code here\n   \
    \ let beats = music_string.split(separator: \" \")\n    var output = [Int]()\n\
    \    for b in beats {\n        if b == \"o\" {\n            output.append(4)\n\
    \        } else if b == \"o|\" {\n            output.append(2)\n        } else\
    \ if b == \".|\" {\n            output.append(1)\n        }\n    }\n    return\
    \ output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var duration = [Int]()\n\
    \    var notes = music_string.components(separatedBy: \" \")\n    for note in\
    \ notes {\n        if note == \"o\" {\n            duration.append(4)\n      \
    \  } else if note == \"o|\" {\n            duration.append(2)\n        } else\
    \ if note == \".|\" {\n            duration.append(1)\n        }\n    }\n    return\
    \ duration\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzbdvopdw.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let _wholeNote = 4\n  \
    \  let _halfNote = 2\n    let _quarterNote = 1\n    \n    let _wholeNoteCharacter\
    \ = \"o\"\n    let _halfNoteCharacter = \"o|\"\n    let _quarterNoteCharacter\
    \ = \".|\"\n    \n    var _returnArray = [Int]()\n    \n    var _musicArray =\
    \ music_string.components(separatedBy: \" \")\n    \n    for i in 0..<_musicArray.count\
    \ {\n        let _element = _musicArray[i]\n        \n        if _element == _wholeNoteCharacter\
    \ {\n            _returnArray.append(_wholeNote)\n        } else if _element ==\
    \ _halfNoteCharacter {\n            _returnArray.append(_halfNote)\n        }\
    \ else if _element == _quarterNoteCharacter {\n            _returnArray.append(_quarterNote)\n\
    \        }\n    }\n    \n    return _returnArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp70i0rr1b.swift:22:36: error: value of type 'String' has no member\
    \ 'components'\n    var _musicArray = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beatsArray = music_string.split(separator:\
    \ \" \")\n    var arrayOfBeats: [Int] = []\n    for beat in beatsArray {\n   \
    \     switch beat {\n        case \"o\":\n            arrayOfBeats.append(4)\n\
    \        case \"o|\":\n            arrayOfBeats.append(2)\n        case \".|\"\
    :\n            arrayOfBeats.append(1)\n        default:\n            arrayOfBeats.append(0)\n\
    \        }\n    }\n    return arrayOfBeats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beat = 0\n    var beats\
    \ = [Int]()\n    for character in music_string {\n        switch character {\n\
    \        case \"o\":\n            beat += 4\n            beats.append(beat)\n\
    \            beat = 0\n        case \"o\":\n            beat += 2\n          \
    \  beats.append(beat)\n            beat = 0\n        case \".\":\n           \
    \ beat += 1\n            beats.append(beat)\n            beat = 0\n        default:\n\
    \            beat = 0\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpjve6naun/tmpjve6naun.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e79938c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e7962fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e7962f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e7962e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjve6naun                        0x000055a18b1199f1 <unavailable> + 6641

    5    libc.so.6                          0x00002b7e79b24460 __libc_start_main +
    245

    6    tmpjve6naun                        0x000055a18b1192a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return [0]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpi06z0d7_/tmpi06z0d7_.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b301fba2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b301f899b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b301f899988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b301f8987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi06z0d7_                        0x000055cc5838c40e <unavailable> + 5134

    5    libc.so.6                          0x00002b301fd8e460 __libc_start_main +
    245

    6    tmpi06z0d7_                        0x000055cc5838c059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var array = [Int]()\n \
    \   for i in music_string.components(separatedBy: \" \") {\n        if i == \"\
    o\" {\n            array.append(4)\n        } else if i == \"o|\" {\n        \
    \    array.append(2)\n        } else if i == \".|\" {\n            array.append(1)\n\
    \        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp47krbq88.swift:13:27: error: value of type 'String' has no member\
    \ 'components'\n    for i in music_string.components(separatedBy: \" \") {\n \
    \            ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beats: [Character:\
    \ Int] = [\"o\": 4, \".\": 1, \"|\": 0]\n    return music_string.reduce([Int]())\
    \ { acc, char in\n        guard let result = beats[char] else { return acc }\n\
    \        if result == 0 {\n            return acc + [acc.last ?? 0]\n        }\n\
    \        return acc + [result]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpmuiakext/tmpmuiakext.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a3721bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a36f12b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a36f12988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a36f117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmuiakext                        0x000055dddff52a32 <unavailable> + 6706

    5    libc.so.6                          0x00002b0a37407460 __libc_start_main +
    245

    6    tmpmuiakext                        0x000055dddff52449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var input = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var array: [Int] = []\n    var count = 0\n    var i\
    \ = 0\n    while i < input.count {\n        if input[i] == \"o\" {\n         \
    \   count += 1\n            if input[i+1] == \"|\" {\n                array.append(2)\n\
    \                i += 1\n            } else {\n                array.append(4)\n\
    \            }\n        } else if input[i] == \".\" {\n            count += 1\n\
    \            array.append(1)\n        }\n        i += 1\n    }\n    if count ==\
    \ 4 || count == 6 || count == 8 || count == 10 {\n        return array\n    }\
    \ else {\n        return [0]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpr3gncen3.swift:12:30: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    var input = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let characters = Array(music_string)\n\
    \    var index = 0\n    var array = [Int]()\n    while index < characters.count\
    \ {\n        let character = characters[index]\n        switch character {\n \
    \       case \"o\":\n            if index < characters.count - 1 {\n         \
    \       if characters[index + 1] == \"|\" {\n                    array.append(2)\n\
    \                    index += 1\n                } else {\n                  \
    \  array.append(4)\n                }\n            } else {\n                array.append(4)\n\
    \            }\n        case \".\":\n            if index < characters.count -\
    \ 1 {\n                if characters[index + 1] == \"|\" {\n                 \
    \   array.append(1)\n                    index += 1\n                }\n     \
    \       }\n        default:\n            break\n        }\n        index += 1\n\
    \    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    var i = 0\n    while i < music_string.count {\n        let currentChar =\
    \ music_string[i]\n        if currentChar == \"o\" {\n            result.append(4)\n\
    \            i += 1\n        } else if currentChar == \".\" {\n            result.append(1)\n\
    \            i += 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmplbpjoshz.swift:15:27: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let currentChar\
    \ = music_string[i]\n                          ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beatArray: [Int] =\
    \ []\n    let musicArray = music_string.components(separatedBy: \" \")\n    var\
    \ notesArray: [String] = []\n    for note in musicArray {\n        let numberOfBars\
    \ = note.count\n        if numberOfBars == 2 {\n            notesArray.append(String(note.first!))\n\
    \            notesArray.append(String(note.last!))\n        } else {\n       \
    \     notesArray.append(note)\n        }\n    }\n    for note in notesArray {\n\
    \        if note == \"o\" {\n            beatArray.append(4)\n        } else if\
    \ note == \"o|\" {\n            beatArray.append(2)\n        } else if note ==\
    \ \".|\" {\n            beatArray.append(1)\n        }\n    }\n    return beatArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpid8aw740.swift:13:35: error: value of type 'String' has no member\
    \ 'components'\n    let musicArray = music_string.components(separatedBy: \" \"\
    )\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let noteTypes: [String:\
    \ Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    var notes: [Int] = []\n    var\
    \ characters = Array(music_string)\n    var index = 0\n    while index < characters.count\
    \ {\n        var noteType = \"\"\n        while index < characters.count && characters[index]\
    \ != \" \" {\n            noteType += String(characters[index])\n            index\
    \ += 1\n        }\n        index += 1\n        notes.append(noteTypes[noteType]!)\n\
    \    }\n    return notes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let symbolBeats = [\"o\"\
    : 4, \"o|\": 2, \".|\": 1]\n    var beats = [Int]()\n    for symbol in music_string.components(separatedBy:\
    \ \" \") {\n        beats.append(symbolBeats[symbol]!)\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmd1x2se5.swift:14:32: error: value of type 'String' has no member\
    \ 'components'\n    for symbol in music_string.components(separatedBy: \" \")\
    \ {\n                  ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beats: Dictionary<Character,\
    \ Int> = [\"o\": 4, \"|\": 2, \".\": 1]\n    return music_string.map { beats[$0]!\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\"\
    ) == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4,\
    \ 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string:\
    \ \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpgnyfp0ho/tmpgnyfp0ho.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b5038933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b503862a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b503862a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b503862a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5038629bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpgnyfp0ho                        0x0000563fa4b65faa <unavailable> + 8106

    6    tmpgnyfp0ho                        0x0000563fa4b663e0 <unavailable> + 9184

    7    libswiftCore.so                    0x00002b5038612820 Collection.map<A>(_:)
    + 426

    8    tmpgnyfp0ho                        0x0000563fa4b65df2 <unavailable> + 7666

    9    tmpgnyfp0ho                        0x0000563fa4b65777 <unavailable> + 6007

    10   libc.so.6                          0x00002b5038b1f460 __libc_start_main +
    245

    11   tmpgnyfp0ho                        0x0000563fa4b65399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    for music in music_string.split(separator: \" \") {\n        switch music\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            continue\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    var arrayOfStrings = music_string.components(separatedBy: \" \")\n    for\
    \ item in arrayOfStrings {\n        if item == \"o\" {\n            result.append(4)\n\
    \        } else if item == \"o|\" {\n            result.append(2)\n        } else\
    \ if item == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0usvsk98.swift:13:39: error: value of type 'String' has no member\
    \ 'components'\n    var arrayOfStrings = music_string.components(separatedBy:\
    \ \" \")\n                         ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beats = [\"o\" : 4,\
    \ \"o|\" : 2, \".|\" : 1]\n    var notes: [Int] = []\n    var i = 0\n    var count\
    \ = 0\n    while i < music_string.count {\n        count = beats[music_string[i...i+1]]\
    \ ?? beats[music_string[i]] ?? 0\n        notes.append(count)\n        i += (count\
    \ == 1) ? 2 : 3\n    }\n    return notes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4xdnsgk7.swift:17:67: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        count = beats[music_string[i...i+1]]\
    \ ?? beats[music_string[i]] ?? 0\n                                           \
    \                       ^\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n  var result = [Int]()\n  var\
    \ index = 0\n  var oneElement = [String]()\n  for i in music_string.indices {\n\
    \    if i == music_string.index(music_string.endIndex, offsetBy: -1) {\n     \
    \ oneElement.append(String(music_string[index..<i]))\n      break\n    }\n   \
    \ if music_string[i] == \" \" {\n      oneElement.append(String(music_string[index..<i]))\n\
    \      index = music_string.index(after: i)\n    }\n  }\n  for i in oneElement\
    \ {\n    switch i {\n    case \"o\":\n      result.append(4)\n    case \"o|\"\
    :\n      result.append(2)\n    case \".|\":\n      result.append(1)\n    default:\n\
    \      result.append(0)\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq30g036_.swift:17:45: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n      oneElement.append(String(music_string[index..<i]))\n\
    \                                            ^\n/tmp/tmpq30g036_.swift:21:45:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \      oneElement.append(String(music_string[index..<i]))\n                  \
    \                          ^\n/tmp/tmpq30g036_.swift:22:28: error: cannot assign\
    \ value of type 'String.Index' to type 'Int'\n      index = music_string.index(after:\
    \ i)\n              ~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    var counter = 0\n    for letter in music_string {\n        if letter == \"\
    \ \" {\n            counter += 1\n        } else if letter == \"|\" {\n      \
    \      result.append(counter)\n            counter = 0\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpil1r6zmk/tmpil1r6zmk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b219feaec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b219fba5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b219fba5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b219fba47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpil1r6zmk                        0x0000557f3698b71f <unavailable> + 5919

    5    libc.so.6                          0x00002b21a009a460 __libc_start_main +
    245

    6    tmpil1r6zmk                        0x0000557f3698b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var music_notes: [Int]\
    \ = []\n    for char in music_string {\n        switch char {\n        case \"\
    o\":\n            music_notes.append(4)\n        case \"|\":\n            music_notes.append(2)\n\
    \        case \".\":\n            music_notes.append(1)\n        default:\n  \
    \          print(\"Wrong note!\")\n        }\n    }\n    return music_notes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpikcf7o3z/tmpikcf7o3z.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15c49e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15c46deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15c46de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15c46dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpikcf7o3z                        0x000055a2e7d379a2 <unavailable> + 6562

    5    libc.so.6                          0x00002b15c4bd3460 __libc_start_main +
    245

    6    tmpikcf7o3z                        0x000055a2e7d373b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    let notes = music_string.split(separator: \" \")\n    for note in notes {\n\
    \        if note == \"o\" {\n            result.append(4)\n        } else if note\
    \ == \"o|\" {\n            result.append(2)\n        } else if note == \".|\"\
    \ {\n            result.append(1)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var array_of_music: [Int]\
    \ = []\n    for (index, char) in music_string.enumerated() {\n        if index\
    \ > 0 {\n            if music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index-1)] == \"o\" && char == \" \" {\n                array_of_music.append(4)\n\
    \            } else if music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index-1)] == \"o\" && char == \"|\" {\n                array_of_music.append(2)\n\
    \            } else if music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index-1)] == \".\" && char == \"|\" {\n                array_of_music.append(1)\n\
    \            }\n        }\n    }\n    return array_of_music\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpv7_z548i/tmpv7_z548i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8233759c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8233450b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8233450988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b823344f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7_z548i                        0x0000559f1b734a0f <unavailable> + 6671

    5    libc.so.6                          0x00002b8233945460 __libc_start_main +
    245

    6    tmpv7_z548i                        0x0000559f1b734549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beats: [String: Int]\
    \ = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = music_string.split(separator:\
    \ \" \")\n    var result: [Int] = []\n    for note in notes {\n        if let\
    \ beat = beats[String(note)] {\n            result.append(beat)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var beats = [Int]()\n \
    \   for char in music_string {\n        if char == \"o\" {\n            beats.append(4)\n\
    \        } else if char == \"|\" {\n            beats.append(1)\n        }\n \
    \   }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpow6easpw/tmpow6easpw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af94ecb9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af94e9b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af94e9b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af94e9af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpow6easpw                        0x00005557b648e9f1 <unavailable> + 6641

    5    libc.so.6                          0x00002af94eea5460 __libc_start_main +
    245

    6    tmpow6easpw                        0x00005557b648e2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var notes: [Int] = []\n\
    \    let music_array = music_string.split(separator: \" \")\n    for note in music_array\
    \ {\n        switch note {\n        case \"o\":\n            notes.append(4)\n\
    \        case \"o|\":\n            notes.append(2)\n        case \".|\":\n   \
    \         notes.append(1)\n        default:\n            print(\"Something went\
    \ wrong\")\n        }\n    }\n    return notes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // Your implementation\
    \ here\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp1kkbo4ik/tmp1kkbo4ik.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e10f58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e10c4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e10c4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e10c4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1kkbo4ik                        0x0000558de4f6451f <unavailable> + 5407

    5    libc.so.6                          0x00002b7e11144460 __libc_start_main +
    245

    6    tmp1kkbo4ik                        0x0000558de4f64059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result: [Int] = []\n\
    \    let notes: [String] = music_string.split(separator: \" \").map { String($0)\
    \ }\n    for note in notes {\n        switch note {\n        case \"o\":\n   \
    \         result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n  return [4, 2, 1, 2, 2, 1,\
    \ 1, 1, 1, 4, 4]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp02hyyjfz/tmp02hyyjfz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca5eac2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca5e7b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca5e7b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca5e7b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp02hyyjfz                        0x000055fddb9bd40e <unavailable> + 5134

    5    libc.so.6                          0x00002aca5ecae460 __libc_start_main +
    245

    6    tmp02hyyjfz                        0x000055fddb9bd059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var notes = [Int]()\n \
    \   for note in music_string.components(separatedBy: \" \") {\n        switch\
    \ note {\n        case \"o\":\n            notes.append(4)\n        case \"o|\"\
    :\n            notes.append(2)\n        case \".|\":\n            notes.append(1)\n\
    \        default:\n            fatalError(\"Invalid note \\(note)\")\n       \
    \ }\n    }\n    return notes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8e_95rzr.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    for note in music_string.components(separatedBy: \" \") {\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let o = \"o\"\n    let\
    \ oDot = \"o|\"\n    let dot = \".|\"\n    let oChar = Character(\"o\")\n    let\
    \ oDotChar = Character(\"o\")\n    let dotChar = Character(\".\")\n    var lastChar\
    \ = Character(\"\")\n    var currentSymbol = \"\"\n    var result = [Int]()\n\
    \    let symbols = music_string.characters.map({ $0 })\n    for symbol in symbols\
    \ {\n        currentSymbol.append(symbol)\n        if symbol == lastChar {\n \
    \           if currentSymbol == o {\n                result.append(4)\n      \
    \          currentSymbol = \"\"\n            } else if currentSymbol == oDot {\n\
    \                result.append(2)\n                currentSymbol = \"\"\n    \
    \        } else if currentSymbol == dot {\n                result.append(1)\n\
    \                currentSymbol = \"\"\n            }\n        }\n        lastChar\
    \ = symbol\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvhptkuzq.swift:21:32: error: 'characters' is unavailable: Please\
    \ use String directly\n    let symbols = music_string.characters.map({ $0 })\n\
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvhptkuzq.swift:15:9: warning: initialization of immutable\
    \ value 'oChar' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let oChar = Character(\"o\")\n    ~~~~^~~~~\n    _\n/tmp/tmpvhptkuzq.swift:16:9:\
    \ warning: initialization of immutable value 'oDotChar' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let oDotChar = Character(\"\
    o\")\n    ~~~~^~~~~~~~\n    _\n/tmp/tmpvhptkuzq.swift:17:9: warning: initialization\
    \ of immutable value 'dotChar' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let dotChar = Character(\".\")\n    ~~~~^~~~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes = [\"o\", \"\
    o|\", \".|\"]\n    var beats = [Int]()\n    var current_note = \"\"\n    for note\
    \ in music_string {\n        if note == \" \" {\n            if current_note ==\
    \ notes[0] {\n                beats.append(4)\n            } else if current_note\
    \ == notes[1] {\n                beats.append(2)\n            } else if current_note\
    \ == notes[2] {\n                beats.append(1)\n            }\n            current_note\
    \ = \"\"\n        } else {\n            current_note += String(note)\n       \
    \ }\n    }\n    if current_note == notes[0] {\n        beats.append(4)\n    }\
    \ else if current_note == notes[1] {\n        beats.append(2)\n    } else if current_note\
    \ == notes[2] {\n        beats.append(1)\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let a = music_string.split(separator:\
    \ \" \")\n    let result = a.map{x in\n        switch x {\n        case \"o\"\
    :\n            return 4\n        case \"o|\":\n            return 2\n        case\
    \ \".|\":\n            return 1\n        default:\n            return 0\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return music_string.characters.split(separator:\
    \ \" \").map {\n        let chars = String($0).characters\n        if chars.count\
    \ == 2 {\n            if chars[0] == \"o\" {\n                return 4\n     \
    \       } else {\n                return 2\n            }\n        } else {\n\
    \            return 1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsfxd0_1g.swift:12:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    return music_string.characters.split(separator: \"\
    \ \").map {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsfxd0_1g.swift:13:32: error: 'characters' is unavailable:\
    \ Please use String directly\n        let chars = String($0).characters\n    \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpsfxd0_1g.swift:15:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if chars[0] == \"o\" {\n               ^~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // Split the string of\
    \ music into an array of music components\n    let music_components = music_string.split(separator:\
    \ \" \")\n    // Create an empty array to store the results\n    var beat_count:\
    \ [Int] = []\n    // Iterate through each component, adding the corresponding\
    \ beat count\n    for component in music_components {\n        // If the component\
    \ ends with 'o', add 4\n        if component.hasSuffix(\"o\") {\n            beat_count.append(4)\n\
    \        }\n        // If the component ends with 'o|', add 2\n        else if\
    \ component.hasSuffix(\"o|\") {\n            beat_count.append(2)\n        }\n\
    \        // If the component ends with '.|', add 1\n        else if component.hasSuffix(\"\
    .|\") {\n            beat_count.append(1)\n        }\n    }\n    // Return the\
    \ results\n    return beat_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    /// IMPLEMENT ME\n    var\
    \ beats = [Int]()\n    let count = music_string.count\n    var index = music_string.startIndex\n\
    \    for _ in 0..<count {\n        let character = music_string[index]\n     \
    \   if character == \"o\" {\n            index = music_string.index(after: index)\n\
    \            if index < music_string.endIndex && music_string[index] == \"|\"\
    \ {\n                beats.append(2)\n                index = music_string.index(after:\
    \ index)\n            } else {\n                beats.append(4)\n            }\n\
    \        } else if character == \".\" {\n            index = music_string.index(after:\
    \ index)\n            if index < music_string.endIndex && music_string[index]\
    \ == \"|\" {\n                beats.append(1)\n                index = music_string.index(after:\
    \ index)\n            }\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpt3m80r03/tmpt3m80r03.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d92ea4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d92b9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d92b9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d92b9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt3m80r03                        0x0000558e3c4dda5f <unavailable> + 6751

    5    libc.so.6                          0x00002b9d93090460 __libc_start_main +
    245

    6    tmpt3m80r03                        0x0000558e3c4dd599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var array_of_music: [Int]\
    \ = []\n    let  new_string = music_string.components(separatedBy: \" \")\n  \
    \  for i in new_string {\n        if i == \"o\" {\n            array_of_music.append(4)\n\
    \        } else if i == \"o|\" {\n            array_of_music.append(2)\n     \
    \   } else if i == \".|\" {\n            array_of_music.append(1)\n        }\n\
    \    }\n    return array_of_music\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprp43_knb.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let  new_string = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            print(\"Unsupported format\")\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8nk2hf8s.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var output: [Int]\
    \ = []\n    let notes: [String] = music_string.components(separatedBy: \" \")\n\
    \    \n    for note in notes {\n        let value = note.count == 1 ? 4 : 2\n\
    \        output.append(value)\n    }\n    \n    return output\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkmmv2gw1.swift:14:40: error: value of type 'String' has no member\
    \ 'components'\n    let notes: [String] = music_string.components(separatedBy:\
    \ \" \")\n                          ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return [Int]()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp_owrxq1m/tmp_owrxq1m.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebc8c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebc8929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebc8929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebc89287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_owrxq1m                        0x0000563bc411456f <unavailable> + 5487

    5    libc.so.6                          0x00002aebc8e1e460 __libc_start_main +
    245

    6    tmp_owrxq1m                        0x0000563bc41140a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    var word = \"\"\n    for char in music_string {\n        if char == \" \"\
    \ {\n            result.append(parse_note(note: word))\n            word = \"\"\
    \n        } else {\n            word += String(char)\n        }\n    }\n    result.append(parse_note(note:\
    \ word))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzv1uuxx2.swift:16:27: error: cannot find 'parse_note' in scope\n\
    \            result.append(parse_note(note: word))\n                         \
    \ ^~~~~~~~~~\n/tmp/tmpzv1uuxx2.swift:22:19: error: cannot find 'parse_note' in\
    \ scope\n    result.append(parse_note(note: word))\n                  ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // TODO\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpoy5dlp_5/tmpoy5dlp_5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2140c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad213db9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad213db9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad213db87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoy5dlp_5                        0x0000558dc17e251f <unavailable> + 5407

    5    libc.so.6                          0x00002ad2142ae460 __libc_start_main +
    245

    6    tmpoy5dlp_5                        0x0000558dc17e2059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return [1]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpr1af45fv/tmpr1af45fv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b710778bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7107482b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7107482988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71074817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1af45fv                        0x000055d34540740e <unavailable> + 5134

    5    libc.so.6                          0x00002b7107977460 __libc_start_main +
    245

    6    tmpr1af45fv                        0x000055d345407059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013739
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // you can use parse_music_chords\
    \ to help you solve this task\n    let music_chords = parse_music_chords(music_string:\
    \ music_string)\n    var arr = [Int]()\n    for element in music_chords {\n  \
    \      if element == \"o\" {\n            arr.append(4)\n        } else if element\
    \ == \"o|\" {\n            arr.append(2)\n        } else if element == \".|\"\
    \ {\n            arr.append(1)\n        }\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9p1zsvzw.swift:13:24: error: cannot find 'parse_music_chords' in\
    \ scope\n    let music_chords = parse_music_chords(music_string: music_string)\n\
    \                       ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // replace whole note\n\
    \    let replacedString = music_string.replacingOccurrences(of: \"o \", with:\
    \ \"o| \")\n    // split string by whitespace\n    let notesArray = replacedString.components(separatedBy:\
    \ \" \")\n    // create array of Int\n    var beatsArray = [Int]()\n    // iterate\
    \ over array\n    for note in notesArray {\n        if note == \"o|\" {\n    \
    \        beatsArray.append(2)\n        } else if note == \".|\" {\n          \
    \  beatsArray.append(1)\n        }\n    }\n    return beatsArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt2m3wiuw.swift:13:39: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let replacedString = music_string.replacingOccurrences(of:\
    \ \"o \", with: \"o| \")\n                         ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var noteArray = [String]()\n\
    \    var noteTime = [Int]()\n    \n    noteArray = music_string.characters.split{$0\
    \ == \" \"}.map(String.init)\n    \n    for var i = 0; i < noteArray.count; i++\
    \ {\n        if noteArray[i] == \"o\" {\n            noteTime.append(4)\n    \
    \    } else if noteArray[i] == \"o|\" {\n            noteTime.append(2)\n    \
    \    } else if noteArray[i] == \".|\" {\n            noteTime.append(1)\n    \
    \    }\n    }\n    \n    return noteTime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpje_z79cm.swift:18:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < noteArray.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpje_z79cm.swift:16:30: error: 'characters' is unavailable: Please use String\
    \ directly\n    noteArray = music_string.characters.split{$0 == \" \"}.map(String.init)\n\
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var arr = [Int]()\n   \
    \ let music = music_string.split(separator: \" \")\n    for (index, element) in\
    \ music.enumerated() {\n        if element == \"o\" {\n            arr.append(4)\n\
    \        } else if element == \"o|\" {\n            arr.append(2)\n        } else\
    \ if element == \".|\" {\n            arr.append(1)\n        }\n    }\n    return\
    \ arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013741
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beat = [\"o\": 4, \"\
    o|\": 2, \".|\": 1]\n    let music_components = music_string.components(separatedBy:\
    \ \" \")\n    var beats = [Int]()\n    for i in music_components {\n        if\
    \ let beat_count = beat[i] {\n            beats.append(beat_count)\n        }\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpg89as4yd.swift:13:41: error: value of type 'String' has no member\
    \ 'components'\n    let music_components = music_string.components(separatedBy:\
    \ \" \")\n                           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var beats = [Int]()\n\
    \    var currentBeat = 0\n    \n    for character in music_string {\n        switch\
    \ character {\n        case \"o\":\n            currentBeat = 4\n        case\
    \ \"o\":\n            currentBeat = 2\n        case \".\":\n            currentBeat\
    \ = 1\n        case \"|\":\n            beats.append(currentBeat)\n        default:\n\
    \            print(\"There is an invalid character in the music string!\")\n \
    \       }\n    }\n    \n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcfa6rhpl/tmpcfa6rhpl.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4636767c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b463645eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b463645e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b463645d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfa6rhpl                        0x00005574f2b648cf <unavailable> + 6351

    5    libc.so.6                          0x00002b4636953460 __libc_start_main +
    245

    6    tmpcfa6rhpl                        0x00005574f2b64409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013741
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var beats: [Int]\
    \ = []\n    var i = 0\n    var count = 0\n    var arr = Array(music_string)\n\
    \    \n    for each in arr {\n        if each == \"o\" {\n            count +=\
    \ 1\n        }\n        if each == \"|\" {\n            if arr[i-1] == \".\" {\n\
    \                beats.append(1)\n            }\n            if arr[i-1] == \"\
    o\" {\n                beats.append(2)\n            }\n        }\n        if each\
    \ == \" \" {\n            if arr[i-1] == \"o\" {\n                beats.append(4)\n\
    \            }\n        }\n        i += 1\n    }\n    if arr[arr.count-1] == \"\
    o\" {\n        beats.append(4)\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1918f70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1918c67561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1918c67286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1918c6713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1918c66bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1918a670a3 <unavailable> + 188579

    6    tmp6eaiz1a9                        0x0000555a3a0034aa <unavailable> + 9386

    7    tmp6eaiz1a9                        0x0000555a3a0027d5 <unavailable> + 6101

    8    libc.so.6                          0x00002b191915c460 __libc_start_main +
    245

    9    tmp6eaiz1a9                        0x0000555a3a0024d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660013741
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let symbols = Array(music_string.characters)\n\
    \    var music = [Int]()\n    for i in 0..<symbols.count {\n        if symbols[i]\
    \ == \"o\" {\n            if i+1 < symbols.count && symbols[i+1] == \"|\" {\n\
    \                music.append(2)\n            } else {\n                music.append(4)\n\
    \            }\n        } else if symbols[i] == \".\" {\n            music.append(1)\n\
    \        }\n    }\n    return music\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm8c6fcp6.swift:12:38: error: 'characters' is unavailable: Please\
    \ use String directly\n    let symbols = Array(music_string.characters)\n    \
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let music_string = music_string.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    let ints = notes.map({a in\n        switch a {\n        case \"\
    o\":\n            return 4\n        case \"o|\":\n            return 2\n     \
    \   case \".|\":\n            return 1\n        default:\n            return 0\n\
    \        }\n    })\n    return ints\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp40t_w73x.swift:12:37: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let music_string = music_string.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp40t_w73x.swift:12:61: error: cannot infer contextual base in reference\
    \ to member 'whitespacesAndNewlines'\n    let music_string = music_string.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n                                                 \
    \          ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var result = [Int]()\n\
    \    var note_value = 0\n    for char in music_string.characters {\n        switch\
    \ char {\n        case \"o\":\n            note_value = 4\n        case \"|\"\
    :\n            result.append(note_value)\n            note_value = 0\n       \
    \ case \".\":\n            note_value = 1\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4ihoetdi.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in music_string.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return []\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpcxtqwu7a/tmpcxtqwu7a.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7d876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7d56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7d56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7d56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcxtqwu7a                        0x000055c3a351551f <unavailable> + 5407

    5    libc.so.6                          0x00002b4d7da62460 __libc_start_main +
    245

    6    tmpcxtqwu7a                        0x000055c3a3515059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013571
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let beats: [String: Int]\
    \ = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    let notes = music_string.split(separator:\
    \ \" \")\n    return notes.map({beats[String($0)]!})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013741
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    return music_string.split(separator:\
    \ \" \").map { $0.split(separator: \"|\").map { $0.count }.reduce(0, +) }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpronyzb4z/tmpronyzb4z.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b3efd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b3eccdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b3eccd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b3eccc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpronyzb4z                        0x000055794ab369ff <unavailable> + 6655

    5    libc.so.6                          0x00002b3b3f1c2460 __libc_start_main +
    245

    6    tmpronyzb4z                        0x000055794ab36539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013741
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var beats: [Int] = []\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpks4nifrg.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    return music_string.components(separatedBy:\
    \ \" \").map {\n        switch $0 {\n        case \"o\":\n            return 4\n\
    \        case \"o|\":\n            return 2\n        case \".|\":\n          \
    \  return 1\n        default:\n            return 0\n        }\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpowk6aiiu.swift:13:25: error: value of type 'String' has no member\
    \ 'components'\n    return music_string.components(separatedBy: \" \").map {\n\
    \           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013741
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    /// Write your code here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpv6_nuwru/tmpv6_nuwru.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61e50f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61e4dedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61e4ded988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61e4dec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv6_nuwru                        0x000055842246851f <unavailable> + 5407

    5    libc.so.6                          0x00002b61e52e2460 __libc_start_main +
    245

    6    tmpv6_nuwru                        0x0000558422468059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013741
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    var music_arr = music_string.components(separatedBy:\
    \ \" \")\n    var res_arr = [Int]()\n    for i in 0..<music_arr.count {\n    \
    \    if music_arr[i] == \"o\" {\n            res_arr.append(4)\n        } else\
    \ if music_arr[i] == \"o|\" {\n            res_arr.append(2)\n        } else if\
    \ music_arr[i] == \".|\" {\n            res_arr.append(1)\n        }\n    }\n\
    \    return res_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmnrbio3y.swift:12:34: error: value of type 'String' has no member\
    \ 'components'\n    var music_arr = music_string.components(separatedBy: \" \"\
    )\n                    ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013741
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    let components = music_string.components(separatedBy:\
    \ \" \")\n    return components.map { component -> Int in\n        if component\
    \ == \"o\" {\n            return 4\n        } else if component == \"o|\" {\n\
    \            return 2\n        } else {\n            return 1\n        }\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(parse_music(music_string: \"\"\
    ) == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4,\
    \ 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string:\
    \ \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpphhdjc31.swift:12:35: error: value of type 'String' has no member\
    \ 'components'\n    let components = music_string.components(separatedBy: \" \"\
    )\n                     ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013741
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n  var result: [Int] = []\n\
    \  var currentChar: Character = \" \"\n  for char in music_string {\n    if char\
    \ == \" \" {\n      if currentChar == \"o\" {\n        result.append(4)\n    \
    \  } else if currentChar == \".\" {\n        result.append(1)\n      }\n     \
    \ currentChar = \" \"\n    } else if char == \"o\" || char == \".\" {\n      currentChar\
    \ = char\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpdrd7xom9/tmpdrd7xom9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b462171bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4621412b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4621412988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46214117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdrd7xom9                        0x0000559e03da571f <unavailable> + 5919

    5    libc.so.6                          0x00002b4621907460 __libc_start_main +
    245

    6    tmpdrd7xom9                        0x0000559e03da5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013741
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    \n    var beats = [Int]()\n\
    \    let notes = music_string.components(separatedBy: \" \")\n    \n    for note\
    \ in notes {\n        switch note {\n        case \"o\":\n            beats.append(4)\n\
    \        case \"o|\":\n            beats.append(2)\n        case \".|\":\n   \
    \         beats.append(1)\n        default:\n            print(\"ERROR\")\n  \
    \      }\n    }\n    \n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5qw3a91e.swift:14:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013741
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // TODO: Implement me\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp0xhna9um/tmp0xhna9um.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2ad8e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2ad5e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2ad5e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2ad5df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xhna9um                        0x000055833593551f <unavailable> + 5407

    5    libc.so.6                          0x00002af2adad5460 __libc_start_main +
    245

    6    tmp0xhna9um                        0x0000558335935059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013741
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // your implementation\
    \ here\n    let music_array = music_string.split(separator: \" \")\n    var music_int_array\
    \ = [Int]()\n    for music in music_array {\n        if(music.contains(\"o\"))\
    \ {\n            if(music.contains(\"|\")) {\n                music_int_array.append(2)\n\
    \            } else {\n                music_int_array.append(4)\n           \
    \ }\n        } else {\n            music_int_array.append(1)\n        }\n    }\n\
    \    return music_int_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013741
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string:\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
    func parse_music(music_string: String) -> [Int] {\n    // TODO: write your code\
    \ here\n    var result = [Int]()\n    let legend = [\"o\":\"4\", \"o|\":\"2\"\
    , \".|\":\"1\"]\n    var symbols = music_string.split(separator: \" \")\n    for\
    \ symbol in symbols {\n        if let symbol_value = legend[String(symbol)] {\n\
    \            result.append(Int(symbol_value)!)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013741
