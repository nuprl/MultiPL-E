language: swift
name: HumanEval_45_triangle_area
results:
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return (0.5 * Double(a) * Double(h))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var result = Double(a * h) / 2\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    \n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let side = Double(a)\n    let high = Double(h)\n    return (side\
    \ * high) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = 0.5 * Double(a) * Double(h)\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return (Double(a * h) / 2.0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = (Double(a) * Double(h)) / 2\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a * h) / 2\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    \n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    \n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let result = Double(a) * Double(h) / 2\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let side = Double(a)\n    let high = Double(h)\n    return side\
    \ * high / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var A: Double = Double(a * h) / 2\n    return A\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let sqrt3 = sqrt(3)\n    return Double(a) * Double(h) / (2 * sqrt3)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpfyavb7lu.swift:6:17: error: cannot find 'sqrt' in scope\n    let\
    \ sqrt3 = sqrt(3)\n                ^~~~\n"
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    \n    return (Double(a * h) / 2.0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = (Double(a) * Double(h)) / 2\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a * h) / 2.0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = (Double(a) * Double(h)) / 2\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return ((Double(a) * Double(h)) / 2.0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let half: Double = 0.5\n    return half * Double(a) * Double(h)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = (Double(a) * Double(h)) / 2\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return ((Double(a) * Double(h)) / 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (a*h)/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpec0dle_g.swift:6:17: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return (a*h)/2\n           ~~~~~^~\n\
    \           Double()\n"
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpojtft4u_/tmpojtft4u_.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae67d320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae67d017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae67d017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae67d0167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojtft4u_                        0x00005562b4fd4257 <unavailable> + 4695

    5    libc.so.6                          0x00002ae67d50c460 __libc_start_main +
    245

    6    tmpojtft4u_                        0x00005562b4fd3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = (Double(a) * Double(h)) / 2\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a * h) / 2\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  let area = Double(a * h) / 2\n  return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a * h / 2)\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmp_lj55eq4/tmp_lj55eq4.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bfce04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bfcafbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bfcafb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bfcafa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lj55eq4                        0x000055ba6fdda257 <unavailable> + 4695

    5    libc.so.6                          0x00002b0bfcff0460 __libc_start_main +
    245

    6    tmp_lj55eq4                        0x000055ba6fdd9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let result = (Double(a) * Double(h)) / 2\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a) * Double(h) / 2\n    return area\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a) * Double(h) / 2\n    return area\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let b = Double(a)\n    let c = Double(h)\n    return 0.5 * b *\
    \ c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h: 3) ==\
    \ 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a: 10,\
    \ h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let value = Double(a * h) / 2\n    return value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(0.5 * a * h)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpjt4lytyn.swift:6:19: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return Double(0.5 * a * h)\n          \
    \        ^\n                  Int( )\n"
  stdout: ''
  timestamp: 1659979401
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a) * Double(h) / 2\n    return area\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    \n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var result: Double = 0.0\n    result = Double(a) * Double(h) /\
    \ 2\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a * h) / 2\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let result = Double(a) * Double(h) / 2\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a * h) / 2\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = (Double(a) * Double(h)) / 2\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let result = (Double(a) * Double(h)) / 2\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a * h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpa0dxyso0/tmpa0dxyso0.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca54612c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca54309b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca54309988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca543087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa0dxyso0                        0x000055e67619d257 <unavailable> + 4695

    5    libc.so.6                          0x00002aca547fe460 __libc_start_main +
    245

    6    tmpa0dxyso0                        0x000055e67619cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a * h) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (0.5) * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a * h) / 2\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = (Double(a) * Double(h)) / 2\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let aDouble = Double(a)\n    let hDouble = Double(h)\n    return\
    \ (aDouble * hDouble) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a * h) / 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a * h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpa0dxyso0/tmpa0dxyso0.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca54612c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca54309b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca54309988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca543087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa0dxyso0                        0x000055e67619d257 <unavailable> + 4695

    5    libc.so.6                          0x00002aca547fe460 __libc_start_main +
    245

    6    tmpa0dxyso0                        0x000055e67619cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpojtft4u_/tmpojtft4u_.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae67d320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae67d017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae67d017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae67d0167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojtft4u_                        0x00005562b4fd4257 <unavailable> + 4695

    5    libc.so.6                          0x00002ae67d50c460 __libc_start_main +
    245

    6    tmpojtft4u_                        0x00005562b4fd3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    \n    let area = Double(a * h) / 2\n    return area\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a) * Double(h) / 2\n    return area\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = (Double(a) * Double(h)) / 2\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let a = Double(a)\n    let h = Double(h)\n    return 1/2 * a *\
    \ h\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 5, h: 3) ==\
    \ 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a: 10,\
    \ h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let result = 0.5 * Double(a) * Double(h)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpojtft4u_/tmpojtft4u_.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae67d320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae67d017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae67d017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae67d0167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojtft4u_                        0x00005562b4fd4257 <unavailable> + 4695

    5    libc.so.6                          0x00002ae67d50c460 __libc_start_main +
    245

    6    tmpojtft4u_                        0x00005562b4fd3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n  var result: Double = 0\n  result = (Double(a) * Double(h)) / 2\n\
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 5,\
    \ h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = 0.5 * Double(a) * Double(h)\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = Double(a) * Double(h) / 2\n    return area\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let result = Double(a) * Double(h) / 2\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    var area: Double\n    area = Double(a * h) / 2\n    return area\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let result = (Double(a) * Double(h)) / 2\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: -4
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: Exception
  stderr: 'tmpojtft4u_/tmpojtft4u_.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae67d320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae67d017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae67d017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae67d0167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojtft4u_                        0x00005562b4fd4257 <unavailable> + 4695

    5    libc.so.6                          0x00002ae67d50c460 __libc_start_main +
    245

    6    tmpojtft4u_                        0x00005562b4fd3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let area = 0.5 * Double(a) * Double(h)\n    return area\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    let result = Double(a * h) / 2\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979401
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) ->\
    \ Double {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979400
