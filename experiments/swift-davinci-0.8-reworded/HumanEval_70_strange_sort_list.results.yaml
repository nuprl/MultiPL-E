language: swift
name: HumanEval_70_strange_sort_list
results:
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // BEGIN strange_sort_list\n\
    \    if lst.isEmpty {\n        return []\n    }\n    var result = [Int]()\n  \
    \  var unsorted = lst\n    while !unsorted.isEmpty {\n        let minIndex = unsorted.index(of:\
    \ unsorted.min()!)!\n        let maxIndex = unsorted.index(of: unsorted.max()!)!\n\
    \        result.append(unsorted[minIndex])\n        unsorted.remove(at: minIndex)\n\
    \        if !unsorted.isEmpty {\n            result.append(unsorted[maxIndex])\n\
    \            unsorted.remove(at: maxIndex)\n        }\n    }\n    return result\n\
    \    // END strange_sort_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b520d675c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b520d36c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b520d36c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b520d36c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b520d36bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b520d16be83 <unavailable> + 188035

    6    tmpr9jw5fq3                        0x0000563c0ddd68a9 <unavailable> + 10409

    7    tmpr9jw5fq3                        0x0000563c0ddd56ec <unavailable> + 5868

    8    libc.so.6                          0x00002b520d861460 __libc_start_main +
    245

    9    tmpr9jw5fq3                        0x0000563c0ddd53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    let minimum = lst.min()!\n    let maximum = lst.max()!\n\
    \    let result = strange_sort_list(lst: lst.filter({ number in number != minimum\
    \ && number != maximum }))\n    return [minimum] + [maximum] + result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpuvp515lr/tmpuvp515lr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1dc9b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1dc6a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1dc6a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1dc6a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvp515lr                        0x000055d135f5c82b <unavailable> + 6187

    5    libc.so.6                          0x00002ab1dcb9c460 __libc_start_main +
    245

    6    tmpuvp515lr                        0x000055d135f5c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sortedArray = lst.sorted()\n\
    \    var resultArray = [Int]()\n    var increasing = true\n    while !sortedArray.isEmpty\
    \ {\n        if increasing {\n            resultArray.append(sortedArray.removeFirst())\n\
    \        } else {\n            resultArray.append(sortedArray.removeLast())\n\
    \        }\n        increasing = !increasing\n    }\n    return resultArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpcf96w6jp.swift:18:44: error: cannot use mutating member on immutable\
    \ value: 'sortedArray' is a 'let' constant\n            resultArray.append(sortedArray.removeFirst())\n\
    \                               ~~~~~~~~~~~ ^\n/tmp/tmpcf96w6jp.swift:13:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let sortedArray = lst.sorted()\n\
    \    ^~~\n    var\n/tmp/tmpcf96w6jp.swift:20:44: error: cannot use mutating member\
    \ on immutable value: 'sortedArray' is a 'let' constant\n            resultArray.append(sortedArray.removeLast())\n\
    \                               ~~~~~~~~~~~ ^\n/tmp/tmpcf96w6jp.swift:13:5: note:\
    \ change 'let' to 'var' to make it mutable\n    let sortedArray = lst.sorted()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\
    \ return lst }\n    var lst = lst.sorted()\n    var result = [Int]()\n    var\
    \ j = lst.count - 1\n    for i in 0..<lst.count {\n        if i % 2 == 0 {\n \
    \           result.append(lst[i])\n        } else {\n            result.append(lst[j])\n\
    \            j -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp__ev9mct/tmp__ev9mct.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac420d9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac420a93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac420a93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac420a927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__ev9mct                        0x000056291ca2b764 <unavailable> + 5988

    5    libc.so.6                          0x00002ac420f88460 __libc_start_main +
    245

    6    tmp__ev9mct                        0x000056291ca2b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  let sortedList = lst.sorted()\n    let middle = sortedList.count / 2\n    let\
    \ firstHalf = Array(sortedList[0..<middle])\n    let secondHalf = Array(sortedList[middle..<sortedList.count])\n\
    \    var i = 0\n    while i < firstHalf.count {\n        result.append(firstHalf[i])\n\
    \        result.append(secondHalf[i])\n        i += 1\n    }\n    if sortedList.count\
    \ % 2 != 0 {\n        result.append(sortedList[sortedList.count - 1])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpu3arklwm/tmpu3arklwm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abff3a13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abff370ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abff370a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abff37097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3arklwm                        0x000055577cf93774 <unavailable> + 6004

    5    libc.so.6                          0x00002abff3bff460 __libc_start_main +
    245

    6    tmpu3arklwm                        0x000055577cf93369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    var result = [Int]()\n    var lst1 = lst\n    var lst2 = lst.sorted(by:\
    \ >)\n    var index = 0\n    repeat {\n        result.append(lst1[index])\n  \
    \      lst1.remove(at: index)\n        result.append(lst2[index])\n        lst2.remove(at:\
    \ index)\n        index += 1\n    } while !lst1.isEmpty\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6e52dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6e224561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8a6e224286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8a6e22413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8a6e223bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8a6e023e83 <unavailable> + 188035

    6    tmp4van83_k                        0x000055662bb522f4 <unavailable> + 8948

    7    tmp4van83_k                        0x000055662bb5154c <unavailable> + 5452

    8    libc.so.6                          0x00002b8a6e719460 __libc_start_main +
    245

    9    tmp4van83_k                        0x000055662bb51229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var temp = lst\n    temp.sort()\n\
    \    var result = [Int]()\n    var i = 0\n    var j = temp.count - 1\n    while\
    \ i <= j {\n        result.append(temp[i])\n        i += 1\n        if i <= j\
    \ {\n            result.append(temp[j])\n            j -= 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var arr = lst\n    var isPositive\
    \ = true\n    var startIndex = 0\n    if arr.count > 0 {\n        startIndex =\
    \ arr.index(of: arr.min()!)!\n    }\n    for i in 0..<arr.count {\n        let\
    \ newIndex = (startIndex + i * (isPositive ? 1 : -1)) % arr.count\n        arr.swapAt(i,\
    \ newIndex)\n        isPositive = !isPositive\n    }\n    return arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ef1b5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ef1851561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7ef1851286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7ef185113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7ef1850bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b7ef183b8a2 <unavailable> + 1345698

    6    libswiftCore.so                    0x00002b7ef183b815 <unavailable> + 1345557

    7    libswiftCore.so                    0x00002b7ef183b450 MutableCollection.swapAt(_:_:)
    + 377

    8    tmp9aryeniu                        0x0000560ac3a588a4 <unavailable> + 10404

    9    tmp9aryeniu                        0x0000560ac3a576bc <unavailable> + 5820

    10   libc.so.6                          0x00002b7ef1d46460 __libc_start_main +
    245

    11   tmp9aryeniu                        0x0000560ac3a57399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // . . .\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpceeeiyl8/tmpceeeiyl8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85f8154c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85f7e4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85f7e4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85f7e4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpceeeiyl8                        0x000055ac6520d3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b85f8340460 __libc_start_main +
    245

    6    tmpceeeiyl8                        0x000055ac6520cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\n\
    \        return lst\n    }\n    var list = lst\n    var i = 0\n    var maxIndex\
    \ = list.count - 1\n    var minIndex = 0\n    var minValue = list[minIndex]\n\
    \    var maxValue = list[maxIndex]\n    while i < list.count {\n        if i %\
    \ 2 == 0 {\n            list[i] = minValue\n            minIndex += 1\n      \
    \      minValue = list[minIndex]\n        } else {\n            list[i] = maxValue\n\
    \            maxIndex -= 1\n            maxValue = list[maxIndex]\n        }\n\
    \        i += 1\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpe0_aiiic/tmpe0_aiiic.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13fae0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13fab06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13fab06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13fab057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0_aiiic                        0x000055fa4fd736bb <unavailable> + 5819

    5    libc.so.6                          0x00002b13faffb460 __libc_start_main +
    245

    6    tmpe0_aiiic                        0x000055fa4fd73169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted()\n\
    \    var result = [Int]()\n    var left = 0\n    var right = sorted.count - 1\n\
    \    while left <= right {\n        result.append(sorted[left])\n        left\
    \ += 1\n        if left <= right {\n            result.append(sorted[right])\n\
    \            right -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028492
- exit_code: -1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let lst = lst.sorted(by: {\
    \ $0 < $1 })\n    var result = [Int]()\n    while lst.count > 0 {\n        if\
    \ let first = lst.first {\n            result.append(first)\n            let lst\
    \ = lst.suffix(from: 1)\n        }\n        if let last = lst.last {\n       \
    \     result.append(last)\n            let lst = lst.dropLast()\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028497
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // your code here\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2,\
    \ 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5,\
    \ 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    assert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpzxidxy4r/tmpzxidxy4r.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9ce08ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9cdd81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9cdd81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9cdd807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxidxy4r                        0x000055ee6c1583d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ad9ce276460 __libc_start_main +
    245

    6    tmpzxidxy4r                        0x000055ee6c157fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  let sortedList = lst.sorted()\n    var maxValue = lst.max()\n    var minValue\
    \ = lst.min()\n    var maxIndex = sortedList.count - 1\n    var minIndex = 0\n\
    \    while maxIndex != minIndex {\n        result.append(minValue!)\n        minIndex\
    \ += 1\n        minValue = sortedList[minIndex]\n        result.append(maxValue!)\n\
    \        maxIndex -= 1\n        maxValue = sortedList[maxIndex]\n    }\n    result.append(minValue!)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb4a07bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb49d72561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb49d72286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb49d7213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb49d71bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb49b71e83 <unavailable> + 188035

    6    tmpa0s3ovzl                        0x0000559e8711b432 <unavailable> + 9266

    7    tmpa0s3ovzl                        0x0000559e8711a5ec <unavailable> + 5612

    8    libc.so.6                          0x00002acb4a267460 __libc_start_main +
    245

    9    tmpa0s3ovzl                        0x0000559e8711a2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var new_list = [Int]()\n  \
    \  if lst.count % 2 == 0 {\n        for i in stride(from: 0, to: lst.count, by:\
    \ 2) {\n            new_list.append(lst[i])\n            new_list.append(lst[lst.count\
    \ - i - 1])\n        }\n    } else {\n        new_list.append(lst[0])\n      \
    \  for i in stride(from: 1, to: lst.count, by: 2) {\n            new_list.append(lst[i])\n\
    \            new_list.append(lst[lst.count - i])\n        }\n    }\n    return\
    \ new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7hzx39wv/tmp7hzx39wv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe4788cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe47583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe47583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe475827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7hzx39wv                        0x000055d58999e7d4 <unavailable> + 6100

    5    libc.so.6                          0x00002abe47a78460 __libc_start_main +
    245

    6    tmp7hzx39wv                        0x000055d58999e3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    let min = lst.min()!\n    let max = lst.max()!\n    var arr = lst\n\
    \    var res = [Int]()\n    while !arr.isEmpty {\n        if min < max {\n   \
    \         res.append(min)\n            res.append(max)\n        } else {\n   \
    \         res.append(max)\n            res.append(min)\n        }\n        arr.remove(element:\
    \ min)\n        arr.remove(element: max)\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpydkl2ldh.swift:26:13: error: no exact matches in call to instance\
    \ method 'remove'\n        arr.remove(element: min)\n            ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(element:)', expected: '(at:)')\n\
    \    @inlinable public mutating func remove(at index: Int) -> Element\n      \
    \                              ^\nSwift.RangeReplaceableCollection:9:37: note:\
    \ incorrect labels for candidate (have: '(element:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n/tmp/tmpydkl2ldh.swift:27:13: error: no\
    \ exact matches in call to instance method 'remove'\n        arr.remove(element:\
    \ max)\n            ^\nSwift.Array:10:37: note: incorrect labels for candidate\
    \ (have: '(element:)', expected: '(at:)')\n    @inlinable public mutating func\
    \ remove(at index: Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(element:)', expected: '(at:)')\n\
    \    @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var list = lst\n    var sort\
    \ = [Int]()\n    while !list.isEmpty {\n        sort.append(list.remove(at: list.index(of:\
    \ list.min()!)!))\n        if list.isEmpty { break }\n        sort.append(list.remove(at:\
    \ list.index(of: list.max()!)!))\n    }\n    return sort\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    let\
    \ start_val = lst.min() ?? 0\n    let end_val = lst.max() ?? 0\n    var start\
    \ = true\n    var last_val = 0\n    let range = stride(from: start_val, to: end_val,\
    \ by: 1)\n    for n in range {\n        if start && lst.contains(n) {\n      \
    \      result.append(n)\n            start = false\n            last_val = n\n\
    \        } else if !start && lst.contains(n) {\n            if n - last_val >=\
    \ 2 {\n                result.append(n)\n                start = true\n      \
    \          last_val = n\n            }\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpjpijbea6/tmpjpijbea6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b039af0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b039ac06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b039ac06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b039ac057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjpijbea6                        0x000055a8173da7f4 <unavailable> + 6132

    5    libc.so.6                          0x00002b039b0fb460 __libc_start_main +
    245

    6    tmpjpijbea6                        0x000055a8173da3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var minIndex = 0\n    var maxIndex = 0\n    var currentMin\
    \ = lst[0]\n    var currentMax = lst[0]\n    var list = lst\n    var currentIndex\
    \ = 0\n    var tmp = 0\n    var arr = [Int]()\n    while currentIndex < list.count\
    \ {\n        for i in currentIndex..<list.count {\n            if list[i] < currentMin\
    \ {\n                currentMin = list[i]\n                minIndex = i\n    \
    \        }\n            if list[i] > currentMax {\n                currentMax\
    \ = list[i]\n                maxIndex = i\n            }\n        }\n        if\
    \ currentIndex % 2 == 0 {\n            tmp = list[currentIndex]\n            list[currentIndex]\
    \ = currentMin\n            list[minIndex] = tmp\n            arr.append(currentMin)\n\
    \        } else {\n            tmp = list[currentIndex]\n            list[currentIndex]\
    \ = currentMax\n            list[maxIndex] = tmp\n            arr.append(currentMax)\n\
    \        }\n        currentMin = list[currentIndex]\n        currentMax = list[currentIndex]\n\
    \        currentIndex += 1\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ tmp = lst\n    while tmp.count > 0 {\n        if tmp.count == 1 {\n        \
    \    result.append(tmp[0])\n            break\n        }\n        result.append(tmp.min()!)\n\
    \        tmp.remove(at: tmp.index(of: tmp.min()!)!)\n        result.append(tmp.max()!)\n\
    \        tmp.remove(at: tmp.index(of: tmp.max()!)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var newLst = lst\n    if newLst.count\
    \ < 2 {\n        return newLst\n    }\n    var min = lst.min()\n    var max =\
    \ lst.max()\n    while newLst.count != 0 {\n        newLst.removeAll {$0 == min}\n\
    \        if newLst.count == 0 {\n            break\n        }\n        newLst.removeAll\
    \ {$0 == max}\n        if newLst.count == 0 {\n            break\n        }\n\
    \        min = newLst.min()\n        max = newLst.max()\n    }\n    return lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8gn02nxy/tmp8gn02nxy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5859c8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5859983b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5859983988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58599827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gn02nxy                        0x0000560ef5612624 <unavailable> + 5668

    5    libc.so.6                          0x00002b5859e78460 __libc_start_main +
    245

    6    tmp8gn02nxy                        0x0000560ef5612219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 0 else {\
    \ return [] }\n    let sorted = lst.sorted()\n    var result = [Int]()\n    var\
    \ low = 0\n    var high = sorted.count - 1\n    while low <= high {\n        result.append(sorted[low])\n\
    \        low += 1\n        if low <= high {\n            result.append(sorted[high])\n\
    \            high -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var new = lst.sorted()\n  \
    \  var res: [Int] = []\n    while !new.isEmpty {\n        res.append(new.removeFirst())\n\
    \        res.append(new.removeLast())\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fd7307c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fd6ffe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9fd6ffe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9fd6ffe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9fd6ffdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b9fd70ffc1d <unavailable> + 2489373

    6    tmpx14tz8z4                        0x0000563ad5d9a318 <unavailable> + 8984

    7    tmpx14tz8z4                        0x0000563ad5d9970b <unavailable> + 5899

    8    libc.so.6                          0x00002b9fd74f3460 __libc_start_main +
    245

    9    tmpx14tz8z4                        0x0000563ad5d992a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var strangeList = [Int]()\n\
    \    var hasTwoElements = false\n    if lst.count > 1 {\n        var min = lst[0]\n\
    \        var max = lst[0]\n        var minIndex = 0\n        var maxIndex = 0\n\
    \        for i in 0..<lst.count {\n            if lst[i] > max {\n           \
    \     max = lst[i]\n                maxIndex = i\n            }\n            if\
    \ lst[i] < min {\n                min = lst[i]\n                minIndex = i\n\
    \            }\n        }\n        if minIndex == maxIndex {\n            strangeList.append(min)\n\
    \            for i in 0..<lst.count {\n                if i != minIndex {\n  \
    \                  strangeList.append(lst[i])\n                }\n           \
    \ }\n        } else {\n            strangeList.append(min)\n            strangeList.append(max)\n\
    \            hasTwoElements = true\n            for i in 0..<lst.count {\n   \
    \             if i != minIndex && i != maxIndex {\n                    strangeList.append(lst[i])\n\
    \                }\n            }\n        }\n    } else if lst.count == 1 {\n\
    \        strangeList.append(lst[0])\n    }\n    var count = lst.count\n    var\
    \ counter = 0\n    if count > 1 {\n        var currentMin = strangeList[0]\n \
    \       var currentMax = strangeList[0]\n        var currentMinIndex = 0\n   \
    \     var currentMaxIndex = 0\n        var i = 0\n        if hasTwoElements {\n\
    \            i = 2\n        }\n        while i != strangeList.count {\n      \
    \      if strangeList[i] > currentMax {\n                currentMax = strangeList[i]\n\
    \                currentMaxIndex = i\n            }\n            if strangeList[i]\
    \ < currentMin {\n                currentMin = strangeList[i]\n              \
    \  currentMinIndex = i\n            }\n            if i == strangeList.count -\
    \ 1 && currentMinIndex != currentMaxIndex {\n                strangeList.insert(currentMin,\
    \ at: i + 1)\n                strangeList.insert(currentMax, at: i + 2)\n    \
    \            counter += 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpxbzg28lt.swift:97:53: error: expected '}' at end of brace statement\n\
    assert(strange_sort_list(lst: [111111]) == [111111])\n                       \
    \                             ^\n/tmp/tmpxbzg28lt.swift:61:38: note: to match\
    \ this opening '{'\n        while i != strangeList.count {\n                 \
    \                    ^\n/tmp/tmpxbzg28lt.swift:97:53: error: expected '}' at end\
    \ of brace statement\nassert(strange_sort_list(lst: [111111]) == [111111])\n \
    \                                                   ^\n/tmp/tmpxbzg28lt.swift:52:18:\
    \ note: to match this opening '{'\n    if count > 1 {\n                 ^\n/tmp/tmpxbzg28lt.swift:97:53:\
    \ error: expected '}' at end of brace statement\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])\n                                                   \
    \ ^\n/tmp/tmpxbzg28lt.swift:12:45: note: to match this opening '{'\nfunc strange_sort_list(lst:\
    \ [Int]) -> [Int] {\n                                            ^\n/tmp/tmpxbzg28lt.swift:77:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpxbzg28lt.swift:50:9:\
    \ warning: variable 'count' was never mutated; consider changing to 'let' constant\n\
    \    var count = lst.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    while lst.count > 0 {\n        if let min = lst.min() {\n   \
    \         result.append(min)\n            lst.remove(at: lst.index(of: min)!)\n\
    \        }\n        if let max = lst.max() {\n            result.append(max)\n\
    \            lst.remove(at: lst.index(of: max)!)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpl1jng6kx/tmpl1jng6kx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61c013c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61bd0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61bd0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61bd097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1jng6kx                        0x00005605f789e3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ab61c1ff460 __libc_start_main +
    245

    6    tmpl1jng6kx                        0x00005605f789dfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sortlst = lst\n    sortlst.sort()\n\
    \    var index = 0\n    var res = [Int]()\n    for i in stride(from: 0, to: sortlst.count,\
    \ by: 2) {\n        res.append(sortlst[i])\n    }\n    for i in stride(from: 1,\
    \ to: sortlst.count, by: 2) {\n        res.append(sortlst[i])\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpezbw49oz/tmpezbw49oz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace36e25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace36b1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace36b1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace36b1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezbw49oz                        0x000055bd5ca6d864 <unavailable> + 6244

    5    libc.so.6                          0x00002ace37011460 __libc_start_main +
    245

    6    tmpezbw49oz                        0x000055bd5ca6d459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var mutable_lst = lst\n    mutable_lst.sort()\n    var\
    \ strange_lst: [Int] = []\n    var left_iter = 0\n    var right_iter = mutable_lst.count\
    \ - 1\n    while left_iter <= right_iter {\n        if left_iter == right_iter\
    \ {\n            strange_lst.append(mutable_lst[left_iter])\n            break\n\
    \        }\n        strange_lst.append(mutable_lst[left_iter])\n        strange_lst.append(mutable_lst[right_iter])\n\
    \        left_iter += 1\n        right_iter -= 1\n    }\n    return strange_lst\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var rsl\
    \ = [Int]()\n    var i = 0\n    while lst.count > 0 {\n        if i % 2 == 0 {\n\
    \            rsl.append(lst.min()!)\n            lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        } else {\n            rsl.append(lst.max()!)\n      \
    \      lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n        i += 1\n\
    \    }\n    return rsl\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    lst.sort(by:\
    \ <)\n    var lst2 = lst\n    lst2.sort(by: >)\n    return lst.enumerated().map\
    \ { $0.offset % 2 == 0 ? lst[$0.offset] : lst2[$0.offset] }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp2p9oci_z/tmp2p9oci_z.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b12a4715c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12a440cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12a440c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12a440b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2p9oci_z                        0x00005563a0be46b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b12a4901460 __libc_start_main +
    245

    6    tmp2p9oci_z                        0x00005563a0be42a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sorted_lst = lst.sorted()\n\
    \    var ordered_lst: [Int] = []\n    var min_index = 0\n    var max_index = sorted_lst.count\
    \ - 1\n    while min_index < max_index {\n        ordered_lst.append(sorted_lst[min_index])\n\
    \        ordered_lst.append(sorted_lst[max_index])\n        min_index += 1\n \
    \       max_index -= 1\n    }\n    if min_index == max_index {\n        ordered_lst.append(sorted_lst[min_index])\n\
    \    }\n    return ordered_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\
    \ return lst }\n    var list = lst\n    list.sort()\n    var count = list.count\n\
    \    var result = [Int]()\n    var i = 0\n    while count > 0 {\n        result.append(list[i])\n\
    \        if i == 0 {\n            i = count - 1\n        } else {\n          \
    \  i -= 1\n        }\n        count -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmplmqp088o/tmplmqp088o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b389dc10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b389d907b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b389d907988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b389d9067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplmqp088o                        0x0000564afd56a654 <unavailable> + 5716

    5    libc.so.6                          0x00002b389ddfc460 __libc_start_main +
    245

    6    tmplmqp088o                        0x0000564afd56a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    var min = lst.first ?? 0\n    var max = lst.first ?? 0\n    var\
    \ index = 0\n    var x = 0\n    while lst.count > 0 {\n        lst.forEach { item\
    \ in\n            if item < min {\n                min = item\n              \
    \  index = x\n            }\n            if item > max {\n                max\
    \ = item\n                index = x\n            }\n            x += 1\n     \
    \   }\n        if result.count % 2 == 0 {\n            result.append(min)\n  \
    \          lst.remove(at: index)\n            min = lst.first ?? 0\n        }\
    \ else {\n            result.append(max)\n            lst.remove(at: index)\n\
    \            max = lst.first ?? 0\n        }\n        x = 0\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b474e5a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b474e297561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b474e297286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b474e29713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b474e296bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b474e284018 <unavailable> + 1355800

    6    tmp5azekvy3                        0x000055ea599356e5 <unavailable> + 9957

    7    tmp5azekvy3                        0x000055ea599345dc <unavailable> + 5596

    8    libc.so.6                          0x00002b474e78c460 __libc_start_main +
    245

    9    tmp5azekvy3                        0x000055ea599342b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\n\
    \        return lst\n    }\n    var copyLst = lst\n    var result = [Int]()\n\
    \    let min = lst.min()\n    let max = lst.max()\n    var minIndex = 0\n    var\
    \ maxIndex = 0\n    for (index, value) in lst.enumerated() {\n        if value\
    \ == min {\n            minIndex = index\n        }\n        if value == max {\n\
    \            maxIndex = index\n        }\n    }\n    copyLst.remove(at: minIndex)\n\
    \    copyLst.remove(at: maxIndex - 1)\n    result.append(min!)\n    result.append(max!)\n\
    \    return result + strange_sort_list(lst: copyLst)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpe5bvxtpd/tmpe5bvxtpd.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb50d83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb50a7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb50a7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb50a797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5bvxtpd                        0x000056544e698d52 <unavailable> + 7506

    5    libc.so.6                          0x00002acb50f6f460 __libc_start_main +
    245

    6    tmpe5bvxtpd                        0x000056544e698529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var odd_even_list: [Int] =\
    \ []\n    var sorted_list: [Int] = lst.sorted()\n    var i = 0\n    while i <\
    \ sorted_list.count {\n        if i % 2 == 0 {\n            odd_even_list.append(sorted_list.removeLast())\n\
    \        } else {\n            odd_even_list.append(sorted_list.removeFirst())\n\
    \        }\n        i += 1\n    }\n    return odd_even_list\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpz_g9ioet/tmpz_g9ioet.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac500647c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac50033eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac50033e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac50033d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_g9ioet                        0x0000557ae634d704 <unavailable> + 5892

    5    libc.so.6                          0x00002ac500833460 __libc_start_main +
    245

    6    tmpz_g9ioet                        0x0000557ae634d2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\n\
    \        return lst\n    }\n    var result = [Int]()\n    var even = true\n  \
    \  var temp = lst\n    while temp.count > 0 {\n        if even {\n           \
    \ result.append(temp.min()!)\n            temp.remove(at: temp.index(of: temp.min()!)!)\n\
    \        } else {\n            result.append(temp.max()!)\n            temp.remove(at:\
    \ temp.index(of: temp.max()!)!)\n        }\n        even = !even\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var newList = lst\n    var\
    \ index = 0\n    var lowToHigh = true\n    while index < newList.count {\n   \
    \     if lowToHigh {\n            newList.swapAt(index, newList.index(of: newList.min()!)!)\n\
    \            lowToHigh = false\n        } else {\n            newList.swapAt(index,\
    \ newList.index(of: newList.max()!)!)\n            lowToHigh = true\n        }\n\
    \        index += 1\n    }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpa2ou9na1/tmpa2ou9na1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad820eb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad820ba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad820ba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad820ba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa2ou9na1                        0x0000556d6af26714 <unavailable> + 5908

    5    libc.so.6                          0x00002ad82109d460 __libc_start_main +
    245

    6    tmpa2ou9na1                        0x0000556d6af26309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var nums = lst\n    var result\
    \ = [Int]()\n    var max = nums.max()\n    var min = nums.min()\n    while nums.count\
    \ > 0 {\n        if max == nil && min == nil {\n            return result\n  \
    \      }\n        if let minimum = min {\n            result.append(minimum)\n\
    \            nums.remove(at: nums.index(of: minimum)!)\n        }\n        if\
    \ let maximum = max {\n            result.append(maximum)\n            nums.remove(at:\
    \ nums.index(of: maximum)!)\n        }\n        max = nums.max()\n        min\
    \ = nums.min()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp8i1_eeeg/tmp8i1_eeeg.swift:27: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af034be6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0348dd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af0348dd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af0348dd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af0348dcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp8i1_eeeg                        0x000055c97190c7b2 <unavailable> + 10162

    6    tmp8i1_eeeg                        0x000055c97190b7db <unavailable> + 6107

    7    libc.so.6                          0x00002af034dd2460 __libc_start_main +
    245

    8    tmp8i1_eeeg                        0x000055c97190b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ max = lst\n    while !max.isEmpty {\n        result.append(max.removeFirst())\n\
    \        let temp = max.removeLast()\n        if !max.isEmpty {\n            result.append(temp)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpz6pq6mi2/tmpz6pq6mi2.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d93ef0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d93be7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d93be7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d93be67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6pq6mi2                        0x000055ed94d62664 <unavailable> + 5732

    5    libc.so.6                          0x00002b8d940dc460 __libc_start_main +
    245

    6    tmpz6pq6mi2                        0x000055ed94d62259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // TODO: Write strange_sort_list\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpkcrpilak/tmpkcrpilak.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1682e9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1682b92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1682b92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1682b917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkcrpilak                        0x0000557a852263d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b1683087460 __libc_start_main +
    245

    6    tmpkcrpilak                        0x0000557a85225fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpl1jng6kx/tmpl1jng6kx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61c013c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61bd0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61bd0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61bd097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1jng6kx                        0x00005605f789e3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ab61c1ff460 __libc_start_main +
    245

    6    tmpl1jng6kx                        0x00005605f789dfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var lst = lst\n    lst.sort {$0 < $1}\n    var r = [Int]()\n\
    \    for (i, e) in lst.enumerated() {\n        if i % 2 == 0 {\n            r.append(e)\n\
    \        } else {\n            r.insert(e, at: 0)\n        }\n    }\n    return\
    \ r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(strange_sort_list(lst: [1, 2,\
    \ 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5,\
    \ 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4,\
    \ 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\
    assert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpj609kuf1/tmpj609kuf1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64c7723c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64c741ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64c741a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64c74197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj609kuf1                        0x000055cc2d588864 <unavailable> + 6244

    5    libc.so.6                          0x00002b64c790f460 __libc_start_main +
    245

    6    tmpj609kuf1                        0x000055cc2d588459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    var lst = lst\n    let lstCount = lst.count\n    var sorted = [Int]()\n\
    \    var i = 0\n    var j = lstCount - 1\n    let isEven = lstCount % 2 == 0\n\
    \    while !lst.isEmpty {\n        sorted.append(lst.remove(at: i))\n        if\
    \ !lst.isEmpty {\n            sorted.append(lst.remove(at: j))\n        }\n  \
    \      i += 1\n        j -= 1\n    }\n    if isEven {\n        return sorted\n\
    \    } else {\n        return sorted.dropLast()\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d64e9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d64b91561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4d64b91286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4d64b9113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4d64b90bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b4d64b7e018 <unavailable> + 1355800

    6    tmpg82418g4                        0x000055c35fe904ec <unavailable> + 9452

    7    tmpg82418g4                        0x000055c35fe8f5dc <unavailable> + 5596

    8    libc.so.6                          0x00002b4d65086460 __libc_start_main +
    245

    9    tmpg82418g4                        0x000055c35fe8f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    let sorted = lst.sorted()\n    var result = [Int]()\n\
    \    for i in 0..<sorted.count {\n        result.append(sorted[i / 2 * (i % 2\
    \ == 0 ? 1 : -1)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3a275ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3a2451561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab3a2451286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab3a245113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab3a2450bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab3a2250e83 <unavailable> + 188035

    6    tmpsn82vz50                        0x000055d0c330e5fe <unavailable> + 9726

    7    tmpsn82vz50                        0x000055d0c330d67c <unavailable> + 5756

    8    libc.so.6                          0x00002ab3a2946460 __libc_start_main +
    245

    9    tmpsn82vz50                        0x000055d0c330d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  var arr: [Int] = lst\n  var stranged_arr:\
    \ [Int] = []\n  var sorted_arr: [Int] = arr.sorted(by: <)\n  var min_index: Int\
    \ = 0\n  var max_index: Int = arr.count - 1\n  while min_index <= max_index {\n\
    \    stranged_arr.append(sorted_arr[min_index])\n    min_index += 1\n    if min_index\
    \ > max_index {\n      break\n    }\n    stranged_arr.append(sorted_arr[max_index])\n\
    \    max_index -= 1\n  }\n  return stranged_arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 1 {\n     \
    \   return lst\n    }\n    var odd = lst.count % 2 != 0\n    var result = [Int]()\n\
    \    var newLst = lst.sorted()\n    while newLst.count > 0 {\n        if odd {\n\
    \            result.append(newLst.removeLast())\n        } else {\n          \
    \  result.append(newLst.removeFirst())\n        }\n        odd = !odd\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpkn0yuuhl/tmpkn0yuuhl.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af026ffbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af026cf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af026cf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af026cf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkn0yuuhl                        0x000056206f87f8ab <unavailable> + 6315

    5    libc.so.6                          0x00002af0271e7460 __libc_start_main +
    245

    6    tmpkn0yuuhl                        0x000056206f87f359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var strLst = [Int]()\n    var\
    \ min = lst.min()\n    var max = lst.max()\n    var lst = lst\n    while lst.count\
    \ > 0 {\n        if strLst.count % 2 == 0 {\n            strLst.append(min!)\n\
    \            lst.remove(at: lst.index(of: min!)!)\n            min = lst.min()\n\
    \        } else {\n            strLst.append(max!)\n            lst.remove(at:\
    \ lst.index(of: max!)!)\n            max = lst.max()\n        }\n    }\n    return\
    \ strLst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var newLst = lst\n    for (i,\
    \ _) in lst.enumerated() {\n        if i % 2 == 0 {\n            newLst[i] = lst.min()!\n\
    \        } else {\n            newLst[i] = lst.max()!\n        }\n    }\n    return\
    \ newLst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpb3jzqraq/tmpb3jzqraq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3b36b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3b33acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3b33ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3b33ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3jzqraq                        0x0000558d590367d4 <unavailable> + 6100

    5    libc.so.6                          0x00002ac3b38a1460 __libc_start_main +
    245

    6    tmpb3jzqraq                        0x0000558d590363c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return strange_sort_list_impl(lst:\
    \ lst, is_max: false)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3hf8_cuz.swift:13:12: error: cannot find 'strange_sort_list_impl'\
    \ in scope\n    return strange_sort_list_impl(lst: lst, is_max: false)\n     \
    \      ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  guard lst.count > 1 else { return\
    \ lst }\n  var asc = lst.sorted()\n  var result = [Int]()\n  while asc.count >\
    \ 0 {\n    if asc.count == 1 {\n      result.append(asc.popLast()!)\n    } else\
    \ {\n      result.append(asc.removeFirst())\n      result.append(asc.popLast()!)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // TODO: Implement it!\n  \
    \  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwir7on60/tmpwir7on60.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78fd4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78fd1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78fd1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78fd1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwir7on60                        0x000055b1a66683d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b78fd6b0460 __libc_start_main +
    245

    6    tmpwir7on60                        0x000055b1a6667fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var new_lst = lst\n    while new_lst.count > 0 {\n        var min = Int.max\n\
    \        var max = Int.min\n        var min_index = 0\n        var max_index =\
    \ 0\n        for i in 0..<new_lst.count {\n            if new_lst[i] < min {\n\
    \                min = new_lst[i]\n                min_index = i\n           \
    \ }\n            if new_lst[i] > max {\n                max = new_lst[i]\n   \
    \             max_index = i\n            }\n        }\n        if result.count\
    \ == 0 {\n            result.append(min)\n            new_lst.remove(at: min_index)\n\
    \        } else {\n            result.append(max)\n            new_lst.remove(at:\
    \ max_index)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_hhocyvq/tmp_hhocyvq.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b124786fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1247566b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1247566988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12475657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hhocyvq                        0x0000555b8b20d6c4 <unavailable> + 5828

    5    libc.so.6                          0x00002b1247a5b460 __libc_start_main +
    245

    6    tmp_hhocyvq                        0x0000555b8b20d2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n\tvar ret: [Int] = []\n\tvar sorted\
    \ = lst.sorted()\n\tvar sign = true\n\twhile sorted.count > 0 {\n\t\tif sign {\n\
    \t\t\tret.append(sorted.removeFirst())\n\t\t} else {\n\t\t\tret.append(sorted.removeLast())\n\
    \t\t}\n\t\tsign = !sign\n\t}\n\treturn ret\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n\tvar new_arr = [Int]()\n\tvar\
    \ sorted_lst = lst.sorted()\n\tvar small = 0\n\tvar large = sorted_lst.count -\
    \ 1\n\twhile small <= large {\n\t\tnew_arr.append(sorted_lst[small])\n\t\tsmall\
    \ += 1\n\t\tif small <= large {\n\t\t\tnew_arr.append(sorted_lst[large])\n\t\t\
    \tlarge -= 1\n\t\t}\n\t}\n\treturn new_arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var items: [Int] = lst\n  \
    \  var result: [Int] = []\n    while items.count > 0 {\n        let max = items.max()\n\
    \        let min = items.min()\n        let idx = items.index(of: max!)\n    \
    \    items.remove(at: idx!)\n        result.append(max!)\n        let idxMin =\
    \ items.index(of: min!)\n        items.remove(at: idxMin!)\n        result.append(min!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp4k2o0_nh/tmp4k2o0_nh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba23fb4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba23f843b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba23f843988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba23f8427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4k2o0_nh                        0x00005604debe2724 <unavailable> + 5924

    5    libc.so.6                          0x00002ba23fd38460 __libc_start_main +
    245

    6    tmp4k2o0_nh                        0x00005604debe2319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var odd = true\n    var dict\
    \ = [Int: [Int]]()\n    for i in lst {\n        if odd {\n            if var arr\
    \ = dict[-i] {\n                arr.append(i)\n                dict[-i] = arr\n\
    \            } else {\n                dict[-i] = [i]\n            }\n       \
    \ } else {\n            if var arr = dict[i] {\n                arr.append(i)\n\
    \                dict[i] = arr\n            } else {\n                dict[i]\
    \ = [i]\n            }\n        }\n        odd = !odd\n    }\n    var result =\
    \ [Int]()\n    var sortedKeys = Array(dict.keys).sorted()\n    for key in sortedKeys\
    \ {\n        result.append(contentsOf: dict[key]!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp5tbwxdzj/tmp5tbwxdzj.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba068cf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0689e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0689e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0689e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5tbwxdzj                        0x0000556df8cf8a24 <unavailable> + 6692

    5    libc.so.6                          0x00002ba068edc460 __libc_start_main +
    245

    6    tmp5tbwxdzj                        0x0000556df8cf8619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n\tif lst.count <= 2 {\n\t\treturn\
    \ lst\n\t}\n\t\n\tlet minVal = lst.min()!\n\tvar minIndex = lst.index(of: minVal)!\n\
    \tvar newList = [Int]()\n\tvar isMin = true\n\tvar ind = 0\n\t\n\tfor _ in lst\
    \ {\n\t\tlet currVal = lst[minIndex]\n\t\tnewList.append(currVal)\n\t\t\n\t\t\
    if isMin {\n\t\t\tlet updatedMaxVal = lst[lst.index(before: minIndex)]\n\t\t\t\
    minIndex = lst.index(of: updatedMaxVal)!\n\t\t\tisMin = false\n\t\t} else {\n\t\
    \t\tminIndex = lst.index(after: minIndex)\n\t\t\tisMin = true\n\t\t}\n\t\t\n\t\
    \tind += 1\n\t}\n\t\n\treturn newList\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b15e184cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15e1543561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b15e1543286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b15e154313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b15e1542bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b15e1342e83 <unavailable> + 188035

    6    tmpd_tme1xu                        0x0000563218b3c7bd <unavailable> + 10173

    7    tmpd_tme1xu                        0x0000563218b3b80c <unavailable> + 6156

    8    libc.so.6                          0x00002b15e1a38460 __libc_start_main +
    245

    9    tmpd_tme1xu                        0x0000563218b3b4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    guard lst.count > 1 else { return lst }\n    let sortedLst = lst.sorted()\n\
    \    var result: [Int] = []\n    var maxIndex = sortedLst.count - 1\n    var minIndex\
    \ = 0\n    for _ in sortedLst {\n        result.append(sortedLst[minIndex])\n\
    \        minIndex += 1\n        if minIndex < maxIndex {\n            result.append(sortedLst[maxIndex])\n\
    \            maxIndex -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpdapwgjk4/tmpdapwgjk4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba640328c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba64001fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba64001f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba64001e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdapwgjk4                        0x0000559afaacb744 <unavailable> + 5956

    5    libc.so.6                          0x00002ba640514460 __libc_start_main +
    245

    6    tmpdapwgjk4                        0x0000559afaacb339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var list = lst\n    var sorted:\
    \ [Int] = []\n    for _ in 0..<list.count {\n        sorted.append(list.min()!)\n\
    \        list.removeFirst(list.firstIndex(of: list.min()!)!)\n        sorted.append(list.max()!)\n\
    \        list.removeFirst(list.firstIndex(of: list.max()!)!)\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpn0b6wev1/tmpn0b6wev1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9deb8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9de884b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9de884988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9de8837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn0b6wev1                        0x000055d1cb4f7864 <unavailable> + 6244

    5    libc.so.6                          0x00002ac9ded79460 __libc_start_main +
    245

    6    tmpn0b6wev1                        0x000055d1cb4f7459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted()\n\
    \    var result = [Int]()\n    var i = 0\n    while i < sorted.count {\n     \
    \   result.append(sorted[i])\n        if i+1 < sorted.count {\n            result.append(sorted[sorted.count\
    \ - 1 - i])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmple1jxr_l/tmple1jxr_l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5a2234c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5a1f2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5a1f2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5a1f2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmple1jxr_l                        0x000055eeafed15d4 <unavailable> + 5588

    5    libc.so.6                          0x00002ac5a2420460 __libc_start_main +
    245

    6    tmple1jxr_l                        0x000055eeafed11c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var c = lst.count\n    var\
    \ lst = lst\n    var result: [Int] = []\n    for _ in 0..<c {\n        var min\
    \ = Int.max\n        var indx = 0\n        for (i, v) in lst.enumerated() {\n\
    \            if v < min {\n                min = v\n                indx = i\n\
    \            }\n        }\n        result.append(min)\n        lst.remove(at:\
    \ indx)\n        if lst.count > 0 {\n            var max = Int.min\n         \
    \   var indx = 0\n            for (i, v) in lst.enumerated() {\n             \
    \   if v > max {\n                    max = v\n                    indx = i\n\
    \                }\n            }\n            result.append(max)\n          \
    \  lst.remove(at: indx)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b134e487c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b134e17e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b134e17e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b134e17e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b134e17dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b134e16b018 <unavailable> + 1355800

    6    tmphd503k4o                        0x000055cd8048279f <unavailable> + 10143

    7    tmphd503k4o                        0x000055cd8048179c <unavailable> + 6044

    8    libc.so.6                          0x00002b134e673460 __libc_start_main +
    245

    9    tmphd503k4o                        0x000055cd80481479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 1 {\n     \
    \   return lst\n    }\n    let minimum = lst.min()!\n    let maximum = lst.max()!\n\
    \    let odd = lst.filter { $0 == minimum || $0 == maximum }\n    let even = lst.filter\
    \ { $0 != minimum && $0 != maximum }\n    return odd + even\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpbbivqaby/tmpbbivqaby.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb37ac6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb377bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb377bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb377bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbivqaby                        0x000055d4cff9a82b <unavailable> + 6187

    5    libc.so.6                          0x00002aeb37cb2460 __libc_start_main +
    245

    6    tmpbbivqaby                        0x000055d4cff9a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted()\n\
    \    var result = [Int]()\n    var i = 0\n    var j = sorted.count - 1\n    while\
    \ i <= j {\n        result.append(sorted[i])\n        i += 1\n        if i > j\
    \ {\n            break\n        }\n        result.append(sorted[j])\n        j\
    \ -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var new_lst:\
    \ [Int] = []\n    var min_num: Int = 0\n    var max_num: Int = 0\n    for i in\
    \ 0..<lst.count{\n        min_num = lst.min()!\n        max_num = lst.max()!\n\
    \        if i % 2 == 0{\n            new_lst.append(min_num)\n            lst.remove(at:\
    \ lst.index(of: min_num)!)\n        }\n        else{\n            new_lst.append(max_num)\n\
    \            lst.remove(at: lst.index(of: max_num)!)\n        }\n    }\n    return\
    \ new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sortedLst = lst.sorted()\n\
    \    var minIndex = 0\n    var maxIndex = sortedLst.count - 1\n    var strangeLst\
    \ = [Int]()\n    for _ in lst {\n        strangeLst.append(sortedLst[minIndex])\n\
    \        minIndex += 1\n        if maxIndex > minIndex {\n            strangeLst.append(sortedLst[maxIndex])\n\
    \            maxIndex -= 1\n        }\n    }\n    return strangeLst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpnahq00jg/tmpnahq00jg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21b8af7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21b87eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21b87ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21b87ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnahq00jg                        0x0000558cced6c744 <unavailable> + 5956

    5    libc.so.6                          0x00002b21b8ce3460 __libc_start_main +
    245

    6    tmpnahq00jg                        0x0000558cced6c339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    var workingSet = lst\n    var results = [Int]()\n    var isMin = true\n\
    \    while !workingSet.isEmpty {\n        if isMin {\n            results.append(workingSet.min()!)\n\
    \            workingSet.remove(at: workingSet.index(of: workingSet.min()!)!)\n\
    \        } else {\n            results.append(workingSet.max()!)\n           \
    \ workingSet.remove(at: workingSet.index(of: workingSet.max()!)!)\n        }\n\
    \        isMin = !isMin\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let lst1 = lst.sorted()\n \
    \   var left = 0\n    var right = lst1.count - 1\n    var result = [Int]()\n \
    \   for _ in 0..<lst1.count {\n        result.append(lst1[left])\n        if left\
    \ < right {\n            result.append(lst1[right])\n        }\n        left +=\
    \ 1\n        right -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp2a_vxd6v/tmp2a_vxd6v.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b63acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b60a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b60a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b60a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2a_vxd6v                        0x00005602bbd9a764 <unavailable> + 5988

    5    libc.so.6                          0x00002ad7b6598460 __libc_start_main +
    245

    6    tmp2a_vxd6v                        0x00005602bbd9a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let arr = lst.sorted()\n  \
    \  var array = [Int]()\n    var i = 0\n    var j = arr.count - 1\n    while j\
    \ >= i {\n        array.append(arr[i])\n        if i == j {\n            break\n\
    \        }\n        array.append(arr[j])\n        i += 1\n        j -= 1\n   \
    \ }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    var result = [Int]()\n    var copy = lst\n    var i = 0\n    while\
    \ !copy.isEmpty {\n        if i % 2 == 0 {\n            result.append(copy.min()!)\n\
    \            copy.remove(at: copy.index(of: copy.min()!)!)\n        } else {\n\
    \            result.append(copy.max()!)\n            copy.remove(at: copy.index(of:\
    \ copy.max()!)!)\n        }\n        i += 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var res = [Int]()\n    let\
    \ copy = lst.sorted()\n    var index = 0\n    while copy.count > 0 {\n       \
    \ res.append(copy[index])\n        copy.remove(at: index)\n        if copy.count\
    \ == 0 {\n            break\n        }\n        if index == 0 {\n            index\
    \ = copy.count - 1\n        } else {\n            index -= 1\n        }\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmplqf67vy8.swift:18:14: error: cannot use mutating member on immutable\
    \ value: 'copy' is a 'let' constant\n        copy.remove(at: index)\n        ~~~~\
    \ ^\n/tmp/tmplqf67vy8.swift:14:5: note: change 'let' to 'var' to make it mutable\n\
    \    let copy = lst.sorted()\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028493
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let tmp = lst.sorted()\n  \
    \  var sorted: [Int] = []\n    while tmp.count > 0 {\n        sorted.append(tmp.first!)\n\
    \        tmp.removeFirst()\n        if tmp.count > 0 {\n            sorted.append(tmp.last!)\n\
    \            tmp.removeLast()\n        }\n    }\n    return sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpi4llsigd.swift:17:13: error: cannot use mutating member on immutable\
    \ value: 'tmp' is a 'let' constant\n        tmp.removeFirst()\n        ~~~ ^\n\
    /tmp/tmpi4llsigd.swift:13:5: note: change 'let' to 'var' to make it mutable\n\
    \    let tmp = lst.sorted()\n    ^~~\n    var\n/tmp/tmpi4llsigd.swift:20:17: error:\
    \ cannot use mutating member on immutable value: 'tmp' is a 'let' constant\n \
    \           tmp.removeLast()\n            ~~~ ^\n/tmp/tmpi4llsigd.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let tmp = lst.sorted()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var ret = [Int]()\n    var\
    \ sorted_list = lst.sorted()\n    var left = 0\n    var right = sorted_list.count\
    \ - 1\n    while left <= right {\n        if left == right {\n            ret.append(sorted_list[left])\n\
    \            break\n        }\n        ret.append(sorted_list[left])\n       \
    \ ret.append(sorted_list[right])\n        left += 1\n        right -= 1\n    }\n\
    \    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sortedList = lst.sorted(by:\
    \ <)\n    var result: [Int] = []\n    for (key,value) in sortedList.enumerated()\
    \ {\n        if (key % 2 == 0) {\n            result.append(value)\n        }\
    \ else {\n            result.insert(value, at: 0)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp5bmh99qj/tmp5bmh99qj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79d934fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79d9046b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79d9046988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79d90457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bmh99qj                        0x000055ffdb4577a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b79d953b460 __libc_start_main +
    245

    6    tmp5bmh99qj                        0x000055ffdb457399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        let min = min_list(lst: lst)\n\
    \        let max = max_list(lst: lst)\n        if lst.count == 1 {\n         \
    \   result.append(min)\n            lst.remove(at: lst.index(of: min)!)\n    \
    \    } else {\n            result.append(min)\n            result.append(max)\n\
    \            lst.remove(at: lst.index(of: min)!)\n            lst.remove(at: lst.index(of:\
    \ max)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp1jfibq_q.swift:16:19: error: cannot find 'min_list' in scope\n\
    \        let min = min_list(lst: lst)\n                  ^~~~~~~~\n/tmp/tmp1jfibq_q.swift:17:19:\
    \ error: cannot find 'max_list' in scope\n        let max = max_list(lst: lst)\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted()\n\
    \    var odd = [Int]()\n    var even = [Int]()\n    for (i, item) in sorted.enumerated()\
    \ {\n        if i % 2 == 0 {\n            odd.append(item)\n        } else {\n\
    \            even.append(item)\n        }\n    }\n    return odd + even.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp1a3fqx3h/tmp1a3fqx3h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b21b17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2180eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2180e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2180d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1a3fqx3h                        0x000055ac1c93a9a4 <unavailable> + 6564

    5    libc.so.6                          0x00002b8b21d03460 __libc_start_main +
    245

    6    tmp1a3fqx3h                        0x000055ac1c93a599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst = lst\n    var min_value = lst.min()!\n    var max_value = lst.max()!\n\
    \    var min_index = lst.index(of: min_value)!\n    var max_index = lst.index(of:\
    \ max_value)!\n    var tmp = lst[min_index]\n    lst[min_index] = lst[max_index]\n\
    \    lst[max_index] = tmp\n    result.append(lst[0])\n    lst.remove(at: 0)\n\
    \    while lst.count > 0 {\n        min_value = lst.min()!\n        max_value\
    \ = lst.max()!\n        min_index = lst.index(of: min_value)!\n        max_index\
    \ = lst.index(of: max_value)!\n        tmp = lst[min_index]\n        lst[min_index]\
    \ = lst[max_index]\n        lst[max_index] = tmp\n        result.append(lst[0])\n\
    \        lst.remove(at: 0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpues9zzi8/tmpues9zzi8.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91ca1eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91c9ee5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91c9ee5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91c9ee47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpues9zzi8                        0x000055cc757cb7d4 <unavailable> + 6100

    5    libc.so.6                          0x00002b91ca3da460 __libc_start_main +
    245

    6    tmpues9zzi8                        0x000055cc757cb3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var array = lst\n    var idx\
    \ = 0\n    for _ in array {\n        array.insert(array.remove(at: array.index(of:\
    \ array.min()!)!), at: idx)\n        array.insert(array.remove(at: array.index(of:\
    \ array.max()!)!), at: idx + 1)\n        idx += 2\n    }\n    return array\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b20d112ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20d0e25561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b20d0e25286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b20d0e2513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b20d0e24bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b20d0e0e196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b20d0e12020 Array.insert(_:at:)
    + 80

    7    tmpg9poxpng                        0x000055bfea96e610 <unavailable> + 9744

    8    tmpg9poxpng                        0x000055bfea96d70c <unavailable> + 5900

    9    libc.so.6                          0x00002b20d131a460 __libc_start_main +
    245

    10   tmpg9poxpng                        0x000055bfea96d3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  var lst = lst\n  var lst1 = [Int]()\n\
    \  var lst2 = [Int]()\n  var flag = false\n  if lst.count % 2 == 0 {\n    while\
    \ lst.count > 0 {\n      let min = lst.min()!\n      let max = lst.max()!\n  \
    \    if flag {\n        lst1.append(min)\n        lst2.append(max)\n      } else\
    \ {\n        lst1.append(max)\n        lst2.append(min)\n      }\n      lst.removeAll\
    \ {$0 == min}\n      lst.removeAll {$0 == max}\n      flag = !flag\n    }\n  \
    \  return lst1 + lst2\n  } else {\n    while lst.count > 1 {\n      let min =\
    \ lst.min()!\n      let max = lst.max()!\n      if flag {\n        lst1.append(min)\n\
    \        lst2.append(max)\n      } else {\n        lst1.append(max)\n        lst2.append(min)\n\
    \      }\n      lst.removeAll {$0 == min}\n      lst.removeAll {$0 == max}\n \
    \     flag = !flag\n    }\n    return lst1 + lst + lst2\n  }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpdkujjnb6/tmpdkujjnb6.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf77612c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf77309b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf77309988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf773087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkujjnb6                        0x0000557dca0c57c4 <unavailable> + 6084

    5    libc.so.6                          0x00002acf777fe460 __libc_start_main +
    245

    6    tmpdkujjnb6                        0x0000557dca0c53b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var new_lst = lst\n    let min_i = new_lst.index(of:\
    \ new_lst.min()!)!\n    let max_i = new_lst.index(of: new_lst.max()!)!\n    new_lst.remove(at:\
    \ min_i)\n    new_lst.remove(at: max_i)\n    return [lst[min_i], lst[max_i]] +\
    \ strange_sort_list(lst: new_lst)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac418189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac417e80561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac417e80286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac417e8013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac417e7fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac417e6d018 <unavailable> + 1355800

    6    tmplf9de45b                        0x000055cf88460714 <unavailable> + 10004

    7    tmplf9de45b                        0x000055cf8845f69c <unavailable> + 5788

    8    libc.so.6                          0x00002ac418375460 __libc_start_main +
    245

    9    tmplf9de45b                        0x000055cf8845f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted(by:\
    \ <)\n    let firstHalf = sorted.dropLast(lst.count / 2)\n    let secondHalf =\
    \ sorted.dropFirst(lst.count / 2)\n    var strangeSorted = [Int]()\n    for (index,\
    \ _) in sorted.enumerated() {\n        if index % 2 == 0 {\n            strangeSorted.append(firstHalf[index\
    \ / 2])\n        } else {\n            strangeSorted.append(secondHalf[index /\
    \ 2])\n        }\n    }\n    return strangeSorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/SliceBuffer.swift:287: Fatal error: Index out of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b06dc3d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06dc0c9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b06dc0c9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b06dc0c913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b06dc0c8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b06dc0c029a <unavailable> + 1397402

    6    tmpt60jnjbx                        0x0000557c02d7abae <unavailable> + 11182

    7    tmpt60jnjbx                        0x0000557c02d798bc <unavailable> + 6332

    8    libc.so.6                          0x00002b06dc5be460 __libc_start_main +
    245

    9    tmpt60jnjbx                        0x0000557c02d79599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ copyLst = lst\n    var x = 0\n    var z = lst.count\n    for _ in lst {\n  \
    \      if x == z {\n            result.append(copyLst.min()!)\n            copyLst.remove(at:\
    \ copyLst.index(of: copyLst.min()!)!)\n            x = 0\n            z -= 1\n\
    \        } else {\n            result.append(copyLst.max()!)\n            copyLst.remove(at:\
    \ copyLst.index(of: copyLst.max()!)!)\n            x += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpau2cpm7g/tmpau2cpm7g.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99b4f0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99b4c03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99b4c03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99b4c027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpau2cpm7g                        0x0000562c938ed8a4 <unavailable> + 6308

    5    libc.so.6                          0x00002b99b50f8460 __libc_start_main +
    245

    6    tmpau2cpm7g                        0x0000562c938ed499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var newArray = lst\n    var sortArray = lst.sorted(by: <)\n    var i = 0\n\
    \    while sortArray.count > 0 {\n        if i % 2 == 0 {\n            result.append(sortArray.removeFirst())\n\
    \        } else {\n            result.append(sortArray.removeLast())\n       \
    \ }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sorted_list = lst.sorted()\n\
    \    var sort = [Int]()\n    var count = 0\n    var flag = true\n    while count\
    \ < sorted_list.count {\n        if flag {\n            sort.append(sorted_list.removeFirst())\n\
    \            flag = false\n        } else {\n            sort.append(sorted_list.removeLast())\n\
    \            flag = true\n        }\n        count += 1\n    }\n    return sort\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpltl9xi_r/tmpltl9xi_r.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b508c1fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b508bef5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b508bef5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b508bef47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltl9xi_r                        0x000055efd8d706c4 <unavailable> + 5828

    5    libc.so.6                          0x00002b508c3ea460 __libc_start_main +
    245

    6    tmpltl9xi_r                        0x000055efd8d702b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // Write your code here.\n\
    \    // Replace the following line with your code.\n    return lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp5v68xf55/tmp5v68xf55.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ce57e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ce54e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ce54e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ce54df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5v68xf55                        0x0000563371c093d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b3ce59d5460 __libc_start_main +
    245

    6    tmp5v68xf55                        0x0000563371c08fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var list = lst\n    var result\
    \ = [Int]()\n    var increase = true\n    var min = Int.min\n    var max = Int.max\n\
    \    while list.count > 0 {\n        if increase {\n            min = list.reduce(Int.max,\
    \ { min($0, $1) })\n            if let index = list.index(of: min) {\n       \
    \         result.append(min)\n                list.remove(at: index)\n       \
    \     }\n        } else {\n            max = list.reduce(Int.min, { max($0, $1)\
    \ })\n            if let index = list.index(of: max) {\n                result.append(max)\n\
    \                list.remove(at: index)\n            }\n        }\n        increase\
    \ = !increase\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp18ghmdwl.swift:20:42: error: cannot call value of non-function\
    \ type 'Int'\n            min = list.reduce(Int.max, { min($0, $1) })\n      \
    \                                   ^\n/tmp/tmp18ghmdwl.swift:21:33: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n            if let\
    \ index = list.index(of: min) {\n                                ^\n/tmp/tmp18ghmdwl.swift:21:33:\
    \ note: use 'firstIndex(of:)' instead\n            if let index = list.index(of:\
    \ min) {\n                                ^~~~~\n                            \
    \    firstIndex\n/tmp/tmp18ghmdwl.swift:26:42: error: cannot call value of non-function\
    \ type 'Int'\n            max = list.reduce(Int.min, { max($0, $1) })\n      \
    \                                   ^\n/tmp/tmp18ghmdwl.swift:27:33: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n            if let\
    \ index = list.index(of: max) {\n                                ^\n/tmp/tmp18ghmdwl.swift:27:33:\
    \ note: use 'firstIndex(of:)' instead\n            if let index = list.index(of:\
    \ max) {\n                                ^~~~~\n                            \
    \    firstIndex\n"
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sortedList = lst.sorted()\n\
    \    var res: [Int] = []\n    for i in 0..<sortedList.count {\n        if i %\
    \ 2 == 0 {\n            res.append(sortedList[i / 2])\n        } else {\n    \
    \        res.append(sortedList[sortedList.count - i / 2 - 1])\n        }\n   \
    \ }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var positiveArray = lst.filter{$0\
    \ >= 0}\n    var negativeArray = lst.filter{$0 < 0}\n    let count = lst.count\n\
    \    var resultArray = [Int]()\n    var i = 0\n    while i < count {\n       \
    \ if let minValue = positiveArray.min() {\n            resultArray.append(minValue)\n\
    \            positiveArray.remove(object: minValue)\n        }\n        if let\
    \ maxValue = negativeArray.max() {\n            resultArray.append(maxValue)\n\
    \            negativeArray.remove(object: maxValue)\n        }\n        i += 1\n\
    \    }\n    return resultArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp10vv1al2.swift:21:27: error: no exact matches in call to instance\
    \ method 'remove'\n            positiveArray.remove(object: minValue)\n      \
    \                    ^\nSwift.Array:10:37: note: incorrect labels for candidate\
    \ (have: '(object:)', expected: '(at:)')\n    @inlinable public mutating func\
    \ remove(at index: Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(object:)', expected: '(at:)')\n\
    \    @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n/tmp/tmp10vv1al2.swift:25:27: error: no\
    \ exact matches in call to instance method 'remove'\n            negativeArray.remove(object:\
    \ maxValue)\n                          ^\nSwift.Array:10:37: note: incorrect labels\
    \ for candidate (have: '(object:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at index: Int) -> Element\n                           \
    \         ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect labels for\
    \ candidate (have: '(object:)', expected: '(at:)')\n    @inlinable public mutating\
    \ func remove(at position: Self.Index) -> Self.Element\n                     \
    \               ^\n"
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ arr = lst\n    var min = arr.min()\n    var max = arr.max()\n    var count =\
    \ arr.count\n    while(min != nil && max != nil && count != 0) {\n        result.append(min!)\n\
    \        result.append(max!)\n        arr.remove(at: arr.index(of: min!)!)\n \
    \       arr.remove(at: arr.index(of: max!)!)\n        min = arr.min()\n      \
    \  max = arr.max()\n        count -= 2\n    }\n    if(arr.count != 0) {\n    \
    \    result.append(arr[0])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwutrnu9f/tmpwutrnu9f.swift:22: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b202d9a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b202d69d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b202d69d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b202d69d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b202d69cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwutrnu9f                        0x000056037ee5c949 <unavailable> + 10569

    6    tmpwutrnu9f                        0x000056037ee5b82b <unavailable> + 6187

    7    libc.so.6                          0x00002b202db92460 __libc_start_main +
    245

    8    tmpwutrnu9f                        0x000056037ee5b3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst.sorted()\n  \
    \  var newLst: [Int] = []\n    while lst.count > 0 {\n        newLst.append(lst.first!)\n\
    \        lst.removeFirst()\n        if lst.count > 0 {\n            newLst.append(lst.last!)\n\
    \            lst.removeLast()\n        }\n    }\n    return newLst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var len = lst.count\n    if\
    \ len == 0 {\n        return lst\n    }\n    var lst = lst\n    var result: [Int]\
    \ = []\n    while len > 0 {\n        result.append(lst.min()!)\n        lst.remove(at:\
    \ lst.index(of: lst.min()!)!)\n        len -= 1\n        if len == 0 {\n     \
    \       break\n        }\n        result.append(lst.max()!)\n        lst.remove(at:\
    \ lst.index(of: lst.max()!)!)\n        len -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    let n = lst.count\n    let sorted_list = lst.sorted()\n\
    \    var odd = lst.count % 2 == 1\n    var k = 0\n    var i = odd ? 1 : 0\n  \
    \  var result: [Int] = []\n    while k < n / 2 {\n        result.append(sorted_list[k])\n\
    \        result.append(sorted_list[n - k - 1])\n        k += 1\n    }\n    if\
    \ odd {\n        result.append(sorted_list[k])\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpl1jng6kx/tmpl1jng6kx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61c013c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61bd0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61bd0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61bd097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1jng6kx                        0x00005605f789e3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ab61c1ff460 __libc_start_main +
    245

    6    tmpl1jng6kx                        0x00005605f789dfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var arr = lst\n    var result: [Int] = []\n    var was_ascending\
    \ = true\n    while !arr.isEmpty {\n        var min = arr[0]\n        var max\
    \ = arr[0]\n        for i in arr {\n            if i < min {\n               \
    \ min = i\n            }\n            if i > max {\n                max = i\n\
    \            }\n        }\n        if was_ascending {\n            result.append(min)\n\
    \            arr.remove(at: arr.firstIndex(of: min)!)\n            if !arr.isEmpty\
    \ {\n                result.append(max)\n                arr.remove(at: arr.firstIndex(of:\
    \ max)!)\n            }\n        } else {\n            result.append(max)\n  \
    \          arr.remove(at: arr.firstIndex(of: max)!)\n            if !arr.isEmpty\
    \ {\n                result.append(min)\n                arr.remove(at: arr.firstIndex(of:\
    \ min)!)\n            }\n        }\n        was_ascending = !was_ascending\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpcdi6py9i/tmpcdi6py9i.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b652a222c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6529f19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6529f19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6529f187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdi6py9i                        0x0000557524859804 <unavailable> + 6148

    5    libc.so.6                          0x00002b652a40e460 __libc_start_main +
    245

    6    tmpcdi6py9i                        0x00005575248593f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ newList = lst\n    while newList.count > 0 {\n        let minValue = newList.min()!\n\
    \        let maxValue = newList.max()!\n        result.append(minValue)\n    \
    \    result.append(maxValue)\n        newList.remove(at: newList.index(of: minValue)!)\n\
    \        newList.remove(at: newList.index(of: maxValue)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpqlscnv39/tmpqlscnv39.swift:21: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aca51756c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca5144d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aca5144d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aca5144d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aca5144cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpqlscnv39                        0x0000560ecca65793 <unavailable> + 10131

    6    tmpqlscnv39                        0x0000560ecca647db <unavailable> + 6107

    7    libc.so.6                          0x00002aca51942460 __libc_start_main +
    245

    8    tmpqlscnv39                        0x0000560ecca64379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var newList = lst\n    var\
    \ index = 0\n    if newList.count % 2 == 0 {\n        for i in 0...newList.count\
    \ / 2 - 1 {\n            newList.insert(newList[i], at: index)\n            index\
    \ += 2\n        }\n    } else {\n        for i in 0...newList.count / 2 {\n  \
    \          newList.insert(newList[i], at: index)\n            index += 2\n   \
    \     }\n    }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp4orycw0a/tmp4orycw0a.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac708c2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac708924b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac708924988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7089237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4orycw0a                        0x00005566d2a3a664 <unavailable> + 5732

    5    libc.so.6                          0x00002ac708e19460 __libc_start_main +
    245

    6    tmp4orycw0a                        0x00005566d2a3a259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result:\
    \ [Int] = []\n    if lst.count == 0 {\n        return result\n    }\n    while\
    \ lst.count > 0 {\n        if let min = lst.min() {\n            result.append(min)\n\
    \            lst.remove(at: lst.index(of: min)!)\n        }\n        if let max\
    \ = lst.max() {\n            result.append(max)\n            lst.remove(at: lst.index(of:\
    \ max)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  let length = lst.count\n    guard length > 0 else { return result }\n    guard\
    \ length > 1 else { return lst }\n    var mutableLst = lst\n    while mutableLst.count\
    \ > 0 {\n        result.append(mutableLst.min()!)\n        mutableLst.removeAtIndex(mutableLst.indexOf(mutableLst.min()!)!)\n\
    \        if mutableLst.count > 0 {\n            result.append(mutableLst.max()!)\n\
    \            mutableLst.removeAtIndex(mutableLst.indexOf(mutableLst.max()!)!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpmakolqi4.swift:20:20: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n        mutableLst.removeAtIndex(mutableLst.indexOf(mutableLst.min()!)!)\n\
    \        ~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpmakolqi4.swift:20:45: error: value\
    \ of type '[Int]' has no member 'indexOf'\n        mutableLst.removeAtIndex(mutableLst.indexOf(mutableLst.min()!)!)\n\
    \                                 ~~~~~~~~~~ ^~~~~~~\n/tmp/tmpmakolqi4.swift:23:24:\
    \ error: value of type '[Int]' has no member 'removeAtIndex'\n            mutableLst.removeAtIndex(mutableLst.indexOf(mutableLst.max()!)!)\n\
    \            ~~~~~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpmakolqi4.swift:23:49: error: value\
    \ of type '[Int]' has no member 'indexOf'\n            mutableLst.removeAtIndex(mutableLst.indexOf(mutableLst.max()!)!)\n\
    \                                     ~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028494
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    //  if arr is empty return\
    \ empty array\n    guard !lst.isEmpty else {\n        return []\n    }\n    //\
    \  if arr has 1 element return arr\n    guard lst.count > 1 else {\n        return\
    \ lst\n    }\n    //  sort array and make mutable copy\n    var mutArr = lst.sorted()\n\
    \    //  create empty array for result\n    var resArr = [Int]()\n    //  start\
    \ index\n    var index = 0\n    //  take first two elements of mutArr and append\
    \ to result array\n    while index < mutArr.count / 2 {\n        //  check arr[ind]\
    \ and arr[arr.count - 1 - ind] for valid indices\n        guard let first = mutArr.element(at:\
    \ index),\n              let last = mutArr.element(at: mutArr.count - 1 - index)\
    \ else {\n            break\n        }\n        //  append elements\n        resArr.append(first)\n\
    \        resArr.append(last)\n        //  remove appended elements from mutArr\n\
    \        mutArr.remove(at: index)\n        mutArr.remove(at: mutArr.count - 1\
    \ - index)\n    }\n    //  if mutArr still has elements append them to result\
    \ array\n    if !mutArr.isEmpty {\n        resArr.append(contentsOf: mutArr)\n\
    \    }\n    return resArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpyy9ggdsc.swift:30:34: error: value of type '[Int]' has no member\
    \ 'element'\n        guard let first = mutArr.element(at: index),\n          \
    \                ~~~~~~ ^~~~~~~\n/tmp/tmpyy9ggdsc.swift:31:33: error: value of\
    \ type '[Int]' has no member 'element'\n              let last = mutArr.element(at:\
    \ mutArr.count - 1 - index) else {\n                         ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\n\
    \        return lst\n    }\n    let sortedArray = lst.sorted()\n    var resultArray\
    \ = [Int]()\n    var minIndex = 0\n    var maxIndex = sortedArray.count - 1\n\
    \    var isInsertMin = true\n    while minIndex <= maxIndex {\n        if isInsertMin\
    \ {\n            resultArray.append(sortedArray[minIndex])\n            minIndex\
    \ += 1\n        } else {\n            resultArray.append(sortedArray[maxIndex])\n\
    \            maxIndex -= 1\n        }\n        isInsertMin = !isInsertMin\n  \
    \  }\n    return resultArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted()\n\
    \    var result = [Int]()\n    var current = 0\n    var upper = lst.count - 1\n\
    \    var lower = 0\n    while current < lst.count {\n        if current % 2 ==\
    \ 0 {\n            result.append(sorted[lower])\n            lower += 1\n    \
    \    } else {\n            result.append(sorted[upper])\n            upper -=\
    \ 1\n        }\n        current += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    let sortedList = lst.sorted()\n    var ans: [Int] = []\n    var i\
    \ = 0\n    var j = sortedList.count - 1\n    while i < j {\n        ans.append(sortedList[i])\n\
    \        ans.append(sortedList[j])\n        i += 1\n        j -= 1\n    }\n  \
    \  if i == j {\n        ans.append(sortedList[i])\n    }\n    return ans\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lstCopy = lst\n    lstCopy.sort()\n\
    \    var index = 0\n    var index2 = lstCopy.count - 1\n    var array = [Int]()\n\
    \    while(lstCopy.count > 0) {\n        if index2 == 0 {\n            array.append(lstCopy[index])\n\
    \            index += 1\n            lstCopy.remove(at: index)\n        } else\
    \ {\n            array.append(lstCopy[index])\n            array.append(lstCopy[index2])\n\
    \            index += 1\n            index2 -= 1\n            lstCopy.remove(at:\
    \ index)\n            lstCopy.remove(at: index2)\n        }\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d84cf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d849f0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0d849f0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0d849f013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0d849efbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0d847efe83 <unavailable> + 188035

    6    tmp15gyxql4                        0x000055b4272103c3 <unavailable> + 9155

    7    tmp15gyxql4                        0x000055b42720f5bc <unavailable> + 5564

    8    libc.so.6                          0x00002b0d84ee5460 __libc_start_main +
    245

    9    tmp15gyxql4                        0x000055b42720f299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var newList = lst\n    newList.sort()\n\
    \    var start = 0\n    var end = newList.count - 1\n    var result = [Int]()\n\
    \    while start <= end {\n        result.append(newList[start])\n        if start\
    \ != end {\n            result.append(newList[end])\n        }\n        start\
    \ += 1\n        end -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // your code here\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmphha0llqq/tmphha0llqq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad007ebac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad007bb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad007bb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad007bb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphha0llqq                        0x000055b29b36b3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ad0080a6460 __libc_start_main +
    245

    6    tmphha0llqq                        0x000055b29b36afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var remaining = lst\n    var\
    \ result: [Int] = []\n    while remaining.count > 0 {\n        if remaining.count\
    \ == 1 {\n            result.append(remaining[0])\n            remaining.remove(at:\
    \ 0)\n        } else {\n            let minimum = remaining.min()!\n         \
    \   let minimumIndex = remaining.index(of: minimum)!\n            result.append(minimum)\n\
    \            remaining.remove(at: minimumIndex)\n            let maximum = remaining.max()!\n\
    \            let maximumIndex = remaining.index(of: maximum)!\n            result.append(maximum)\n\
    \            remaining.remove(at: maximumIndex)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted(by:\
    \ {$0 < $1})\n    if lst.count <= 1 {\n        return lst\n    }\n    var result\
    \ = [Int]()\n    var i = 0\n    var j = sorted.count - 1\n    while i <= j {\n\
    \        result.append(sorted[i])\n        i += 1\n        if i <= j {\n     \
    \       result.append(sorted[j])\n            j -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var min = lst.min()\n    var\
    \ max = lst.max()\n    var currentIndex = lst.count - 1\n    var finalList = [Int]()\n\
    \    while (currentIndex >= 0) {\n        if let min = min {\n            finalList.append(min)\n\
    \        }\n        if let max = max {\n            finalList.append(max)\n  \
    \      }\n        currentIndex -= 1\n    }\n    return finalList\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpev96_eoh/tmpev96_eoh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae03cc58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae03c94fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae03c94f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae03c94e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpev96_eoh                        0x00005612841605e4 <unavailable> + 5604

    5    libc.so.6                          0x00002ae03ce44460 __libc_start_main +
    245

    6    tmpev96_eoh                        0x00005612841601d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // return lst.sorted(by: <)\n\
    \    return lst.sorted(by: { $0 < $1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpy3d0pwlf/tmpy3d0pwlf.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ee5df5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ee5aecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ee5aec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ee5aeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy3d0pwlf                        0x00005562eb9cb444 <unavailable> + 5188

    5    libc.so.6                          0x00002b6ee5fe1460 __libc_start_main +
    245

    6    tmpy3d0pwlf                        0x00005562eb9cb039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var list = lst\n    var result\
    \ = [Int]()\n    while list.count > 0 {\n        let minimum = list.min()!\n \
    \       let maximum = list.max()!\n        if result.count == 0 {\n          \
    \  result.append(minimum)\n        }\n        else {\n            result.append(maximum)\n\
    \        }\n        list.remove(at: list.index(of: minimum)!)\n        list.remove(at:\
    \ list.index(of: maximum)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_l90qr1k/tmp_l90qr1k.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2bee4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2bee1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2bee1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2bee1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_l90qr1k                        0x000055e6c0431784 <unavailable> + 6020

    5    libc.so.6                          0x00002b2bee6d2460 __libc_start_main +
    245

    6    tmp_l90qr1k                        0x000055e6c0431379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var copy = lst\n    var r =\
    \ Array<Int>()\n    if copy.count % 2 == 0 {\n        while copy.count > 0 {\n\
    \            r.append(copy.remove(at: copy.index(of: copy.min()!)!))\n       \
    \     r.append(copy.remove(at: copy.index(of: copy.max()!)!))\n        }\n   \
    \ } else {\n        while copy.count > 1 {\n            r.append(copy.remove(at:\
    \ copy.index(of: copy.min()!)!))\n            r.append(copy.remove(at: copy.index(of:\
    \ copy.max()!)!))\n        }\n        r.append(copy.remove(at: 0))\n    }\n  \
    \  return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // Write your code here.\n\
    \    var x = lst.sorted()\n    var ans = [Int]()\n    while x.count > 0 {\n  \
    \      ans.append(x.removeFirst())\n        if x.count > 0 {\n            ans.append(x.removeLast())\n\
    \        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var res:\
    \ [Int] = []\n    var min: Int\n    var max: Int\n    var min_index: Int\n   \
    \ var max_index: Int\n    for i in 0..<lst.count {\n        if lst.count == 0\
    \ {\n            break\n        }\n        min = lst[0]\n        max = lst[0]\n\
    \        min_index = 0\n        max_index = 0\n        for (index, value) in lst.enumerated()\
    \ {\n            if value < min {\n                min = value\n             \
    \   min_index = index\n            }\n            if value > max {\n         \
    \       max = value\n                max_index = index\n            }\n      \
    \  }\n        res.append(min)\n        lst.remove(at: min_index)\n        if lst.count\
    \ == 0 {\n            break\n        }\n        res.append(max)\n        lst.remove(at:\
    \ max_index)\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b329cdf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b329cae9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b329cae9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b329cae913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b329cae8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b329cad6018 <unavailable> + 1355800

    6    tmp39u818si                        0x0000559db8de18e7 <unavailable> + 10471

    7    tmp39u818si                        0x0000559db8de07ec <unavailable> + 6124

    8    libc.so.6                          0x00002b329cfde460 __libc_start_main +
    245

    9    tmp39u818si                        0x0000559db8de04c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return lst\n    } else if lst.count == 1 {\n        return lst\n    } else\
    \ {\n        let remain = lst[1...lst.count - 1]\n        let min = lst.min()!\n\
    \        let max = remain.max()!\n        let minIdx = lst.index(of: min)!\n \
    \       let maxIdx = lst.index(of: max)!\n        if maxIdx < minIdx {\n     \
    \       return [min, max] + strange_sort_list(lst: remain.filter({$0 != max}))\n\
    \        } else {\n            return [min] + strange_sort_list(lst: remain.filter({$0\
    \ != min})) + [max]\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmps1iv2xp5/tmps1iv2xp5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac28e4d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac28e1cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac28e1cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac28e1ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1iv2xp5                        0x000055f019495924 <unavailable> + 6436

    5    libc.so.6                          0x00002ac28e6c0460 __libc_start_main +
    245

    6    tmps1iv2xp5                        0x000055f019495519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 0 else {\
    \ return lst }\n    var mutableLst = lst\n    for i in 0..<mutableLst.count {\n\
    \        mutableLst.sort { $0 < $1 }\n        let min = mutableLst.removeFirst()\n\
    \        mutableLst.sort { $0 > $1 }\n        let max = mutableLst.removeFirst()\n\
    \        mutableLst.insert(min, at: i)\n        mutableLst.insert(max, at: i +\
    \ 1)\n    }\n    return mutableLst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae08e4e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae08e1d8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae08e1d8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae08e1d813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae08e1d7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ae08e1c1196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002ae08e1c5020 Array.insert(_:at:)
    + 80

    7    tmpb2rla0t7                        0x000055a687467532 <unavailable> + 9522

    8    tmpb2rla0t7                        0x000055a68746664c <unavailable> + 5708

    9    libc.so.6                          0x00002ae08e6cd460 __libc_start_main +
    245

    10   tmpb2rla0t7                        0x000055a687466329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var newlst = lst\n    var sorted = [Int]()\n    while\
    \ newlst.count > 0 {\n        var min = 0\n        var max = 0\n        for i\
    \ in 1..<newlst.count {\n            if newlst[i] < newlst[min] {\n          \
    \      min = i\n            }\n            if newlst[i] > newlst[max] {\n    \
    \            max = i\n            }\n        }\n        sorted.append(newlst[min])\n\
    \        newlst.remove(at: min)\n        if newlst.count == 0 {\n            break\n\
    \        }\n        sorted.append(newlst[max])\n        newlst.remove(at: max)\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8bb76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8b86d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aec8b86d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aec8b86d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aec8b86cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aec8b66ce83 <unavailable> + 188035

    6    tmpp7oc0_kq                        0x00005640808035e3 <unavailable> + 9699

    7    tmpp7oc0_kq                        0x000056408080262c <unavailable> + 5676

    8    libc.so.6                          0x00002aec8bd62460 __libc_start_main +
    245

    9    tmpp7oc0_kq                        0x0000564080802309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n\tguard lst.count > 1 else { return\
    \ lst }\n\tvar result: [Int] = []\n\tvar buffer: [Int] = lst\n\twhile buffer.count\
    \ > 0 {\n\t\tguard let max = buffer.max(), let min = buffer.min() else { return\
    \ [] }\n\t\tif max != min {\n\t\t\tresult.append(min)\n\t\t\tresult.append(max)\n\
    \t\t\tbuffer.remove(at: buffer.index(of: min)!)\n\t\t\tbuffer.remove(at: buffer.index(of:\
    \ max)!)\n\t\t} else {\n\t\t\tresult.append(max)\n\t\t\tbuffer.remove(at: buffer.index(of:\
    \ max)!)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sortedLst = lst.sorted()\n\
    \    var strangedLst: [Int] = []\n    var asc = true\n    while sortedLst.count\
    \ > 0 {\n        if asc {\n            strangedLst.append(sortedLst.first!)\n\
    \            sortedLst.removeFirst()\n        } else {\n            strangedLst.append(sortedLst.last!)\n\
    \            sortedLst.removeLast()\n        }\n        asc = !asc\n    }\n  \
    \  return strangedLst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp4qo9kkm6.swift:19:23: error: cannot use mutating member on immutable\
    \ value: 'sortedLst' is a 'let' constant\n            sortedLst.removeFirst()\n\
    \            ~~~~~~~~~ ^\n/tmp/tmp4qo9kkm6.swift:13:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let sortedLst = lst.sorted()\n    ^~~\n    var\n/tmp/tmp4qo9kkm6.swift:22:23:\
    \ error: cannot use mutating member on immutable value: 'sortedLst' is a 'let'\
    \ constant\n            sortedLst.removeLast()\n            ~~~~~~~~~ ^\n/tmp/tmp4qo9kkm6.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let sortedLst = lst.sorted()\n\
    \    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  var lst = lst.sorted(), res =\
    \ [Int]()\n  while !lst.isEmpty {\n    res.append(lst.removeFirst())\n    if !lst.isEmpty\
    \ {\n      res.append(lst.removeLast())\n    }\n  }\n  return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    var result: [Int] = []\n    let sorted_lst = lst.sorted()\n\
    \    var i = 0\n    var j = sorted_lst.count - 1\n    while i <= j {\n       \
    \ result.append(sorted_lst[i])\n        i += 1\n        if i <= j {\n        \
    \    result.append(sorted_lst[j])\n            j -= 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sortedArray = lst.sorted()\n\
    \    var resultArray = [Int]()\n    for i in 0..<sortedArray.count {\n       \
    \ if i % 2 == 0 {\n            resultArray.append(sortedArray.removeFirst())\n\
    \        } else {\n            resultArray.append(sortedArray.removeLast())\n\
    \        }\n    }\n    return resultArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let copy = lst.sorted()\n \
    \   var result = [Int]()\n    var smaller = copy.startIndex\n    var bigger =\
    \ copy.endIndex - 1\n    while smaller <= bigger {\n        result.append(copy[smaller])\n\
    \        smaller += 1\n        if smaller <= bigger {\n            result.append(copy[bigger])\n\
    \            bigger -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    let sorted = lst.sorted()\n    var odd = Array(sorted[1..<sorted.count])\n\
    \    var even = Array(sorted[0..<sorted.count-1])\n    var result = [Int]()\n\
    \    var isOdd = true\n    for _ in 0..<lst.count {\n        if isOdd {\n    \
    \        result.append(sorted[0])\n            if !odd.isEmpty {\n           \
    \     result.append(odd.popLast()!)\n            }\n        } else {\n       \
    \     result.append(sorted[sorted.count-1])\n            if !even.isEmpty {\n\
    \                result.append(even.popLast()!)\n            }\n        }\n  \
    \      isOdd = !isOdd\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpddf6yq2b/tmpddf6yq2b.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b027afdec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b027acd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b027acd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b027acd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddf6yq2b                        0x000055f66a967a34 <unavailable> + 6708

    5    libc.so.6                          0x00002b027b1ca460 __libc_start_main +
    245

    6    tmpddf6yq2b                        0x000055f66a967629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  let sorted = lst.sorted()\n \
    \ var smallIndex = 0\n  var largeIndex = sorted.count - 1\n  var result = [Int]()\n\
    \  while smallIndex <= largeIndex {\n    result.append(sorted[smallIndex])\n \
    \   smallIndex += 1\n    if smallIndex <= largeIndex {\n      result.append(sorted[largeIndex])\n\
    \      largeIndex -= 1\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    var\
    \ min = lst.min()\n    var max = lst.max()\n    var rest = lst\n    for _ in 0...(lst.count\
    \ / 2) {\n        result.append(min!)\n        result.append(max!)\n        rest.removeAll\
    \ { (i) -> Bool in i == min! || i == max! }\n        min = rest.min()\n      \
    \  max = rest.max()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpx92_zm_f/tmpx92_zm_f.swift:18: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7c603c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef7c2fa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef7c2fa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef7c2fa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef7c2f9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpx92_zm_f                        0x0000559f156e169a <unavailable> + 9882

    6    tmpx92_zm_f                        0x0000559f156e076c <unavailable> + 5996

    7    libc.so.6                          0x00002aef7c7ef460 __libc_start_main +
    245

    8    tmpx92_zm_f                        0x0000559f156e0449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let lst = lst.sorted()\n  \
    \  var lstResult = lst\n    var i = 1\n    while i < lst.count {\n        lstResult.insert(lst[i],\
    \ at: i)\n        i += 2\n    }\n    return lstResult\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpgj73gofk/tmpgj73gofk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adba95acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adba92a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adba92a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adba92a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgj73gofk                        0x000055af36a49584 <unavailable> + 5508

    5    libc.so.6                          0x00002adba9798460 __libc_start_main +
    245

    6    tmpgj73gofk                        0x000055af36a49179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var res = [Int]()\n    var\
    \ lst = lst\n    while lst.count > 0 {\n        var min = lst[0]\n        var\
    \ minIndex = 0\n        var max = lst[0]\n        var maxIndex = 0\n        for\
    \ i in 0..<lst.count {\n            if min > lst[i] {\n                min = lst[i]\n\
    \                minIndex = i\n            }\n            if max < lst[i] {\n\
    \                max = lst[i]\n                maxIndex = i\n            }\n \
    \       }\n        res.append(min)\n        lst.remove(at: minIndex)\n       \
    \ if maxIndex > minIndex {\n            maxIndex -= 1\n        }\n        res.append(max)\n\
    \        lst.remove(at: maxIndex)\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e9e18c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e9b0f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b43e9b0f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b43e9b0f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b43e9b0ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b43e9afc018 <unavailable> + 1355800

    6    tmppktpdsdw                        0x0000557a8cc64622 <unavailable> + 9762

    7    tmppktpdsdw                        0x0000557a8cc6376b <unavailable> + 5995

    8    libc.so.6                          0x00002b43ea004460 __libc_start_main +
    245

    9    tmppktpdsdw                        0x0000557a8cc63309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpl1jng6kx/tmpl1jng6kx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61c013c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61bd0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61bd0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61bd097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl1jng6kx                        0x00005605f789e3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ab61c1ff460 __libc_start_main +
    245

    6    tmpl1jng6kx                        0x00005605f789dfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028493
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var arr = lst.sorted()\n  \
    \  var result = [Int]()\n    while !arr.isEmpty {\n        result.append(arr.removeFirst())\n\
    \        if !arr.isEmpty {\n            result.append(arr.removeLast())\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var arr = lst\n    var result\
    \ = [Int]()\n    var idx = 0\n    while !arr.isEmpty {\n        if idx % 2 ==\
    \ 0 {\n            result.append(arr.remove(at: arr.index(of: arr.min()!)!))\n\
    \        } else {\n            result.append(arr.remove(at: arr.index(of: arr.max()!)!))\n\
    \        }\n        idx += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted()\n\
    \    var i = 0\n    var j = sorted.count - 1\n    var result = [Int]()\n    while\
    \ i <= j {\n        result.append(sorted[i])\n        i += 1\n        if i <=\
    \ j {\n            result.append(sorted[j])\n            j -= 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\
    \ return lst }\n    var odd = false\n    var newList = lst.sorted()\n    var result\
    \ = [Int]()\n    while !newList.isEmpty {\n        let element = odd ? newList.removeLast()\
    \ : newList.removeFirst()\n        result.append(element)\n        odd = !odd\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var array = lst\n    var answer:\
    \ [Int] = []\n    array.sort()\n    for _ in 0..<array.count {\n        answer.append(array.removeFirst())\n\
    \        if array.count > 0 {\n            answer.append(array.removeLast())\n\
    \        }\n    }\n    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e2048ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e20185561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8e20185286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8e2018513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8e20184bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8e20174ff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmp3l8y04l5                        0x000055b091ec5571 <unavailable> + 9585

    7    tmp3l8y04l5                        0x000055b091ec478c <unavailable> + 6028

    8    libc.so.6                          0x00002b8e2067a460 __libc_start_main +
    245

    9    tmp3l8y04l5                        0x000055b091ec4469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 1 {\n     \
    \   return lst\n    }\n    var arr = lst\n    var result = [Int]()\n    while\
    \ arr.count > 0 {\n        if let min = arr.min(), let max = arr.max() {\n   \
    \         result.append(min)\n            result.append(max)\n            arr.remove(at:\
    \ arr.index(of: min)!)\n            arr.remove(at: arr.index(of: max)!)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmptvbd_p52/tmptvbd_p52.swift:23: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7602777c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b760246e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b760246e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b760246e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b760246dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptvbd_p52                        0x0000557b3f8d7717 <unavailable> + 10007

    6    tmptvbd_p52                        0x0000557b3f8d67db <unavailable> + 6107

    7    libc.so.6                          0x00002b7602963460 __libc_start_main +
    245

    8    tmptvbd_p52                        0x0000557b3f8d6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  var arr = lst.sort()\n  for i\
    \ in 0.stride(to: lst.count - 1, by: 2) {\n    arr.append(arr.removeAtIndex(i))\n\
    \  }\n  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmppttj7xq0.swift:13:17: error: cannot use mutating member on immutable\
    \ value: 'lst' is a 'let' constant\n  var arr = lst.sort()\n            ~~~ ^\n\
    /tmp/tmppttj7xq0.swift:14:14: error: value of type 'Int' has no member 'stride'\n\
    \  for i in 0.stride(to: lst.count - 1, by: 2) {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var (min, max) = (lst.first\
    \ ?? 0, lst.last ?? 0)\n    var index = 0\n    var newLst = [Int]()\n    newLst.append(min)\n\
    \    for _ in 0..<lst.count - 1 {\n        if index % 2 == 0 {\n            newLst.append(max)\n\
    \            index += 1\n        } else {\n            newLst.append(min)\n  \
    \          index += 1\n        }\n    }\n    return newLst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp9ec8nb8o/tmp9ec8nb8o.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29a4c22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29a4919b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29a4919988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29a49187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ec8nb8o                        0x00005650c4c797a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b29a4e0e460 __libc_start_main +
    245

    6    tmp9ec8nb8o                        0x00005650c4c79399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var min_queue = [Int]()\n \
    \   var max_queue = [Int]()\n    for elem in lst {\n        min_queue.append(elem)\n\
    \        max_queue.append(elem)\n    }\n    sort(&min_queue)\n    sort(&max_queue,\
    \ { (first, second) -> Bool in\n        first > second\n    })\n    var ans =\
    \ [Int]()\n    var is_min = true\n    while !min_queue.isEmpty {\n        if is_min\
    \ {\n            ans.append(min_queue.removeFirst())\n        } else {\n     \
    \       ans.append(max_queue.removeFirst())\n        }\n        is_min = !is_min\n\
    \    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmphze_6br5.swift:19:5: error: cannot find 'sort' in scope\n    sort(&min_queue)\n\
    \    ^~~~\n/tmp/tmphze_6br5.swift:20:5: error: cannot find 'sort' in scope\n \
    \   sort(&max_queue, { (first, second) -> Bool in\n    ^~~~\n"
  stdout: ''
  timestamp: 1660028494
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 0 else {\
    \ return [] }\n    var newList = lst\n    var result = [Int]()\n    var min =\
    \ Int.max\n    var max = Int.min\n    for item in newList {\n        if item <\
    \ min {\n            min = item\n        }\n        if item > max {\n        \
    \    max = item\n        }\n    }\n    result.append(min)\n    newList.remove(at:\
    \ newList.index(of: min)!)\n    while newList.count > 0 {\n        min = Int.max\n\
    \        max = Int.min\n        for item in newList {\n            if item < min\
    \ {\n                min = item\n            }\n            if item > max {\n\
    \                max = item\n            }\n        }\n        result.append(max)\n\
    \        newList.remove(at: newList.index(of: max)!)\n        if newList.count\
    \ > 0 {\n            result.append(min)\n            newList.remove(at: newList.index(of:\
    \ min)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  guard lst.count > 0 else { return\
    \ [] }\n  var result = lst\n  var min = result.min()!\n  var max = result.max()!\n\
    \  result.remove(at: result.index(of: min)!)\n  result.remove(at: result.index(of:\
    \ max)!)\n  var newLst = [min, max]\n  while result.count > 0 {\n    min = result.min()!\n\
    \    max = result.max()!\n    result.remove(at: result.index(of: min)!)\n    result.remove(at:\
    \ result.index(of: max)!)\n    newLst.append(min)\n    newLst.append(max)\n  }\n\
    \  return newLst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpkoiqprrb/tmpkoiqprrb.swift:24: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b335c294c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b335bf8b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b335bf8b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b335bf8b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b335bf8abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkoiqprrb                        0x000055d3804c7b12 <unavailable> + 11026

    6    tmpkoiqprrb                        0x000055d3804c677b <unavailable> + 6011

    7    libc.so.6                          0x00002b335c480460 __libc_start_main +
    245

    8    tmpkoiqprrb                        0x000055d3804c6319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    var result = [Int]()\n    var numbers = lst\n    while !numbers.isEmpty\
    \ {\n        if numbers.count == 1 {\n            result.append(numbers.first!)\n\
    \            break\n        }\n        result.append(numbers.min()!)\n       \
    \ result.append(numbers.max()!)\n        numbers.removeAll { $0 == numbers.min()\
    \ || $0 == numbers.max() }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp4lsc1wpk.swift:23:9: error: overlapping accesses to 'numbers',\
    \ but modification requires exclusive access; consider copying to a local variable\n\
    \        numbers.removeAll { $0 == numbers.min() || $0 == numbers.max() }\n  \
    \      ^~~~~~~\n/tmp/tmp4lsc1wpk.swift:23:35: note: conflicting access is here\n\
    \        numbers.removeAll { $0 == numbers.min() || $0 == numbers.max() }\n  \
    \                                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    var lst = lst.sorted()\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.removeFirst()\n        let max = lst.removeLast()\n\
    \        result.append(min)\n        result.append(max)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:870: Fatal error: Can''t remove
    last element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b288e62cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b288e323561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b288e323286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b288e32313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b288e322bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b288e424c1d <unavailable> + 2489373

    6    tmp2dqkxhdw                        0x000055ab10d133e7 <unavailable> + 9191

    7    tmp2dqkxhdw                        0x000055ab10d1276b <unavailable> + 5995

    8    libc.so.6                          0x00002b288e818460 __libc_start_main +
    245

    9    tmp2dqkxhdw                        0x000055ab10d12309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var result\
    \ = [Int]()\n    for i in 0..<lst.count {\n        if i % 2 == 0 {\n         \
    \   let minVal = lst.min()!\n            result.append(minVal)\n            lst.remove(at:\
    \ lst.index(of: minVal)!)\n        } else {\n            let maxVal = lst.max()!\n\
    \            result.append(maxVal)\n            lst.remove(at: lst.index(of: maxVal)!)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // we don't want to alter original\
    \ list\n    var lst = lst\n    var res = [Int]()\n    // sort list to ascend order\n\
    \    lst.sort()\n    // take from the beginning to the middle\n    while !lst.isEmpty\
    \ {\n        res.append(lst.removeFirst())\n        // if we have no more items\
    \ return result\n        if lst.isEmpty {\n            return res\n        }\n\
    \        // take from the end to the middle\n        res.append(lst.removeLast())\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 1 {\n     \
    \   return lst\n    }\n    var odd = [Int]()\n    var even = [Int]()\n    for\
    \ (index, num) in lst.enumerated() {\n        if index % 2 == 0 {\n          \
    \  odd.append(num)\n        } else {\n            even.append(num)\n        }\n\
    \    }\n    return odd + even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpko95snxv/tmpko95snxv.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab524de5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab524adcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab524adc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab524adb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko95snxv                        0x0000556d3a8807e4 <unavailable> + 6116

    5    libc.so.6                          0x00002ab524fd1460 __libc_start_main +
    245

    6    tmpko95snxv                        0x0000556d3a8803d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var arr = lst\n    arr.sort()\n\
    \    var result = [Int]()\n    let count = arr.count\n    if count % 2 == 0 {\n\
    \        var i = 0\n        while i < count {\n            result.append(arr[i])\n\
    \            result.append(arr[count - i - 1])\n            i += 1\n        }\n\
    \    } else {\n        var i = 0\n        while i < count - 1 {\n            result.append(arr[i])\n\
    \            result.append(arr[count - i - 1])\n            i += 1\n        }\n\
    \        result.append(arr[count - 1])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp0_pzj9jg/tmp0_pzj9jg.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90d59b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90d56b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90d56b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90d56af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_pzj9jg                        0x000056102be8c6e4 <unavailable> + 5860

    5    libc.so.6                          0x00002b90d5ba5460 __libc_start_main +
    245

    6    tmp0_pzj9jg                        0x000056102be8c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var sortedArray = lst.sorted()\n    var sortedArrayResult\
    \ = [Int]()\n    var increasing = true\n    while !sortedArray.isEmpty {\n   \
    \     let element = sortedArray.removeFirst()\n        sortedArrayResult.append(element)\n\
    \        if increasing {\n            sortedArray = sortedArray.reversed()\n \
    \       }\n        increasing = !increasing\n    }\n    return sortedArrayResult\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpie0gmggb/tmpie0gmggb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba94faa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba94f79bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba94f79b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba94f79a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpie0gmggb                        0x000055c61da48724 <unavailable> + 5924

    5    libc.so.6                          0x00002ba94fc90460 __libc_start_main +
    245

    6    tmpie0gmggb                        0x000055c61da48319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp21_zj0ga/tmp21_zj0ga.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c1d5afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1d2a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1d2a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1d2a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp21_zj0ga                        0x000055ee994e93d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b6c1d79b460 __libc_start_main +
    245

    6    tmp21_zj0ga                        0x000055ee994e8fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028492
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let count = lst.count\n   \
    \ var minimum = lst.min()\n    var res = [Int]()\n    var lst = lst\n    var min_idx\
    \ = 0\n    var max_idx = 0\n    for _ in 0..<count {\n        if minimum == lst.max()\
    \ {\n            max_idx = lst.index(of: lst.max()!)!\n            res.append(lst[max_idx])\n\
    \            lst.remove(at: max_idx)\n        } else {\n            min_idx =\
    \ lst.index(of: lst.min()!)!\n            res.append(lst[min_idx])\n         \
    \   lst.remove(at: min_idx)\n        }\n        minimum = lst.min()\n    }\n \
    \   return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmprr7aomwt/tmprr7aomwt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9917acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9914a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9914a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9914a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprr7aomwt                        0x00005629fc1348c4 <unavailable> + 6340

    5    libc.so.6                          0x00002ae991998460 __libc_start_main +
    245

    6    tmprr7aomwt                        0x00005629fc1344b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 1 {\n     \
    \   return lst\n    }\n    var odd = [Int]()\n    var even = [Int]()\n    var\
    \ counter = 0\n    var result = [Int]()\n    while counter < lst.count {\n   \
    \     if counter % 2 == 0 {\n            odd.append(lst[counter])\n        } else\
    \ {\n            even.append(lst[counter])\n        }\n        counter += 1\n\
    \    }\n    odd.sort()\n    even.sort()\n    counter = 0\n    while counter <\
    \ odd.count {\n        result.append(odd[counter])\n        if counter < even.count\
    \ {\n            result.append(even[counter])\n        }\n        counter += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpt1frvtus/tmpt1frvtus.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac53a5bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac53a2b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac53a2b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac53a2b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1frvtus                        0x000055c9e82296e4 <unavailable> + 5860

    5    libc.so.6                          0x00002ac53a7aa460 __libc_start_main +
    245

    6    tmpt1frvtus                        0x000055c9e82292d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var ascending = lst.sorted(by:\
    \ <)\n    var descending = lst.sorted(by: >)\n    var result = [Int]()\n    while\
    \ !ascending.isEmpty && !descending.isEmpty {\n        result.append(ascending.removeFirst())\n\
    \        result.append(descending.removeFirst())\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpq_quu61k/tmpq_quu61k.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b426187ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4261571b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4261571988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42615707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_quu61k                        0x0000557eb88ad634 <unavailable> + 5684

    5    libc.so.6                          0x00002b4261a66460 __libc_start_main +
    245

    6    tmpq_quu61k                        0x0000557eb88ad229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // your code here\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmphha0llqq/tmphha0llqq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad007ebac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad007bb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad007bb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad007bb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphha0llqq                        0x000055b29b36b3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ad0080a6460 __libc_start_main +
    245

    6    tmphha0llqq                        0x000055b29b36afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var sortedLst\
    \ = [Int]()\n    while !lst.isEmpty {\n        sortedLst.append(lst.remove(at:\
    \ 0))\n        if !lst.isEmpty {\n            sortedLst.append(lst.remove(at:\
    \ lst.count - 1))\n        }\n    }\n    return sortedLst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp2jeylrml/tmp2jeylrml.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73f5ecbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73f5bc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73f5bc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73f5bc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jeylrml                        0x00005566447c99f2 <unavailable> + 6642

    5    libc.so.6                          0x00002b73f60b7460 __libc_start_main +
    245

    6    tmp2jeylrml                        0x00005566447c91c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  let sorted = lst.sorted()\n \
    \ return sorted.enumerated().reduce([Int]()) {\n    $0 + [sorted[$1.offset], sorted[sorted.count\
    \ - $1.offset - 1]]\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpcp3mte92/tmpcp3mte92.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b265f707c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b265f3feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b265f3fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b265f3fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcp3mte92                        0x000055cc2b593764 <unavailable> + 5988

    5    libc.so.6                          0x00002b265f8f3460 __libc_start_main +
    245

    6    tmpcp3mte92                        0x000055cc2b593359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var list = lst\n    var s =\
    \ lst.count - 1\n    var f = 0\n    var result = [Int]()\n    while s >= f {\n\
    \        result.append(list[f])\n        if f != s {\n            result.append(list[s])\n\
    \        }\n        f += 1\n        s -= 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp7xnxn8yf/tmp7xnxn8yf.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc05965c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc0565cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc0565c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc0565b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7xnxn8yf                        0x000055c93fba1952 <unavailable> + 6482

    5    libc.so.6                          0x00002afc05b51460 __libc_start_main +
    245

    6    tmp7xnxn8yf                        0x000055c93fba1129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var lst_tmp = lst\n    var start_min: Bool = true\n    while !lst_tmp.isEmpty\
    \ {\n        var max: Int = 0\n        var index: Int = 0\n        var min: Int\
    \ = Int.max\n        var index2: Int = 0\n        for (i, j) in lst_tmp.enumerated()\
    \ {\n            if start_min {\n                if j < min {\n              \
    \      min = j\n                    index2 = i\n                }\n          \
    \  } else {\n                if j > max {\n                    max = j\n     \
    \               index = i\n                }\n            }\n        }\n     \
    \   if start_min {\n            result.append(min)\n            lst_tmp.remove(at:\
    \ index2)\n        } else {\n            result.append(max)\n            lst_tmp.remove(at:\
    \ index)\n        }\n        start_min = !start_min\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 0 else {\n\
    \        return []\n    }\n    let lst = lst.sorted()\n    var lst2 = lst\n  \
    \  lst2.remove(at: 0)\n    if lst2.count == 0 {\n        return lst\n    }\n \
    \   lst2.reverse()\n    let lst3 = zip(lst, lst2).flatMap { [$0.0, $0.1] }\n \
    \   return lst3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpc1ver5br/tmpc1ver5br.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b673076dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6730464b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6730464988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67304637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc1ver5br                        0x0000561b4f66e6c4 <unavailable> + 5828

    5    libc.so.6                          0x00002b6730959460 __libc_start_main +
    245

    6    tmpc1ver5br                        0x0000561b4f66e2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var mx = lst.max()!\n    var mn = lst.min()!\n    var\
    \ rst = [Int]()\n    for _ in 0..<lst.count {\n        rst.append(mn)\n      \
    \  rst.append(mx)\n        mx -= 1\n        mn += 1\n    }\n    return Array(rst.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp748vzd70/tmp748vzd70.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b566c6f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b566c3f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b566c3f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b566c3ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp748vzd70                        0x00005652492d3904 <unavailable> + 6404

    5    libc.so.6                          0x00002b566c8e5460 __libc_start_main +
    245

    6    tmp748vzd70                        0x00005652492d34f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var res = [Int]()\n    let sorted = lst.sorted()\n \
    \   var (s, b) = (0, sorted.count - 1)\n    while s <= b {\n        res.append(sorted[s])\n\
    \        if s != b {\n            res.append(sorted[b])\n        }\n        s\
    \ += 1\n        b -= 1\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmph0kcdbwc/tmph0kcdbwc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba712e0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba712b01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba712b01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba712b007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0kcdbwc                        0x000055c39ece83d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ba712ff6460 __libc_start_main +
    245

    6    tmph0kcdbwc                        0x000055c39ece7fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var res = [Int]()\n    var\
    \ newList = lst\n    while newList.count > 0 {\n        if let min = newList.min()\
    \ {\n            res.append(min)\n            newList.remove(at: newList.index(of:\
    \ min)!)\n        }\n        if let max = newList.max() {\n            res.append(max)\n\
    \            newList.remove(at: newList.index(of: max)!)\n        }\n    }\n \
    \   return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\
    \ return lst }\n    var result = [Int]()\n    var isUp = true\n    let sorted\
    \ = lst.sorted()\n    for (i, _) in sorted.enumerated() {\n        if isUp {\n\
    \            result.append(sorted[i])\n        } else {\n            result.append(sorted[sorted.count\
    \ - 1 - i])\n        }\n        isUp = !isUp\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_0eka4gw/tmp_0eka4gw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82894e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82891dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82891db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82891da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0eka4gw                        0x0000556b266dc7f4 <unavailable> + 6132

    5    libc.so.6                          0x00002b82896d0460 __libc_start_main +
    245

    6    tmp_0eka4gw                        0x0000556b266dc3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 2 {\n     \
    \   return lst\n    }\n    var lst = lst\n    var res: [Int] = []\n    for _ in\
    \ lst {\n        res.append(lst.min()!)\n        lst.remove(at: lst.index(of:\
    \ lst.min()!)!)\n        if lst.count == 0 {\n            break\n        }\n \
    \       res.append(lst.max()!)\n        lst.remove(at: lst.index(of: lst.max()!)!)\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpnprn55gv/tmpnprn55gv.swift:19: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b50ecdefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50ecae6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b50ecae6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b50ecae613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b50ecae5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnprn55gv                        0x00005606fc95e5aa <unavailable> + 9642

    6    tmpnprn55gv                        0x00005606fc95d76c <unavailable> + 5996

    7    libc.so.6                          0x00002b50ecfdb460 __libc_start_main +
    245

    8    tmpnprn55gv                        0x00005606fc95d449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var list = lst\n    var sortedList\
    \ = [Int]()\n    while list.count > 0 {\n        let min = list.min()!\n     \
    \   let max = list.max()!\n        if min != max {\n            sortedList.append(min)\n\
    \            sortedList.append(max)\n        } else {\n            sortedList.append(min)\n\
    \        }\n        list.remove(element: min)\n        list.remove(element: max)\n\
    \    }\n    return sortedList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp9t1v1sg0.swift:24:14: error: no exact matches in call to instance\
    \ method 'remove'\n        list.remove(element: min)\n             ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(element:)', expected: '(at:)')\n\
    \    @inlinable public mutating func remove(at index: Int) -> Element\n      \
    \                              ^\nSwift.RangeReplaceableCollection:9:37: note:\
    \ incorrect labels for candidate (have: '(element:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n/tmp/tmp9t1v1sg0.swift:25:14: error: no\
    \ exact matches in call to instance method 'remove'\n        list.remove(element:\
    \ max)\n             ^\nSwift.Array:10:37: note: incorrect labels for candidate\
    \ (have: '(element:)', expected: '(at:)')\n    @inlinable public mutating func\
    \ remove(at index: Int) -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(element:)', expected: '(at:)')\n\
    \    @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count < 2 {\n      \
    \  return lst\n    }\n    var left = lst.min()!\n    var right = lst.max()!\n\
    \    var result = [Int]()\n    var i = 0\n    while i < lst.count {\n        if\
    \ i % 2 == 0 {\n            result.append(left)\n            left += 1\n     \
    \   } else {\n            result.append(right)\n            right -= 1\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_v9520a2/tmp_v9520a2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b135de2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b135db23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b135db23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b135db227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_v9520a2                        0x000056081cd7fa92 <unavailable> + 6802

    5    libc.so.6                          0x00002b135e018460 __libc_start_main +
    245

    6    tmp_v9520a2                        0x000056081cd7f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var min: Int = Int.min\n    var max: Int = Int.max\n    let base = lst.count\n\
    \    if base == 0 {\n        return result\n    }\n    var sortedLst = lst.sorted()\n\
    \    var n = 0\n    var increment = true\n    while n < base {\n        if sortedLst.count\
    \ == 0 {\n            break\n        }\n        if increment {\n            if\
    \ sortedLst.count == 1 {\n                result.append(sortedLst[0])\n      \
    \          sortedLst.remove(at: 0)\n                increment = false\n      \
    \      } else {\n                result.append(sortedLst[0])\n               \
    \ sortedLst.remove(at: 0)\n                increment = false\n            }\n\
    \        } else {\n            if sortedLst.count == 1 {\n                result.append(sortedLst[0])\n\
    \                sortedLst.remove(at: 0)\n                increment = true\n \
    \           } else {\n                result.append(sortedLst[sortedLst.count\
    \ - 1])\n                sortedLst.remove(at: sortedLst.count - 1)\n         \
    \       increment = true\n            }\n        }\n        n += 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count == 0 {\n     \
    \   return []\n    }\n    let sortedLst = lst.sorted()\n    var newArr = [Int]()\n\
    \    var i = 0\n    var j = sortedLst.count - 1\n    while i <= j {\n        newArr.append(sortedLst[i])\n\
    \        i += 1\n        if i > j {\n            break\n        }\n        newArr.append(sortedLst[j])\n\
    \        j -= 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  var result: [Int] = []\n  var\
    \ isMax = true\n  lst.sorted().forEach {\n    if result.count == 0 {\n      result.append($0)\n\
    \    } else {\n      if isMax {\n        result.append(result.removeLast())\n\
    \        result.append($0)\n      } else {\n        result.append($0)\n      }\n\
    \      isMax = !isMax\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmps_h2kwfp/tmps_h2kwfp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97f8de4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97f8adbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97f8adb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97f8ada7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_h2kwfp                        0x0000557b6b782674 <unavailable> + 5748

    5    libc.so.6                          0x00002b97f8fd0460 __libc_start_main +
    245

    6    tmps_h2kwfp                        0x0000557b6b782269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 1 {\n     \
    \   return lst\n    }\n    var mutableList = lst\n    var result: [Int] = []\n\
    \    var min = mutableList.min()!\n    var max = mutableList.max()!\n    mutableList.removeAll\
    \ { (number) -> Bool in\n        return number == min || number == max\n    }\n\
    \    let bool = true\n    for _ in 0..<lst.count {\n        if bool {\n      \
    \      result.append(min)\n            min = mutableList.min()!\n            mutableList.removeAll\
    \ { (number) -> Bool in\n                return number == min\n            }\n\
    \        } else {\n            result.append(max)\n            max = mutableList.max()!\n\
    \            mutableList.removeAll { (number) -> Bool in\n                return\
    \ number == max\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpnuova_x4/tmpnuova_x4.swift:27: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b44dcafec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44dc7f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b44dc7f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b44dc7f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b44dc7f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnuova_x4                        0x000055a76206b872 <unavailable> + 10354

    6    tmpnuova_x4                        0x000055a76206a71c <unavailable> + 5916

    7    libc.so.6                          0x00002b44dccea460 __libc_start_main +
    245

    8    tmpnuova_x4                        0x000055a76206a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\n\
    \        return lst\n    }\n    var result = [Int]()\n    var temp = lst\n   \
    \ while temp.count > 0 {\n        result.append(temp.remove(at: temp.minIndex()))\n\
    \        if temp.count > 0 {\n            result.append(temp.remove(at: temp.maxIndex()))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp3xb1_wq2.swift:19:44: error: value of type '[Int]' has no member\
    \ 'minIndex'\n        result.append(temp.remove(at: temp.minIndex()))\n      \
    \                                ~~~~ ^~~~~~~~\n/tmp/tmp3xb1_wq2.swift:21:48:\
    \ error: value of type '[Int]' has no member 'maxIndex'\n            result.append(temp.remove(at:\
    \ temp.maxIndex()))\n                                          ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return [Int]()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp4kv6ldp1/tmp4kv6ldp1.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b220c71fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b220c416b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b220c416988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b220c4157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kv6ldp1                        0x00005639f9656434 <unavailable> + 5172

    5    libc.so.6                          0x00002b220c90b460 __libc_start_main +
    245

    6    tmp4kv6ldp1                        0x00005639f9656029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let sorted = lst.sorted()\n\
    \    var result = [Int]()\n    var i = 0\n    var j = sorted.count - 1\n    while\
    \ i <= j {\n        result.append(sorted[i])\n        i += 1\n        if i <=\
    \ j {\n            result.append(sorted[j])\n            j -= 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var sorted: [Int] = []\n  \
    \  let max = lst.max() ?? 1\n    var min = lst.min() ?? 1\n    while !lst.isEmpty\
    \ {\n        if sorted.count.isMultiple(of: 2) {\n            min = lst.filter\
    \ { $0 > min }.min() ?? 1\n            sorted.append(min)\n        } else {\n\
    \            max = lst.filter { $0 < max }.max() ?? 1\n            sorted.append(max)\n\
    \        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpweksvrn0.swift:21:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = lst.filter { $0 < max }.max() ?? 1\n     \
    \       ^~~\n/tmp/tmpweksvrn0.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let max = lst.max() ?? 1\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // your code here\n    var\
    \ sorted_list: [Int] = []\n    var remaining: [Int] = lst\n    while remaining.count\
    \ > 0 {\n        let min = remaining.min()!\n        sorted_list.append(min)\n\
    \        remaining.remove(at: remaining.index(of: min)!)\n        if remaining.count\
    \ > 0 {\n            let max = remaining.max()!\n            sorted_list.append(max)\n\
    \            remaining.remove(at: remaining.index(of: max)!)\n        }\n    }\n\
    \    return sorted_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    return [1, 4, 2, 3]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmprgu3lqt6/tmprgu3lqt6.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b689520fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6894f06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6894f06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6894f057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgu3lqt6                        0x000055fa3cb9351b <unavailable> + 5403

    5    libc.so.6                          0x00002b68953fb460 __libc_start_main +
    245

    6    tmprgu3lqt6                        0x000055fa3cb92fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 1 {\n     \
    \   return lst\n    }\n    let sorted = lst.sorted()\n    let mid = sorted.count\
    \ / 2\n    let left = Array(sorted[0..<mid])\n    let right = Array(sorted[mid..<sorted.count])\n\
    \    var newList = Array(repeating: 0, count: lst.count)\n    var leftIndex =\
    \ 0\n    var rightIndex = 0\n    for i in 0..<lst.count {\n        if i % 2 ==\
    \ 0 {\n            newList[i] = left[leftIndex]\n            leftIndex += 1\n\
    \        } else {\n            newList[i] = right[rightIndex]\n            rightIndex\
    \ += 1\n        }\n    }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpitgpfk1v/tmpitgpfk1v.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad66c5cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad66c2c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad66c2c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad66c2c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpitgpfk1v                        0x000055fa2fbc48c4 <unavailable> + 6340

    5    libc.so.6                          0x00002ad66c7b9460 __libc_start_main +
    245

    6    tmpitgpfk1v                        0x000055fa2fbc44b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var res:\
    \ [Int] = []\n    var flag = true\n    while lst.count > 0 {\n        if flag\
    \ {\n            let min = lst.min()!\n            res.append(min)\n         \
    \   lst.remove(at: lst.index(of: min)!)\n        } else {\n            let max\
    \ = lst.max()!\n            res.append(max)\n            lst.remove(at: lst.index(of:\
    \ max)!)\n        }\n        flag = !flag\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    var strangedArray\
    \ = [Int]()\n    if lst.count == 0 {\n        return strangedArray\n    }\n  \
    \  var min = lst.min()\n    var max = lst.max()\n    var current: Int\n    var\
    \ counter = 0\n    for _ in lst {\n        current = counter % 2 == 0 ? min! :\
    \ max!\n        lst.count == 1 ? strangedArray.append(current) : strangedArray.append(current)\n\
    \        lst.removeFirst(where: {$0 == current})\n        min = lst.min()\n  \
    \      max = lst.max()\n        counter += 1\n    }\n    return strangedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp8ooi7fde.swift:25:32: error: argument passed to call that takes\
    \ no arguments\n        lst.removeFirst(where: {$0 == current})\n            \
    \           ~~~~~~~~^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var result = [Int]()\n    guard\
    \ lst.count > 0 else {\n        return result\n    }\n    if lst.count == 1 {\n\
    \        return lst\n    }\n    var array = lst\n    var sorted = false\n    var\
    \ sign = true\n    let tempMax = array.max()!\n    let tempMin = array.min()!\n\
    \    while !sorted {\n        if sign {\n            result.append(tempMin)\n\
    \            array.remove(at: array.index(of: tempMin)!)\n        } else {\n \
    \           result.append(tempMax)\n            array.remove(at: array.index(of:\
    \ tempMax)!)\n        }\n        sign = !sign\n        if array.count == 0 {\n\
    \            sorted = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpw6z01shz/tmpw6z01shz.swift:28: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab928cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9289f5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab9289f5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab9289f513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab9289f4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpw6z01shz                        0x0000559d33f496db <unavailable> + 9947

    6    tmpw6z01shz                        0x0000559d33f4869c <unavailable> + 5788

    7    libc.so.6                          0x00002ab928eea460 __libc_start_main +
    245

    8    tmpw6z01shz                        0x0000559d33f48379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var lst = lst\n    if lst.count\
    \ == 0 {\n        return []\n    }\n    for i in 0..<lst.count/2 {\n        if\
    \ lst.count % 2 == 0 && i == lst.count/2 - 1 {\n            return lst\n     \
    \   }\n        if lst.count % 2 != 0 && i == lst.count/2 {\n            return\
    \ lst\n        }\n        lst.insert(lst.remove(at: lst.index(of: lst.max()!)!),\
    \ at: lst.index(of: lst.min()!)!)\n    }\n    return lst\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpox2xyjis/tmpox2xyjis.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbfe8b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbfe5acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbfe5ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbfe5ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpox2xyjis                        0x0000559a88e02814 <unavailable> + 6164

    5    libc.so.6                          0x00002acbfeaa1460 __libc_start_main +
    245

    6    tmpox2xyjis                        0x0000559a88e02409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    // your code here\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmphha0llqq/tmphha0llqq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad007ebac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad007bb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad007bb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad007bb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphha0llqq                        0x000055b29b36b3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ad0080a6460 __libc_start_main +
    245

    6    tmphha0llqq                        0x000055b29b36afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660028494
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var out = [Int]()\n    var\
    \ lessArr = [Int]()\n    var greaterArr = [Int]()\n    let min = lst.min()\n \
    \   let max = lst.max()\n    for item in lst {\n        if item > min! {\n   \
    \         greaterArr.append(item)\n        } else if item < max! {\n         \
    \   lessArr.append(item)\n        }\n    }\n    var count = 0\n    for _ in 0...lst.count\
    \ {\n        if count < lst.count {\n            out.append(min!)\n          \
    \  count += 1\n        }\n        if count < lst.count {\n            out.append(max!)\n\
    \            count += 1\n        }\n    }\n    return out\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp_o8cwtk8/tmp_o8cwtk8.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9da9302c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9da8ff9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9da8ff9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9da8ff87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_o8cwtk8                        0x0000559856c958d4 <unavailable> + 6356

    5    libc.so.6                          0x00002b9da94ee460 __libc_start_main +
    245

    6    tmp_o8cwtk8                        0x0000559856c954c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    var array = lst\n    var count\
    \ = array.count - 1\n    array.sort()\n    var newArray = [Int]()\n    var index\
    \ = 0\n    while count > 0 {\n        newArray.append(array[index])\n        newArray.append(array[count])\n\
    \        index += 1\n        count -= 1\n    }\n    if count == 0 {\n        newArray.append(array[index])\n\
    \    }\n    return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpf8cutehd/tmpf8cutehd.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c37e94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c37b8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c37b8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c37b8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf8cutehd                        0x0000560afcf02654 <unavailable> + 5716

    5    libc.so.6                          0x00002b0c38080460 __libc_start_main +
    245

    6    tmpf8cutehd                        0x0000560afcf02249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 1 else {\
    \ return lst }\n    var list = lst\n    var sorted = [Int]()\n    var copy = list\n\
    \    let i = copy.remove(at: copy.count.arc4random)\n    sorted.append(i)\n  \
    \  var min = min_val(arr: copy)\n    var max = max_val(arr: copy)\n    while list.count\
    \ > 0 {\n        if min != nil {\n            sorted.append(min!)\n          \
    \  list.remove(at: list.index(of: min!)!)\n            copy = list\n         \
    \   min = min_val(arr: copy)\n            max = max_val(arr: copy)\n        }\n\
    \        if max != nil {\n            sorted.append(max!)\n            list.remove(at:\
    \ list.index(of: max!)!)\n            copy = list\n            min = min_val(arr:\
    \ copy)\n            max = max_val(arr: copy)\n        }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpmr1kgm88.swift:17:40: error: value of type 'Int' has no member\
    \ 'arc4random'\n    let i = copy.remove(at: copy.count.arc4random)\n         \
    \                   ~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpmr1kgm88.swift:19:15: error:\
    \ cannot find 'min_val' in scope\n    var min = min_val(arr: copy)\n         \
    \     ^~~~~~~\n/tmp/tmpmr1kgm88.swift:20:15: error: cannot find 'max_val' in scope\n\
    \    var max = max_val(arr: copy)\n              ^~~~~~~\n/tmp/tmpmr1kgm88.swift:26:19:\
    \ error: cannot find 'min_val' in scope\n            min = min_val(arr: copy)\n\
    \                  ^~~~~~~\n/tmp/tmpmr1kgm88.swift:27:19: error: cannot find 'max_val'\
    \ in scope\n            max = max_val(arr: copy)\n                  ^~~~~~~\n\
    /tmp/tmpmr1kgm88.swift:33:19: error: cannot find 'min_val' in scope\n        \
    \    min = min_val(arr: copy)\n                  ^~~~~~~\n/tmp/tmpmr1kgm88.swift:34:19:\
    \ error: cannot find 'max_val' in scope\n            max = max_val(arr: copy)\n\
    \                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard !lst.isEmpty else { return\
    \ [] }\n    var result = [Int]()\n    var min = Int.max\n    var max = Int.min\n\
    \    var count = 0\n    var sign = 1\n    var lstCopy = lst\n    while !lstCopy.isEmpty\
    \ {\n        let el = lstCopy.remove(at: 0)\n        min = min < el ? min : el\n\
    \        max = max > el ? max : el\n    }\n    while count < lst.count {\n   \
    \     if count == 0 {\n            result.append(min)\n            count += 1\n\
    \            sign = -1\n        } else if count == 1 {\n            result.append(max)\n\
    \            count += 1\n            sign = 1\n        } else {\n            if\
    \ sign > 0 {\n                let el = lstCopy.remove(at: 0)\n               \
    \ if el != max {\n                    result.append(el)\n                    count\
    \ += 1\n                    sign = -1\n                }\n            } else {\n\
    \                let el = lstCopy.remove(at: lstCopy.count - 1)\n            \
    \    if el != min {\n                    result.append(el)\n                 \
    \   count += 1\n                    sign = 1\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b648f617c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b648f30e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b648f30e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b648f30e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b648f30dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b648f2fb018 <unavailable> + 1355800

    6    tmpu6w3oofj                        0x000055c1be224435 <unavailable> + 9269

    7    tmpu6w3oofj                        0x000055c1be2234ec <unavailable> + 5356

    8    libc.so.6                          0x00002b648f803460 __libc_start_main +
    245

    9    tmpu6w3oofj                        0x000055c1be2231c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660028496
- exit_code: -1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  var result = [Int]()\n  var lst\
    \ = lst\n  if lst.count > 0 {\n    var maximum = lst.max()!\n    var minimum =\
    \ lst.min()!\n    while lst.count > 0 {\n      result.append(minimum)\n      result.append(maximum)\n\
    \      lst.removeFirst(lst.firstIndex(of: minimum)!)\n      lst.removeFirst(lst.firstIndex(of:\
    \ maximum)!)\n      if lst.count > 0 {\n        maximum = lst.max()!\n       \
    \ minimum = lst.min()!\n      }\n    }\n  }\n  return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028501
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    if lst.count <= 1 {\n     \
    \   return lst\n    }\n    var newList = lst\n    var first = lst.min()!\n   \
    \ var second = newList.filter { $0 != first }.max()!\n    newList.remove(at: newList.index(of:\
    \ first)!)\n    newList.remove(at: newList.index(of: second)!)\n    newList.insert(first,\
    \ at: 0)\n    newList.insert(second, at: newList.count)\n    return newList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmphthq2bn2/tmphthq2bn2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f5e2e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f5dfd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f5dfd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f5dfd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphthq2bn2                        0x000056246c6c27f4 <unavailable> + 6132

    5    libc.so.6                          0x00002b6f5e4ce460 __libc_start_main +
    245

    6    tmphthq2bn2                        0x000056246c6c23e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660028496
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n\tif lst.count == 0 {\n\t\treturn\
    \ []\n\t}\n\tvar sorted_list = [Int]()\n\tvar other_list = lst\n\tvar step = 1\n\
    \twhile other_list.count > 0 {\n\t\tif step % 2 == 1 {\n\t\t\tsorted_list.append(other_list.min()!)\n\
    \t\t\tother_list.remove(at: other_list.index(of: other_list.min()!)!)\n\t\t} else\
    \ {\n\t\t\tsorted_list.append(other_list.max()!)\n\t\t\tother_list.remove(at:\
    \ other_list.index(of: other_list.max()!)!)\n\t\t}\n\t\tstep += 1\n\t}\n\treturn\
    \ sorted_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028496
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n  guard lst.count > 1 else { return\
    \ lst }\n  let sortedList = lst.sorted()\n  var result: [Int] = []\n  let increment\
    \ = sortedList.count % 2 == 0 ? 2 : 1\n  var index = sortedList.count - 1\n  while\
    \ result.count < sortedList.count {\n    let min = sortedList[result.count]\n\
    \    let max = sortedList[index]\n    result.append(min)\n    result.append(max)\n\
    \    index -= increment\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpf9n7lcun/tmpf9n7lcun.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a57267c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a56f5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a56f5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a56f5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9n7lcun                        0x00005623551c3614 <unavailable> + 5652

    5    libc.so.6                          0x00002b3a57453460 __libc_start_main +
    245

    6    tmpf9n7lcun                        0x00005623551c3209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660028496
- exit_code: -4
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n\tguard !lst.isEmpty else { return\
    \ [] }\n\tguard lst.count > 1 else { return lst }\n\tlet sorted = lst.sorted()\n\
    \tvar min = 0\n\tvar max = sorted.count - 1\n\tvar i = 0\n\tvar tmp = 0\n\tvar\
    \ arr = [Int](repeating: 0, count: sorted.count)\n\twhile i < sorted.count {\n\
    \t\tarr[i] = sorted[min]\n\t\ti += 1\n\t\tarr[i] = sorted[max]\n\t\ti += 1\n\t\
    \ttmp = min\n\t\tmin = max + 1\n\t\tmax = tmp - 1\n\t}\n\treturn arr\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afc51578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc5126f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc5126f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc5126f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc5126ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afc5106ee83 <unavailable> + 188035

    6    tmprdkozawg                        0x00005637ce7e935c <unavailable> + 9052

    7    tmprdkozawg                        0x00005637ce7e858c <unavailable> + 5516

    8    libc.so.6                          0x00002afc51764460 __libc_start_main +
    245

    9    tmprdkozawg                        0x00005637ce7e8269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660028496
- exit_code: 1
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    guard lst.count > 0 else {\
    \ return lst }\n    var min_val = min(lst)\n    var max_val = max(lst)\n    var\
    \ new_lst = [Int]()\n    var inc = 1\n    for _ in 0..<lst.count {\n        if\
    \ inc == 1 {\n            new_lst.append(min_val)\n            min_val += 1\n\
    \            inc += 1\n        } else {\n            new_lst.append(max_val)\n\
    \            max_val -= 1\n            inc -= 1\n        }\n    }\n    return\
    \ new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpkc0hcdun.swift:14:26: error: missing argument for parameter #2\
    \ in call\n    var min_val = min(lst)\n                         ^\n          \
    \               , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable\
    \ public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmpkc0hcdun.swift:15:26: error: missing argument for parameter\
    \ #2 in call\n    var max_val = max(lst)\n                         ^\n       \
    \                  , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n"
  stdout: ''
  timestamp: 1660028496
- exit_code: 0
  program: "\n/// Given array of integers, return array in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst:\
    \ [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n\
    /// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\n\
    func strange_sort_list(lst: [Int]) -> [Int] {\n    let srt = lst.sorted()\n  \
    \  var res: [Int] = []\n    var i = 0\n    var j = srt.count - 1\n    while i\
    \ < j {\n        res.append(srt[i])\n        res.append(srt[j])\n        i +=\
    \ 1\n        j -= 1\n    }\n    if i == j {\n        res.append(srt[i])\n    }\n\
    \    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028496
