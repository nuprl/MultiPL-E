language: swift
name: HumanEval_30_get_positive
results:
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var l_positive = [Int]()\n    for i in l {\n        if i > 0\
    \ {\n            l_positive.append(i)\n        }\n    }\n    return l_positive\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positiveNumbers = [Int]()\n    for number in l {\n     \
    \   if number > 0 {\n            positiveNumbers.append(number)\n        }\n \
    \   }\n    return positiveNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    // Your code here\n    return l.filter({ num in\n        return\
    \ num > 0\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2])\
    \ == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    // your code here\n    return l.filter({number in number > 0})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for num in l {\n        if num >\
    \ 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var ll: [Int] = []\n    for i in l {\n        if i > 0 {\n \
    \           ll.append(i)\n        }\n    }\n    return ll\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for n in l {\n        if n > 0 {\n\
    \            result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positiveList: [Int] = []\n    for item in l {\n        if\
    \ item > 0 {\n            positiveList.append(item)\n        }\n    }\n    return\
    \ positiveList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2])\
    \ == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for number in l {\n        if number\
    \ > 0 {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for element in l {\n        if element\
    \ > 0 {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for i in l {\n        if i > 0 {\n  \
    \          res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for num in l {\n        if num > 0 {\n\
    \            res.append(num)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ n in n > 0 })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\treturn l.filter{$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var new_list: [Int] = []\n    for num in l {\n        if num\
    \ > 0 {\n            new_list.append(num)\n        }\n    }\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ $0 > 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for num in l {\n        if num >\
    \ 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for number in l {\n        if number\
    \ > 0 {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var ans = [Int]()\n    for i in l {\n        if i > 0 {\n  \
    \          ans.append(i)\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for i in l {\n        if i > 0 {\n  \
    \          res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for i in l {\n        if i > 0 {\n  \
    \          res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter {\n        $0 > 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var l2 = [Int]()\n    for i in l {\n        if i > 0 {\n   \
    \         l2.append(i)\n        }\n    }\n    return l2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ $0 > 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { x in x > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positives = [Int]()\n    for i in l {\n        if i > 0\
    \ {\n            positives.append(i)\n        }\n    }\n    return positives\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\tvar result: [Int] = []\n\tfor item in l {\n\t\tif item > 0 {\n\
    \t\t\tresult.append(item)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({\n        if $0 > 0 {\n            return true\n\
    \        }\n        return false\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp791j7372/tmp791j7372.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62c22bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62bf22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62bf22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62bf217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp791j7372                        0x000055abf43453d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ae62c417460 __libc_start_main +
    245

    6    tmp791j7372                        0x000055abf4344fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positiveArr: [Int] = []\n    for x in l {\n        if x\
    \ > 0 {\n            positiveArr.append(x)\n        }\n    }\n    return positiveArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter {\n        $0 > 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for num in l {\n        if num >\
    \ 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var newArray = [Int]()\n    for num in l {\n        if num >\
    \ 0 {\n            newArray.append(num)\n        }\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { x in x > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ (number) -> Bool in\n        number > 0\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1, -2,\
    \ 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) ==\
    \ [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for i in l {\n        if i > 0 {\n  \
    \          res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp791j7372/tmp791j7372.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62c22bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62bf22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62bf22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62bf217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp791j7372                        0x000055abf43453d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ae62c417460 __libc_start_main +
    245

    6    tmp791j7372                        0x000055abf4344fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positives: [Int] = []\n    for number in l {\n        if\
    \ number > 0 {\n            positives.append(number)\n        }\n    }\n    return\
    \ positives\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2])\
    \ == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\t// Put your code here\n\treturn []\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpyv7z7ob5/tmpyv7z7ob5.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d9b0afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d9ada6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d9ada6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d9ada57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyv7z7ob5                        0x000055764d67b3d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b9d9b29b460 __libc_start_main +
    245

    6    tmpyv7z7ob5                        0x000055764d67afc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positive : [Int] = []\n    for i in l {\n        if i >\
    \ 0 {\n            positive.append(i)\n        }\n    }\n    return positive\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var results = [Int]()\n    for number in l {\n        if number\
    \ > 0 {\n            results.append(number)\n        }\n    }\n    return results\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var p: [Int] = []\n    for a in l {\n        if a > 0 {\n  \
    \          p.append(a)\n        }\n    }\n    return p\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n  l.filter{$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    let positive_list = l.filter({$0 > 0})\n    return positive_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\tvar res: [Int] = []\n\tfor i in l {\n\t\tif i > 0 {\n\t\t\tres.append(i)\n\
    \t\t}\n\t}\n\treturn res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var new_list: [Int] = []\n    for i in l {\n        if i > 0\
    \ {\n            new_list.append(i)\n        }\n    }\n    return new_list\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp791j7372/tmp791j7372.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62c22bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62bf22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62bf22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62bf217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp791j7372                        0x000055abf43453d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ae62c417460 __libc_start_main +
    245

    6    tmp791j7372                        0x000055abf4344fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({x in x >= 0})\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9f706149/tmp9f706149.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f12470c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f12167b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f12167988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f121667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9f706149                        0x00005618eb27163b <unavailable> + 5691

    5    libc.so.6                          0x00002b7f1265c460 __libc_start_main +
    245

    6    tmp9f706149                        0x00005618eb271099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positives: [Int] = []\n    for number in l {\n        if\
    \ number > 0 {\n            positives.append(number)\n        }\n    }\n    return\
    \ positives\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2])\
    \ == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\treturn l.filter({x in x > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ return $0 > 0 })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    let positives = l.filter({$0 > 0})\n    return positives\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positive_list = [Int]()\n    for n in l {\n        if n\
    \ > 0 {\n            positive_list.append(n)\n        }\n    }\n    return positive_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var a = [Int]()\n    for i in l {\n        if i > 0 {\n    \
    \        a.append(i)\n        }\n    }\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n  return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n  var positives: [Int] = []\n  for num in l {\n    if num > 0 {\n\
    \      positives.append(num)\n    }\n  }\n  return positives\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    // write your code here\n    return l.filter{$0 > 0}\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n  return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    let positives = l.filter { $0 > 0 }\n    return positives\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    // TODO: Implement!\n    var newList = [Int]()\n    for number\
    \ in l {\n        if number > 0 {\n            newList.append(number)\n      \
    \  }\n    }\n    return newList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var numbers: [Int] = []\n    for number in l {\n        if number\
    \ > 0 {\n            numbers.append(number)\n        }\n    }\n    return numbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for i in l {\n        if i > 0 {\n  \
    \          res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var p_arr: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            p_arr.append(i)\n        }\n    }\n    return p_arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    // Your code goes here\n    var list = [Int]()\n    for x in\
    \ l {\n        if x > 0 {\n            list.append(x)\n        }\n    }\n    return\
    \ list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1, -2,\
    \ 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) ==\
    \ [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var new_l = [Int]()\n    for number in l {\n        if number\
    \ > 0 {\n            new_l.append(number)\n        }\n    }\n    return new_l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positiveList = [Int]()\n    for item in l {\n        if\
    \ item > 0 {\n            positiveList.append(item)\n        }\n    }\n    return\
    \ positiveList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2])\
    \ == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var new_list = [Int]()\n    for i in l {\n        if i > 0 {\n\
    \            new_list.append(i)\n        }\n    }\n    return new_list\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp791j7372/tmp791j7372.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62c22bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62bf22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62bf22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62bf217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp791j7372                        0x000055abf43453d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ae62c417460 __libc_start_main +
    245

    6    tmp791j7372                        0x000055abf4344fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x > 0 {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var new = [Int]()\n    for number in l {\n        if number\
    \ > 0 {\n            new.append(number)\n        }\n    }\n    return new\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var new_list = [Int]()\n    for elem in l {\n        if elem\
    \ > 0 {\n            new_list.append(elem)\n        }\n    }\n    return new_list\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    let positiveNumbers = l.filter { $0 > 0 }\n    return positiveNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positives: [Int] = []\n    for number in l {\n        if\
    \ number > 0 {\n            positives.append(number)\n        }\n    }\n    return\
    \ positives\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2])\
    \ == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var new_l: [Int] = []\n    for number in l {\n        if number\
    \ > 0 {\n            new_l.append(number)\n        }\n    }\n    return new_l\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter {$0 >= 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwnp7pfsd/tmpwnp7pfsd.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3964e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3961deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3961de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3961dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwnp7pfsd                        0x0000560c75f1563b <unavailable> + 5691

    5    libc.so.6                          0x00002af3966d3460 __libc_start_main +
    245

    6    tmpwnp7pfsd                        0x0000560c75f15099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978635
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp791j7372/tmp791j7372.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62c22bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62bf22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62bf22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62bf217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp791j7372                        0x000055abf43453d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ae62c417460 __libc_start_main +
    245

    6    tmp791j7372                        0x000055abf4344fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ $0 > 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\tvar result: [Int] = []\n\tfor n in l {\n\t\tif n > 0 {\n\t\t\t\
    result.append(n)\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positive = [Int]()\n    for num in l {\n        if num >\
    \ 0 {\n            positive.append(num)\n        }\n    }\n    return positive\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter {x in x > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    let result = l.filter { $0 > 0 }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n  return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n  var res = [Int]()\n  for i in l {\n    if i > 0 {\n      res.append(i)\n\
    \    }\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ (num) -> Bool in\n        num > 0\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positives = [Int]()\n    for num in l {\n        if num\
    \ > 0 {\n            positives.append(num)\n        }\n    }\n    return positives\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\treturn l.filter{$0 >= 0}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp77dulrl0/tmp77dulrl0.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2a2643c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2a233ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2a233a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2a23397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77dulrl0                        0x000055683ae2363b <unavailable> + 5691

    5    libc.so.6                          0x00002ac2a282f460 __libc_start_main +
    245

    6    tmp77dulrl0                        0x000055683ae23099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positiveNumbers = [Int]()\n    for i in l {\n        if\
    \ i > 0 {\n            positiveNumbers.append(i)\n        }\n    }\n    return\
    \ positiveNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2])\
    \ == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var i = 0\n    var result = [Int]()\n    while i < l.count {\n\
    \        if l[i] > 0 {\n            result.append(l[i])\n        }\n        i\
    \ += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for item in l {\n        if item\
    \ > 0 {\n            result.append(item)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var newList: [Int] = []\n    for item in l {\n        if item\
    \ > 0 {\n            newList.append(item)\n        }\n    }\n    return newList\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({x in x > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    // CODING PART\n    return l.filter({$0 >= 0})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpqjfgirny/tmpqjfgirny.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76df379c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76df070b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76df070988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76df06f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqjfgirny                        0x000055e8125fa63b <unavailable> + 5691

    5    libc.so.6                          0x00002b76df565460 __libc_start_main +
    245

    6    tmpqjfgirny                        0x000055e8125fa099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for element in l {\n        if element\
    \ > 0 {\n            result.append(element)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp791j7372/tmp791j7372.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62c22bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62bf22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62bf22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62bf217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp791j7372                        0x000055abf43453d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ae62c417460 __libc_start_main +
    245

    6    tmp791j7372                        0x000055abf4344fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var pos_l = [Int]()\n    for num in l {\n        if num > 0\
    \ {\n            pos_l.append(num)\n        }\n    }\n    return pos_l\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ $0 > 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positiveNums = [Int]()\n    for num in l {\n        if num\
    \ > 0 {\n            positiveNums.append(num)\n        }\n    }\n    return positiveNums\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ (n) -> Bool in n > 0 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    let posOnly: [Int] = l.filter { $0 > 0 }\n    return posOnly\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 1
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    // Write your code below this line\n    \n    \n    // Write\
    \ your code above this line\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: SyntaxError
  stderr: '/tmp/tmp4364l9yp.swift:12:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978635
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp791j7372/tmp791j7372.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62c22bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62bf22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62bf22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62bf217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp791j7372                        0x000055abf43453d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ae62c417460 __libc_start_main +
    245

    6    tmp791j7372                        0x000055abf4344fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{ return $0 > 0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\treturn l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{$0 >= 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp8yvau24c/tmp8yvau24c.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae64510bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae644e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae644e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae644e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8yvau24c                        0x000056338e83e63b <unavailable> + 5691

    5    libc.so.6                          0x00002ae6452f7460 __libc_start_main +
    245

    6    tmp8yvau24c                        0x000056338e83e099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for num in l {\n        if num >\
    \ 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\treturn l.filter({ x in x > 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    // TODO your code here\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpvxz0oc3o/tmpvxz0oc3o.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92a16d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92a13c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92a13c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92a13c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxz0oc3o                        0x0000560a318693d4 <unavailable> + 5076

    5    libc.so.6                          0x00002b92a18bc460 __libc_start_main +
    245

    6    tmpvxz0oc3o                        0x0000560a31868fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\tvar positiveArray = [Int]()\n\tfor item in l {\n\t\tif item >\
    \ 0 {\n\t\t\tpositiveArray.append(item)\n\t\t}\n\t}\n\treturn positiveArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positives: [Int] = []\n    for i in l {\n        if i >\
    \ 0 {\n            positives.append(i)\n        }\n    }\n    return positives\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    let result = l.filter { $0 > 0 }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ return $0 > 0 })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var res = [Int]()\n    for i in l {\n        if i > 0 {\n  \
    \          res.append(i)\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n  return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ $0 > 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ $0 > 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    let l1 = l.filter{$0 > 0}\n    return l1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter{ $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for number in l {\n        if number\
    \ > 0 {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter {$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var arr: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            arr.append(i)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var positives: [Int] = []\n    for value in l {\n        if\
    \ value > 0 {\n            positives.append(value)\n        }\n    }\n    return\
    \ positives\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1,\
    \ -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0,\
    \ 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2])\
    \ == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var p_l: [Int] = []\n    for i in l {\n        if i > 0 {\n\
    \            p_l.append(i)\n        }\n    }\n    return p_l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n  return l.filter{x in x > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter {$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for number in l {\n        if number\
    \ > 0 {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ $0 > 0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var arr = [Int]()\n    for i in l {\n        if i > 0 {\n  \
    \          arr.append(i)\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n\treturn l.filter({x in x > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var lst: [Int] = []\n    for item in l {\n        if item >\
    \ 0 {\n            lst.append(item)\n        }\n    }\n    return lst\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter {$0 > 0}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var new_l = [Int]()\n    for i in l {\n        if i > 0 {\n\
    \            new_l.append(i)\n        }\n    }\n    return new_l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for x in l {\n        if x > 0 {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_positive(l:\
    \ [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3,\
    \ 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1,\
    \ -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmp791j7372/tmp791j7372.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae62c22bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae62bf22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae62bf22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae62bf217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp791j7372                        0x000055abf43453d4 <unavailable> + 5076

    5    libc.so.6                          0x00002ae62c417460 __libc_start_main +
    245

    6    tmp791j7372                        0x000055abf4344fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i > 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({$0 > 0})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { $0 > 0 }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter({ (num) -> Bool in\n        num > 0\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    return l.filter { (el) -> Bool in\n        return el > 0\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_positive(l: [-1, -2,\
    \ 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) ==\
    \ [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: -4
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    // your code here\n    return l.filter {x in x >= 0}\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: Exception
  stderr: 'tmpe4tee7nb/tmpe4tee7nb.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7f510cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7f4e03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7f4e03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7f4e027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4tee7nb                        0x0000559286aeb63b <unavailable> + 5691

    5    libc.so.6                          0x00002ae7f52f8460 __libc_start_main +
    245

    6    tmpe4tee7nb                        0x0000559286aeb099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for item in l {\n        if item\
    \ > 0 {\n            result.append(item)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var pos: [Int] = []\n    for n in l {\n        if n > 0 {\n\
    \            pos.append(n)\n        }\n    }\n    return pos\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\nassert(get_positive(l:\
    \ [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l:\
    \ [-1, -2]) == [] as [Int])\nassert(get_positive(l: [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "\n/// Return only positive numbers in the array.\n/// >>> get_positive(l:\
    \ [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in l {\n        if x > 0 {\n\
    \            result.append(x)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4, 5, 6])\n\
    assert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3,\
    \ 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
    \ [] as [Int]) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978636
