language: swift
name: HumanEval_80_is_happy
results:
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let characters = Array(s)\n    let length = characters.count\n    if\
    \ length < 3 {\n        return false\n    }\n    var previousChars = [Character]()\n\
    \    for (index, char) in characters.enumerated() {\n        if index > 1 {\n\
    \            previousChars.removeFirst()\n        }\n        previousChars.append(char)\n\
    \        if index > 0 && previousChars.count == 3 {\n            if previousChars[0]\
    \ == previousChars[1] || previousChars[0] == previousChars[2] || previousChars[1]\
    \ == previousChars[2] {\n                return false\n            }\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpgqf0ewc_/tmpgqf0ewc_.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7afa4b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7afa1afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7afa1af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7afa1ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgqf0ewc_                        0x000055af04384a11 <unavailable> + 6673

    5    libc.so.6                          0x00002b7afa6a4460 __libc_start_main +
    245

    6    tmpgqf0ewc_                        0x000055af043844b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    var set =\
    \ Set<Character>()\n    var array = Array(s)\n    var count = 0\n    for c in\
    \ array {\n        if !set.contains(c) {\n            set.insert(c)\n        \
    \    count += 1\n        } else {\n            set.remove(c)\n            count\
    \ -= 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpas1p77od/tmpas1p77od.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b271e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b26edab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b26eda988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b26ed97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpas1p77od                        0x00005628e68ce86b <unavailable> + 6251

    5    libc.so.6                          0x00002b0b273cf460 __libc_start_main +
    245

    6    tmpas1p77od                        0x00005628e68ce3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let chars = Array(s)\n\
    \    let newChars = zip(chars, chars.dropFirst(), chars.dropFirst(2))\n    return\
    \ !newChars.contains(where: { $0.0 == $0.1 || $0.0 == $0.2 || $0.1 == $0.2 })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3qxxh20z.swift:21:56: error: extra argument in call\n    let newChars\
    \ = zip(chars, chars.dropFirst(), chars.dropFirst(2))\n                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp3qxxh20z.swift:22:12: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return !newChars.contains(where: { $0.0 == $0.1 || $0.0\
    \ == $0.2 || $0.1 == $0.2 })\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013915
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    return s.enumerated().reduce(true)\
    \ { acc, pair in\n        let (index, char) = pair\n        guard index >= 2 else\
    \ { return acc }\n        let prev = s[s.index(s.startIndex, offsetBy: index -\
    \ 2)]\n        let prev2 = s[s.index(s.startIndex, offsetBy: index - 1)]\n   \
    \     return acc && char != prev && char != prev2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result = true\n    var list = [Character]()\n    var i = 0\n    let\
    \ length = s.count\n    while (i < length) {\n        if (i + 3 <= length) {\n\
    \            list.append(s[s.index(s.startIndex, offsetBy: i)])\n            list.append(s[s.index(s.startIndex,\
    \ offsetBy: i + 1)])\n            list.append(s[s.index(s.startIndex, offsetBy:\
    \ i + 2)])\n            var index = 0\n            for j in list {\n         \
    \       if (list.count > index + 1) {\n                    if (j == list[index\
    \ + 1]) {\n                        result = false\n                        break\n\
    \                    }\n                }\n                index += 1\n      \
    \      }\n            list.removeAll()\n        }\n        i += 1\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpqndfd_yv/tmpqndfd_yv.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b491bdb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b491baaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b491baae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b491baad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqndfd_yv                        0x0000557bfd57480d <unavailable> + 6157

    5    libc.so.6                          0x00002b491bfa3460 __libc_start_main +
    245

    6    tmpqndfd_yv                        0x0000557bfd574499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var output = true\n    for i in 2..<s.count {\n        if s[i] == s[i-1]\
    \ || s[i] == s[i-2] || s[i-1] == s[i-2] {\n            output = false\n      \
    \      break\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxfk7w_b9.swift:21:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[i] ==\
    \ s[i-1] || s[i] == s[i-2] || s[i-1] == s[i-2] {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpxfk7w_b9.swift:21:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[i] == s[i-1] || s[i] == s[i-2] ||\
    \ s[i-1] == s[i-2] {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxfk7w_b9.swift:21:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[i] == s[i-1] || s[i] == s[i-2] || s[i-1] == s[i-2] {\n         \
    \                    ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxfk7w_b9.swift:21:38: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] == s[i-1] || s[i] == s[i-2] || s[i-1] == s[i-2] {\n                   \
    \                  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpxfk7w_b9.swift:21:48: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[i] == s[i-1] || s[i] == s[i-2] || s[i-1] == s[i-2] {\n                   \
    \                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpxfk7w_b9.swift:21:58: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n"
  stdout: ''
  timestamp: 1660013850
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  var isHappy = true\n  if s.count < 3 {\n    isHappy = false\n  } else {\n\
    \    var str = Array(s)\n    for i in 0..<str.count-2 {\n      var set = Set<Character>()\n\
    \      set.insert(str[i])\n      set.insert(str[i+1])\n      set.insert(str[i+2])\n\
    \      if set.count < 3 {\n        isHappy = false\n        break\n      }\n \
    \   }\n  }\n  return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpm80llorz/tmpm80llorz.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad335f22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad335c19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad335c19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad335c187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm80llorz                        0x000055593abfe25d <unavailable> + 4701

    5    libc.so.6                          0x00002ad33610e460 __libc_start_main +
    245

    6    tmpm80llorz                        0x000055593abfdee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var lastString = String(s.prefix(3))\n\
    \    for i in 3..<s.count {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let character = s[index]\n        lastString.append(character)\n\
    \        if Set(lastString).count < 3 {\n            return false\n        }\n\
    \        lastString.removeFirst()\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpema1fuoo/tmpema1fuoo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36b5f3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36b5c35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36b5c35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36b5c347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpema1fuoo                        0x000055e3be84ec2f <unavailable> + 7215

    5    libc.so.6                          0x00002b36b612a460 __libc_start_main +
    245

    6    tmpema1fuoo                        0x000055e3be84e569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var prev2 = \"\"\n    var prev1 = \"\"\n    for c in s {\n        if\
    \ prev2 != String(c) && prev1 != String(c) {\n            prev2 = prev1\n    \
    \        prev1 = String(c)\n        } else {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmph95ej__o/tmph95ej__o.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c37dacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c37aa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c37aa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c37aa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph95ej__o                        0x00005641fbec73bd <unavailable> + 5053

    5    libc.so.6                          0x00002b0c37f98460 __libc_start_main +
    245

    6    tmph95ej__o                        0x00005641fbec7049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var index = s.startIndex\n\
    \    var prev = s[index]\n    var count = 1\n    index = s.index(after: index)\n\
    \    while index < s.endIndex {\n        let char = s[index]\n        if char\
    \ == prev {\n            count += 1\n        } else {\n            if count >=\
    \ 3 {\n                return false\n            }\n            count = 1\n  \
    \      }\n        prev = char\n        index = s.index(after: index)\n    }\n\
    \    return count < 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprd4rw34y/tmprd4rw34y.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe55dedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe55ae4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe55ae4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe55ae37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprd4rw34y                        0x000055dbb54ed6b1 <unavailable> + 5809

    5    libc.so.6                          0x00002abe55fd9460 __libc_start_main +
    245

    6    tmprd4rw34y                        0x000055dbb54ed159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let chars = Array(s)\n\
    \    return !chars.enumerated().contains(where: { i, char in\n        return i\
    \ <= chars.count - 3 && chars[i] == chars[i + 1] && chars[i] == chars[i + 2]\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp33ma9k8x.swift:21:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return !chars.enumerated().contains(where: { i, char in\n\
    \           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var trio = [Character]()\n\
    \    for letter in s {\n        trio.append(letter)\n        if trio.count ==\
    \ 3 {\n            if trio[0] == trio[1] || trio[0] == trio[2] || trio[1] == trio[2]\
    \ {\n                return false\n            }\n            trio.remove(at:\
    \ 0)\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var set: Set<Character> = []\n    let s = Array(s)\n    guard s.count\
    \ >= 3 else { return false }\n    for i in 0..<s.count-2 {\n        if !set.contains(s[i])\
    \ {\n            set.insert(s[i])\n        }\n        if !set.contains(s[i+1])\
    \ {\n            set.insert(s[i+1])\n        }\n        if !set.contains(s[i+2])\
    \ {\n            set.insert(s[i+2])\n        }\n        if set.count == 3 {\n\
    \            return true\n        }\n        set.removeAll()\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpmqig952g/tmpmqig952g.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3490830c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3490527b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3490527988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34905267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqig952g                        0x0000559cfb4dfd08 <unavailable> + 7432

    5    libc.so.6                          0x00002b3490a1c460 __libc_start_main +
    245

    6    tmpmqig952g                        0x0000559cfb4df4c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    return zip(s, s.dropFirst(),\
    \ s.dropFirst(2)).allSatisfy { $0 != $1 && $1 != $2 && $0 != $2 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzz1lipqm.swift:20:36: error: extra argument in call\n    return\
    \ zip(s, s.dropFirst(), s.dropFirst(2)).allSatisfy { $0 != $1 && $1 != $2 && $0\
    \ != $2 }\n              ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n/tmp/tmpzz1lipqm.swift:20:61:\
    \ error: contextual closure type '((String.Element, String.SubSequence.Element))\
    \ throws -> Bool' (aka '((String.Element, Substring.Element)) throws -> Bool')\
    \ expects 1 argument, but 3 were used in closure body\n    return zip(s, s.dropFirst(),\
    \ s.dropFirst(2)).allSatisfy { $0 != $1 && $1 != $2 && $0 != $2 }\n          \
    \                                                  ^\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    var current = s.characters.first\n    var previous\
    \ = s.characters.first\n    var next = s.characters.first\n    if s.characters.count\
    \ < 3 {\n        return false\n    }\n    for index in s.characters.indices {\n\
    \        current = s.characters[index]\n        previous = (index == s.characters.startIndex)\
    \ ? nil : s.characters[s.characters.index(before: index)]\n        next = (index\
    \ == s.characters.endIndex) ? nil : s.characters[s.characters.index(after: index)]\n\
    \        if current == previous || current == next {\n            count += 1\n\
    \        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpscu8be1n.swift:20:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    var current = s.characters.first\n                \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpscu8be1n.swift:21:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    var previous\
    \ = s.characters.first\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpscu8be1n.swift:22:18: error: 'characters'\
    \ is unavailable: Please use String directly\n    var next = s.characters.first\n\
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpscu8be1n.swift:23:10: error: 'characters' is unavailable: Please\
    \ use String directly\n    if s.characters.count < 3 {\n         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpscu8be1n.swift:26:20:\
    \ error: 'characters' is unavailable: Please use String directly\n    for index\
    \ in s.characters.indices {\n                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpscu8be1n.swift:27:21: error: 'characters'\
    \ is unavailable: Please use String directly\n        current = s.characters[index]\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpscu8be1n.swift:28:32: error: 'characters' is unavailable: Please\
    \ use String directly\n        previous = (index == s.characters.startIndex) ?\
    \ nil : s.characters[s.characters.index(before: index)]\n                    \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var charac"
  stdout: ''
  timestamp: 1660013850
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var i = s.startIndex\n\
    \    var j = s.index(i, offsetBy: 1)\n    var k = s.index(i, offsetBy: 2)\n  \
    \  while k < s.endIndex {\n        if s[i] == s[j] || s[i] == s[k] || s[j] ==\
    \ s[k] {\n            return false\n        }\n        i = s.index(after: i)\n\
    \        j = s.index(after: j)\n        k = s.index(after: k)\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013850
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count >= 3 {\n        let s2 = s.compactMap{$0}\n        var sub\
    \ = [String]()\n        for index in 0..<s2.count {\n            if index <= s2.count\
    \ - 3 {\n                let current = [s2[index], s2[index + 1], s2[index + 2]]\n\
    \                if !Set(current).isSubset(of: Set(sub)) {\n                 \
    \   sub.append(current[0])\n                    sub.append(current[1])\n     \
    \               sub.append(current[2])\n                } else {\n           \
    \         return false\n                }\n            }\n        }\n        return\
    \ true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmppe8w1fm9.swift:25:34: error: no exact matches in call to instance\
    \ method 'isSubset'\n                if !Set(current).isSubset(of: Set(sub)) {\n\
    \                                 ^\nSwift.Set:15:28: note: candidate requires\
    \ that the types 'String.Element' (aka 'Character') and 'String' be equivalent\
    \ (requirement specified as 'Element' == 'S.Element')\n    @inlinable public func\
    \ isSubset<S>(of possibleSuperset: S) -> Bool where Element == S.Element, S :\
    \ Sequence\n                           ^\nSwift.Set:3:28: note: found candidate\
    \ with type 'Set<String>'\n    @inlinable public func isSubset(of other: Set<Element>)\
    \ -> Bool\n                           ^\nSwift.SetAlgebra:4:28: note: found candidate\
    \ with type 'Set<String>'\n    @inlinable public func isSubset(of other: Self)\
    \ -> Bool\n                           ^\n/tmp/tmppe8w1fm9.swift:26:39: error:\
    \ cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n                    sub.append(current[0])\n       \
    \                               ^\n/tmp/tmppe8w1fm9.swift:27:39: error: cannot\
    \ convert value of type 'String.Element' (aka 'Character') to expected argument\
    \ type 'String'\n                    sub.append(current[1])\n                \
    \                      ^\n/tmp/tmppe8w1fm9.swift:28:39: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n\
    \                    sub.append(current[2])\n                                \
    \      ^\n"
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var current_chars = [Character]()\n    for c in s {\n        current_chars.append(c)\n\
    \        if current_chars.count == 3 {\n            if current_chars[0] == current_chars[1]\
    \ || current_chars[0] == current_chars[2] || current_chars[1] == current_chars[2]\
    \ {\n                return false\n            }\n            current_chars.removeFirst()\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpg1vmpgch/tmpg1vmpgch.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac19bce5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac19b9dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac19b9dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac19b9db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg1vmpgch                        0x0000562629e2a5bd <unavailable> + 5565

    5    libc.so.6                          0x00002ac19bed1460 __libc_start_main +
    245

    6    tmpg1vmpgch                        0x0000562629e2a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let three_chars = s[start..<end]\n\
    \        if Set(three_chars).count != 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var target = s.count - 2\n    var index = 0\n    while target > index\
    \ {\n        let first = s[s.index(s.startIndex, offsetBy: index)]\n        let\
    \ second = s[s.index(s.startIndex, offsetBy: index + 1)]\n        let third =\
    \ s[s.index(s.startIndex, offsetBy: index + 2)]\n        if first == second ||\
    \ first == third || second == third {\n            return false\n        }\n \
    \       index += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'tmpir06fi0g/tmpir06fi0g.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9fe151c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9fde48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9fde48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9fde477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpir06fi0g                        0x000055b24b13142d <unavailable> + 5165

    5    libc.so.6                          0x00002ab9fe33d460 __libc_start_main +
    245

    6    tmpir06fi0g                        0x000055b24b1310b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let sArray = Array(s)\n\
    \    var hasil = \"\"\n    var lastChar = \"\"\n    for char in sArray {\n   \
    \     if hasil.count < 3 {\n            hasil += String(char)\n            lastChar\
    \ = String(char)\n        } else {\n            if lastChar == String(char) {\n\
    \                return false\n            } else {\n                hasil = String(char)\n\
    \                lastChar = String(char)\n            }\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpv_ugv6_0/tmpv_ugv6_0.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add204e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add201deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add201de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add201dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_ugv6_0                        0x00005594a67419cf <unavailable> + 6607

    5    libc.so.6                          0x00002add206d3460 __libc_start_main +
    245

    6    tmpv_ugv6_0                        0x00005594a6741309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    var\
    \ tmpSet = Set<Character>()\n    while i < s.count {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let char = s[index]\n        if tmpSet.contains(char)\
    \ {\n            return false\n        }\n        tmpSet.insert(char)\n      \
    \  i += 1\n        if i % 3 == 0 {\n            tmpSet.removeAll()\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpl7tz97vw/tmpl7tz97vw.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad10968c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad1065fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad1065f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad1065e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7tz97vw                        0x0000563511a4fb18 <unavailable> + 6936

    5    libc.so.6                          0x00002aad10b54460 __libc_start_main +
    245

    6    tmpl7tz97vw                        0x0000563511a4f2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013850
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && !s.isEmpty && s.count % 3 == 0 && Set(s).count\
    \ == s.count / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp0o_8v9nc/tmp0o_8v9nc.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4f4cc4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4f49bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4f49bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4f49ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0o_8v9nc                        0x00005603f922367b <unavailable> + 5755

    5    libc.so.6                          0x00002ac4f4eb0460 __libc_start_main +
    245

    6    tmp0o_8v9nc                        0x00005603f92231c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let index2\
    \ = s.index(s.startIndex, offsetBy: i+1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i+2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    // Write your code here\n    if s.count < 3 {\n        return false\n\
    \    }\n    \n    var dic = [Character: Bool]()\n    var temp = \"\"\n    for\
    \ char in s {\n        temp.append(char)\n        if temp.count == 3 {\n     \
    \       if dic[temp[0]] == nil && dic[temp[1]] == nil && dic[temp[2]] == nil {\n\
    \                dic[temp[0]] = true\n                dic[temp[1]] = true\n  \
    \              dic[temp[2]] = true\n            } else {\n                return\
    \ false\n            }\n            temp = \"\"\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzjl0z13s.swift:30:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            if dic[temp[0]]\
    \ == nil && dic[temp[1]] == nil && dic[temp[2]] == nil {\n                   ^~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzjl0z13s.swift:30:43:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if dic[temp[0]] == nil && dic[temp[1]]\
    \ == nil && dic[temp[2]] == nil {\n                                          ^~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzjl0z13s.swift:30:66:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if dic[temp[0]] == nil && dic[temp[1]]\
    \ == nil && dic[temp[2]] == nil {\n                                          \
    \                       ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpzjl0z13s.swift:31:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \                dic[temp[0]] = true\n                    ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzjl0z13s.swift:32:21:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n                dic[temp[1]] = true\n         \
    \           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpzjl0z13s.swift:33:21: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a"
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        let sub1 = s[index1]\n        let sub2 = s[index2]\n\
    \        let sub3 = s[index3]\n        if sub1 == sub2 || sub1 == sub3 || sub2\
    \ == sub3 {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let chars = s.characters\n    if chars.count < 3 {\n        return false\n\
    \    }\n    for i in 0..<chars.count-2 {\n        let first = chars[chars.index(chars.startIndex,\
    \ offsetBy: i)]\n        let second = chars[chars.index(chars.startIndex, offsetBy:\
    \ i+1)]\n        let third = chars[chars.index(chars.startIndex, offsetBy: i+2)]\n\
    \        if first == second || first == third || second == third {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw6f7vs3m.swift:19:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = s.characters\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        if let si = s.index(s.startIndex, offsetBy: i),\n            let\
    \ sii = s.index(s.startIndex, offsetBy: i+1),\n            let siii = s.index(s.startIndex,\
    \ offsetBy: i+2) {\n            if s[si] == s[sii] || s[si] == s[siii] || s[sii]\
    \ == s[siii] {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfjygv2vl.swift:21:12: error: initializer for conditional binding\
    \ must have Optional type, not 'String.Index'\n        if let si = s.index(s.startIndex,\
    \ offsetBy: i),\n           ^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfjygv2vl.swift:22:13:\
    \ error: initializer for conditional binding must have Optional type, not 'String.Index'\n\
    \            let sii = s.index(s.startIndex, offsetBy: i+1),\n            ^  \
    \       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfjygv2vl.swift:23:13: error:\
    \ initializer for conditional binding must have Optional type, not 'String.Index'\n\
    \            let siii = s.index(s.startIndex, offsetBy: i+2) {\n            ^\
    \          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var last = (s[s.startIndex],\
    \ s[s.index(after: s.startIndex)])\n    for idx in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n        let current = s[idx]\n        if current == last.0\
    \ || current == last.1 {\n            return false\n        }\n        last =\
    \ (last.1, current)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpm11oy_n5.swift:21:50: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for idx in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n                                              \
    \   ^\nSwift.Range:1:11: note: requirement from conditional conformance of 'Range<String.Index>'\
    \ to 'Sequence'\nextension Range : Sequence where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n/tmp/tmpm11oy_n5.swift:21:50: error: referencing\
    \ instance method 'makeIterator()' on 'Range' requires that 'String.Index' conform\
    \ to 'Strideable'\n    for idx in s.index(s.startIndex, offsetBy: 2)..<s.endIndex\
    \ {\n                                                 ^\nSwift.Range:1:11: note:\
    \ requirement from conditional conformance of 'Range<String.Index>' to 'Collection'\n\
    extension Range : Collection, BidirectionalCollection, RandomAccessCollection\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0:\
    \ error: referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let length = s.count\n    var i = 0\n    var character: Character\n \
    \   if length < 3 {\n        return false\n    }\n    while i < length - 2 {\n\
    \        character = s[s.index(s.startIndex, offsetBy: i)]\n        if character\
    \ == s[s.index(s.startIndex, offsetBy: i + 1)] || character == s[s.index(s.startIndex,\
    \ offsetBy: i + 2)] || s[s.index(s.startIndex, offsetBy: i + 1)] == s[s.index(s.startIndex,\
    \ offsetBy: i + 2)] {\n            return false\n        }\n        i += 1\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    for i in\
    \ 0..<s.count - 2 {\n        let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex,\
    \ offsetBy: i + 3)]\n        if Set(sub).count != 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let len = s.count\
    \ - 2\n    var last = String(s.prefix(3))\n    for _ in 0..<len {\n        let\
    \ startIndex = s.index(s.startIndex, offsetBy: 1)\n        let endIndex = s.index(s.startIndex,\
    \ offsetBy: 3)\n        let subString = String(s[startIndex..<endIndex])\n   \
    \     if subString == last {\n            return false\n        }\n        last\
    \ = subString\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpwz2rw_cx/tmpwz2rw_cx.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f01d54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f01a4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f01a4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f01a4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwz2rw_cx                        0x000056209dc6380b <unavailable> + 6155

    5    libc.so.6                          0x00002b1f01f40460 __libc_start_main +
    245

    6    tmpwz2rw_cx                        0x000056209dc63359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let arrayOfStrings\
    \ = Array(s)\n    for i in 0..<s.count-2 {\n        if arrayOfStrings[i] == arrayOfStrings[i+1]\
    \ || arrayOfStrings[i] == arrayOfStrings[i+2] || arrayOfStrings[i+1] == arrayOfStrings[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return Set(s).count == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpv5w35mq7/tmpv5w35mq7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04ca811c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04ca508b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04ca508988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04ca5077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv5w35mq7                        0x0000564c1324845d <unavailable> + 5213

    5    libc.so.6                          0x00002b04ca9fd460 __libc_start_main +
    245

    6    tmpv5w35mq7                        0x0000564c132480e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        if s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i + 1)] ||\n           s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i + 2)] ||\n           s[s.index(s.startIndex, offsetBy: i + 1)] ==\
    \ s[s.index(s.startIndex, offsetBy: i + 2)] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp7nnwle_/tmpp7nnwle_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99731afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9972ea6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9972ea6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9972ea57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7nnwle_                        0x00005562c802925d <unavailable> + 4701

    5    libc.so.6                          0x00002b997339b460 __libc_start_main +
    245

    6    tmpp7nnwle_                        0x00005562c8028ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let chars = s.map{ $0 }\n    var result = true\n    for i in 0..<chars.count-2\
    \ {\n        if chars[i] == chars[i+1] || chars[i] == chars[i+2] || chars[i+1]\
    \ == chars[i+2] {\n            result = false\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b900cbefc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b900c8e6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b900c8e6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b900c8e613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b900c8e5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp02c33_cl                        0x000055d58690ec91 <unavailable> + 7313

    6    tmp02c33_cl                        0x000055d58690e5d6 <unavailable> + 5590

    7    libc.so.6                          0x00002b900cddb460 __libc_start_main +
    245

    8    tmp02c33_cl                        0x000055d58690e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var tempArray = [Character]()\n\
    \    for i in 0..<s.count {\n        let sIndex = s.index(s.startIndex, offsetBy:\
    \ i)\n        tempArray.append(s[sIndex])\n        if tempArray.count == 3 {\n\
    \            if tempArray[0] == tempArray[1] || tempArray[0] == tempArray[2] ||\
    \ tempArray[1] == tempArray[2] {\n                return false\n            }\n\
    \            tempArray.removeAll()\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpk201haxf/tmpk201haxf.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32e539cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32e5093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32e5093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32e50927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk201haxf                        0x000055d4e7a78cf8 <unavailable> + 7416

    5    libc.so.6                          0x00002b32e5588460 __libc_start_main +
    245

    6    tmpk201haxf                        0x000055d4e7a784b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    var b = false\n\
    \    var i = 0\n    while i < s.count - 2 {\n        let first = String(s[s.index(s.startIndex,\
    \ offsetBy: i)])\n        let second = String(s[s.index(s.startIndex, offsetBy:\
    \ i + 1)])\n        let third = String(s[s.index(s.startIndex, offsetBy: i + 2)])\n\
    \        if first != second && second != third && first != third {\n         \
    \   b = true\n            break\n        }\n        i += 1\n    }\n    return\
    \ b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpzf02lqv6/tmpzf02lqv6.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add3ba26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add3b71db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add3b71d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add3b71c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzf02lqv6                        0x0000563234fa4938 <unavailable> + 6456

    5    libc.so.6                          0x00002add3bc12460 __libc_start_main +
    245

    6    tmpzf02lqv6                        0x0000563234fa40f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in s.indices\
    \ {\n        let index = s.index(i, offsetBy: 2)\n        if index > s.endIndex\
    \ {\n            break\n        }\n        let str = s[i...index]\n        let\
    \ set = Set(str)\n        if set.count < 3 {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:252: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b538fc84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b538f97b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b538f97b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b538f97b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b538f97abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b538faae455 <unavailable> + 2692181

    6    libswiftCore.so                    0x00002b538fab094e <unavailable> + 2701646

    7    libswiftCore.so                    0x00002b538f9b3770 ClosedRange.relative<A>(to:)
    + 176

    8    libswiftCore.so                    0x00002b538fa27e20 Collection.subscript.getter
    + 181

    9    tmpe8zs8y18                        0x000055b1161091d3 <unavailable> + 8659

    10   tmpe8zs8y18                        0x000055b116108a86 <unavailable> + 6790

    11   libc.so.6                          0x00002b538fe70460 __libc_start_main +
    245

    12   tmpe8zs8y18                        0x000055b116108649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let chars = Array(s)\n    if chars.count < 3 {\n        return false\n\
    \    }\n\n    for index in 0..<chars.count-2 {\n        if chars[index] == chars[index+1]\
    \ || chars[index] == chars[index+2] || chars[index+1] == chars[index+2] {\n  \
    \          return false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var s = s\n    while !s.isEmpty\
    \ {\n        guard let first = s.first, let second = s.dropFirst().first, let\
    \ third = s.dropFirst(2).first else { return true }\n        if first == second\
    \ || first == third || second == third { return false }\n        s = String(s.dropFirst(3))\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp3zl8gak2/tmp3zl8gak2.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40cd34fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40cd046b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40cd046988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40cd0457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3zl8gak2                        0x000055a695d44a28 <unavailable> + 6696

    5    libc.so.6                          0x00002b40cd53b460 __libc_start_main +
    245

    6    tmp3zl8gak2                        0x000055a695d441e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let a = Array(s)\n    if a.count < 3 {\n        return false\n    }\n\
    \    for i in 0...a.count - 3 {\n        if a[i] == a[i + 1] || a[i] == a[i +\
    \ 2] || a[i + 1] == a[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    return s.split(by: 3).filter{$0.first\
    \ == $0.last}.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi99se8jy.swift:20:14: error: no exact matches in call to instance\
    \ method 'split'\n    return s.split(by: 3).filter{$0.first == $0.last}.count\
    \ == 0\n             ^\n/tmp/tmpi99se8jy.swift:20:14: note: candidate has partially\
    \ matching parameter list (separator: String.Element, maxSplits: Int, omittingEmptySubsequences:\
    \ Bool)\n    return s.split(by: 3).filter{$0.first == $0.last}.count == 0\n  \
    \           ^\n/tmp/tmpi99se8jy.swift:20:14: note: candidate has partially matching\
    \ parameter list (maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator:\
    \ (String.Element) throws -> Bool)\n    return s.split(by: 3).filter{$0.first\
    \ == $0.last}.count == 0\n             ^\n/tmp/tmpi99se8jy.swift:20:14: note:\
    \ candidate has partially matching parameter list (maxSplits: Int, omittingEmptySubsequences:\
    \ Bool, whereSeparator: (String.Element) throws -> Bool)\n    return s.split(by:\
    \ 3).filter{$0.first == $0.last}.count == 0\n             ^\n/tmp/tmpi99se8jy.swift:20:14:\
    \ note: candidate has partially matching parameter list (separator: String.Element,\
    \ maxSplits: Int, omittingEmptySubsequences: Bool)\n    return s.split(by: 3).filter{$0.first\
    \ == $0.last}.count == 0\n             ^\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let str_len = s.count\n    if str_len < 3 {\n        return false\n \
    \   }\n    if str_len == 3 {\n        return s[0] != s[1] && s[1] != s[2] && s[0]\
    \ != s[2]\n    }\n    var current = s[0]\n    var next = s[1]\n    var nnext =\
    \ s[2]\n    for idx in 3 ..< str_len {\n        if current == next || next ==\
    \ nnext || current == nnext {\n            return false\n        }\n        current\
    \ = next\n        next = nnext\n        nnext = s[idx]\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuqc8c3ly.swift:24:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        return s[0]\
    \ != s[1] && s[1] != s[2] && s[0] != s[2]\n               ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpuqc8c3ly.swift:24:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        return s[0] != s[1] && s[1] != s[2] &&\
    \ s[0] != s[2]\n                       ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpuqc8c3ly.swift:24:32: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        return s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n               \
    \                ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpuqc8c3ly.swift:24:40: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        return\
    \ s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n                             \
    \          ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpuqc8c3ly.swift:24:48: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        return\
    \ s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n                             \
    \                  ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpuqc8c3ly.swift:24:56: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        return\
    \ s[0] != s"
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var a = 0\n    var b =\
    \ 1\n    var c = 2\n    let arr = Array(s)\n    while c < arr.count {\n      \
    \  let s = String(arr[a]) + String(arr[b]) + String(arr[c])\n        if s.count\
    \ == Set(s).count {\n            a += 1\n            b += 1\n            c +=\
    \ 1\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    var temp\
    \ = Array(s)\n    var result = true\n    while temp.count > 3 {\n        let arraySlice\
    \ = temp[0...2]\n        if arraySlice[0] == arraySlice[1] || arraySlice[0] ==\
    \ arraySlice[2] || arraySlice[1] == arraySlice[2] {\n            result = false\n\
    \            break\n        }\n        temp.removeFirst()\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp74q81n6e/tmp74q81n6e.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d2943dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d29134b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d29134988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d291337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp74q81n6e                        0x000055731914aa0f <unavailable> + 6671

    5    libc.so.6                          0x00002b3d29629460 __libc_start_main +
    245

    6    tmp74q81n6e                        0x000055731914a349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let chars = Array(s)\n\
    \    for i in 2..<chars.count {\n        if chars[i] == chars[i - 1] && chars[i]\
    \ == chars[i - 2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp___jtgr7/tmp___jtgr7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adeea4e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adeea1d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adeea1d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adeea1d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp___jtgr7                        0x0000563d46ee8881 <unavailable> + 6273

    5    libc.so.6                          0x00002adeea6ce460 __libc_start_main +
    245

    6    tmp___jtgr7                        0x0000563d46ee8329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var temp:\
    \ [Character] = []\n    for letter in s {\n        temp.append(letter)\n     \
    \   count += 1\n    }\n    if count < 3 {\n        return false\n    }\n    for\
    \ _ in temp {\n        if temp[i] == temp[j] && temp[j] == temp[k] {\n       \
    \     return false\n        }\n        if i != 0 {\n            i -= 1\n     \
    \   }\n        if j != 1 {\n            j -= 1\n        }\n        if k != 2 {\n\
    \            k -= 1\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp1er5jwq0/tmp1er5jwq0.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8946b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8943aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8943ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8943ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1er5jwq0                        0x0000564d45b787bb <unavailable> + 6075

    5    libc.so.6                          0x00002ad8948a3460 __libc_start_main +
    245

    6    tmp1er5jwq0                        0x0000564d45b78309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        let char1 = s[index1]\n        let char2 = s[index2]\n\
    \        let char3 = s[index3]\n        if char1 == char2 || char1 == char3 ||\
    \ char2 == char3 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    var isHappy\
    \ = true\n    for idx in stride(from: 0, to: s.count - 2, by: 1) {\n        let\
    \ startIndex = s.index(s.startIndex, offsetBy: idx)\n        let endIndex = s.index(s.startIndex,\
    \ offsetBy: idx + 3)\n        let subString = s[startIndex ..< endIndex]\n   \
    \     if Set(subString).count < 3 {\n            isHappy = false\n           \
    \ break\n        }\n    }\n    return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0...s.count -\
    \ 3 {\n        let first = s.index(s.startIndex, offsetBy: i)\n        let last\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[first...last]\n\
    \        if Array(Set(sub)).count < 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:252: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b858663fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8586336561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8586336286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b858633613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8586335bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8586469455 <unavailable> + 2692181

    6    libswiftCore.so                    0x00002b858646b94e <unavailable> + 2701646

    7    libswiftCore.so                    0x00002b858636e770 ClosedRange.relative<A>(to:)
    + 176

    8    libswiftCore.so                    0x00002b85863e2e20 Collection.subscript.getter
    + 181

    9    tmpuy17gwfa                        0x000055700676f0dd <unavailable> + 8413

    10   tmpuy17gwfa                        0x000055700676e986 <unavailable> + 6534

    11   libc.so.6                          0x00002b858682b460 __libc_start_main +
    245

    12   tmpuy17gwfa                        0x000055700676e549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = s.sorted()\n\
    \    return s.elementsEqual(\"abcdefghijklmnopqrstuvwxyz\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp70edcv8x/tmp70edcv8x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b379d9b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b379d6aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b379d6ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b379d6ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70edcv8x                        0x00005641415495cb <unavailable> + 5579

    5    libc.so.6                          0x00002b379dba3460 __libc_start_main +
    245

    6    tmp70edcv8x                        0x0000564141549119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var chars = Array(s)\n\
    \    for i in 0..<s.count - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let indexStart = s.index(s.startIndex, offsetBy: i)\n       \
    \ let indexEnd = s.index(s.startIndex, offsetBy: i + 3)\n        let range = indexStart..<indexEnd\n\
    \        let chars = s[range]\n        var set = Set<Character>()\n        for\
    \ char in chars {\n            set.insert(char)\n        }\n        if set.count\
    \ < 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var chars = Array(s)\n\
    \    var set = Set<Character>()\n    for i in 0...(chars.count - 3) {\n      \
    \  set.insert(chars[i])\n        set.insert(chars[i + 1])\n        set.insert(chars[i\
    \ + 2])\n        if set.count < 3 {\n            return false\n        }\n   \
    \     set.removeAll()\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n\n    var lastTwo = (s[s.startIndex],\
    \ s[s.index(after: s.startIndex)])\n    var index = s.index(s.startIndex, offsetBy:\
    \ 2)\n    while index < s.endIndex {\n        let nextChar = s[index]\n      \
    \  if lastTwo.0 == lastTwo.1 && lastTwo.1 == nextChar {\n            return false\n\
    \        }\n        lastTwo = (lastTwo.1, nextChar)\n        index = s.index(after:\
    \ index)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpc750361i/tmpc750361i.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f8a977c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f8a66eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f8a66e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f8a66d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc750361i                        0x000055d9066a6721 <unavailable> + 5921

    5    libc.so.6                          0x00002b1f8ab63460 __libc_start_main +
    245

    6    tmpc750361i                        0x000055d9066a61c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let count = s.count\n    guard count >= 3 else { return false }\n   \
    \ var prevPrev = s.index(s.startIndex, offsetBy: 0)\n    var prev = s.index(s.startIndex,\
    \ offsetBy: 1)\n    var current = s.index(s.startIndex, offsetBy: 2)\n    while\
    \ current < s.endIndex {\n        if (s[prevPrev] == s[prev]) || (s[prevPrev]\
    \ == s[current]) || (s[prev] == s[current]) {\n            return false\n    \
    \    }\n        prevPrev = prev\n        prev = current\n        current = s.index(after:\
    \ current)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var set: Set<Character> = []\n    var array = [Character]()\n    var\
    \ result = true\n    for char in s {\n        set.insert(char)\n        array.append(char)\n\
    \    }\n    if set.count < 3 {\n        return false\n    }\n    if array.count\
    \ < 3 {\n        return false\n    }\n    if array.count % 3 != 0 {\n        return\
    \ false\n    }\n    var i = 0\n    while i < array.count {\n        if array[i]\
    \ == array[i + 1] || array[i] == array[i + 2] || array[i + 1] == array[i + 2]\
    \ {\n            result = false\n            break\n        }\n        i += 3\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmptpbri32w/tmptpbri32w.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8c59c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8c56b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8c56b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8c56b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptpbri32w                        0x00005593be3488fb <unavailable> + 6395

    5    libc.so.6                          0x00002ae8c5bae460 __libc_start_main +
    245

    6    tmptpbri32w                        0x00005593be348449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let c = Array(s)\n\
    \    for i in 0...(c.count - 3) {\n        if c[i] == c[i + 1] || c[i] == c[i\
    \ + 2] || c[i + 1] == c[i + 2] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.count\n    if len < 3 {\n        return false\n    }\n  \
    \  let a = Array(s)\n    for i in 0..<len-2 {\n        if a[i] == a[i+1] || a[i]\
    \ == a[i+2] || a[i+1] == a[i+2] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    if s.count < 3 {\n        return false\n    }\n    \n    var s\
    \ = s\n    while s.count >= 3 {\n        let startIndex = s.startIndex\n     \
    \   let firstThree = s[startIndex..<s.index(startIndex, offsetBy: 3)]\n      \
    \  if Set(firstThree).count == 1 {\n            return false\n        }\n    \
    \    s.removeFirst()\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'tmpb08tpn8f/tmpb08tpn8f.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af16becfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af16bbc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af16bbc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af16bbc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb08tpn8f                        0x000055f8793808c1 <unavailable> + 6337

    5    libc.so.6                          0x00002af16c0bb460 __libc_start_main +
    245

    6    tmpb08tpn8f                        0x000055f879380369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let array = Array(s)\n\
    \    for i in 0..<s.count - 2 {\n        let str = String(array[i...i+2])\n  \
    \      if Set(str).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var letters = s.characters.map { String($0) }\n    if letters.count <\
    \ 3 {\n        return false\n    }\n    for i in 0...letters.count - 3 {\n   \
    \     if letters[i] == letters[i + 1] || letters[i] == letters[i + 2] || letters[i\
    \ + 1] == letters[i + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmps7u_i78l.swift:19:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = s.characters.map { String($0) }\n   \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmps7u_i78l.swift:19:9: warning: variable 'letters' was never mutated;\
    \ consider changing to 'let' constant\n    var letters = s.characters.map { String($0)\
    \ }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var flag = false\n    var prev_char: Character?\n    var curr_char: Character?\n\
    \    var next_char: Character?\n    let len = s.count\n    if len < 3 {\n    \
    \    return false\n    }\n    for (i, c) in s.enumerated() {\n        if i ==\
    \ 0 {\n            prev_char = c\n        } else if i == 1 {\n            curr_char\
    \ = c\n        } else if i == 2 {\n            next_char = c\n        } else {\n\
    \            prev_char = curr_char\n            curr_char = next_char\n      \
    \      next_char = c\n        }\n        if i < 2 {\n            continue\n  \
    \      }\n        if let prev = prev_char, let curr = curr_char, let next = next_char\
    \ {\n            if prev != curr && curr != next && prev != next {\n         \
    \       flag = true\n            } else {\n                flag = false\n    \
    \            break\n            }\n        }\n    }\n    return flag\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var prev1 = s.first!\n\
    \    var prev2 = s[s.index(after: s.startIndex)]\n    var current = s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    while current != s.first! {\n        if current == prev1\
    \ || current == prev2 {\n            return false\n        }\n        prev1 =\
    \ prev2\n        prev2 = current\n        current = s[s.index(after: s.index(after:\
    \ s.firstIndex(of: current)!))]\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fd1aacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fd17a3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8fd17a3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8fd17a313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8fd17a2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8fd18d6ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b8fd188f660 String.subscript.getter
    + 34

    7    tmp6tra507q                        0x00005615607cf24d <unavailable> + 8781

    8    tmp6tra507q                        0x00005615607ce756 <unavailable> + 5974

    9    libc.so.6                          0x00002b8fd1c98460 __libc_start_main +
    245

    10   tmp6tra507q                        0x00005615607ce319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var bool = true\n    if (s.count < 3) {\n        bool = false\n    }\
    \ else {\n        for i in 0...s.count-3 {\n            let firstIndex = s.index(s.startIndex,\
    \ offsetBy: i)\n            let secondIndex = s.index(s.startIndex, offsetBy:\
    \ i+1)\n            let thirdIndex = s.index(s.startIndex, offsetBy: i+2)\n  \
    \          let subString = String(s[firstIndex...thirdIndex])\n            var\
    \ set = Set<Character>()\n            for char in subString {\n              \
    \  set.insert(char)\n            }\n            if (set.count != 3) {\n      \
    \          bool = false\n            }\n        }\n    }\n    return bool\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count - 2 {\n        if (s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i + 1)]) ||\n            (s[s.index(s.startIndex, offsetBy: i)] ==\
    \ s[s.index(s.startIndex, offsetBy: i + 2)]) ||\n            (s[s.index(s.startIndex,\
    \ offsetBy: i + 1)] == s[s.index(s.startIndex, offsetBy: i + 2)]) {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = s.lowercased()\n    if s.count < 3 {\n        return false\n\
    \    }\n    var happy = true\n    for i in 0...s.count - 3 {\n        let index1\
    \ = s.index(s.startIndex, offsetBy: i)\n        let index2 = s.index(s.startIndex,\
    \ offsetBy: i + 1)\n        let index3 = s.index(s.startIndex, offsetBy: i + 2)\n\
    \        let char1 = s[index1]\n        let char2 = s[index2]\n        let char3\
    \ = s[index3]\n        if char1 == char2 || char1 == char3 || char2 == char3 {\n\
    \            happy = false\n            break\n        }\n    }\n    return happy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var checked = Set<Character>()\n    if s.count < 3 {\n        return\
    \ false\n    }\n    checked.insert(s[s.startIndex])\n    checked.insert(s[s.index(after:\
    \ s.startIndex)])\n    for i in 2..<s.count {\n        let next = s[s.index(s.startIndex,\
    \ offsetBy: i)]\n        if checked.contains(next) {\n            return false\n\
    \        }\n        checked.insert(next)\n        if i > 2 {\n            checked.remove(s[s.index(s.startIndex,\
    \ offsetBy: i - 3)])\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp59y34yc8/tmp59y34yc8.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfe65a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfe629cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfe629c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfe629b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp59y34yc8                        0x00005566fdd11b95 <unavailable> + 7061

    5    libc.so.6                          0x00002abfe6791460 __libc_start_main +
    245

    6    tmp59y34yc8                        0x00005566fdd11419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let l1 = s.index(s.startIndex, offsetBy: i)\n        let l2 = s.index(s.startIndex,\
    \ offsetBy: i+1)\n        let l3 = s.index(s.startIndex, offsetBy: i+2)\n    \
    \    if s[l1] == s[l2] || s[l1] == s[l3] || s[l2] == s[l3] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let len = s.count\n    guard len >= 3 else { return false }\n    var\
    \ a = s.lowercased()\n    for i in 0..<len-2 {\n        if a[i] == a[i+1] || a[i]\
    \ == a[i+2] || a[i+1] == a[i+2] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj9nfatv3.swift:23:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if a[i] ==\
    \ a[i+1] || a[i] == a[i+2] || a[i+1] == a[i+2] {\n           ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpj9nfatv3.swift:23:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if a[i] == a[i+1] || a[i] == a[i+2] ||\
    \ a[i+1] == a[i+2] {\n                   ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpj9nfatv3.swift:23:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if a[i] == a[i+1] || a[i] == a[i+2] || a[i+1] == a[i+2] {\n         \
    \                    ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpj9nfatv3.swift:23:38: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ a[i] == a[i+1] || a[i] == a[i+2] || a[i+1] == a[i+2] {\n                   \
    \                  ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpj9nfatv3.swift:23:48: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ a[i] == a[i+1] || a[i] == a[i+2] || a[i+1] == a[i+2] {\n                   \
    \                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpj9nfatv3.swift:23:58: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result = true\n    var currentLetter = \"\"\n    var letterHistory\
    \ = [String]()\n    for letter in s {\n        letterHistory.append(String(letter))\n\
    \        if letterHistory.count >= 3 {\n            if letterHistory[letterHistory.count\
    \ - 1] == letterHistory[letterHistory.count - 2] && letterHistory[letterHistory.count\
    \ - 2] == letterHistory[letterHistory.count - 3] {\n                result = false\n\
    \            }\n            letterHistory.removeFirst()\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmplm55cc1l/tmplm55cc1l.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba583b3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba583832b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba583832988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5838317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplm55cc1l                        0x000055ff153f960d <unavailable> + 5645

    5    libc.so.6                          0x00002ba583d27460 __libc_start_main +
    245

    6    tmplm55cc1l                        0x000055ff153f9299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count -\
    \ 2 {\n        let s = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex,\
    \ offsetBy: i + 3)]\n        if Set(s).count < 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let str = Array(s)\n    if str.count < 3 {\n        return false\n  \
    \  } else {\n        var flag = true\n        for i in 0...str.count - 3 {\n \
    \           if (str[i] == str[i + 1]) || (str[i] == str[i + 2]) || (str[i + 1]\
    \ == str[i + 2]) {\n                flag = false\n                break\n    \
    \        }\n        }\n        return flag\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var i = 0\n    while i\
    \ < s.count - 2 {\n        if s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i + 1)] ||\n            s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i + 2)] ||\n            s[s.index(s.startIndex, offsetBy: i + 1)]\
    \ == s[s.index(s.startIndex, offsetBy: i + 2)] {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  return s.characters.count >= 3 && !s.characters.dropFirst(2).contains {\
    \ s.characters.first == $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx026vrno.swift:19:12: error: 'characters' is unavailable: Please\
    \ use String directly\n  return s.characters.count >= 3 && !s.characters.dropFirst(2).contains\
    \ { s.characters.first == $0 }\n           ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpx026vrno.swift:19:40: error: 'characters'\
    \ is unavailable: Please use String directly\n  return s.characters.count >= 3\
    \ && !s.characters.dropFirst(2).contains { s.characters.first == $0 }\n      \
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpx026vrno.swift:19:77: error: 'characters' is unavailable:\
    \ Please use String directly\n  return s.characters.count >= 3 && !s.characters.dropFirst(2).contains\
    \ { s.characters.first == $0 }\n                                             \
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(Array(sub)).count != 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let c1 = s[s.index(s.startIndex, offsetBy: i)]\n        let c2\
    \ = s[s.index(s.startIndex, offsetBy: i + 1)]\n        let c3 = s[s.index(s.startIndex,\
    \ offsetBy: i + 2)]\n        if c1 == c2 || c1 == c3 || c2 == c3 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    if s.count < 3 {\n        return false\n    }\n    \n    for i\
    \ in 0...s.count - 3 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3\
    \ = s.index(s.startIndex, offsetBy: i + 2)\n        let c1 = s[index1]\n     \
    \   let c2 = s[index2]\n        let c3 = s[index3]\n        if c1 == c2 || c1\
    \ == c3 || c2 == c3 {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = s.utf8.map { Int($0) }\n    let n = s.count\n    var prev = -1\n\
    \    var prevprev = -1\n    for i in 0..<n {\n        if s[i] == prev || s[i]\
    \ == prevprev {\n            return false\n        }\n        prevprev = prev\n\
    \        prev = s[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'tmpkk1s0r9g/tmpkk1s0r9g.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25b6e80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25b6b77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25b6b77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25b6b767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkk1s0r9g                        0x00005558e1a127ad <unavailable> + 6061

    5    libc.so.6                          0x00002b25b706c460 __libc_start_main +
    245

    6    tmpkk1s0r9g                        0x00005558e1a12439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    var charArray = Array(s)\n    var j = 1\n    var subStr = charArray[0]\n\
    \    var isHappy = true\n    \n    // Make sure string is at least 3 chars\n \
    \   if s.count < 3 {\n        return false\n    }\n    \n    // Loop through string\n\
    \    while (j < s.count) {\n        \n        subStr.append(charArray[j])\n  \
    \      \n        if subStr.count == 3 {\n            \n            // If more\
    \ than 2 of the same characters, return false\n            if subStr.filter({$0\
    \ == \"a\"}).count > 1 || subStr.filter({$0 == \"b\"}).count > 1 || subStr.filter({$0\
    \ == \"c\"}).count > 1 || subStr.filter({$0 == \"d\"}).count > 1 {\n         \
    \       isHappy = false\n                break\n            }\n            \n\
    \            // reset substring to be next char\n            subStr = String(charArray[j+1])\n\
    \        }\n        \n        j += 1\n    }\n    \n    return isHappy\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp281z9sil.swift:33:16: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'append'\n        subStr.append(charArray[j])\n \
    \       ~~~~~~ ^~~~~~\n/tmp/tmp281z9sil.swift:35:19: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'count'\n        if subStr.count == 3 {\n  \
    \         ~~~~~~ ^~~~~\n/tmp/tmp281z9sil.swift:38:23: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'filter'\n            if subStr.filter({$0 ==\
    \ \"a\"}).count > 1 || subStr.filter({$0 == \"b\"}).count > 1 || subStr.filter({$0\
    \ == \"c\"}).count > 1 || subStr.filter({$0 == \"d\"}).count > 1 {\n         \
    \      ~~~~~~ ^~~~~~\n/tmp/tmp281z9sil.swift:38:63: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'filter'\n            if subStr.filter({$0 ==\
    \ \"a\"}).count > 1 || subStr.filter({$0 == \"b\"}).count > 1 || subStr.filter({$0\
    \ == \"c\"}).count > 1 || subStr.filter({$0 == \"d\"}).count > 1 {\n         \
    \                                              ~~~~~~ ^~~~~~\n/tmp/tmp281z9sil.swift:38:103:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'filter'\n\
    \            if subStr.filter({$0 == \"a\"}).count > 1 || subStr.filter({$0 ==\
    \ \"b\"}).count > 1 || subStr.filter({$0 == \"c\"}).count > 1 || subStr.filter({$0\
    \ == \"d\"}).count > 1 {\n                                                   \
    \                                            ~~~~~~ ^~~~~~\n/tmp/tmp281z9sil.swift:38:143:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'filter'\n\
    \            if subStr.filter({$0 == \"a\"}).count > 1 || subStr.filter({$0 ==\
    \ \"b\"}).count > 1 || subStr.filter({$0 == \"c\"}).count > 1 || subStr.filter({$0\
    \ == \"d\"}).count > 1 {\n                                                   \
    \                                                                            \
    \        ~~~~~~ ^~~~~~\n/tmp/tmp281z9sil.swift:44:22: error: cannot assign value\
    \ of type 'String' to type 'String.Element' (aka 'Character')\n            subStr\
    \ = String(charArray[j+1])\n                     ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var previousLetters\
    \ = s.prefix(3)\n    for currentLetter in s.dropFirst(3) {\n        if previousLetters.contains(currentLetter)\
    \ {\n            return false\n        }\n        previousLetters.removeFirst()\n\
    \        previousLetters.append(currentLetter)\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpssfajw04/tmpssfajw04.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcdb201c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcdaef8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcdaef8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcdaef77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpssfajw04                        0x0000560c2008aacf <unavailable> + 6863

    5    libc.so.6                          0x00002adcdb3ed460 __libc_start_main +
    245

    6    tmpssfajw04                        0x0000560c2008a409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var set = Set<Character>()\n\
    \    var lastChar: Character = s.first!\n    set.insert(lastChar)\n    var secondChar:\
    \ Character = s[s.index(after: s.startIndex)]\n    set.insert(secondChar)\n  \
    \  var thirdChar: Character = s[s.index(s.startIndex, offsetBy: 2)]\n    set.insert(thirdChar)\n\
    \    if set.count == 3 {\n        return true\n    }\n    for char in s.dropFirst(3)\
    \ {\n        set.remove(lastChar)\n        lastChar = secondChar\n        secondChar\
    \ = thirdChar\n        thirdChar = char\n        set.insert(thirdChar)\n     \
    \   if set.count == 3 {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpdua9x9km/tmpdua9x9km.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cfd28fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cfcf86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cfcf86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cfcf857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdua9x9km                        0x00005587df815e38 <unavailable> + 7736

    5    libc.so.6                          0x00002b7cfd47b460 __libc_start_main +
    245

    6    tmpdua9x9km                        0x00005587df8155f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let chars = s.map { String($0)\
    \ }\n    for i in 2..<chars.count {\n        if chars[i - 2] == chars[i - 1] ||\
    \ chars[i - 2] == chars[i] || chars[i - 1] == chars[i] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let array = Array(s)\n\
    \    let consecutive = zip(array, array.dropFirst(), array.dropFirst(2))\n   \
    \ return consecutive.allSatisfy { $0 != $1 && $1 != $2 && $0 != $2 }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt4u2r63b.swift:21:59: error: extra argument in call\n    let consecutive\
    \ = zip(array, array.dropFirst(), array.dropFirst(2))\n                      \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013853
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let a: [String] = Array(s)\n    if a.count < 3 {\n        return false\n\
    \    }\n    for i in 2..<a.count {\n        if a[i - 2] == a[i - 1] || a[i - 2]\
    \ == a[i] || a[i - 1] == a[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcnctleae.swift:19:29: error: missing argument label 'arrayLiteral:'\
    \ in call\n    let a: [String] = Array(s)\n                            ^\n   \
    \                         arrayLiteral: \n"
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.count >= 3 && !has_consecutive_equal_letters(s: s)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu444ux9e.swift:19:29: error: cannot find 'has_consecutive_equal_letters'\
    \ in scope\n    return s.count >= 3 && !has_consecutive_equal_letters(s: s)\n\
    \                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let s = Array(s)\n    for\
    \ i in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var s = s\n    let length = s.count\n    if length < 3 {\n        return\
    \ false\n    }\n    var array: [String] = []\n    for char in s {\n        array.append(String(char))\n\
    \    }\n    for i in 0..<length - 2 {\n        if array[i] == array[i + 1] ||\
    \ array[i] == array[i + 2] || array[i + 1] == array[i + 2] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = s.lowercased()\n    guard s.count >= 3 else { return false }\n\
    \    var chars: [Character] = Array(s)\n    var uniqueChars: Set<Character> =\
    \ Set(chars)\n    guard uniqueChars.count == chars.count else { return false }\n\
    \    return uniqueChars.count >= 3\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpyuwgm8mc/tmpyuwgm8mc.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f4076bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f40462b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f40462988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f404617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyuwgm8mc                        0x000055c88b03e9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b4f40957460 __libc_start_main +
    245

    6    tmpyuwgm8mc                        0x000055c88b03e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let length = s.count\n    var chars = Array(s)\n    if length < 3 {\n\
    \        return false\n    }\n    for i in 2..<length {\n        if chars[i -\
    \ 2] == chars[i - 1] || chars[i - 2] == chars[i] || chars[i - 1] == chars[i] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = s.trimmingCharacters(in: .whitespacesAndNewlines)\n    if s.count\
    \ < 3 {\n        return false\n    }\n    if s.count == 3 {\n        return s[s.startIndex]\
    \ != s[s.index(after: s.startIndex)] && s[s.startIndex] != s[s.index(s.startIndex,\
    \ offsetBy: 2)] && s[s.index(after: s.startIndex)] != s[s.index(s.startIndex,\
    \ offsetBy: 2)]\n    }\n    var s_array = Array(s)\n    var str = [String]()\n\
    \    while s_array.count > 3 {\n        str.append(String(s_array[0...2]))\n \
    \       s_array.remove(at: 0)\n    }\n    if str.count == 0 {\n        return\
    \ false\n    }\n    var check_array = Array(str[0])\n    for string in str {\n\
    \        var string_array = Array(string)\n        var i = 0\n        while i\
    \ < check_array.count {\n            if check_array[i] == string_array[0] || check_array[i]\
    \ == string_array[1] || check_array[i] == string_array[2] {\n                check_array.remove(at:\
    \ i)\n            } else {\n                i += 1\n            }\n        }\n\
    \    }\n    return check_array.count == 3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp0rsi8zwy.swift:19:15: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let s = s.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \            ~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp0rsi8zwy.swift:19:39: error: cannot\
    \ infer contextual base in reference to member 'whitespacesAndNewlines'\n    let\
    \ s = s.trimmingCharacters(in: .whitespacesAndNewlines)\n                    \
    \                 ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    var startIndex\
    \ = s.startIndex\n    var endIndex = s.index(startIndex, offsetBy: 3)\n    while\
    \ endIndex <= s.endIndex {\n        let substring = s[startIndex..<endIndex]\n\
    \        if Set(substring).count < 3 {\n            return false\n        }\n\
    \        startIndex = s.index(after: startIndex)\n        endIndex = s.index(after:\
    \ endIndex)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:252: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5bdb11c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5bd808561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab5bd808286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab5bd80813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab5bd807bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab5bd93b455 <unavailable> + 2692181

    6    libswiftCore.so                    0x00002ab5bd815210 String.index(after:)
    + 15

    7    tmpvv2txy7r                        0x0000563b73518f2f <unavailable> + 7983

    8    tmpvv2txy7r                        0x0000563b73518866 <unavailable> + 6246

    9    libc.so.6                          0x00002ab5bdcfd460 __libc_start_main +
    245

    10   tmpvv2txy7r                        0x0000563b73518429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let seq = s.map {\
    \ $0 }\n    for i in 0..<s.count-2 {\n        if seq[i] == seq[i+1] || seq[i]\
    \ == seq[i+2] || seq[i+1] == seq[i+2] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var start = s.startIndex\n\
    \    var end = s.index(s.startIndex, offsetBy: 2)\n    while end != s.endIndex\
    \ {\n        let sub = s[start...end]\n        if Set(sub).count < 3 {\n     \
    \       return false\n        }\n        start = s.index(start, offsetBy: 1)\n\
    \        end = s.index(end, offsetBy: 1)\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = s.map{$0}\n\
    \    for i in 0...s.count-3 {\n        if s[i] == s[i+1] || s[i] == s[i+2] ||\
    \ s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    if s.count == 3 {\n\
    \        return s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n    }\n    for i\
    \ in 0..<s.count-2 {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] ==\
    \ s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoqxe7x27.swift:23:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        return s[0]\
    \ != s[1] && s[1] != s[2] && s[0] != s[2]\n               ^~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpoqxe7x27.swift:23:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        return s[0] != s[1] && s[1] != s[2] &&\
    \ s[0] != s[2]\n                       ^~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpoqxe7x27.swift:23:32: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        return s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n               \
    \                ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpoqxe7x27.swift:23:40: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        return\
    \ s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n                             \
    \          ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpoqxe7x27.swift:23:48: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        return\
    \ s[0] != s[1] && s[1] != s[2] && s[0] != s[2]\n                             \
    \                  ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpoqxe7x27.swift:23:56: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        return\
    \ s[0] != s"
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n\n    for index in s.indices\
    \ {\n        let char1 = s[index]\n        if index + 1 >= s.endIndex {\n    \
    \        break\n        }\n        let char2 = s[s.index(after: index)]\n    \
    \    if index + 2 >= s.endIndex {\n            break\n        }\n        let char3\
    \ = s[s.index(index, offsetBy: 2)]\n        if char1 == char2 || char1 == char3\
    \ || char2 == char3 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpccg_lz2y.swift:25:18: error: binary operator '+' cannot be applied\
    \ to operands of type 'DefaultIndices<String>.Element' (aka 'String.Index') and\
    \ 'Int'\n        if index + 1 >= s.endIndex {\n           ~~~~~ ^ ~\n/tmp/tmpccg_lz2y.swift:25:18:\
    \ note: overloads for '+' exist with these partially matching parameter lists:\
    \ (Int, Int)\n        if index + 1 >= s.endIndex {\n                 ^\n/tmp/tmpccg_lz2y.swift:25:22:\
    \ error: operator function '>=' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \        if index + 1 >= s.endIndex {\n                     ^\nSwift.BinaryInteger:6:24:\
    \ note: where 'Other' = 'String.Index'\n    public static func >= <Other>(lhs:\
    \ Self, rhs: Other) -> Bool where Other : BinaryInteger\n                    \
    \   ^\n/tmp/tmpccg_lz2y.swift:29:22: error: operator function '>=' requires that\
    \ 'String.Index' conform to 'BinaryInteger'\n        if index + 2 >= s.endIndex\
    \ {\n                     ^\nSwift.BinaryInteger:6:24: note: where 'Other' = 'String.Index'\n\
    \    public static func >= <Other>(lhs: Self, rhs: Other) -> Bool where Other\
    \ : BinaryInteger\n                       ^\n/tmp/tmpccg_lz2y.swift:29:18: error:\
    \ binary operator '+' cannot be applied to operands of type 'DefaultIndices<String>.Element'\
    \ (aka 'String.Index') and 'Int'\n        if index + 2 >= s.endIndex {\n     \
    \      ~~~~~ ^ ~\n/tmp/tmpccg_lz2y.swift:29:18: note: overloads for '+' exist\
    \ with these partially matching parameter lists: (Int, Int)\n        if index\
    \ + 2 >= s.endIndex {\n                 ^\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let sLen = s.count\n    if sLen < 3 {\n        return false\n    }\n\
    \    let sArr = Array(s)\n    for i in 0...sLen-3 {\n        if sArr[i] == sArr[i+1]\
    \ || sArr[i] == sArr[i+2] || sArr[i+1] == sArr[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var count = 0\n    var\
    \ dict = [Character: Int]()\n    var lastChar: Character?\n    for char in s {\n\
    \        if let lastChar = lastChar {\n            if char == lastChar {\n   \
    \             count += 1\n            } else {\n                dict[lastChar]\
    \ = count\n                count = 1\n            }\n        } else {\n      \
    \      count += 1\n        }\n        lastChar = char\n    }\n    dict[lastChar!]\
    \ = count\n    for (_, value) in dict {\n        if value < 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'tmptb5au7ay/tmptb5au7ay.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56b88d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56b85c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56b85c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56b85c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb5au7ay                        0x0000560cb7bad81b <unavailable> + 6171

    5    libc.so.6                          0x00002b56b8abe460 __libc_start_main +
    245

    6    tmptb5au7ay                        0x0000560cb7bad369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  if s.count < 3 {\n    return false\n  }\n  for i in 0..<s.count-2 {\n \
    \   let start = s.index(s.startIndex, offsetBy: i)\n    let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n    let t = s[start..<end]\n    if t[t.startIndex] == t[t.index(t.startIndex,\
    \ offsetBy: 1)] ||\n       t[t.startIndex] == t[t.index(t.startIndex, offsetBy:\
    \ 2)] ||\n       t[t.index(t.startIndex, offsetBy: 1)] == t[t.index(t.startIndex,\
    \ offsetBy: 2)] {\n      return false\n    }\n  }\n  return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in s.indices {\n\
    \        if (i.encodedOffset < s.count - 2) && s[i] == s[s.index(after: i)] &&\
    \ s[i] == s[s.index(i, offsetBy: 2)] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp6oqamc0o/tmp6oqamc0o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af51d4dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af51d1d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af51d1d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af51d1d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6oqamc0o                        0x000055601fb5a8b1 <unavailable> + 6321

    5    libc.so.6                          0x00002af51d6c6460 __libc_start_main +
    245

    6    tmp6oqamc0o                        0x000055601fb5a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in stride(from:\
    \ s.startIndex, to: s.endIndex, by: 3) {\n        let start = s.index(i, offsetBy:\
    \ 0)\n        let end = s.index(i, offsetBy: 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        var uniqueSet = Set<Character>()\n\
    \        for c in subString {\n            uniqueSet.insert(c)\n        }\n  \
    \      if uniqueSet.count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "<unknown>:0: error: referencing instance method 'next()' on 'StrideToIterator'\
    \ requires that 'String.Index' conform to 'Strideable'\nSwift.StrideToIterator:1:11:\
    \ note: where 'Element' = 'String.Index'\nextension StrideToIterator : IteratorProtocol\
    \ {\n          ^\n"
  stdout: ''
  timestamp: 1660013851
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var letters = [Character]()\n    for letter in s {\n        letters.append(letter)\n\
    \    }\n    var happy = true\n    for index in 0..<letters.count - 2 {\n     \
    \   if letters[index] == letters[index + 1] || letters[index] == letters[index\
    \ + 2] || letters[index + 1] == letters[index + 2] {\n            happy = false\n\
    \        }\n    }\n    return happy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac11b7dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac11b4d1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac11b4d1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac11b4d113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac11b4d0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpd0otew0e                        0x000056145f27bdf8 <unavailable> + 7672

    6    tmpd0otew0e                        0x000056145f27b626 <unavailable> + 5670

    7    libc.so.6                          0x00002ac11b9c6460 __libc_start_main +
    245

    8    tmpd0otew0e                        0x000056145f27b329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp7nnwle_/tmpp7nnwle_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99731afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9972ea6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9972ea6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9972ea57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7nnwle_                        0x00005562c802925d <unavailable> + 4701

    5    libc.so.6                          0x00002b997339b460 __libc_start_main +
    245

    6    tmpp7nnwle_                        0x00005562c8028ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let sChars = s.map { String($0)\
    \ }\n    var prevString = \"\"\n    for (index, c) in sChars.enumerated() {\n\
    \        if index == 0 {\n            prevString = c\n            continue\n \
    \       }\n        if index == 1 {\n            prevString = prevString + c\n\
    \            continue\n        }\n        if index == 2 {\n            prevString\
    \ = prevString + c\n            continue\n        }\n        let nextString =\
    \ prevString.substring(from: 1) + c\n        if Set(prevString).count == 3 {\n\
    \            prevString = nextString\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp09ehl0sd.swift:35:37: error: value of type 'String' has no member\
    \ 'substring'\n        let nextString = prevString.substring(from: 1) + c\n  \
    \                       ~~~~~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var distinctCount = 0\n    for index in 0..<s.count {\n        let currentChar\
    \ = s[s.index(s.startIndex, offsetBy: index)]\n        if index > 0 {\n      \
    \      let previousChar = s[s.index(s.startIndex, offsetBy: index - 1)]\n    \
    \        if currentChar != previousChar {\n                distinctCount += 1\n\
    \            }\n        }\n    }\n    return distinctCount >= 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpglv4zghf/tmpglv4zghf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9756767c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b975645eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b975645e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b975645d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpglv4zghf                        0x0000561904faa847 <unavailable> + 6215

    5    libc.so.6                          0x00002b9756953460 __libc_start_main +
    245

    6    tmpglv4zghf                        0x0000561904faa239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var newS = \"\"\n    for char in s {\n        if newS.count == 3 { break\
    \ }\n        if newS.filter({ $0 == char }).count == 0 {\n            newS.append(char)\n\
    \        }\n    }\n    return newS.count == 3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'tmptw2d_1s_/tmptw2d_1s_.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5b633dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5b6034b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5b6034988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5b60337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptw2d_1s_                        0x000055bf8fabf9b8 <unavailable> + 6584

    5    libc.so.6                          0x00002ab5b6529460 __libc_start_main +
    245

    6    tmptw2d_1s_                        0x000055bf8fabf179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var count = 0\n    var string_length = s.count\n    let index = s.index(s.startIndex,\
    \ offsetBy: 2)\n    var substring = s[..<index]\n    while count < string_length\
    \ - 2 {\n        let current = s[s.index(s.startIndex, offsetBy: count)]\n   \
    \     let next = s[s.index(s.startIndex, offsetBy: count + 1)]\n        let following\
    \ = s[s.index(s.startIndex, offsetBy: count + 2)]\n        if current == next\
    \ && next == following {\n            return false\n        }\n        substring.append(following)\n\
    \        count += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002abcbdd74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcbda6b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abcbda6b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abcbda6b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abcbda6abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002abcbdb9eb0d <unavailable> + 2693901

    6    tmpqu7hfrq5                        0x000055c1287f8d20 <unavailable> + 7456

    7    tmpqu7hfrq5                        0x000055c1287f86d6 <unavailable> + 5846

    8    libc.so.6                          0x00002abcbdf60460 __libc_start_main +
    245

    9    tmpqu7hfrq5                        0x000055c1287f83d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var i = s.startIndex\n\
    \    while i < s.endIndex {\n        let j = s.index(i, offsetBy: 3)\n       \
    \ if j <= s.endIndex {\n            let substr = s[i..<j]\n            if Set(substr).count\
    \ != 3 {\n                return false\n            }\n        }\n        i =\
    \ s.index(after: i)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ab78b137c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab78ae2e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab78ae2e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab78ae2e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab78ae2dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ab78af61b0d <unavailable> + 2693901

    6    tmpi7gyzfou                        0x000055744a95fdb2 <unavailable> + 7602

    7    tmpi7gyzfou                        0x000055744a95f8c6 <unavailable> + 6342

    8    libc.so.6                          0x00002ab78b323460 __libc_start_main +
    245

    9    tmpi7gyzfou                        0x000055744a95f489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    for (index,\
    \ char) in s.enumerated() {\n        if index + 2 < s.count {\n            if\
    \ char == s[s.index(s.startIndex, offsetBy: index + 1)] ||\n                char\
    \ == s[s.index(s.startIndex, offsetBy: index + 2)] ||\n                s[s.index(s.startIndex,\
    \ offsetBy: index + 1)] == s[s.index(s.startIndex, offsetBy: index + 2)] {\n \
    \               return false\n            }\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for (i, _) in s.enumerated()\
    \ {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let nextIndex\
    \ = s.index(s.startIndex, offsetBy: i + 1)\n        let nextNextIndex = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        let threeLetter = s[index...nextNextIndex]\n     \
    \   if threeLetter.count == 3 {\n            let firstLetter = threeLetter[index]\n\
    \            let secondLetter = threeLetter[nextIndex]\n            let thirdLetter\
    \ = threeLetter[nextNextIndex]\n            if firstLetter == secondLetter ||\
    \ firstLetter == thirdLetter || secondLetter == thirdLetter {\n              \
    \  return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:252: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9e2ab3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9e27aa561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9e27aa286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9e27aa13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9e27a9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac9e28dd455 <unavailable> + 2692181

    6    libswiftCore.so                    0x00002ac9e28df94e <unavailable> + 2701646

    7    libswiftCore.so                    0x00002ac9e27e2770 ClosedRange.relative<A>(to:)
    + 176

    8    libswiftCore.so                    0x00002ac9e2856e20 Collection.subscript.getter
    + 181

    9    tmpgc82micf                        0x00005605c30a320e <unavailable> + 8718

    10   tmpgc82micf                        0x00005605c30a2a06 <unavailable> + 6662

    11   libc.so.6                          0x00002ac9e2c9f460 __libc_start_main +
    245

    12   tmpgc82micf                        0x00005605c30a25c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else {\n        return false\n    }\n    for index\
    \ in stride(from: 0, to: s.count - 2, by: 1) {\n        if s[s.index(s.startIndex,\
    \ offsetBy: index + 1)] == s[s.index(s.startIndex, offsetBy: index)] {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp2u3e4llt/tmp2u3e4llt.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc3764cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc37343b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc37343988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc373427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2u3e4llt                        0x000055e9aebbd97f <unavailable> + 6527

    5    libc.so.6                          0x00002acc37838460 __libc_start_main +
    245

    6    tmp2u3e4llt                        0x000055e9aebbd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  guard s.count >= 3 else { return false }\n  for i in 0..<s.count-2 {\n\
    \    let start = s.index(s.startIndex, offsetBy: i)\n    let end = s.index(s.startIndex,\
    \ offsetBy: i+3)\n    let range = start..<end\n    if Set(s[range]).count != 3\
    \ {\n      return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let sArr = Array(s)\n    if sArr.count < 3 {\n        return false\n\
    \    }\n    var length = sArr.count - 2\n    for i in 0...length {\n        if\
    \ sArr[i] == sArr[i + 1] && sArr[i] == sArr[i + 2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d088a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d0859e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7d0859e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7d0859e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7d0859dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7d0839e0a3 <unavailable> + 188579

    6    tmpb3fzz1b7                        0x000055f3e7f9ee71 <unavailable> + 7793

    7    tmpb3fzz1b7                        0x000055f3e7f9e7b4 <unavailable> + 6068

    8    libc.so.6                          0x00002b7d08a93460 __libc_start_main +
    245

    9    tmpb3fzz1b7                        0x000055f3e7f9e2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let length = s.count\n    if length < 3 {\n        return false\n   \
    \ }\n    for i in 0..<length-2 {\n        if s[s.index(s.startIndex, offsetBy:\
    \ i)] == s[s.index(s.startIndex, offsetBy: i+1)] {\n            return false\n\
    \        }\n        if s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i+2)] {\n            return false\n        }\n        if s[s.index(s.startIndex,\
    \ offsetBy: i+1)] == s[s.index(s.startIndex, offsetBy: i+2)] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var dict = [Character:\
    \ Int]()\n    for (i, char) in s.enumerated() {\n        dict[char] = i\n    \
    \    if i > 1 {\n            if dict.count < 3 {\n                return false\n\
    \            }\n            dict.removeValue(forKey: s[s.index(s.startIndex, offsetBy:\
    \ i - 2)])\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    var i = 1\n    while i < s.count - 1 {\n        if s[i] == s[i - 1] || s[i]\
    \ == s[i + 1] {\n            return false\n        }\n        i += 1\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp_vy6pxdr/tmp_vy6pxdr.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33c3e96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33c3b8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33c3b8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33c3b8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vy6pxdr                        0x000055b534f469e8 <unavailable> + 6632

    5    libc.so.6                          0x00002b33c4082460 __libc_start_main +
    245

    6    tmp_vy6pxdr                        0x000055b534f461a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var first: String\
    \ = String(s.first!)\n    var second: String = String(s[s.index(s.startIndex,\
    \ offsetBy: 1)])\n    var third: String = String(s[s.index(s.startIndex, offsetBy:\
    \ 2)])\n    if first == second || second == third || first == third {\n      \
    \  return false\n    }\n    for i in 3..<s.count {\n        first = second\n \
    \       second = third\n        third = String(s[s.index(s.startIndex, offsetBy:\
    \ i)])\n        if first == second || second == third || first == third {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let first = String(s.first!)\n\
    \    let second = String(s[s.index(s.startIndex, offsetBy: 1)])\n    let third\
    \ = String(s[s.index(s.startIndex, offsetBy: 2)])\n    if first == second || first\
    \ == third || second == third {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpzdc0jxw3/tmpzdc0jxw3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ed15dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ed12d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ed12d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ed12d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzdc0jxw3                        0x0000560a49e3daa8 <unavailable> + 6824

    5    libc.so.6                          0x00002b3ed17c6460 __libc_start_main +
    245

    6    tmpzdc0jxw3                        0x0000560a49e3d269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpan_ug8ft/tmpan_ug8ft.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50bf4dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50bf1d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50bf1d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50bf1d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan_ug8ft                        0x000055b50769f39b <unavailable> + 5019

    5    libc.so.6                          0x00002b50bf6c8460 __libc_start_main +
    245

    6    tmpan_ug8ft                        0x000055b50769eee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let s_start = s.index(s.startIndex, offsetBy: i)\n        let\
    \ s_end = s.index(s.startIndex, offsetBy: i + 3)\n        let new_str = String(s[s_start...s_end])\n\
    \        if new_str.distinct().count < 3 {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp27mdg6t9.swift:26:20: error: value of type 'String' has no member\
    \ 'distinct'\n        if new_str.distinct().count < 3 {\n           ~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var substrs = s.chunk(size: 3)\n    for var substr in substrs {\n   \
    \     if Set(substr).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp89kcgjl3.swift:19:21: error: value of type 'String' has no member\
    \ 'chunk'\n    var substrs = s.chunk(size: 3)\n                  ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    if s.count < 3 {\n        return false\n    }\n    \n    var dict:\
    \ [Character: Int] = [:]\n    \n    for c in s {\n        if let old = dict[c]\
    \ {\n            dict[c] = old + 1\n        } else {\n            dict[c] = 1\n\
    \        }\n    }\n    \n    for v in dict.values {\n        if v >= 3 {\n   \
    \         return false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp5yeorees/tmp5yeorees.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23cc9b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23cc6a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23cc6a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23cc6a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5yeorees                        0x0000563115cc8921 <unavailable> + 6433

    5    libc.so.6                          0x00002b23ccb9e460 __libc_start_main +
    245

    6    tmp5yeorees                        0x0000563115cc83c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0...s.count -\
    \ 3 {\n        let three = Array(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex,\
    \ offsetBy: i + 3)])\n        let set = Set(three)\n        if set.count != 3\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = s.map({ $0 })\n    guard s.count >= 3 else { return false }\n\
    \    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let sCount = s.count\n    if sCount < 3 {\n        return false\n   \
    \ }\n    var isHappy = true\n    var characters = Array(s)\n    for i in 0...sCount\
    \ - 3 {\n        if characters[i] == characters[i + 1] || characters[i] == characters[i\
    \ + 2] || characters[i + 1] == characters[i + 2] {\n            isHappy = false\n\
    \            break\n        }\n    }\n    return isHappy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let a = s.map({ String($0)\
    \ })\n    let b = Array(a[0..<(a.count - 2)])\n    let c = Array(a[1..<(a.count\
    \ - 1)])\n    let d = Array(a[2..<a.count])\n    let e = zip(b, c, d).map({ [$0.0,\
    \ $0.1, $0.2] })\n    for item in e {\n        if Set(item).count < 3 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmplecrzrik.swift:26:23: error: extra argument in call\n    let e\
    \ = zip(b, c, d).map({ [$0.0, $0.1, $0.2] })\n               ~~~~~~~^~\n/tmp/tmplecrzrik.swift:26:48:\
    \ error: value of tuple type '(Array<String>.Element, Array<String>.Element)'\
    \ has no member '2'\n    let e = zip(b, c, d).map({ [$0.0, $0.1, $0.2] })\n  \
    \                                          ~~ ^\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    var set1 = Set<Character>()\n    for x in s {\n        set1.insert(x)\n\
    \    }\n    if set1.count < 3 {\n        return false\n    }\n    else {\n   \
    \     var i = 0\n        while i <= s.count - 3 {\n            let start = s.index(s.startIndex,\
    \ offsetBy: i)\n            let end = s.index(s.startIndex, offsetBy: i + 3)\n\
    \            let range = start..<end\n            let temp = s[range]\n      \
    \      var set2 = Set<Character>()\n            for x in temp {\n            \
    \    set2.insert(x)\n            }\n            if set2.count < 3 {\n        \
    \        return false\n            }\n            i += 1\n        }\n        return\
    \ true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let index2\
    \ = s.index(s.startIndex, offsetBy: i+1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i+2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let c1 = s[s.index(s.startIndex, offsetBy: i)]\n        let c2\
    \ = s[s.index(s.startIndex, offsetBy: i + 1)]\n        let c3 = s[s.index(s.startIndex,\
    \ offsetBy: i + 2)]\n        if c1 == c2 || c1 == c3 || c2 == c3 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let n = s.count\n    if n < 3 {\n        return false\n    }\n    var\
    \ res = true\n    for i in 0..<n - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let dist = Set(s[start..<end])\n        if dist.count < 3 {\n          \
    \  res = false\n            break\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var result = true\n    var previousLetters = [Character]()\n    for (index,\
    \ char) in s.enumerated() {\n        if index > 1 {\n            previousLetters.append(char)\n\
    \            if previousLetters[index - 2] == previousLetters[index - 1] {\n \
    \               result = false\n                break\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp64y0f374/tmp64y0f374.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64f852bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64f8222b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64f8222988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64f82217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp64y0f374                        0x000055d06081d63d <unavailable> + 5693

    5    libc.so.6                          0x00002b64f8717460 __libc_start_main +
    245

    6    tmp64y0f374                        0x000055d06081d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    return Set(s).count ==\
    \ 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmprrtms_8b/tmprrtms_8b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22fea99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22fe790b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22fe790988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22fe78f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrtms_8b                        0x0000560f8c1f759b <unavailable> + 5531

    5    libc.so.6                          0x00002b22fec85460 __libc_start_main +
    245

    6    tmprrtms_8b                        0x0000560f8c1f70e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let s = s.map { String($0)\
    \ }\n    for i in 0...s.count - 3 {\n        if s[i] == s[i + 1] && s[i] == s[i\
    \ + 2] {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp__yw7t5m/tmp__yw7t5m.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c165b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c162acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c162ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c162ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__yw7t5m                        0x000055b0b8d758a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b2c167a1460 __libc_start_main +
    245

    6    tmp__yw7t5m                        0x000055b0b8d75349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    // The string must be longer than 3\n    guard s.count >= 3 else\
    \ {\n        return false\n    }\n    \n    // We convert the string to an array\
    \ of characters\n    var array = Array(s)\n    \n    // We will check 3 characters\
    \ at a time, so we need to know the maximum position to check\n    let maxPosition\
    \ = array.count - 2\n    \n    // For every character in the string\n    for i\
    \ in 0..<maxPosition {\n        \n        // We check if 3 consecutive characters\
    \ are the same. If so, the string is not hapswift\n        if (array[i] == array[i+1]\
    \ && array[i] == array[i+2]) {\n            return false\n        }\n    }\n \
    \   \n    // By default return true because all the previous checks passed\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp7kjei_2e/tmp7kjei_2e.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b342c800c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b342c4f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b342c4f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b342c4f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7kjei_2e                        0x000055916b97d881 <unavailable> + 6273

    5    libc.so.6                          0x00002b342c9ec460 __libc_start_main +
    245

    6    tmp7kjei_2e                        0x000055916b97d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let string = s.uppercased()\n    if string.count < 3 {\n        return\
    \ false\n    }\n    var ans = true\n    for index in stride(from: 0, to: string.count\
    \ - 2, by: 1) {\n        let start = string.index(string.startIndex, offsetBy:\
    \ index)\n        let end = string.index(string.startIndex, offsetBy: index +\
    \ 3)\n        let subString = string[start..<end]\n        if is_hap(s: String(subString))\
    \ {\n            ans = true\n        } else {\n            ans = false\n     \
    \       break\n        }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpxiislfx8.swift:28:12: error: cannot find 'is_hap' in scope\n  \
    \      if is_hap(s: String(subString)) {\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n\n    let chars = Array(s)\n\
    \    var last2 = (chars[0], chars[1])\n    for i in 2..<chars.count {\n      \
    \  if chars[i] == last2.0 || chars[i] == last2.1 {\n            return false\n\
    \        }\n        last2 = (last2.1, chars[i])\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let indexStart = s.index(s.startIndex, offsetBy: i)\n       \
    \ let indexEnd = s.index(s.startIndex, offsetBy: i + 3)\n        let range = indexStart..<indexEnd\n\
    \        let sub = s[range]\n        if let _ = Set(sub).first {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp65oyi06l/tmp65oyi06l.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec10472c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec10169b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec10169988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec101687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp65oyi06l                        0x0000560fd238e88b <unavailable> + 6283

    5    libc.so.6                          0x00002aec1065e460 __libc_start_main +
    245

    6    tmp65oyi06l                        0x0000560fd238e3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var previous = \"\"\
    \n    var previous2 = \"\"\n    for c in s {\n        let cString = String(c)\n\
    \        if previous != \"\" && previous2 != \"\" {\n            if previous ==\
    \ cString || previous2 == cString {\n                return false\n          \
    \  }\n        }\n        previous2 = previous\n        previous = cString\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    for index in 0...s.count\
    \ - 3 {\n        let leftIndex = s.index(s.startIndex, offsetBy: index)\n    \
    \    let rightIndex = s.index(s.startIndex, offsetBy: index + 2)\n        let\
    \ subString = s[leftIndex...rightIndex]\n        if Set(subString).count < 3 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let substrings = s.map\
    \ { String($0) }\n    let subsubstrings = Array(zip(substrings, substrings.dropFirst(),\
    \ substrings.dropFirst(2)))\n    return !subsubstrings.contains { $0 == $1 &&\
    \ $1 == $2 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphslmgv4z.swift:23:82: error: extra argument in call\n    let subsubstrings\
    \ = Array(zip(substrings, substrings.dropFirst(), substrings.dropFirst(2)))\n\
    \                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013854
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var arr_set: [Character] = []\n    var result: Bool = true\n    let count\
    \ = s.count\n    guard count >= 3 else { return false }\n    let characterArr\
    \ = Array(s)\n    for i in 0..<count {\n        if arr_set.count == 3 {\n    \
    \        if arr_set.contains(characterArr[i]) {\n                result = false\n\
    \                break\n            } else {\n                arr_set.removeFirst()\n\
    \                arr_set.append(characterArr[i])\n            }\n        } else\
    \ {\n            arr_set.append(characterArr[i])\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpqqtl3toz/tmpqqtl3toz.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8043c0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8043902b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8043902988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80439017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqtl3toz                        0x000055ddcea8abaf <unavailable> + 7087

    5    libc.so.6                          0x00002b8043df7460 __libc_start_main +
    245

    6    tmpqqtl3toz                        0x000055ddcea8a4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var s = s\n    while s.count\
    \ >= 3 {\n        let letterA = s.removeFirst()\n        let letterB = s.removeFirst()\n\
    \        let letterC = s.removeFirst()\n        if letterA == letterB || letterA\
    \ == letterC || letterB == letterC {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp0va3q4hi/tmp0va3q4hi.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e45850c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e45547b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e45547988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e455467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0va3q4hi                        0x00005579e7d9f8a8 <unavailable> + 6312

    5    libc.so.6                          0x00002b5e45a3c460 __libc_start_main +
    245

    6    tmp0va3q4hi                        0x00005579e7d9f069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let myStr = Array(s)\n\
    \    for i in 0..<myStr.count - 2 {\n        if (myStr[i] == myStr[i + 1]) ||\
    \ (myStr[i] == myStr[i + 2]) || (myStr[i + 1] == myStr[i + 2]) {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var list = [Character]()\n    for ch in s {\n        list.append(ch)\n\
    \    }\n    for i in 0..<list.count-2 {\n        if list[i] == list[i+1] || list[i]\
    \ == list[i+2] || list[i+1] == list[i+2] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af2a5b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2a585a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af2a585a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af2a585a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af2a5859bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpbpwokqve                        0x0000560a8fa53de1 <unavailable> + 7649

    6    tmpbpwokqve                        0x0000560a8fa53626 <unavailable> + 5670

    7    libc.so.6                          0x00002af2a5d4f460 __libc_start_main +
    245

    8    tmpbpwokqve                        0x0000560a8fa53329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var result = true\n   \
    \ for index in 0..<s.count-2 {\n        if s[index] == s[index+1] || s[index]\
    \ == s[index+2] || s[index+1] == s[index+2] {\n            result = false\n  \
    \          break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa1brbg5k.swift:22:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if s[index]\
    \ == s[index+1] || s[index] == s[index+2] || s[index+1] == s[index+2] {\n    \
    \       ^~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpa1brbg5k.swift:22:24: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ s[index] == s[index+1] || s[index] == s[index+2] || s[index+1] == s[index+2]\
    \ {\n                       ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpa1brbg5k.swift:22:38: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] == s[index+1] || s[index] == s[index+2] || s[index+1] ==\
    \ s[index+2] {\n                                     ^~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpa1brbg5k.swift:22:50:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if s[index] == s[index+1] || s[index] ==\
    \ s[index+2] || s[index+1] == s[index+2] {\n                                 \
    \                ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpa1brbg5k.swift:22:64: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if s[index] == s[index+1] || s[index] == s[index+2] || s[index+1] ==\
    \ s[index+2] {\n                                                             \
    \  ^~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked\
    \ unavailable here\n    public subscr"
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var string = s\n    if string.count < 3 {\n        return false\n   \
    \ }\n    while string.count >= 3 {\n        if string[string.startIndex] == string[string.index(after:\
    \ string.startIndex)] && string[string.startIndex] == string[string.index(string.startIndex,\
    \ offsetBy: 2)] {\n            return false\n        }\n        string.removeFirst()\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpvsxl5tv4/tmpvsxl5tv4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f914ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f911f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f911f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f911f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsxl5tv4                        0x000055e087e09741 <unavailable> + 5953

    5    libc.so.6                          0x00002b7f916eb460 __libc_start_main +
    245

    6    tmpvsxl5tv4                        0x000055e087e091e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var previous: Character?\n\
    \    var previousPrevious: Character?\n    for letter in s {\n        if previous\
    \ == letter || previousPrevious == letter {\n            return false\n      \
    \  }\n        previousPrevious = previous\n        previous = letter\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let temp = Array(s)\n    var cnt = 0\n    var ans = true\n    for (idx,\
    \ char) in temp.enumerated() {\n        if idx + 2 < temp.count {\n          \
    \  if temp[idx + 1] == char || temp[idx + 2] == char {\n                ans =\
    \ false\n                break\n            }\n        }\n    }\n    return ans\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpgyp1prcp/tmpgyp1prcp.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84bd11ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84bce15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84bce15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84bce147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgyp1prcp                        0x0000560f7de856dd <unavailable> + 5853

    5    libc.so.6                          0x00002b84bd30a460 __libc_start_main +
    245

    6    tmpgyp1prcp                        0x0000560f7de85369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let charArray = Array(s)\n    if charArray.count < 3 {\n        return\
    \ false\n    }\n    for index in 0...charArray.count - 3 {\n        if charArray[index]\
    \ == charArray[index + 1] || charArray[index] == charArray[index + 2] || charArray[index\
    \ + 1] == charArray[index + 2] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n \n    var status = false\n    var arr = Array(s)\n    var result = [Character]()\n\
    \   \n    for i in 0..<arr.count {\n    \n        if i % 3 == 0 && i + 2 < arr.count\
    \ {\n            \n            result.append(arr[i])\n            result.append(arr[i\
    \ + 1])\n            result.append(arr[i + 2])\n            \n            status\
    \ = result.count == Set(result).count\n            result.removeAll()\n      \
    \      \n            if !status {\n                return false\n            }\n\
    \            \n        }\n    }\n    \n    return status\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp2gr3b3_l/tmp2gr3b3_l.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefd3fb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefd3caab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefd3caa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefd3ca97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gr3b3_l                        0x00005652e6b77d58 <unavailable> + 7512

    5    libc.so.6                          0x00002aefd419f460 __libc_start_main +
    245

    6    tmp2gr3b3_l                        0x00005652e6b77519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  guard s.count >= 3 else { return false }\n  var result = true\n  var currentChar\
    \ = String(s.first!)\n  for char in s.dropFirst() {\n    if result {\n      if\
    \ currentChar.contains(char) {\n        result = false\n      } else {\n     \
    \   currentChar.append(char)\n        if currentChar.count == 3 {\n          currentChar\
    \ = String(char)\n        }\n      }\n    }\n  }\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmptsmxg_1d/tmptsmxg_1d.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecede99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecedb90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecedb90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecedb8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsmxg_1d                        0x00005615cd9e2c68 <unavailable> + 7272

    5    libc.so.6                          0x00002aecee085460 __libc_start_main +
    245

    6    tmptsmxg_1d                        0x00005615cd9e2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return Set(s).count >= 3 && s.count >= 3 && !s.contains((s.prefix(3)))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp2pyem7bk/tmp2pyem7bk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18ae6bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18ae3b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18ae3b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18ae3b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pyem7bk                        0x000055d31746d6db <unavailable> + 5851

    5    libc.so.6                          0x00002b18ae8a7460 __libc_start_main +
    245

    6    tmp2pyem7bk                        0x000055d31746d229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return s.isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpla3rciqv.swift:19:14: error: value of type 'String' has no member\
    \ 'isHappy'\n    return s.isHappy\n           ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var isHappy = true\n    var i = s.startIndex\n    var next = s.index(after:\
    \ i)\n    var next2 = s.index(after: next)\n    let end = s.endIndex\n    while\
    \ i != end && isHappy {\n        if next2 == end {\n            break\n      \
    \  }\n        let c1 = s[i]\n        let c2 = s[next]\n        let c3 = s[next2]\n\
    \        if c1 == c2 || c2 == c3 || c1 == c3 {\n            isHappy = false\n\
    \        }\n        i = next2\n        next = s.index(after: i)\n        next2\
    \ = s.index(after: next)\n    }\n    return isHappy\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:252: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f8185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f7e7c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b26f7e7c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b26f7e7c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b26f7e7bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b26f7faf455 <unavailable> + 2692181

    6    libswiftCore.so                    0x00002b26f7e89210 String.index(after:)
    + 15

    7    tmpmvbclgb4                        0x0000562b88b10a34 <unavailable> + 6708

    8    tmpmvbclgb4                        0x0000562b88b10406 <unavailable> + 5126

    9    libc.so.6                          0x00002b26f8371460 __libc_start_main +
    245

    10   tmpmvbclgb4                        0x0000562b88b10109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  if s.count < 3 {\n    return false\n  }\n  let chars = Array(s)\n  for\
    \ i in 0..<s.count-2 {\n    if chars[i] == chars[i+1] || chars[i] == chars[i+2]\
    \ || chars[i+1] == chars[i+2] {\n      return false\n    }\n  }\n  return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var chars = Array(s)\n    var counter = 0\n    var current = \"\"\n \
    \   for x in chars {\n        if x == current {\n            counter += 1\n  \
    \      } else {\n            current = x\n            counter = 1\n        }\n\
    \        if counter == 3 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd3055lmv.swift:23:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'String.Element' (aka 'Character') and 'String'\n      \
    \  if x == current {\n           ~ ^  ~~~~~~~\n/tmp/tmpd3055lmv.swift:23:14: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if x == current {\n             ^\n/tmp/tmpd3055lmv.swift:26:23:\
    \ error: cannot assign value of type 'String.Element' (aka 'Character') to type\
    \ 'String'\n            current = x\n                      ^\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n    while\
    \ i < s.count {\n        if i == s.count - 2 {\n            return true\n    \
    \    }\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let subString = s[start..<end]\n\
    \        let chars = Array(subString)\n        if chars[0] == chars[1] || chars[0]\
    \ == chars[2] || chars[1] == chars[2] {\n            return false\n        }\n\
    \        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  if s.count < 3 {\n    return false\n  }\n  var prev_2 = s[s.startIndex]\n\
    \  var prev_1 = s[s.index(after: s.startIndex)]\n  var current_idx = s.index(s.startIndex,\
    \ offsetBy: 2)\n  while current_idx < s.endIndex {\n    if prev_2 == prev_1 &&\
    \ prev_1 == s[current_idx] {\n      return false\n    }\n    prev_2 = prev_1\n\
    \    prev_1 = s[current_idx]\n    current_idx = s.index(after: current_idx)\n\
    \  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmps_gk2232/tmps_gk2232.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388c9d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388c6cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388c6cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388c6ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps_gk2232                        0x000055b0548ea721 <unavailable> + 5921

    5    libc.so.6                          0x00002b388cbc0460 __libc_start_main +
    245

    6    tmps_gk2232                        0x000055b0548ea1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let ns = NSString(string: s)\n    if ns.length < 3 {\n        return\
    \ false\n    }\n    var i = 0\n    while i < ns.length - 2 {\n        let sub\
    \ = ns.substring(with: NSRange(location: i, length: 3))\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4m655on9.swift:19:14: error: cannot find 'NSString' in scope\n\
    \    let ns = NSString(string: s)\n             ^~~~~~~~\n/tmp/tmp4m655on9.swift:25:38:\
    \ error: cannot find 'NSRange' in scope\n        let sub = ns.substring(with:\
    \ NSRange(location: i, length: 3))\n                                     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var characters = Array(s)\n    guard characters.count >= 3 else {\n \
    \       return false\n    }\n    for i in stride(from: 0, to: characters.count\
    \ - 2, by: 1) {\n        if characters[i] == characters[i + 1] && characters[i]\
    \ == characters[i + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp3roxjmyc/tmp3roxjmyc.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af88c9e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af88c6dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af88c6df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af88c6de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3roxjmyc                        0x00005645b4ec58c1 <unavailable> + 6337

    5    libc.so.6                          0x00002af88cbd4460 __libc_start_main +
    245

    6    tmp3roxjmyc                        0x00005645b4ec5369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    var prev2: Character?\n\
    \    var prev1: Character?\n    for character in s {\n        if character ==\
    \ prev1 {\n            return false\n        }\n        if prev2 == character\
    \ || prev1 == character {\n            return false\n        }\n        prev2\
    \ = prev1\n        prev1 = character\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let s = s.lowercased()\n    if s.count < 3 {\n        return false\n\
    \    }\n    for i in s.indices {\n        if i < s.index(s.endIndex, offsetBy:\
    \ -2) {\n            let first_3 = s[i..<s.index(i, offsetBy: 3)]\n          \
    \  if Set(first_3).count != 3 {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let arrayOfLetters = Array(s)\n\
    \    let copyOfArrayOfLetters = arrayOfLetters\n    return Set(arrayOfLetters).count\
    \ == copyOfArrayOfLetters.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpse8fp5i5/tmpse8fp5i5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e0f9b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0f6acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0f6ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0f6ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpse8fp5i5                        0x00005625e8b1b975 <unavailable> + 6517

    5    libc.so.6                          0x00002b8e0fba1460 __libc_start_main +
    245

    6    tmpse8fp5i5                        0x00005625e8b1b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count -\
    \ 2 {\n        let ix = s.index(s.startIndex, offsetBy: i)\n        let sub =\
    \ s[ix...s.index(ix, offsetBy: 2)]\n        let set = Set(sub)\n        if set.count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let arr = s.map{ String($0)\
    \ }\n    for i in 0..<arr.count-2 {\n        if arr[i] == arr[i+1] || arr[i] ==\
    \ arr[i+2] || arr[i+1] == arr[i+2] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013853
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    var last = s.first!\n\
    \    var second_last = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if last == second_last || last == s[i]\
    \ || second_last == s[i] {\n            return false\n        }\n        last\
    \ = second_last\n        second_last = s[i]\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdj29x5fw.swift:24:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpdj29x5fw.swift:24:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013852
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n  var array = Array(s)\n  var isHappy = true\n  if array.count >= 3 {\n \
    \   for i in 1...array.count-2 {\n      if array[i-1] == array[i] || array[i-1]\
    \ == array[i+1] || array[i] == array[i+1] {\n        isHappy = false\n      }\n\
    \    }\n  } else {\n    isHappy = false\n  }\n  return isHappy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013853
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    let charSet = Set(s)\n    if charSet.count < 3 {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpm5w2hnpd/tmpm5w2hnpd.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d86bdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d868d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d868d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d868d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm5w2hnpd                        0x000055576dc778d8 <unavailable> + 6360

    5    libc.so.6                          0x00002b5d86dcb460 __libc_start_main +
    245

    6    tmpm5w2hnpd                        0x000055576dc77099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013852
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    for (i, c) in s.enumerated()\
    \ {\n        if i > s.count - 3 {\n            break\n        }\n        let consecutive3:\
    \ String = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy:\
    \ i + 3)]\n        if consecutive3.map({ $0 }).sorted()[0] == consecutive3.map({\
    \ $0 }).sorted()[1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu2vzj5jk.swift:24:37: error: cannot convert value of type 'Substring'\
    \ to specified type 'String'\n        let consecutive3: String = s[s.index(s.startIndex,\
    \ offsetBy: i)..<s.index(s.startIndex, offsetBy: i + 3)]\n                   \
    \                ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                                   String(                                  \
    \                                     )\n"
  stdout: ''
  timestamp: 1660013853
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp3ns0x_w/tmpp3ns0x_w.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dd7773c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dd746ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dd746a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dd74697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3ns0x_w                        0x000055a4f71b939b <unavailable> + 5019

    5    libc.so.6                          0x00002b5dd795f460 __libc_start_main +
    245

    6    tmpp3ns0x_w                        0x000055a4f71b8ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013697
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpp7nnwle_/tmpp7nnwle_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99731afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9972ea6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9972ea6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9972ea57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp7nnwle_                        0x00005562c802925d <unavailable> + 4701

    5    libc.so.6                          0x00002b997339b460 __libc_start_main +
    245

    6    tmpp7nnwle_                        0x00005562c8028ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013851
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let arr = Array(s)\n\
    \    for i in 0..<arr.count - 2 {\n        if arr[i] == arr[i + 1] || arr[i] ==\
    \ arr[i + 2] || arr[i + 1] == arr[i + 2] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013853
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    guard s.count >= 3 else { return false }\n    let chars = s.map { String($0)\
    \ }\n    var previous: [String] = []\n    for char in chars {\n        previous.append(char)\n\
    \        if previous.count > 3 {\n            previous.removeFirst()\n       \
    \ }\n        if previous.count == 3 {\n            let _ = Set(previous)\n   \
    \         if previous.count < 3 {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp62o13q1e/tmp62o13q1e.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8164d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8161c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8161c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8161c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp62o13q1e                        0x0000558aa13829f1 <unavailable> + 6641

    5    libc.so.6                          0x00002ba8166be460 __libc_start_main +
    245

    6    tmp62o13q1e                        0x0000558aa1382499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660013853
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    \n    var flag = false\n    if s.count < 3 { return flag }\n    \n  \
    \  var set = Set<String>()\n    var index = s.startIndex\n    while index < s.endIndex\
    \ {\n        let start = s.index(index, offsetBy: 0)\n        let end = s.index(index,\
    \ offsetBy: 3)\n        let range = start..<end\n        let substring = s[range]\n\
    \        if set.contains(substring) {\n            return flag\n        } else\
    \ {\n            set.insert(substring)\n        }\n        index = s.index(index,\
    \ offsetBy: 1)\n    }\n    flag = true\n    return flag\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoekbldew.swift:30:12: error: instance method 'contains' requires\
    \ the types 'String' and 'Character' be equivalent\n        if set.contains(substring)\
    \ {\n           ^\n_StringProcessing.Collection:3:17: note: where 'Self.Element'\
    \ = 'String', 'C.Element' = 'Character'\n    public func contains<C>(_ other:\
    \ C) -> Bool where C : Collection, Self.Element == C.Element\n               \
    \ ^\n/tmp/tmpoekbldew.swift:33:24: error: cannot convert value of type 'Substring'\
    \ to expected argument type 'String'\n            set.insert(substring)\n    \
    \                   ^\n                       String(  )\n"
  stdout: ''
  timestamp: 1660013853
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var happy: Bool = true\n    let s = Array(s)\n    if s.count < 3 {\n\
    \        happy = false\n    } else {\n        for i in 0...s.count - 2 {\n   \
    \         if s[i] == s[i + 1] {\n                happy = false\n            }\n\
    \        }\n    }\n    return happy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmphyeo2xv8/tmphyeo2xv8.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6441137c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6440e2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6440e2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6440e2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphyeo2xv8                        0x000055f650a4ead8 <unavailable> + 6872

    5    libc.so.6                          0x00002b6441323460 __libc_start_main +
    245

    6    tmphyeo2xv8                        0x000055f650a4e299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013853
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let characters = Array(s)\n\
    \    var i = 1\n    while i + 2 < characters.count {\n        if characters[i\
    \ - 1] == characters[i] || characters[i] == characters[i + 1] || characters[i\
    \ + 1] == characters[i + 2] {\n            return false\n        }\n        i\
    \ += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp1f92nt1x/tmp1f92nt1x.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add92df6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add92aedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add92aed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add92aec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1f92nt1x                        0x0000564e21dbb86f <unavailable> + 6255

    5    libc.so.6                          0x00002add92fe2460 __libc_start_main +
    245

    6    tmp1f92nt1x                        0x0000564e21dbb1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013853
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    if s.count < 3 {\n        return false\n    }\n    let sArr = Array(s)\n\
    \    for index in 0..<sArr.count-2 {\n        if sArr[index] == sArr[index+1]\
    \ || sArr[index] == sArr[index+2] || sArr[index+1] == sArr[index+2] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013853
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is hapswift or not.\n/// A string is hapswift if its length is at least 3 and\
    \ every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s:\
    \ a)\n/// false\n/// >>> is_happy(s: aa)\n/// false\n/// >>> is_happy(s: abcd)\n\
    /// true\n/// >>> is_happy(s: aabb)\n/// false\n/// >>> is_happy(s: adb)\n///\
    \ true\n/// >>> is_happy(s: xyy)\n/// false\nfunc is_happy(s: String) -> Bool\
    \ {\n    var idx = s.startIndex\n    let set = CharacterSet(charactersIn: s)\n\
    \    if set.count < 3 {\n        return false\n    }\n    for _ in 0...set.count-3\
    \ {\n        let c1 = s[idx]\n        idx = s.index(after: idx)\n        let c2\
    \ = s[idx]\n        idx = s.index(after: idx)\n        let c3 = s[idx]\n     \
    \   idx = s.index(after: idx)\n        if c1 == c2 || c2 == c3 || c1 == c3 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpux2p_tdm.swift:20:15: error: cannot find 'CharacterSet' in scope\n\
    \    let set = CharacterSet(charactersIn: s)\n              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013853
