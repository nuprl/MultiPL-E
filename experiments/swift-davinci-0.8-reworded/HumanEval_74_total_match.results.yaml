language: swift
name: HumanEval_74_total_match
results:
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var str1 = \"\"\n    var str2 =\
    \ \"\"\n    for i in lst1 {\n        str1 += i\n    }\n    for i in lst2 {\n \
    \       str2 += i\n    }\n    if str1.count < str2.count {\n        return lst1\n\
    \    } else if str1.count > str2.count {\n        return lst2\n    } else {\n\
    \        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let lst1TotalChars = totalChars(lst:\
    \ lst1)\n    let lst2TotalChars = totalChars(lst: lst2)\n    if lst1TotalChars\
    \ > lst2TotalChars {\n        return lst2\n    } else {\n        return lst1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmpea2stkdh.swift:17:26: error: cannot find 'totalChars' in scope\n\
    \    let lst1TotalChars = totalChars(lst: lst1)\n                         ^~~~~~~~~~\n\
    /tmp/tmpea2stkdh.swift:18:26: error: cannot find 'totalChars' in scope\n    let\
    \ lst2TotalChars = totalChars(lst: lst2)\n                         ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // write your code here...\n  \
    \  var sum1 = 0\n    var sum2 = 0\n    for i in lst1 {\n        sum1 += i.count\n\
    \    }\n    for i in lst2 {\n        sum2 += i.count\n    }\n    if sum1 < sum2\
    \ {\n        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8jn96qj9/tmp8jn96qj9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8cf8f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8cf5f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8cf5f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8cf5ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jn96qj9                        0x00005647f09bc677 <unavailable> + 9847

    5    libc.so.6                          0x00002ab8cfae5460 __libc_start_main +
    245

    6    tmp8jn96qj9                        0x00005647f09bb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst_1 = lst1.reduce(0, {$0\
    \ + $1.count})\n    var lst_2 = lst2.reduce(0, {$0 + $1.count})\n    if lst_1\
    \ < lst_2 {\n        return lst1\n    }\n    else if lst_1 > lst_2 {\n       \
    \ return lst2\n    }\n    else {\n        return lst1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var newArr1: [String] = []\n  \
    \  var newArr2: [String] = []\n    var newArr3: [String] = []\n    var newArr4:\
    \ [String] = []\n    var sum1: Int = 0\n    var sum2: Int = 0\n    if lst1.count\
    \ == 0 {\n        return lst1\n    }\n    else if lst2.count == 0 {\n        return\
    \ lst2\n    }\n    else {\n        for i in lst1 {\n            newArr1.append(i)\n\
    \        }\n        for i in lst2 {\n            newArr2.append(i)\n        }\n\
    \        for j in newArr1 {\n            for k in j {\n                sum1 +=\
    \ 1\n            }\n        }\n        for j in newArr2 {\n            for k in\
    \ j {\n                sum2 += 1\n            }\n        }\n        if sum1 ==\
    \ sum2 {\n            return newArr1\n        }\n        else if sum1 < sum2 {\n\
    \            return newArr1\n        }\n        else {\n            return newArr2\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    if lst1.count == 0 && lst2.count == 0 {\n        return []\n    }\n    for\
    \ i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n        sum2\
    \ += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n    } else if\
    \ sum1 > sum2 {\n        return lst2\n    } else {\n        return lst1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1Count = 0\n    var lst2Count\
    \ = 0\n    for string in lst1 {\n        lst1Count += string.count\n    }\n  \
    \  for string in lst2 {\n        lst2Count += string.count\n    }\n    if lst1Count\
    \ > lst2Count {\n        return lst2\n    } else {\n        return lst1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp1m30vsmf/tmp1m30vsmf.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb98a34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb9872bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb9872b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb9872a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1m30vsmf                        0x00005603008c36ea <unavailable> + 5866

    5    libc.so.6                          0x00002aeb98c20460 __libc_start_main +
    245

    6    tmp1m30vsmf                        0x00005603008c30c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for s in lst1 {\n        total1 += s.count\n    }\n    for s in lst2\
    \ {\n        total2 += s.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpptfcf85h/tmpptfcf85h.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae94dfc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae94dcbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae94dcbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae94dcbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpptfcf85h                        0x00005617ce86c677 <unavailable> + 9847

    5    libc.so.6                          0x00002ae94e1b1460 __libc_start_main +
    245

    6    tmpptfcf85h                        0x00005617ce86b289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // your code here...\n    let total1\
    \ = lst1.reduce(0) {$0 + $1.count}\n    let total2 = lst2.reduce(0) {$0 + $1.count}\n\
    \    if total1 < total2 {\n        return lst1\n    } else if total1 > total2\
    \ {\n        return lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var firstTotal = 0\n    var secondTotal\
    \ = 0\n    for char in lst1 {\n        firstTotal += char.count\n    }\n    for\
    \ char in lst2 {\n        secondTotal += char.count\n    }\n    if firstTotal\
    \ < secondTotal {\n        return lst1\n    } else {\n        return lst2\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String],\
    \ lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\",\
    \ \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp41d2u4rq/tmp41d2u4rq.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5045f32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5045c29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5045c29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5045c287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41d2u4rq                        0x000055e2f6829677 <unavailable> + 9847

    5    libc.so.6                          0x00002b504611e460 __libc_start_main +
    245

    6    tmp41d2u4rq                        0x000055e2f6828289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var totalLen1 = 0, totalLen2 =\
    \ 0\n    for str in lst1 {\n        totalLen1 += str.count\n    }\n    for str\
    \ in lst2 {\n        totalLen2 += str.count\n    }\n    if totalLen1 < totalLen2\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp32jumuqs/tmp32jumuqs.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b5de6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b5db65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b5db65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b5db647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp32jumuqs                        0x000055857d54f677 <unavailable> + 9847

    5    libc.so.6                          0x00002b0b5e05a460 __libc_start_main +
    245

    6    tmp32jumuqs                        0x000055857d54e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for item in lst1 {\n        sum1 += item.count\n    }\n    for item in lst2\
    \ {\n        sum2 += item.count\n    }\n    if sum1 < sum2 {\n        return lst1\n\
    \    } else if sum1 > sum2 {\n        return lst2\n    } else {\n        return\
    \ lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let lst1Count = lst1.map({ $0.count\
    \ }).reduce(0, +)\n    let lst2Count = lst2.map({ $0.count }).reduce(0, +)\n \
    \   return lst1Count <= lst2Count ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for word in lst1 {\n        total1 += word.count\n    }\n    for word\
    \ in lst2 {\n        total2 += word.count\n    }\n    if total1 < total2 {\n \
    \       return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq793e9qm/tmpq793e9qm.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affae789c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affae480b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affae480988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affae47f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq793e9qm                        0x0000560c31169677 <unavailable> + 9847

    5    libc.so.6                          0x00002affae975460 __libc_start_main +
    245

    6    tmpq793e9qm                        0x0000560c31168289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1Len: Int = 0\n    var lst2Len:\
    \ Int = 0\n    lst1.forEach { (str) in\n        lst1Len += str.count\n    }\n\
    \    lst2.forEach { (str) in\n        lst2Len += str.count\n    }\n    return\
    \ lst1Len < lst2Len ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpmcbaxdn9/tmpmcbaxdn9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98e7678c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98e736fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98e736f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98e736e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcbaxdn9                        0x0000557fd8dcf567 <unavailable> + 9575

    5    libc.so.6                          0x00002b98e7864460 __libc_start_main +
    245

    6    tmpmcbaxdn9                        0x0000557fd8dce179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // Place your code here\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String],\
    \ lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\",\
    \ \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpi_qn0u22/tmpi_qn0u22.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefa08fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefa05f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefa05f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefa05f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_qn0u22                        0x000055f88d4496ea <unavailable> + 5866

    5    libc.so.6                          0x00002aefa0aea460 __libc_start_main +
    245

    6    tmpi_qn0u22                        0x000055f88d4490c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var match1 = 0\n    var match2\
    \ = 0\n    for i in lst1 {\n        match1 += i.count\n    }\n    for i in lst2\
    \ {\n        match2 += i.count\n    }\n    if match1 < match2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpthsyhjf9/tmpthsyhjf9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af833952c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af833649b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af833649988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8336487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpthsyhjf9                        0x00005605ac4fc677 <unavailable> + 9847

    5    libc.so.6                          0x00002af833b3e460 __libc_start_main +
    245

    6    tmpthsyhjf9                        0x00005605ac4fb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var totalLength1 = 0\n    var totalLength2\
    \ = 0\n    for element in lst1 {\n        totalLength1 += element.count\n    }\n\
    \    for element in lst2 {\n        totalLength2 += element.count\n    }\n   \
    \ if totalLength1 < totalLength2 {\n        return lst1\n    } else {\n      \
    \  return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp_s1ozima/tmp_s1ozima.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ea8e71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ea8b68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ea8b68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ea8b677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s1ozima                        0x0000557141a08677 <unavailable> + 9847

    5    libc.so.6                          0x00002b6ea905d460 __libc_start_main +
    245

    6    tmp_s1ozima                        0x0000557141a07289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let lst1_sum = lst1.map { $0.count\
    \ }.reduce(0, +)\n    let lst2_sum = lst2.map { $0.count }.reduce(0, +)\n    return\
    \ lst1_sum < lst2_sum ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpld7wzrej/tmpld7wzrej.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b891856fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8918266b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8918266988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89182657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpld7wzrej                        0x000055ee82798627 <unavailable> + 9767

    5    libc.so.6                          0x00002b891875b460 __libc_start_main +
    245

    6    tmpld7wzrej                        0x000055ee82797239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // your code here\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: '/tmp/tmpanyrpioy.swift:18:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar result = lst1\n\tvar count =\
    \ 0\n\tfor word in lst1 {\n\t\tcount += word.count\n\t}\n\tvar count2 = 0\n\t\
    for word in lst2 {\n\t\tcount2 += word.count\n\t}\n\tif count < count2 {\n\t\t\
    result = lst1\n\t} else if count > count2 {\n\t\tresult = lst2\n\t}\n\treturn\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 == sum2 {\n        return lst1\n  \
    \  } else if sum1 < sum2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for item in lst1 {\n        count1 += item.count\n    }\n    for item\
    \ in lst2 {\n        count2 += item.count\n    }\n    if count1 < count2 {\n \
    \       return lst1\n    } else if count1 > count2 {\n        return lst2\n  \
    \  } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for item in lst1 {\n        total1 += item.count\n    }\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total1 == total2 {\n\
    \        return lst1\n    } else if total1 < total2 {\n        return lst1\n \
    \   } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 == total2 {\n        return\
    \ lst1\n    } else if total1 < total2 {\n        return lst1\n    } else {\n \
    \       return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for string in lst1 {\n        total1 += string.count\n    }\n    for\
    \ string in lst2 {\n        total2 += string.count\n    }\n    if (total1 < total2)\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpk1_tt3ps/tmpk1_tt3ps.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77c5da3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77c5a9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77c5a9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77c5a997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk1_tt3ps                        0x000055fc4c32b677 <unavailable> + 9847

    5    libc.so.6                          0x00002b77c5f8f460 __libc_start_main +
    245

    6    tmpk1_tt3ps                        0x000055fc4c32a289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 == sum2 {\n        return lst1\n  \
    \  } else if sum1 < sum2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 < count2 {\n        return\
    \ lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp1myty_09.swift:17:12: error: cannot convert return expression of\
    \ type 'String' to return type '[String]'\n    return \"\"\n           ^~\n"
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let lst1Count = lst1.reduce(0)\
    \ { (sum, str) -> Int in\n        return sum + str.count\n    }\n    let lst2Count\
    \ = lst2.reduce(0) { (sum, str) -> Int in\n        return sum + str.count\n  \
    \  }\n    if lst1Count <= lst2Count {\n        return lst1\n    }\n    return\
    \ lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpl_6o32lf/tmpl_6o32lf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2f2924c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2f261bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2f261b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2f261a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_6o32lf                        0x0000561939886677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba2f2b10460 __libc_start_main +
    245

    6    tmpl_6o32lf                        0x0000561939885289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_char = 0\n    var lst2_char\
    \ = 0\n    for word in lst1 {\n        lst1_char += word.count\n    }\n    for\
    \ word in lst2 {\n        lst2_char += word.count\n    }\n    if lst1_char < lst2_char\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpm3zcrj0j/tmpm3zcrj0j.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3d87c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3d84bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3d84bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3d84ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm3zcrj0j                        0x00005615f0220677 <unavailable> + 9847

    5    libc.so.6                          0x00002ae3d89b0460 __libc_start_main +
    245

    6    tmpm3zcrj0j                        0x00005615f021f289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var len1 = 0\n    var len2 = 0\n\
    \    for str in lst1 {\n        len1 += str.count\n    }\n    for str in lst2\
    \ {\n        len2 += str.count\n    }\n    if len1 == len2 {\n        return lst1\n\
    \    }\n    if len1 < len2 {\n        return lst1\n    }\n    return lst2\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for s in lst1 {\n        sum1 += s.count\n    }\n    for s in lst2 {\n  \
    \      sum2 += s.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwkj_j8df/tmpwkj_j8df.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0db1e38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0db1b2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0db1b2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0db1b2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkj_j8df                        0x000055ba5e0d8677 <unavailable> + 9847

    5    libc.so.6                          0x00002b0db2024460 __libc_start_main +
    245

    6    tmpwkj_j8df                        0x000055ba5e0d7289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let lst1_total_chars = lst1.reduce(0)\
    \ { (total, str) -> Int in\n        return total + str.count\n    }\n    let lst2_total_chars\
    \ = lst2.reduce(0) { (total, str) -> Int in\n        return total + str.count\n\
    \    }\n    return lst1_total_chars < lst2_total_chars ? lst1 : lst2\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmphc_0rbmx/tmphc_0rbmx.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b7a16bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b79e62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b79e62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b79e617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc_0rbmx                        0x000055556444e577 <unavailable> + 9591

    5    libc.so.6                          0x00002b2b7a357460 __libc_start_main +
    245

    6    tmphc_0rbmx                        0x000055556444d189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for x in lst1 {\n        lst1_total += x.count\n    }\n    for x in\
    \ lst2 {\n        lst2_total += x.count\n    }\n    if lst1_total > lst2_total\
    \ {\n        return lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total_count1 = 0\n    var total_count2\
    \ = 0\n    for l1 in lst1 {\n        total_count1 += l1.count\n    }\n    for\
    \ l2 in lst2 {\n        total_count2 += l2.count\n    }\n    if total_count1 <\
    \ total_count2 {\n        return lst1\n    } else {\n        return lst2\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String],\
    \ lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\",\
    \ \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpasm5jrvu/tmpasm5jrvu.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cdb996c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cdb68db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cdb68d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cdb68c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpasm5jrvu                        0x000055ead3c39677 <unavailable> + 9847

    5    libc.so.6                          0x00002b9cdbb82460 __libc_start_main +
    245

    6    tmpasm5jrvu                        0x000055ead3c38289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var n1 = 0\n    var n2 = 0\n  \
    \  for s in lst1 {\n        n1 += s.count\n    }\n    for s in lst2 {\n      \
    \  n2 += s.count\n    }\n    if n1 == n2 {\n        return lst1\n    }\n    if\
    \ n1 < n2 {\n        return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1Total = 0\n    var lst2Total\
    \ = 0\n    for item in lst1 {\n        lst1Total += item.count\n    }\n    for\
    \ item in lst2 {\n        lst2Total += item.count\n    }\n    if lst1Total <=\
    \ lst2Total {\n        return lst1\n    } else {\n        return lst2\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  var total = 0\n  for str in lst1\
    \ {\n    total += str.count\n  }\n  var total2 = 0\n  for str in lst2 {\n    total2\
    \ += str.count\n  }\n  if total > total2 {\n    return lst2\n  }\n  return lst1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let tot1 = lst1.map({str in str.count}).reduce(0,\
    \ +)\n    let tot2 = lst2.map({str in str.count}).reduce(0, +)\n    return tot1\
    \ <= tot2 ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // your code here\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpw46eh8j5/tmpw46eh8j5.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a2ae36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a2ab2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a2ab2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a2ab2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw46eh8j5                        0x000055d9ad76c6ea <unavailable> + 5866

    5    libc.so.6                          0x00002b1a2b022460 __libc_start_main +
    245

    6    tmpw46eh8j5                        0x000055d9ad76c0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_count = 0\n    var lst2_count\
    \ = 0\n    for str in lst1 {\n        lst1_count += str.count\n    }\n    for\
    \ str in lst2 {\n        lst2_count += str.count\n    }\n    if lst1_count < lst2_count\
    \ {\n        return lst1\n    } else if lst1_count > lst2_count {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnxxf3u8h/tmpnxxf3u8h.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b732d2e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b732cfdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b732cfdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b732cfde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxxf3u8h                        0x0000559412570677 <unavailable> + 9847

    5    libc.so.6                          0x00002b732d4d4460 __libc_start_main +
    245

    6    tmpnxxf3u8h                        0x000055941256f289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var num1 = 0\n    var num2 = 0\n\
    \    for i in lst1 {\n        num1 += i.count\n    }\n    for i in lst2 {\n  \
    \      num2 += i.count\n    }\n    if num1 < num2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpvrramgiz/tmpvrramgiz.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d7c587c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d7c27eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d7c27e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d7c27d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrramgiz                        0x0000563a2761f677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3d7c773460 __libc_start_main +
    245

    6    tmpvrramgiz                        0x0000563a2761e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 > count2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tif lst1.count == 0 && lst2.count\
    \ == 0 {\n\t\treturn []\n\t} else if lst1.count == 0 {\n\t\treturn lst2\n\t} else\
    \ if lst2.count == 0 {\n\t\treturn lst1\n\t}\n\tvar count1 = 0\n\tvar count2 =\
    \ 0\n\tfor i in lst1 {\n\t\tcount1 += i.count\n\t}\n\tfor i in lst2 {\n\t\tcount2\
    \ += i.count\n\t}\n\tif count1 < count2 {\n\t\treturn lst1\n\t} else if count2\
    \ < count1 {\n\t\treturn lst2\n\t} else {\n\t\treturn lst1\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpfbj275k6/tmpfbj275k6.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad741272c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad740f69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad740f69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad740f687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfbj275k6                        0x000055c70f43183d <unavailable> + 10301

    5    libc.so.6                          0x00002ad74145e460 __libc_start_main +
    245

    6    tmpfbj275k6                        0x000055c70f4302d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for item in lst1 {\n        total1 += item.count\n    }\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total1 < total2 {\n \
    \       return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmprcubb4li/tmprcubb4li.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9914179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9913e70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9913e70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9913e6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcubb4li                        0x000055f0552c9677 <unavailable> + 9847

    5    libc.so.6                          0x00002b9914365460 __libc_start_main +
    245

    6    tmprcubb4li                        0x000055f0552c8289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for str in lst1 {\n        total1 += str.count\n    }\n    for str\
    \ in lst2 {\n        total2 += str.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpl_6o32lf/tmpl_6o32lf.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2f2924c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2f261bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2f261b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2f261a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl_6o32lf                        0x0000561939886677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba2f2b10460 __libc_start_main +
    245

    6    tmpl_6o32lf                        0x0000561939885289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total_lst1 = 0\n    var total_lst2\
    \ = 0\n    for i in lst1 {\n        total_lst1 += i.count\n    }\n    for i in\
    \ lst2 {\n        total_lst2 += i.count\n    }\n    if total_lst1 < total_lst2\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpgsnj4dr4/tmpgsnj4dr4.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1abbde9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1abbae0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1abbae0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1abbadf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsnj4dr4                        0x000055a7ae221677 <unavailable> + 9847

    5    libc.so.6                          0x00002b1abbfd5460 __libc_start_main +
    245

    6    tmpgsnj4dr4                        0x000055a7ae220289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 && lst2.count\
    \ == 0 {\n        return []\n    }\n    var a = 0\n    var b = 0\n    for i in\
    \ lst1 {\n        a += i.count\n    }\n    for i in lst2 {\n        b += i.count\n\
    \    }\n    if a == b {\n        return lst1\n    }\n    if a < b {\n        return\
    \ lst1\n    }\n    else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let sum1 = lst1.reduce(0) { $0\
    \ + $1.count }\n    let sum2 = lst2.reduce(0) { $0 + $1.count }\n    return sum1\
    \ < sum2 ? lst1 : sum1 > sum2 ? lst2 : lst1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var smaller: Int = 0\n    var total:\
    \ Int = 0\n    for item in lst1 {\n        total += item.count\n    }\n    for\
    \ item in lst2 {\n        smaller += item.count\n    }\n    if total < smaller\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpy_mkg8vq/tmpy_mkg8vq.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac13c53dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac13c234b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac13c234988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac13c2337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy_mkg8vq                        0x0000564f76e77677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac13c729460 __libc_start_main +
    245

    6    tmpy_mkg8vq                        0x0000564f76e76289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for char in lst1 {\n        count1 += char.count\n    }\n    for char\
    \ in lst2 {\n        count2 += char.count\n    }\n    if (count1 < count2) {\n\
    \        return lst1\n    } else if (count1 > count2) {\n        return lst2\n\
    \    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 == count2 {\n        return\
    \ lst1\n    } else if count1 < count2 {\n        return lst1\n    } else {\n \
    \       return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for str in lst1 {\n        count1 += str.count\n    }\n    for str\
    \ in lst2 {\n        count2 += str.count\n    }\n    if count1 == count2 {\n \
    \       return lst1\n    } else if count1 < count2 {\n        return lst1\n  \
    \  } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    var lst1_length = 0\n    var lst2_length = 0\n    for i in lst1 {\n\
    \        lst1_total += i.count\n        lst1_length += 1\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n        lst2_length += 1\n    }\n   \
    \ if lst1_total < lst2_total {\n        return lst1\n    } else if lst1_total\
    \ > lst2_total {\n        return lst2\n    } else {\n        if lst1_length <\
    \ lst2_length {\n            return lst1\n        } else {\n            return\
    \ lst2\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var str1 = lst1.reduce(\"\") {$0\
    \ + $1}\n    var str2 = lst2.reduce(\"\") {$0 + $1}\n    if str1.count < str2.count\
    \ {\n        return lst1\n    } else if str1.count > str2.count {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if total_chars(lst: lst1) < total_chars(lst:\
    \ lst2) {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp0_17bvz_.swift:17:8: error: cannot find 'total_chars' in scope\n\
    \    if total_chars(lst: lst1) < total_chars(lst: lst2) {\n       ^~~~~~~~~~~\n\
    /tmp/tmp0_17bvz_.swift:17:33: error: cannot find 'total_chars' in scope\n    if\
    \ total_chars(lst: lst1) < total_chars(lst: lst2) {\n                        \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp43nrv2m0/tmp43nrv2m0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72310d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7230dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7230dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7230dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43nrv2m0                        0x0000556b16d14677 <unavailable> + 9847

    5    libc.so.6                          0x00002b72312c3460 __libc_start_main +
    245

    6    tmp43nrv2m0                        0x0000556b16d13289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var totalChars1 = 0\n    var totalChars2\
    \ = 0\n    for word in lst1 {\n        totalChars1 += word.count\n    }\n    for\
    \ word in lst2 {\n        totalChars2 += word.count\n    }\n    if totalChars1\
    \ > totalChars2 {\n        return lst2\n    } else {\n        return lst1\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String],\
    \ lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\",\
    \ \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // write your code here.\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String],\
    \ lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\",\
    \ \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpi1970whu/tmpi1970whu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b812834dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8128044b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8128044988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81280437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1970whu                        0x0000560bc7c8b6ea <unavailable> + 5866

    5    libc.so.6                          0x00002b8128539460 __libc_start_main +
    245

    6    tmpi1970whu                        0x0000560bc7c8b0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var str1 = \"\"\n    var str2 =\
    \ \"\"\n    for word in lst1 {\n        str1 += word\n    }\n    for word in lst2\
    \ {\n        str2 += word\n    }\n    if str1.count < str2.count {\n        return\
    \ lst1\n    } else if str1.count > str2.count {\n        return lst2\n    } else\
    \ {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let lst1_total = lst1.joined().count\n\
    \    let lst2_total = lst2.joined().count\n    if lst1_total == lst2_total {\n\
    \        return lst1\n    } else if lst1_total < lst2_total {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let charCount1 = lst1.reduce(0)\
    \ { (result, string) -> Int in\n        return result + string.count\n    }\n\
    \    let charCount2 = lst2.reduce(0) { (result, string) -> Int in\n        return\
    \ result + string.count\n    }\n    return charCount1 < charCount2 ? lst1 : charCount1\
    \ > charCount2 ? lst2 : lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var num1 = 0\n    var num2 = 0\n\
    \    for str in lst1 {\n        num1 += str.count\n    }\n    for str in lst2\
    \ {\n        num2 += str.count\n    }\n    if num1 < num2 {\n        return lst1\n\
    \    } else if num1 > num2 {\n        return lst2\n    } else {\n        return\
    \ lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if (lst1.count == 0 && lst2.count\
    \ == 0) {\n        return []\n    }\n    var lst1_total = 0\n    var lst2_total\
    \ = 0\n    for i in lst1 {\n        lst1_total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_total += i.count\n    }\n    if (lst1_total > lst2_total)\
    \ {\n        return lst2\n    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 > sum2 {\n        return lst2\n   \
    \ } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 {\n        return\
    \ lst1\n    }\n    var num1 = 0\n    var num2 = 0\n    for i in lst1 {\n     \
    \   num1 += i.count\n    }\n    for i in lst2 {\n        num2 += i.count\n   \
    \ }\n    if num1 <= num2 {\n        return lst1\n    }\n    return lst2\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var list1Chars = 0\n    var list2Chars\
    \ = 0\n    for str in lst1 {\n        list1Chars += str.count\n    }\n    for\
    \ str in lst2 {\n        list2Chars += str.count\n    }\n    if list1Chars <=\
    \ list2Chars {\n        return lst1\n    } else {\n        return lst2\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // your code here\n    var count:\
    \ Int = 0\n    var array: [String] = []\n    if lst1.count > lst2.count {\n  \
    \      return lst2\n    } else if lst1.count < lst2.count {\n        return lst1\n\
    \    } else {\n        for i in lst1 {\n            for j in i {\n           \
    \     count += 1\n            }\n        }\n        var count2: Int = 0\n    \
    \    for i in lst2 {\n            for j in i {\n                count2 += 1\n\
    \            }\n        }\n        if count > count2 {\n            return lst2\n\
    \        } else if count < count2 {\n            return lst1\n        } else {\n\
    \            return lst1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp56n_340w/tmp56n_340w.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7fa515c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7fa20cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7fa20c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7fa20b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp56n_340w                        0x00005607168e747d <unavailable> + 9341

    5    libc.so.6                          0x00002ba7fa701460 __libc_start_main +
    245

    6    tmp56n_340w                        0x00005607168e6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for s in lst1 {\n        sum1 += s.count\n    }\n    for s in lst2 {\n  \
    \      sum2 += s.count\n    }\n    if sum1 == sum2 {\n        return lst1\n  \
    \  }\n    return sum1 < sum2 ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  let len1 = lst1.reduce(0) { $0 +\
    \ $1.count }\n  let len2 = lst2.reduce(0) { $0 + $1.count }\n  return len1 < len2\
    \ ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqseyudpg/tmpqseyudpg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5459dd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5459ad0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5459ad0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5459acf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqseyudpg                        0x000055689adc7577 <unavailable> + 9591

    5    libc.so.6                          0x00002b5459fc5460 __libc_start_main +
    245

    6    tmpqseyudpg                        0x000055689adc6189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for item in lst1 {\n        count1 += item.count\n    }\n    for item\
    \ in lst2 {\n        count2 += item.count\n    }\n    if count1 < count2 {\n \
    \       return lst1\n    } else if count1 > count2 {\n        return lst2\n  \
    \  } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let str1 = lst1.map { $0.count\
    \ }.reduce(0, +)\n    let str2 = lst2.map { $0.count }.reduce(0, +)\n    return\
    \ str1 < str2 ? lst1 : str1 > str2 ? lst2 : lst1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var charCountList1 = lst1.map({$0.count})\n\
    \    var charCountList2 = lst2.map({$0.count})\n    let sumList1 = charCountList1.reduce(0,\
    \ +)\n    let sumList2 = charCountList2.reduce(0, +)\n    if sumList1 < sumList2\
    \ {\n        return lst1\n    } else if sumList1 > sumList2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1 = lst1\n    var lst2 =\
    \ lst2\n    var count1 = 0\n    var count2 = 0\n    for i in lst1 {\n        count1\
    \ += i.count\n    }\n    for i in lst2 {\n        count2 += i.count\n    }\n \
    \   if count1 > count2 {\n        return lst2\n    } else if count1 < count2 {\n\
    \        return lst1\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var totalChar1 = 0\n    var totalChar2\
    \ = 0\n    for str in lst1 {\n        totalChar1 += str.count\n    }\n    for\
    \ str in lst2 {\n        totalChar2 += str.count\n    }\n    if totalChar1 < totalChar2\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpi_o2k98m/tmpi_o2k98m.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af69e5cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af69e2c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af69e2c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af69e2c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_o2k98m                        0x000055983bc02677 <unavailable> + 9847

    5    libc.so.6                          0x00002af69e7bb460 __libc_start_main +
    245

    6    tmpi_o2k98m                        0x000055983bc01289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let total_num_chars_lst1 = total_chars(arr:\
    \ lst1)\n    let total_num_chars_lst2 = total_chars(arr: lst2)\n    if total_num_chars_lst1\
    \ < total_num_chars_lst2 {\n        return lst1\n    } else if total_num_chars_lst1\
    \ > total_num_chars_lst2 {\n        return lst2\n    } else {\n        return\
    \ lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp_x2b8y7s.swift:17:32: error: cannot find 'total_chars' in scope\n\
    \    let total_num_chars_lst1 = total_chars(arr: lst1)\n                     \
    \          ^~~~~~~~~~~\n/tmp/tmp_x2b8y7s.swift:18:32: error: cannot find 'total_chars'\
    \ in scope\n    let total_num_chars_lst2 = total_chars(arr: lst2)\n          \
    \                     ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // Your code here\n    return lst1.reduce(0,\
    \ { (sum, str) -> Int in\n        return sum + str.count\n    }) < lst2.reduce(0,\
    \ { (sum, str) -> Int in\n        return sum + str.count\n    }) ? lst1 : lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp4mj7pf70/tmp4mj7pf70.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64e7ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab64e4d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab64e4d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab64e4d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4mj7pf70                        0x000055cb8ae0f577 <unavailable> + 9591

    5    libc.so.6                          0x00002ab64e9c9460 __libc_start_main +
    245

    6    tmp4mj7pf70                        0x000055cb8ae0e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let total1 = lst1.map({ $0.count\
    \ }).reduce(0, +)\n    let total2 = lst2.map({ $0.count }).reduce(0, +)\n    if\
    \ total1 < total2 {\n        return lst1\n    } else if total2 < total1 {\n  \
    \      return lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var list1charTotal = 0\n    var\
    \ list2charTotal = 0\n    if lst1.count == 0 && lst2.count == 0 {\n        return\
    \ []\n    }\n    for str in lst1 {\n        list1charTotal += str.count\n    }\n\
    \    for str in lst2 {\n        list2charTotal += str.count\n    }\n    if list1charTotal\
    \ == list2charTotal {\n        return lst1\n    }\n    if list1charTotal < list2charTotal\
    \ {\n        return lst1\n    }\n    else {\n        return lst2\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var n1 = 0\n    var n2 = 0\n  \
    \  for char in lst1 {\n        n1 += char.count\n    }\n    for char in lst2 {\n\
    \        n2 += char.count\n    }\n    if n1 > n2 {\n        return lst2\n    }\
    \ else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total = 0\n    for i in lst1\
    \ {\n        total += i.count\n    }\n    var total2 = 0\n    for i in lst2 {\n\
    \        total2 += i.count\n    }\n    if total == total2 {\n        return lst1\n\
    \    } else if total > total2 {\n        return lst2\n    } else {\n        return\
    \ lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let total1 = lst1.map{$0.count}.reduce(0,\
    \ +)\n    let total2 = lst2.map{$0.count}.reduce(0, +)\n    return total1 < total2\
    \ ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpxyenccps/tmpxyenccps.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba357fbac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba357cb1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba357cb1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba357cb07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxyenccps                        0x00005555aa53e627 <unavailable> + 9767

    5    libc.so.6                          0x00002ba3581a6460 __libc_start_main +
    245

    6    tmpxyenccps                        0x00005555aa53d239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 && lst2.count\
    \ == 0 {\n        return []\n    }\n    var lst1Count = 0\n    var lst2Count =\
    \ 0\n    for string in lst1 {\n        lst1Count += string.count\n    }\n    for\
    \ string in lst2 {\n        lst2Count += string.count\n    }\n    if lst1Count\
    \ == lst2Count {\n        return lst1\n    }\n    return lst1Count < lst2Count\
    \ ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let count1 = lst1.reduce(0) { (result,\
    \ word) -> Int in\n        return result + word.count\n    }\n    let count2 =\
    \ lst2.reduce(0) { (result, word) -> Int in\n        return result + word.count\n\
    \    }\n    return count1 <= count2 ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_sum = 0\n    var lst2_sum\
    \ = 0\n    for x in lst1 {\n        lst1_sum += x.count\n    }\n    for x in lst2\
    \ {\n        lst2_sum += x.count\n    }\n    if lst1_sum < lst2_sum {\n      \
    \  return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp590bkdl4/tmp590bkdl4.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cd0c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cd08f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cd08f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cd08f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp590bkdl4                        0x0000561363922677 <unavailable> + 9847

    5    libc.so.6                          0x00002b9cd0ded460 __libc_start_main +
    245

    6    tmp590bkdl4                        0x0000561363921289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.reduce(0, {$0 + $1.count})\
    \ > lst2.reduce(0, {$0 + $1.count}) ? lst2 : lst1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let count1 = lst1.reduce(0, {x,\
    \ y in x + y.count})\n    let count2 = lst2.reduce(0, {x, y in x + y.count})\n\
    \    return count1 < count2 ? lst1 : count1 > count2 ? lst2 : lst1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for item in lst1 {\n        total1 += item.count\n    }\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total1 < total2 {\n \
    \       return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmprcubb4li/tmprcubb4li.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9914179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9913e70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9913e70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9913e6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcubb4li                        0x000055f0552c9677 <unavailable> + 9847

    5    libc.so.6                          0x00002b9914365460 __libc_start_main +
    245

    6    tmprcubb4li                        0x000055f0552c8289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.reduce(0, {$0 + $1.count})\
    \ < lst2.reduce(0, {$0 + $1.count}) ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpq2l6962j/tmpq2l6962j.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b9c57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b994eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b994e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b994d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq2l6962j                        0x0000555abb86b577 <unavailable> + 9591

    5    libc.so.6                          0x00002b74b9e43460 __libc_start_main +
    245

    6    tmpq2l6962j                        0x0000555abb86a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst_1 = lst1\n    var lst_2\
    \ = lst2\n    var length1 = 0\n    var length2 = 0\n    if lst_1.count == 0 ||\
    \ lst_2.count == 0 {\n        return []\n    }\n    for i in lst_1 {\n       \
    \ length1 += i.count\n    }\n    for i in lst_2 {\n        length2 += i.count\n\
    \    }\n    if length1 < length2 {\n        return lst_1\n    } else if length1\
    \ > length2 {\n        return lst_2\n    } else {\n        return lst_1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var len1 = 0, len2 = 0\n    for\
    \ i in lst1 {\n        len1 += i.count\n    }\n    for i in lst2 {\n        len2\
    \ += i.count\n    }\n    if len1 == len2 {\n        return lst1\n    }\n    return\
    \ len1 < len2 ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 == count2 {\n        return\
    \ lst1\n    } else if count1 < count2 {\n        return lst1\n    } else {\n \
    \       return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_count = 0\n    var lst2_count\
    \ = 0\n    for i in lst1 {\n        lst1_count += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_count += i.count\n    }\n    if lst1_count == lst2_count\
    \ {\n        return lst1\n    } else if lst1_count < lst2_count {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var totalCharsInLst1 = 0\n    var\
    \ totalCharsInLst2 = 0\n    for item in lst1 {\n        totalCharsInLst1 += item.count\n\
    \    }\n    for item in lst2 {\n        totalCharsInLst2 += item.count\n    }\n\
    \    if totalCharsInLst1 < totalCharsInLst2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmptdl3y21j/tmptdl3y21j.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8432adfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84327d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84327d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84327d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptdl3y21j                        0x0000561fe818e677 <unavailable> + 9847

    5    libc.so.6                          0x00002b8432ccb460 __libc_start_main +
    245

    6    tmptdl3y21j                        0x0000561fe818d289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp43nrv2m0/tmp43nrv2m0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72310d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7230dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7230dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7230dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43nrv2m0                        0x0000556b16d14677 <unavailable> + 9847

    5    libc.so.6                          0x00002b72312c3460 __libc_start_main +
    245

    6    tmp43nrv2m0                        0x0000556b16d13289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum: Int = 0\n    for s in\
    \ lst1 {\n        sum += s.count\n    }\n    var sum2: Int = 0\n    for s in lst2\
    \ {\n        sum2 += s.count\n    }\n    if sum > sum2 {\n        return lst2\n\
    \    }\n    return lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for word in lst1 {\n        count1 += word.count\n    }\n    for word\
    \ in lst2 {\n        count2 += word.count\n    }\n    if count1 < count2 {\n \
    \       return lst1\n    } else if count1 > count2 {\n        return lst2\n  \
    \  } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  let res1 = lst1.reduce(0) { acc,\
    \ cur in acc + cur.count }\n  let res2 = lst2.reduce(0) { acc, cur in acc + cur.count\
    \ }\n  return res1 < res2 ? lst1 : res1 > res2 ? lst2 : lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 && lst2.count\
    \ == 0 {\n        return []\n    } else if lst1.count <= lst2.count {\n      \
    \  return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpadg4jb3g/tmpadg4jb3g.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b294ce8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b294cb84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b294cb84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b294cb837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadg4jb3g                        0x000055bf9949074a <unavailable> + 5962

    5    libc.so.6                          0x00002b294d079460 __libc_start_main +
    245

    6    tmpadg4jb3g                        0x000055bf99490129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let lst1Total = lst1.reduce(0)\
    \ { (result, value) -> Int in\n        return result + value.count\n    }\n  \
    \  let lst2Total = lst2.reduce(0) { (result, value) -> Int in\n        return\
    \ result + value.count\n    }\n    if lst1Total < lst2Total {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpf6pm2h3v/tmpf6pm2h3v.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9aaa373c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aaa06ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9aaa06a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9aaa0697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf6pm2h3v                        0x00005592082c2577 <unavailable> + 9591

    5    libc.so.6                          0x00002b9aaa55f460 __libc_start_main +
    245

    6    tmpf6pm2h3v                        0x00005592082c1189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr1Count = 0\n    var arr2Count\
    \ = 0\n    for i in lst1 {\n        arr1Count += i.count\n    }\n    for j in\
    \ lst2 {\n        arr2Count += j.count\n    }\n    if arr1Count < arr2Count {\n\
    \        return lst1\n    } else if arr1Count > arr2Count {\n        return lst2\n\
    \    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // your code here\n    return lst1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpeok424yu/tmpeok424yu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7aa0b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7a9dabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7a9dab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7a9daa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeok424yu                        0x000055d2a80146ea <unavailable> + 5866

    5    libc.so.6                          0x00002ae7aa2a0460 __libc_start_main +
    245

    6    tmpeok424yu                        0x000055d2a80140c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var t1 = 0\n    var t2 = 0\n  \
    \  var arr1 = lst1\n    var arr2 = lst2\n    for i in 0..<arr1.count {\n     \
    \   t1 += arr1[i].count\n    }\n    for i in 0..<arr2.count {\n        t2 += arr2[i].count\n\
    \    }\n    if t1 <= t2 {\n        return arr1\n    } else {\n        return arr2\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = []\n   \
    \ var total1: Int = 0\n    var total2: Int = 0\n    for i in lst1 {\n        total1\
    \ += i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n    }\n \
    \   if total1 > total2 {\n        result = lst2\n    } else if total1 < total2\
    \ {\n        result = lst1\n    } else {\n        result = lst1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var str1 = 0\n    var str2 = 0\n\
    \    for i in lst1 {\n        str1 += i.count\n    }\n    for i in lst2 {\n  \
    \      str2 += i.count\n    }\n    if str1 == str2 {\n        return lst1\n  \
    \  } else if str1 < str2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var len1 = 0\n    var len2 = 0\n\
    \    lst1.forEach { (str) in\n        len1 += str.count\n    }\n    lst2.forEach\
    \ { (str) in\n        len2 += str.count\n    }\n    return len1 < len2 ? lst1\
    \ : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpazpzf8lx/tmpazpzf8lx.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b039caf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b039c7eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b039c7ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b039c7e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazpzf8lx                        0x00005586b6202567 <unavailable> + 9575

    5    libc.so.6                          0x00002b039ccdf460 __libc_start_main +
    245

    6    tmpazpzf8lx                        0x00005586b6201179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 > count2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1.count < lst2.count\
    \ ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpoi5aqcao/tmpoi5aqcao.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17840edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1783de4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1783de4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1783de37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoi5aqcao                        0x000055e3eb2c925d <unavailable> + 8797

    5    libc.so.6                          0x00002b17842d9460 __libc_start_main +
    245

    6    tmpoi5aqcao                        0x000055e3eb2c8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total_size_lst1 = 0\n    var\
    \ total_size_lst2 = 0\n    for word in lst1 {\n        total_size_lst1 += word.count\n\
    \    }\n    for word in lst2 {\n        total_size_lst2 += word.count\n    }\n\
    \    if total_size_lst1 > total_size_lst2 {\n        return lst2\n    } else {\n\
    \        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total = 0\n    for item in\
    \ lst1 {\n        total += item.count\n    }\n    var total2 = 0\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpootku_su/tmpootku_su.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2420d2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2420a24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2420a24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2420a237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpootku_su                        0x000056492a20b677 <unavailable> + 9847

    5    libc.so.6                          0x00002b2420f19460 __libc_start_main +
    245

    6    tmpootku_su                        0x000056492a20a289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\t// sum up lengths of strings in lst1\n\
    \tvar total1 = 0\n\tfor str in lst1 {\n\t\ttotal1 += str.count\n\t}\n\t// sum\
    \ up lengths of strings in lst2\n\tvar total2 = 0\n\tfor str in lst2 {\n\t\ttotal2\
    \ += str.count\n\t}\n\t// return the list with the lesser total\n\tif total1 <\
    \ total2 {\n\t\treturn lst1\n\t} else {\n\t\treturn lst2\n\t}\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpf9rwvhdy/tmpf9rwvhdy.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15b8224c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15b7f1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15b7f1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15b7f1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9rwvhdy                        0x0000556fa33d4677 <unavailable> + 9847

    5    libc.so.6                          0x00002b15b8410460 __libc_start_main +
    245

    6    tmpf9rwvhdy                        0x0000556fa33d3289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1TotalLength = 0\n    var\
    \ lst2TotalLength = 0\n    for i in lst1 {\n        lst1TotalLength += i.characters.count\n\
    \    }\n    for i in lst2 {\n        lst2TotalLength += i.characters.count\n \
    \   }\n    if lst1TotalLength < lst2TotalLength {\n        return lst1\n    }\
    \ else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp7hewbsey.swift:20:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        lst1TotalLength += i.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp7hewbsey.swift:23:30: error: 'characters' is unavailable: Please\
    \ use String directly\n        lst2TotalLength += i.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar sum1 = 0\n\tvar sum2 = 0\n\t\
    for a in lst1 {\n\t\tsum1 += a.count\n\t}\n\tfor b in lst2 {\n\t\tsum2 += b.count\n\
    \t}\n\tif sum1 < sum2 {\n\t\treturn lst1\n\t} else if sum1 > sum2 {\n\t\treturn\
    \ lst2\n\t} else {\n\t\treturn lst1\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if total_chars(lst: lst1) < total_chars(lst:\
    \ lst2) {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp0_17bvz_.swift:17:8: error: cannot find 'total_chars' in scope\n\
    \    if total_chars(lst: lst1) < total_chars(lst: lst2) {\n       ^~~~~~~~~~~\n\
    /tmp/tmp0_17bvz_.swift:17:33: error: cannot find 'total_chars' in scope\n    if\
    \ total_chars(lst: lst1) < total_chars(lst: lst2) {\n                        \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total = 0\n    for str in lst1\
    \ {\n        total += str.count\n    }\n    var total2 = 0\n    for str in lst2\
    \ {\n        total2 += str.count\n    }\n    if total == total2 {\n        return\
    \ lst1\n    }\n    if total < total2 {\n        return lst1\n    }\n    return\
    \ lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for str in lst1 {\n        sum1 += str.count\n    }\n    for str in lst2\
    \ {\n        sum2 += str.count\n    }\n    if sum1 <= sum2 {\n        return lst1\n\
    \    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let count1 = lst1.map { $0.count\
    \ }.reduce(0, +)\n    let count2 = lst2.map { $0.count }.reduce(0, +)\n    if\
    \ count1 == count2 {\n        return lst1\n    }\n    if count1 < count2 {\n \
    \       return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var match1 = 0\n    var match2\
    \ = 0\n    for char in lst1 {\n        match1 += char.count\n    }\n    for char\
    \ in lst2 {\n        match2 += char.count\n    }\n    if match1 == match2 {\n\
    \        return lst1\n    } else if match1 < match2 {\n        return lst1\n \
    \   } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let len1 = lst1.reduce(0) { $0\
    \ + $1.count }\n    let len2 = lst2.reduce(0) { $0 + $1.count }\n    return len1\
    \ < len2 ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpyb9_37c_/tmpyb9_37c_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc5fb98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc5f88fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc5f88f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc5f88e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyb9_37c_                        0x000055edd4d77577 <unavailable> + 9591

    5    libc.so.6                          0x00002acc5fd84460 __libc_start_main +
    245

    6    tmpyb9_37c_                        0x000055edd4d76189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return [String]()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp9vo3n8al/tmp9vo3n8al.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88e49a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88e46a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88e46a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88e469f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9vo3n8al                        0x000055c14eeca73a <unavailable> + 5946

    5    libc.so.6                          0x00002b88e4b95460 __libc_start_main +
    245

    6    tmp9vo3n8al                        0x000055c14eeca119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for item in lst1 {\n        total1 += item.count\n    }\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total1 < total2 {\n \
    \       return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmprcubb4li/tmprcubb4li.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9914179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9913e70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9913e70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9913e6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcubb4li                        0x000055f0552c9677 <unavailable> + 9847

    5    libc.so.6                          0x00002b9914365460 __libc_start_main +
    245

    6    tmprcubb4li                        0x000055f0552c8289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var firstList: [String] = lst1\n\
    \    var secondList: [String] = lst2\n    var firstTotal = 0\n    var secondTotal\
    \ = 0\n    var totalMatch: [String] = []\n    if firstList.count == 0 && secondList.count\
    \ == 0 {\n        return totalMatch\n    }\n    if firstList.count == 0 {\n  \
    \      return secondList\n    }\n    if secondList.count == 0 {\n        return\
    \ firstList\n    }\n    for i in 0...firstList.count - 1 {\n        firstTotal\
    \ += firstList[i].count\n    }\n    for i in 0...secondList.count - 1 {\n    \
    \    secondTotal += secondList[i].count\n    }\n    if firstTotal < secondTotal\
    \ {\n        return firstList\n    }\n    if secondTotal < firstTotal {\n    \
    \    return secondList\n    }\n    if firstTotal == secondTotal {\n        return\
    \ firstList\n    }\n    return totalMatch\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7jnmufb8/tmp7jnmufb8.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d6b8abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d6b5a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d6b5a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d6b5a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7jnmufb8                        0x000055f8dfcff8ad <unavailable> + 10413

    5    libc.so.6                          0x00002b2d6ba97460 __libc_start_main +
    245

    6    tmp7jnmufb8                        0x000055f8dfcfe349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for str in lst1 {\n        sum1 += str.count\n    }\n    for str in lst2\
    \ {\n        sum2 += str.count\n    }\n    if sum1 < sum2 {\n        return lst1\n\
    \    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpj52ou8z3/tmpj52ou8z3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b545e492c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b545e189b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b545e189988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b545e1887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj52ou8z3                        0x000055d32278e677 <unavailable> + 9847

    5    libc.so.6                          0x00002b545e67e460 __libc_start_main +
    245

    6    tmpj52ou8z3                        0x000055d32278d289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total = 0\n    for item in\
    \ lst1 {\n        total += item.count\n    }\n    var total2 = 0\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total > total2 {\n  \
    \      return lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_total_char = 0\n    var\
    \ lst2_total_char = 0\n    for item in lst1 {\n        lst1_total_char += item.count\n\
    \    }\n    for item in lst2 {\n        lst2_total_char += item.count\n    }\n\
    \    if lst1_total_char < lst2_total_char {\n        return lst1\n    } else {\n\
    \        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpsethdxkd/tmpsethdxkd.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37437b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37434acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37434ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37434ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsethdxkd                        0x0000562eb10d3677 <unavailable> + 9847

    5    libc.so.6                          0x00002b37439a1460 __libc_start_main +
    245

    6    tmpsethdxkd                        0x0000562eb10d2289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar total1 = 0\n\tvar total2 = 0\n\
    \tfor x in lst1 {\n\t\ttotal1 += x.count\n\t}\n\tfor x in lst2 {\n\t\ttotal2 +=\
    \ x.count\n\t}\n\tif total1 < total2 {\n\t\treturn lst1\n\t} else {\n\t\treturn\
    \ lst2\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpfsanphk3/tmpfsanphk3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b43e76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b43b6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b43b6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b43b6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfsanphk3                        0x000055d15bd30677 <unavailable> + 9847

    5    libc.so.6                          0x00002b5b44062460 __libc_start_main +
    245

    6    tmpfsanphk3                        0x000055d15bd2f289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return total_match(lst1: lst1,\
    \ lst2: lst2, count1: 0, count2: 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmplz_bj0kf.swift:17:23: error: extra arguments at positions #3, #4\
    \ in call\n    return total_match(lst1: lst1, lst2: lst2, count1: 0, count2: 0)\n\
    \                      ^\n/tmp/tmplz_bj0kf.swift:16:6: note: 'total_match(lst1:lst2:)'\
    \ declared here\nfunc total_match(lst1: [String], lst2: [String]) -> [String]\
    \ {\n     ^\n"
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result = [String]()\n    var\
    \ charCount1 = 0\n    var charCount2 = 0\n    for string in lst1 {\n        charCount1\
    \ += string.count\n    }\n    for string in lst2 {\n        charCount2 += string.count\n\
    \    }\n    if charCount1 > charCount2 {\n        result = lst2\n    } else if\
    \ charCount1 < charCount2 {\n        result = lst1\n    } else {\n        result\
    \ = lst1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var cnt1 = 0\n    var cnt2 = 0\n\
    \    for item in lst1 {\n        cnt1 += item.count\n    }\n    for item in lst2\
    \ {\n        cnt2 += item.count\n    }\n    if cnt1 > cnt2 {\n        return lst2\n\
    \    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 < count2 {\n        return\
    \ lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  var total_length_lst1 = 0\n  var\
    \ total_length_lst2 = 0\n  for i in lst1 {\n    total_length_lst1 += i.count\n\
    \  }\n  for i in lst2 {\n    total_length_lst2 += i.count\n  }\n  if total_length_lst1\
    \ < total_length_lst2 {\n    return lst1\n  } else {\n    return lst2\n  }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpuu1jgysg/tmpuu1jgysg.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcd93a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcd90a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcd90a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcd909f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuu1jgysg                        0x00005646ff146677 <unavailable> + 9847

    5    libc.so.6                          0x00002adcd9595460 __libc_start_main +
    245

    6    tmpuu1jgysg                        0x00005646ff145289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for string in lst1 {\n        sum1 += string.count\n    }\n    for string\
    \ in lst2 {\n        sum2 += string.count\n    }\n    if sum1 < sum2 {\n     \
    \   return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpyoysbi1a/tmpyoysbi1a.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c5274ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c52445b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c52445988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c524447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyoysbi1a                        0x000055a0bfa11677 <unavailable> + 9847

    5    libc.so.6                          0x00002b8c5293a460 __libc_start_main +
    245

    6    tmpyoysbi1a                        0x000055a0bfa10289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total = 0\n    for s in lst1\
    \ {\n        total += s.count\n    }\n    var total2 = 0\n    for s in lst2 {\n\
    \        total2 += s.count\n    }\n    if total < total2 {\n        return lst1\n\
    \    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqckga521/tmpqckga521.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a0826ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a07f61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a07f61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a07f607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqckga521                        0x0000559b83173677 <unavailable> + 9847

    5    libc.so.6                          0x00002b6a08456460 __libc_start_main +
    245

    6    tmpqckga521                        0x0000559b83172289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for n in lst1 {\n        count1 += n.count\n    }\n    for n in lst2\
    \ {\n        count2 += n.count\n    }\n    if count1 == count2 {\n        return\
    \ lst1\n    } else if count1 < count2 {\n        return lst1\n    } else {\n \
    \       return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var totalChar1 = 0\n    var totalChar2\
    \ = 0\n    for string in lst1 {\n        totalChar1 += string.count\n    }\n \
    \   for string in lst2 {\n        totalChar2 += string.count\n    }\n    if totalChar1\
    \ > totalChar2 {\n        return lst2\n    } else {\n        return lst1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String],\
    \ lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\",\
    \ \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count_lst1 = 0\n    var count_lst2\
    \ = 0\n    for char in lst1 {\n        count_lst1 += char.count\n    }\n    for\
    \ char in lst2 {\n        count_lst2 += char.count\n    }\n    if count_lst1 >\
    \ count_lst2 {\n        return lst2\n    } else {\n        return lst1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for item in lst1 {\n        sum1 += item.count\n    }\n    for item in lst2\
    \ {\n        sum2 += item.count\n    }\n    if sum1 < sum2 {\n        return lst1\n\
    \    } else if sum1 > sum2 {\n        return lst2\n    } else {\n        return\
    \ lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009465
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_count = 0\n    var lst2_count\
    \ = 0\n    lst1.forEach {lst1_count += $0.count}\n    lst2.forEach {lst2_count\
    \ += $0.count}\n    return lst1_count <= lst2_count ? lst1 : lst2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_count = 0\n    var lst2_count\
    \ = 0\n    for string in lst1 {\n        lst1_count += string.count\n    }\n \
    \   for string in lst2 {\n        lst2_count += string.count\n    }\n    if lst1_count\
    \ < lst2_count {\n        return lst1\n    } else {\n        return lst2\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(total_match(lst1: [] as [String],\
    \ lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\",\
    \ \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpbqsg8iny/tmpbqsg8iny.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab052a69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab052760b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab052760988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab05275f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbqsg8iny                        0x000055dc07c81677 <unavailable> + 9847

    5    libc.so.6                          0x00002ab052c55460 __libc_start_main +
    245

    6    tmpbqsg8iny                        0x000055dc07c80289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  var totalChars1 = 0\n  var totalChars2\
    \ = 0\n  for word in lst1 {\n    totalChars1 += word.count\n  }\n  for word in\
    \ lst2 {\n    totalChars2 += word.count\n  }\n  if totalChars1 < totalChars2 {\n\
    \    return lst1\n  } else {\n    return lst2\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmplbna41zl/tmplbna41zl.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba45259cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba452293b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba452293988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4522927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplbna41zl                        0x0000562e597b4677 <unavailable> + 9847

    5    libc.so.6                          0x00002ba452788460 __libc_start_main +
    245

    6    tmplbna41zl                        0x0000562e597b3289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 && lst2.count\
    \ == 0 {\n        return []\n    }\n    else if lst1.count == 0 && lst2.count\
    \ != 0 {\n        return lst2\n    }\n    else if lst1.count != 0 && lst2.count\
    \ == 0 {\n        return lst1\n    }\n    else {\n        var x = 0\n        var\
    \ y = 0\n        for num in lst1 {\n            x += num.count\n        }\n  \
    \      for num in lst2 {\n            y += num.count\n        }\n        if x\
    \ < y {\n            return lst1\n        }\n        else if x > y {\n       \
    \     return lst2\n        }\n        else {\n            return lst1\n      \
    \  }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp7g4sv965/tmp7g4sv965.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbd8ddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbd8ad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbd8ad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbd8ad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7g4sv965                        0x000055bbdf53b83d <unavailable> + 10301

    5    libc.so.6                          0x00002abbd8fc7460 __libc_start_main +
    245

    6    tmp7g4sv965                        0x000055bbdf53a2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var charCount1 = 0\n    var charCount2\
    \ = 0\n    for word in lst1 {\n        charCount1 += word.count\n    }\n    for\
    \ word in lst2 {\n        charCount2 += word.count\n    }\n    if charCount1 <\
    \ charCount2 {\n        return lst1\n    } else {\n        return lst2\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp20331j04/tmp20331j04.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4979079c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4978d70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4978d70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4978d6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20331j04                        0x000055ab4eabc677 <unavailable> + 9847

    5    libc.so.6                          0x00002b4979265460 __libc_start_main +
    245

    6    tmp20331j04                        0x000055ab4eabb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for w in lst1 {\n        total1 += w.count\n    }\n    for w in lst2\
    \ {\n        total2 += w.count\n    }\n    if total1 < total2 {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmprfcu3wnl/tmprfcu3wnl.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b87d2fdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b87d2cd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b87d2cd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b87d2cd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfcu3wnl                        0x0000558915017677 <unavailable> + 9847

    5    libc.so.6                          0x00002b87d31c7460 __libc_start_main +
    245

    6    tmprfcu3wnl                        0x0000558915016289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1_chars = 0\n    var lst2_chars\
    \ = 0\n    for i in lst1 {\n        lst1_chars += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2_chars += i.count\n    }\n    if lst1_chars == lst2_chars\
    \ {\n        return lst1\n    } else if lst1_chars < lst2_chars {\n        return\
    \ lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 > count2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  return [String]()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpk4z_6qwc/tmpk4z_6qwc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ade74760c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade74457b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ade74457988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ade744567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4z_6qwc                        0x000055785f2ad73a <unavailable> + 5946

    5    libc.so.6                          0x00002ade7494c460 __libc_start_main +
    245

    6    tmpk4z_6qwc                        0x000055785f2ad119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tvar sum1 = 0\n\tvar sum2 = 0\n\t\
    for el in lst1 {\n\t\tsum1 += el.count\n\t}\n\tfor el in lst2 {\n\t\tsum2 += el.count\n\
    \t}\n\tif sum1 == sum2 {\n\t\treturn lst1\n\t} else if sum1 < sum2 {\n\t\treturn\
    \ lst1\n\t} else {\n\t\treturn lst2\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for lst in lst1 {\n        total1 += lst.count\n    }\n    for lst\
    \ in lst2 {\n        total2 += lst.count\n    }\n    if total1 < total2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp4b3q_bep/tmp4b3q_bep.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26804f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26801e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26801e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26801e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4b3q_bep                        0x000055ba3c451677 <unavailable> + 9847

    5    libc.so.6                          0x00002b26806dd460 __libc_start_main +
    245

    6    tmp4b3q_bep                        0x000055ba3c450289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    // write your code here\n    let\
    \ count1 = lst1.reduce(0, {$0 + $1.count})\n    let count2 = lst2.reduce(0, {$0\
    \ + $1.count})\n    return count1 > count2 ? lst2 : count1 < count2 ? lst1 : lst1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 && lst2.count\
    \ == 0 {\n        return []\n    }\n    else if lst1.count == 0 {\n        return\
    \ lst2\n    }\n    else if lst2.count == 0 {\n        return lst1\n    }\n   \
    \ else {\n        var lst1_total = 0\n        var lst2_total = 0\n        for\
    \ str in lst1 {\n            lst1_total += str.count\n        }\n        for str\
    \ in lst2 {\n            lst2_total += str.count\n        }\n        if lst1_total\
    \ < lst2_total {\n            return lst1\n        }\n        else if lst1_total\
    \ > lst2_total {\n            return lst2\n        }\n        else {\n       \
    \     return lst1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnuj940eg/tmpnuj940eg.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4abf269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4abef60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4abef60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4abef5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnuj940eg                        0x000055ed2a71483d <unavailable> + 10301

    5    libc.so.6                          0x00002b4abf455460 __libc_start_main +
    245

    6    tmpnuj940eg                        0x000055ed2a7132d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for string in lst1 {\n        total1 += string.count\n    }\n    for\
    \ string in lst2 {\n        total2 += string.count\n    }\n    if total1 < total2\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpnpabfwd9/tmpnpabfwd9.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac858915c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac85860cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac85860c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac85860b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnpabfwd9                        0x000055ab1c181677 <unavailable> + 9847

    5    libc.so.6                          0x00002ac858b01460 __libc_start_main +
    245

    6    tmpnpabfwd9                        0x000055ab1c180289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 < count2 {\n        return\
    \ lst1\n    } else if count1 > count2 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for str in lst1 {\n        count1 += str.count\n    }\n    for str\
    \ in lst2 {\n        count2 += str.count\n    }\n    if count1 < count2 {\n  \
    \      return lst1\n    } else if count1 > count2 {\n        return lst2\n   \
    \ } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for element in lst1 {\n        sum1 += element.count\n    }\n    for element\
    \ in lst2 {\n        sum2 += element.count\n    }\n    if sum1 == sum2 {\n   \
    \     return lst1\n    } else if sum1 < sum2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009467
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for word in lst1 {\n        total1 += word.count\n    }\n    for word\
    \ in lst2 {\n        total2 += word.count\n    }\n    if total1 > total2 {\n \
    \       return lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var ret = [String]()\n    if lst1.count\
    \ < lst2.count {\n        return lst1\n    } else if lst1.count > lst2.count {\n\
    \        return lst2\n    } else {\n        var total1 = 0\n        var total2\
    \ = 0\n        for x in lst1 {\n            total1 += x.count\n        }\n   \
    \     for x in lst2 {\n            total2 += x.count\n        }\n        if total1\
    \ < total2 {\n            return lst1\n        } else if total1 > total2 {\n \
    \           return lst2\n        } else {\n            return lst1\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpiiam4gon/tmpiiam4gon.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b563adcbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b563aac2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b563aac2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b563aac17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiiam4gon                        0x000055c719cd046d <unavailable> + 9325

    5    libc.so.6                          0x00002b563afb7460 __libc_start_main +
    245

    6    tmpiiam4gon                        0x000055c719ccf339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var totalNumCharLst1 = 0\n    var\
    \ totalNumCharLst2 = 0\n    for str in lst1 {\n        totalNumCharLst1 += str.count\n\
    \    }\n    for str in lst2 {\n        totalNumCharLst2 += str.count\n    }\n\
    \    if totalNumCharLst1 < totalNumCharLst2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpamw0mqnc/tmpamw0mqnc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54e98bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54e95b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54e95b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54e95b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpamw0mqnc                        0x000055f3b4564677 <unavailable> + 9847

    5    libc.so.6                          0x00002b54e9aab460 __libc_start_main +
    245

    6    tmpamw0mqnc                        0x000055f3b4563289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 {\n        return\
    \ lst1\n    }\n    var totalChars1 = 0\n    var totalChars2 = 0\n    for str in\
    \ lst1 {\n        totalChars1 += str.count\n    }\n    for str in lst2 {\n   \
    \     totalChars2 += str.count\n    }\n    if totalChars1 < totalChars2 {\n  \
    \      return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpk11u9n9w/tmpk11u9n9w.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad40e3d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad40e0c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad40e0c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad40e0c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk11u9n9w                        0x00005620aa6a36c7 <unavailable> + 9927

    5    libc.so.6                          0x00002ad40e5bc460 __libc_start_main +
    245

    6    tmpk11u9n9w                        0x00005620aa6a22d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for item in lst1 {\n        total1 += item.count\n    }\n    for item\
    \ in lst2 {\n        total2 += item.count\n    }\n    if total1 < total2 {\n \
    \       return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmprcubb4li/tmprcubb4li.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9914179c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9913e70b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9913e70988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9913e6f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprcubb4li                        0x000055f0552c9677 <unavailable> + 9847

    5    libc.so.6                          0x00002b9914365460 __libc_start_main +
    245

    6    tmprcubb4li                        0x000055f0552c8289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1Total = 0\n    var lst2Total\
    \ = 0\n    for item in lst1 {\n        lst1Total += item.count\n    }\n    for\
    \ item in lst2 {\n        lst2Total += item.count\n    }\n    if lst1Total <=\
    \ lst2Total {\n        return lst1\n    } else {\n        return lst2\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\t\n\tvar firstList = 0\n\tvar secondList\
    \ = 0\n\t\n\tfor i in lst1 {\n\t\tfirstList += i.count\n\t}\n\t\n\tfor i in lst2\
    \ {\n\t\tsecondList += i.count\n\t}\n\t\n\tif firstList > secondList {\n\t\treturn\
    \ lst2\n\t} else {\n\t\treturn lst1\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1Len: Int = 0\n    var lst2Len:\
    \ Int = 0\n    for i in lst1 {\n        lst1Len += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2Len += i.count\n    }\n    if lst1Len > lst2Len {\n    \
    \    return lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 > sum2 {\n        return lst2\n   \
    \ } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var num1 = 0\n    var num2 = 0\n\
    \    if lst1.count == 0 {\n        return lst2\n    }\n    if lst2.count == 0\
    \ {\n        return lst1\n    }\n    for str in lst1 {\n        num1 += str.count\n\
    \    }\n    for str in lst2 {\n        num2 += str.count\n    }\n    if num1 ==\
    \ num2 {\n        return lst1\n    }\n    if num1 < num2 {\n        return lst1\n\
    \    }\n    else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpyzkrp6yk/tmpyzkrp6yk.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d38f6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d38c62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d38c62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d38c617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzkrp6yk                        0x000055a6fdb1a83d <unavailable> + 10301

    5    libc.so.6                          0x00002b5d39157460 __libc_start_main +
    245

    6    tmpyzkrp6yk                        0x000055a6fdb192d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var arr1 = lst1\n    var arr2 =\
    \ lst2\n    var length1 = 0\n    var length2 = 0\n    for item in arr1 {\n   \
    \     length1 += item.count\n    }\n    for item in arr2 {\n        length2 +=\
    \ item.count\n    }\n    if length1 == length2 {\n        return arr1\n    } else\
    \ if length1 < length2 {\n        return arr1\n    } else {\n        return arr2\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(total_match(lst1: [] as\
    \ [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    let count1 = lst1.reduce(0) {count,\
    \ i in count + i.count}\n    let count2 = lst2.reduce(0) {count, i in count +\
    \ i.count}\n    if count1 < count2 {\n        return lst1\n    } else {\n    \
    \    return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpcmi8ufjs/tmpcmi8ufjs.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac419f24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac419c1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac419c1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac419c1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmi8ufjs                        0x000055c447863577 <unavailable> + 9591

    5    libc.so.6                          0x00002ac41a110460 __libc_start_main +
    245

    6    tmpcmi8ufjs                        0x000055c447862189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var a = 0\n    var b = 0\n    for\
    \ i in lst1 {\n        a += i.count\n    }\n    for i in lst2 {\n        b +=\
    \ i.count\n    }\n    if a == b {\n        return lst1\n    } else if a < b {\n\
    \        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for s in lst1 {\n        count1 += s.count\n    }\n    for s in lst2\
    \ {\n        count2 += s.count\n    }\n    if (count1 == count2) {\n        return\
    \ lst1\n    }\n    return (count1 < count2) ? lst1 : lst2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmppyt8c5ak.swift:17:12: error: cannot convert return expression of\
    \ type 'Int' to return type '[String]'\n    return 0\n           ^\n"
  stdout: ''
  timestamp: 1660009467
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpcqz1j2es/tmpcqz1j2es.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7e572c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7e269b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7e269988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7e2687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcqz1j2es                        0x000055c19f2806ea <unavailable> + 5866

    5    libc.so.6                          0x00002b2f7e75e460 __libc_start_main +
    245

    6    tmpcqz1j2es                        0x000055c19f2800c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp43nrv2m0/tmp43nrv2m0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72310d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7230dceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7230dce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7230dcd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43nrv2m0                        0x0000556b16d14677 <unavailable> + 9847

    5    libc.so.6                          0x00002b72312c3460 __libc_start_main +
    245

    6    tmp43nrv2m0                        0x0000556b16d13289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 1
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if total_chars(lst: lst1) < total_chars(lst:\
    \ lst2) {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: SyntaxError
  stderr: "/tmp/tmp0_17bvz_.swift:17:8: error: cannot find 'total_chars' in scope\n\
    \    if total_chars(lst: lst1) < total_chars(lst: lst2) {\n       ^~~~~~~~~~~\n\
    /tmp/tmp0_17bvz_.swift:17:33: error: cannot find 'total_chars' in scope\n    if\
    \ total_chars(lst: lst1) < total_chars(lst: lst2) {\n                        \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for char in lst1 {\n        total1 += char.count\n    }\n    for char\
    \ in lst2 {\n        total2 += char.count\n    }\n    if total1 > total2 {\n \
    \       return lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var total1 = 0\n    var total2\
    \ = 0\n    for i in lst1 {\n        total1 += i.count\n    }\n    for i in lst2\
    \ {\n        total2 += i.count\n    }\n    if total1 == total2 {\n        return\
    \ lst1\n    } else if total1 < total2 {\n        return lst1\n    } else {\n \
    \       return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return lst1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp159j4o5n/tmp159j4o5n.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ef918c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ef60fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ef60f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ef60e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp159j4o5n                        0x000055e1ed1916ea <unavailable> + 5866

    5    libc.so.6                          0x00002af3efb04460 __libc_start_main +
    245

    6    tmp159j4o5n                        0x000055e1ed1910c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for s in lst1 {\n        sum1 += s.count\n    }\n    for s in lst2 {\n  \
    \      sum2 += s.count\n    }\n    if sum1 < sum2 {\n        return lst1\n   \
    \ } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwkj_j8df/tmpwkj_j8df.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0db1e38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0db1b2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0db1b2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0db1b2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkj_j8df                        0x000055ba5e0d8677 <unavailable> + 9847

    5    libc.so.6                          0x00002b0db2024460 __libc_start_main +
    245

    6    tmpwkj_j8df                        0x000055ba5e0d7289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var counter_1 = 0\n    var counter_2\
    \ = 0\n    for item in lst1 {\n        counter_1 += item.count\n    }\n    for\
    \ item in lst2 {\n        counter_2 += item.count\n    }\n    return counter_1\
    \ > counter_2 ? lst2 : lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n\tlet lst1Total = lst1.reduce(0) {\
    \ (result, s) in\n\t\treturn result + s.count\n\t}\n\tlet lst2Total = lst2.reduce(0)\
    \ { (result, s) in\n\t\treturn result + s.count\n\t}\n\treturn lst1Total < lst2Total\
    \ ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpp8ku4l7p/tmpp8ku4l7p.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b66b23c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b66b20beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b66b20be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66b20bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8ku4l7p                        0x0000564f6b55c577 <unavailable> + 9591

    5    libc.so.6                          0x00002b66b25b3460 __libc_start_main +
    245

    6    tmpp8ku4l7p                        0x0000564f6b55b189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var lst1Total = 0\n    var lst2Total\
    \ = 0\n    for i in lst1 {\n        lst1Total += i.count\n    }\n    for i in\
    \ lst2 {\n        lst2Total += i.count\n    }\n    if lst1Total < lst2Total {\n\
    \        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmph4ojinkr/tmph4ojinkr.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ababfbc9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ababf8c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ababf8c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ababf8bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4ojinkr                        0x000055c79d9ba677 <unavailable> + 9847

    5    libc.so.6                          0x00002ababfdb5460 __libc_start_main +
    245

    6    tmph4ojinkr                        0x000055c79d9b9289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = []\n   \
    \ var count1: Int = 0\n    var count2: Int = 0\n    for string in lst1 {\n   \
    \     count1 += string.count\n    }\n    for string in lst2 {\n        count2\
    \ += string.count\n    }\n    if count1 < count2 {\n        result = lst1\n  \
    \  } else if count1 > count2 {\n        result = lst2\n    } else {\n        result\
    \ = lst1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(total_match(lst1: [] as [String], lst2: [] as [String])\
    \ == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"\
    ], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpcqz1j2es/tmpcqz1j2es.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f7e572c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f7e269b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f7e269988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f7e2687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcqz1j2es                        0x000055c19f2806ea <unavailable> + 5866

    5    libc.so.6                          0x00002b2f7e75e460 __libc_start_main +
    245

    6    tmpcqz1j2es                        0x000055c19f2800c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  var len1 = 0\n  var len2 = 0\n  for\
    \ word in lst1 {\n    len1 += word.count\n  }\n  for word in lst2 {\n    len2\
    \ += word.count\n  }\n  if len1 == len2 {\n    return lst1\n  }\n  return len1\
    \ < len2 ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var chars1 = 0\n    var chars2\
    \ = 0\n    for i in lst1 {\n        chars1 += i.count\n    }\n    for i in lst2\
    \ {\n        chars2 += i.count\n    }\n    if chars1 == chars2 {\n        return\
    \ lst1\n    } else if chars1 < chars2 {\n        return lst1\n    } else {\n \
    \       return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  var lst1_count = 0\n  var lst2_count\
    \ = 0\n  for i in lst1 {\n    lst1_count += i.count\n  }\n  for i in lst2 {\n\
    \    lst2_count += i.count\n  }\n  if lst1_count == lst2_count {\n    return lst1\n\
    \  } else if lst1_count < lst2_count {\n    return lst1\n  } else {\n    return\
    \ lst2\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var result: [String] = lst1\n \
    \   var total1 = 0\n    var total2 = 0\n    for i in lst1 {\n        total1 +=\
    \ i.count\n    }\n    for i in lst2 {\n        total2 += i.count\n    }\n    if\
    \ total1 > total2 {\n        result = lst2\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    //return [] as [String]\n    var\
    \ arr1 = 0\n    var arr2 = 0\n    for i in lst1 {\n        arr1 += i.count\n \
    \   }\n    for i in lst2 {\n        arr2 += i.count\n    }\n    if arr1 < arr2\
    \ {\n        return lst1\n    }\n    else if arr1 > arr2 {\n        return lst2\n\
    \    }\n    else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as\
    \ [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"\
    hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var sum1 = 0\n    var sum2 = 0\n\
    \    for i in lst1 {\n        sum1 += i.count\n    }\n    for i in lst2 {\n  \
    \      sum2 += i.count\n    }\n    if sum1 > sum2 {\n        return lst2\n   \
    \ } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: -4
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var totalChars1 = 0\n    var totalChars2\
    \ = 0\n    for s in lst1 {\n        totalChars1 += s.count\n    }\n    for s in\
    \ lst2 {\n        totalChars2 += s.count\n    }\n    if totalChars1 < totalChars2\
    \ {\n        return lst1\n    } else {\n        return lst2\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2pzyu99_/tmp2pzyu99_.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3118c45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b311893cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b311893c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b311893b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2pzyu99_                        0x000056371bb15677 <unavailable> + 9847

    5    libc.so.6                          0x00002b3118e31460 __libc_start_main +
    245

    6    tmp2pzyu99_                        0x000056371bb14289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    var count1 = 0\n    var count2\
    \ = 0\n    for i in lst1 {\n        count1 += i.count\n    }\n    for i in lst2\
    \ {\n        count2 += i.count\n    }\n    if count1 > count2 {\n        return\
    \ lst2\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009466
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n  let str1 = lst1.joined()\n  let str2\
    \ = lst2.joined()\n  if str1.count < str2.count {\n    return lst1\n  } else if\
    \ str1.count > str2.count {\n    return lst2\n  } else {\n    return lst1\n  }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
- exit_code: 0
  program: "\n/// Write a function that accepts two arrays of strings and returns\
    \ the array that has \n/// total number of chars in the all strings of the array\
    \ less than the other array.\n/// if the two arrays have the same number of chars,\
    \ return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String],\
    \ lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"\
    hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\"\
    , \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1:\
    \ [String], lst2: [String]) -> [String] {\n    if lst1.count == 0 {\n        return\
    \ lst1\n    }\n    if lst2.count == 0 {\n        return lst2\n    }\n    var lst1totalCount\
    \ = 0\n    var lst2totalCount = 0\n    for lst1Item in lst1 {\n        lst1totalCount\
    \ += lst1Item.count\n    }\n    for lst2Item in lst2 {\n        lst2totalCount\
    \ += lst2Item.count\n    }\n    if lst1totalCount == lst2totalCount {\n      \
    \  return lst1\n    }\n    return lst1totalCount < lst2totalCount ? lst1 : lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009468
